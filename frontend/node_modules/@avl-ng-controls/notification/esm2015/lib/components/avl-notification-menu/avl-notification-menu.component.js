var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { NOTIFICATIONS_OVERFLOW_MENU } from './avl-notification-menu.consts';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@avl-controls/ng-binders";
import * as i3 from "@ngx-translate/core";
import * as i4 from "../../pipes/prepare-notifications.pipe";
export class AvlNotificationMenuComponent {
    constructor() {
        this.open = false;
        this.openChange = new EventEmitter();
        this.openDetails = new EventEmitter();
        this.notificationStateChanged = new EventEmitter();
        this.markAllAsRead = new EventEmitter();
        this.markAllAsUnread = new EventEmitter();
        this.overflowMenuItems = [];
        this.numberOfUnreadNotifications = 0;
        this._notifications = [];
        this.overflowMenuHandlers = {
            markAllAsRead: () => {
                this.markAllAsRead.emit();
                this.numberOfUnreadNotifications = 0;
            },
            markAllAsUnread: () => {
                this.markAllAsUnread.emit();
                this.numberOfUnreadNotifications = this.notifications.length;
            },
            undefined: () => { }
        };
    }
    set notifications(notifications) {
        this.numberOfUnreadNotifications = notifications.filter(notif => !notif.read).length;
        this._notifications = notifications;
    }
    get notifications() {
        return this._notifications;
    }
    ngOnInit() {
        this.translateLabels();
    }
    ngAfterViewInit() {
        this.list.nativeElement.revertedList = true;
    }
    onNotificationStateChanged(event) {
        const notificationMenuItem = Object.assign({}, event.detail.value);
        const notification = Object.assign(Object.assign({}, notificationMenuItem), { read: notificationMenuItem.iconToggleValue });
        notification.read ? this.numberOfUnreadNotifications-- : this.numberOfUnreadNotifications++;
        this.notificationStateChanged.emit(notification);
        this.list.nativeElement.removeFocus();
    }
    onItemClicked(item) {
        this.overflowMenuHandlers[item.action]();
    }
    onOpenChanged(event) {
        if (!event.detail.value) {
            this.openChange.emit(false);
        }
    }
    onOverflowMenuClicked() {
        this.list.nativeElement.removeFocus();
    }
    onDetailsClicked() {
        this.open = false;
        this.openDetails.emit();
        this.openChange.emit(false);
    }
    /**Event fired when list item is clicked on
     * depending on the notification flag it opens in new tab
     */
    onListItemClicked(event) {
        const item = event.detail;
        if (item.link) {
            if (item.openInNewTab) {
                window.open(item.link, '_blank');
            }
            else {
                window.open(item.link, '_self');
            }
        }
    }
    translateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                return;
            }
            this.overflowMenuItems = yield this.translateMenu(NOTIFICATIONS_OVERFLOW_MENU);
        });
    }
    translateMenu(menu) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.all(menu.map((group) => __awaiter(this, void 0, void 0, function* () { return yield this.translateMenuGroup(group); })));
        });
    }
    translateMenuGroup(group) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                items: yield Promise.all(group.items.map((item) => __awaiter(this, void 0, void 0, function* () { return yield this.translateMenuItem(item); })))
            };
        });
    }
    translateMenuItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translateService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { label: yield translateService.translate(item.label), sublabel: item.sublabel ? yield translateService.translate(item.sublabel) : null });
        });
    }
}
AvlNotificationMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlNotificationMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlNotificationMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlNotificationMenuComponent, selector: "avl-notification-menu", inputs: { open: "open", trigger: "trigger", notifications: "notifications" }, outputs: { openChange: "openChange", openDetails: "openDetails", notificationStateChanged: "notificationStateChanged", markAllAsRead: "markAllAsRead", markAllAsUnread: "markAllAsUnread" }, viewQueries: [{ propertyName: "list", first: true, predicate: ["list"], descendants: true }], ngImport: i0, template: "<avl-popup\r\n  [noCloseOnInsideClick]=\"true\"\r\n  [open]=\"open\"\r\n  [trigger]=\"trigger\"\r\n  (open-changed)=\"onOpenChanged($event)\"\r\n>\r\n  <div id=\"header\">\r\n    <div id=\"headerText\">\r\n      <span>{{ 'VizBox.NotificationMenu.Notifications' | translate }}</span>\r\n      <span *ngIf=\"numberOfUnreadNotifications\"> ({{ numberOfUnreadNotifications }}) </span>\r\n    </div>\r\n    <avl-overflow-menu (itemClicked)=\"onItemClicked($event)\" [items]=\"overflowMenuItems\">\r\n      <avl-icon-button\r\n        icon=\"more-vert\"\r\n        slot=\"trigger\"\r\n        (click)=\"onOverflowMenuClicked()\"\r\n      ></avl-icon-button>\r\n    </avl-overflow-menu>\r\n  </div>\r\n  <avl-list\r\n    #list\r\n    [rows]=\"notifications | prepareNotifications: 'menu'\"\r\n    (row-changed)=\"onNotificationStateChanged($event)\"\r\n    (list-item-clicked)=\"onListItemClicked($event)\"\r\n  ></avl-list>\r\n  <div id=\"footer\">\r\n    <avl-button (click)=\"onDetailsClicked()\">{{\r\n      'VizBox.NotificationMenu.Details' | translate\r\n    }}</avl-button>\r\n  </div>\r\n</avl-popup>\r\n", styles: ["avl-popup{width:40%}avl-list{width:100%;height:250px;padding-top:8px;--avl-item-padding-left:16px;--avl-item-padding-right:16px;--notification-item-height:48px}#header{justify-content:space-between;padding:0 16px;border-bottom:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#footer,#header{display:flex;align-items:center;box-sizing:border-box;height:56px}#footer{border-top:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#headerText{font-size:20px;color:var(--avl-primary-text-color);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.AvlOverflowMenuDirective, selector: "avl-overflow-menu", outputs: ["itemClicked"] }, { type: i2.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i2.AvlIconButtonDirective, selector: "avl-icon-button", outputs: ["badgeChange", "badgeValueChange"] }, { type: i2.AvlMultiSelectControlDirective, selector: "avl-datatable,avl-list,avl-chip-list, avl-chip-input", outputs: ["selectedIndexesChange", "selectedValuesChange"] }, { type: i2.AvlSingleSelectControlDirective, selector: "avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box", outputs: ["selectedIndexChange", "selectedValueChange"] }, { type: i2.AvlListDirective, selector: "avl-list", inputs: ["readonly"], outputs: ["invalidChange", "overflowMenuItemClicked", "rightCheckboxChanged", "activeRowChanged", "rowReordered"] }], pipes: { "translate": i3.TranslatePipe, "prepareNotifications": i4.PrepareNotificationsPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlNotificationMenuComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-notification-menu',
                    templateUrl: './avl-notification-menu.component.html',
                    styleUrls: ['./avl-notification-menu.component.css']
                }]
        }], propDecorators: { open: [{
                type: Input
            }], trigger: [{
                type: Input
            }], notifications: [{
                type: Input
            }], openChange: [{
                type: Output
            }], openDetails: [{
                type: Output
            }], notificationStateChanged: [{
                type: Output
            }], markAllAsRead: [{
                type: Output
            }], markAllAsUnread: [{
                type: Output
            }], list: [{
                type: ViewChild,
                args: ['list']
            }] } });
//# sourceMappingURL=data:application/json;base64,