var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { NOTIFICATIONS_OVERFLOW_MENU, TYPE_ICON_MAPPINGS } from './avl-notification-menu.consts';
let AvlNotificationMenuComponent = class AvlNotificationMenuComponent {
    constructor() {
        this.open = false;
        this.openChange = new EventEmitter();
        this.openDetails = new EventEmitter();
        this.notificationStateChanged = new EventEmitter();
        this.markAllAsRead = new EventEmitter();
        this.markAllAsUnread = new EventEmitter();
        this.overflowMenuItems = [];
        this.notificationList = [];
        this.numberOfUnreadNotifications = 0;
        this.overflowMenuHandlers = {
            markAllAsRead: () => {
                this.markAllAsRead.emit();
                this.numberOfUnreadNotifications = 0;
            },
            markAllAsUnread: () => {
                this.markAllAsUnread.emit();
                this.numberOfUnreadNotifications = this.notificationList.length;
            },
            undefined: () => { }
        };
        this.translateLabels();
    }
    set notifications(notifications) {
        this.notificationList = this.prepareNotifications(notifications);
        this.numberOfUnreadNotifications = notifications.filter(notif => !notif.read).length;
    }
    ngAfterViewInit() {
        this.list.nativeElement.revertedList = true;
    }
    onNotificationStateChanged(event) {
        const notificationMenuItem = Object.assign({}, event.detail.value);
        const notification = Object.assign(Object.assign({}, notificationMenuItem), { read: notificationMenuItem.iconToggleValue });
        notification.read ? this.numberOfUnreadNotifications-- : this.numberOfUnreadNotifications++;
        this.notificationStateChanged.emit(notification);
        this.list.nativeElement.removeFocus();
    }
    onItemClicked(item) {
        this.overflowMenuHandlers[item.action]();
    }
    onOpenChanged(event) {
        if (!event.detail.value) {
            this.openChange.emit(false);
        }
        else {
            this.notificationList = [...this.notificationList];
        }
    }
    onOverflowMenuClicked() {
        this.list.nativeElement.removeFocus();
    }
    onDetailsClicked() {
        this.open = false;
        this.openDetails.emit();
        this.openChange.emit(false);
    }
    prepareNotifications(notifications) {
        return notifications.map(notification => (Object.assign(Object.assign({}, notification), { label: notification.messageText, sublabel: this.formatDateTime(notification.timestamp), icon: TYPE_ICON_MAPPINGS[notification.type], iconToggleUnchecked: 'mail', iconToggleChecked: 'communication:mail-outline', iconToggleValue: notification.read })));
    }
    formatDateTime(date) {
        return date === null
            ? ''
            : `${AvlLocalizationService.formatDateTime(date, {
                format: 'date-short'
            })} ${AvlLocalizationService.formatDateTime(date, { format: 'time-long' })}`;
    }
    translateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                return;
            }
            this.overflowMenuItems = yield this.translateMenu(NOTIFICATIONS_OVERFLOW_MENU);
        });
    }
    translateMenu(menu) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.all(menu.map((group) => __awaiter(this, void 0, void 0, function* () { return yield this.translateMenuGroup(group); })));
        });
    }
    translateMenuGroup(group) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                items: yield Promise.all(group.items.map((item) => __awaiter(this, void 0, void 0, function* () { return yield this.translateMenuItem(item); })))
            };
        });
    }
    translateMenuItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translateService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { label: yield translateService.translate(item.label), sublabel: item.sublabel ? yield translateService.translate(item.sublabel) : null });
        });
    }
};
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AvlNotificationMenuComponent.prototype, "open", void 0);
__decorate([
    Input(),
    __metadata("design:type", HTMLElement)
], AvlNotificationMenuComponent.prototype, "trigger", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], AvlNotificationMenuComponent.prototype, "notifications", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlNotificationMenuComponent.prototype, "openChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlNotificationMenuComponent.prototype, "openDetails", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlNotificationMenuComponent.prototype, "notificationStateChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlNotificationMenuComponent.prototype, "markAllAsRead", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlNotificationMenuComponent.prototype, "markAllAsUnread", void 0);
__decorate([
    ViewChild('list'),
    __metadata("design:type", ElementRef)
], AvlNotificationMenuComponent.prototype, "list", void 0);
AvlNotificationMenuComponent = __decorate([
    Component({
        selector: 'avl-notification-menu',
        template: "<avl-popup\r\n  [noCloseOnInsideClick]=\"true\"\r\n  [open]=\"open\"\r\n  [trigger]=\"trigger\"\r\n  (open-changed)=\"onOpenChanged($event)\"\r\n>\r\n  <div id=\"header\">\r\n    <div id=\"headerText\">\r\n      <span>{{ 'VizBox.NotificationMenu.Notifications' | translate }}</span>\r\n      <span *ngIf=\"numberOfUnreadNotifications\"> ({{ numberOfUnreadNotifications }}) </span>\r\n    </div>\r\n    <avl-overflow-menu (itemClicked)=\"onItemClicked($event)\" [items]=\"overflowMenuItems\">\r\n      <avl-icon-button\r\n        icon=\"more-vert\"\r\n        slot=\"trigger\"\r\n        (click)=\"onOverflowMenuClicked()\"\r\n      ></avl-icon-button>\r\n    </avl-overflow-menu>\r\n  </div>\r\n  <avl-list\r\n    #list\r\n    [rows]=\"notificationList\"\r\n    (row-changed)=\"onNotificationStateChanged($event)\"\r\n  ></avl-list>\r\n  <div id=\"footer\">\r\n    <avl-button (click)=\"onDetailsClicked()\">{{ 'VizBox.NotificationMenu.Details' | translate }}</avl-button>\r\n  </div>\r\n</avl-popup>\r\n",
        styles: ["avl-popup{width:40%}avl-list{width:100%;height:250px;padding-top:8px;--avl-item-padding-left:16px;--avl-item-padding-right:16px;--notification-item-height:48px}#header{display:flex;align-items:center;justify-content:space-between;box-sizing:border-box;height:56px;padding:0 16px;border-bottom:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#footer{display:flex;align-items:center;box-sizing:border-box;height:56px;border-top:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#headerText{font-size:20px;color:var(--avl-primary-text-color);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}"]
    }),
    __metadata("design:paramtypes", [])
], AvlNotificationMenuComponent);
export { AvlNotificationMenuComponent };
//# sourceMappingURL=data:application/json;base64,