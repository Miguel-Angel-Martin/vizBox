var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, HostBinding, Input, OnChanges, SimpleChanges } from '@angular/core';
import { animate, AnimationBuilder, AnimationMetadata, AnimationPlayer, AnimationStyleMetadata, style } from '@angular/animations';
import { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';
/** @hidden */
let AnimateSnackbar = class AnimateSnackbar {
    constructor(builder, el) {
        this.builder = builder;
        /** @hidden */
        this.defaultClass = true;
        this.getAnimation = (animationName, initialStyle) => {
            const elementWidth = this.element.nativeElement.offsetWidth - 3 * MARGIN;
            const inStackStyle = style({
                marginTop: MARGIN + 'px',
                marginLeft: MARGIN + 'px',
                marginRight: MARGIN + 'px',
                width: elementWidth + 'px'
            });
            switch (animationName) {
                case 4 /* FromStack */:
                    return [animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle), initialStyle];
                case 3 /* ToStack */: {
                    return [initialStyle, animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle)];
                }
                default:
                    return [initialStyle, animate('1ms ease-in', initialStyle)];
            }
        };
        this.element = el;
    }
    ngOnChanges(changes) {
        if (changes.animateSnackbar) {
            const isInStack = changes.animateSnackbar.currentValue === 3 /* ToStack */;
            if (isInStack) {
                this.move();
            }
            else if (changes.animateSnackbar.previousValue === 3 /* ToStack */) {
                this.move();
            }
        }
    }
    show(metadata) {
        if (this.player) {
            this.player.destroy();
        }
        if (metadata) {
            const factory = this.builder.build(metadata);
            const player = factory.create(this.element.nativeElement);
            player.play();
        }
    }
    move() {
        const animationMetadata = this.animate();
        this.show(animationMetadata);
    }
    animate() {
        const initialStyle = style({
            marginTop: '0',
            width: '100%',
            marginLeft: '0',
            marginRight: '0'
        });
        return this.getAnimation(this.animateSnackbar, initialStyle);
    }
};
AnimateSnackbar.ctorParameters = () => [
    { type: AnimationBuilder },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Number)
], AnimateSnackbar.prototype, "animateSnackbar", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AnimateSnackbar.prototype, "positionAnimation", void 0);
__decorate([
    Input('notification'),
    __metadata("design:type", Object)
], AnimateSnackbar.prototype, "notification", void 0);
__decorate([
    Input('reopen'),
    __metadata("design:type", Boolean)
], AnimateSnackbar.prototype, "reopen", void 0);
__decorate([
    HostBinding('class.in-stack'),
    __metadata("design:type", Boolean)
], AnimateSnackbar.prototype, "inStack", void 0);
__decorate([
    HostBinding('class.no-animation'),
    __metadata("design:type", Boolean)
], AnimateSnackbar.prototype, "noAnimation", void 0);
__decorate([
    HostBinding('class.snackbar-container'),
    __metadata("design:type", Object)
], AnimateSnackbar.prototype, "defaultClass", void 0);
AnimateSnackbar = __decorate([
    Directive({ selector: '[animateSnackbar]' }),
    __metadata("design:paramtypes", [AnimationBuilder, ElementRef])
], AnimateSnackbar);
export { AnimateSnackbar };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0ZS1zbmFja2Jhci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLW5nLWNvbnRyb2xzL25vdGlmaWNhdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2F2bC1ub3RpZmljYXRpb24tY29udGFpbmVyL2RpcmVjdGl2ZXMvYW5pbWF0ZS1zbmFja2Jhci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFDTCxPQUFPLEVBQ1AsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2Ysc0JBQXNCLEVBQ3RCLEtBQUssRUFDTixNQUFNLHFCQUFxQixDQUFDO0FBRzdCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNsRixjQUFjO0FBR2QsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQXlCMUIsWUFBcUIsT0FBeUIsRUFBRSxFQUFjO1FBQXpDLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBTjlDLGNBQWM7UUFDMkIsaUJBQVksR0FBRyxJQUFJLENBQUM7UUE0Q3JELGlCQUFZLEdBQUcsQ0FDckIsYUFBZ0MsRUFDaEMsWUFBb0MsRUFDZixFQUFFO1lBQ3ZCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQ3pFLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQztnQkFDekIsU0FBUyxFQUFFLE1BQU0sR0FBRyxJQUFJO2dCQUN4QixVQUFVLEVBQUUsTUFBTSxHQUFHLElBQUk7Z0JBQ3pCLFdBQVcsRUFBRSxNQUFNLEdBQUcsSUFBSTtnQkFDMUIsS0FBSyxFQUFFLFlBQVksR0FBRyxJQUFJO2FBQzNCLENBQUMsQ0FBQztZQUNILFFBQVEsYUFBYSxFQUFFO2dCQUNyQjtvQkFDRSxPQUFPLENBQUMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLFlBQVksRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFFbEYsb0JBQThCLENBQUMsQ0FBQztvQkFDOUIsT0FBTyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsa0JBQWtCLEdBQUcsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7aUJBQ2pGO2dCQUNEO29CQUNFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQy9EO1FBQ0gsQ0FBQyxDQUFDO1FBM0RBLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsZUFBZSxFQUFFO1lBQzNCLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsWUFBWSxvQkFBOEIsQ0FBQztZQUNyRixJQUFJLFNBQVMsRUFBRTtnQkFDYixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsYUFBYSxvQkFBOEIsRUFBRTtnQkFDOUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7U0FDRjtJQUNILENBQUM7SUFFTyxJQUFJLENBQUMsUUFBNkI7UUFDeEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN2QjtRQUNELElBQUksUUFBUSxFQUFFO1lBQ1osTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzFELE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQztJQUNPLElBQUk7UUFDVixNQUFNLGlCQUFpQixHQUF3QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFDTyxPQUFPO1FBQ2IsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLFNBQVMsRUFBRSxHQUFHO1lBQ2QsS0FBSyxFQUFFLE1BQU07WUFDYixVQUFVLEVBQUUsR0FBRztZQUNmLFdBQVcsRUFBRSxHQUFHO1NBQ2pCLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQy9ELENBQUM7Q0F3QkYsQ0FBQTs7WUE3RCtCLGdCQUFnQjtZQUFNLFVBQVU7O0FBdkJyRDtJQUFSLEtBQUssRUFBRTs7d0RBQTZDO0FBRzVDO0lBQVIsS0FBSyxFQUFFOzswREFBK0M7QUFHaEM7SUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7cURBQXdDO0FBRzdDO0lBQWhCLEtBQUssQ0FBQyxRQUFRLENBQUM7OytDQUEwQjtBQUdYO0lBQTlCLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQzs7Z0RBQWtCO0FBR2I7SUFBbEMsV0FBVyxDQUFDLG9CQUFvQixDQUFDOztvREFBc0I7QUFHZjtJQUF4QyxXQUFXLENBQUMsMEJBQTBCLENBQUM7O3FEQUFxQjtBQXBCbEQsZUFBZTtJQUQzQixTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQztxQ0EwQmIsZ0JBQWdCLEVBQU0sVUFBVTtHQXpCbkQsZUFBZSxDQXNGM0I7U0F0RlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBhbmltYXRlLFxyXG4gIEFuaW1hdGlvbkJ1aWxkZXIsXHJcbiAgQW5pbWF0aW9uTWV0YWRhdGEsXHJcbiAgQW5pbWF0aW9uUGxheWVyLFxyXG4gIEFuaW1hdGlvblN0eWxlTWV0YWRhdGEsXHJcbiAgc3R5bGVcclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgQXZsTm90aWZpY2F0aW9uIH0gZnJvbSAnQGF2bC1jb250cm9scy9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgUG9zaXRpb25BbmltYXRpb24gfSBmcm9tICcuL2FuaW1hdGUtc3RhY2suZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQU5JTUFUSU9OX0RVUkFUSU9OLCBNQVJHSU4gfSBmcm9tICcuLi9hdmwtbm90aWZpY2F0aW9uLWNvbnRhaW5lci5jb25zdHMnO1xyXG4vKiogQGhpZGRlbiAqL1xyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2FuaW1hdGVTbmFja2Jhcl0nIH0pXHJcbmV4cG9ydCBjbGFzcyBBbmltYXRlU25hY2tiYXIgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgQElucHV0KCkgcmVhZG9ubHkgYW5pbWF0ZVNuYWNrYmFyOiBQb3NpdGlvbkFuaW1hdGlvbjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSByZWFkb25seSBwb3NpdGlvbkFuaW1hdGlvbjogUG9zaXRpb25BbmltYXRpb247XHJcblxyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgQElucHV0KCdub3RpZmljYXRpb24nKSByZWFkb25seSBub3RpZmljYXRpb246IEF2bE5vdGlmaWNhdGlvbjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoJ3Jlb3BlbicpIHJlYWRvbmx5IHJlb3BlbjogYm9vbGVhbjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmluLXN0YWNrJykgaW5TdGFjazogYm9vbGVhbjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm5vLWFuaW1hdGlvbicpIG5vQW5pbWF0aW9uOiBib29sZWFuO1xyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc25hY2tiYXItY29udGFpbmVyJykgZGVmYXVsdENsYXNzID0gdHJ1ZTtcclxuXHJcbiAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gIHByaXZhdGUgcGxheWVyOiBBbmltYXRpb25QbGF5ZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGJ1aWxkZXI6IEFuaW1hdGlvbkJ1aWxkZXIsIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbDtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmIChjaGFuZ2VzLmFuaW1hdGVTbmFja2Jhcikge1xyXG4gICAgICBjb25zdCBpc0luU3RhY2sgPSBjaGFuZ2VzLmFuaW1hdGVTbmFja2Jhci5jdXJyZW50VmFsdWUgPT09IFBvc2l0aW9uQW5pbWF0aW9uLlRvU3RhY2s7XHJcbiAgICAgIGlmIChpc0luU3RhY2spIHtcclxuICAgICAgICB0aGlzLm1vdmUoKTtcclxuICAgICAgfSBlbHNlIGlmIChjaGFuZ2VzLmFuaW1hdGVTbmFja2Jhci5wcmV2aW91c1ZhbHVlID09PSBQb3NpdGlvbkFuaW1hdGlvbi5Ub1N0YWNrKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2hvdyhtZXRhZGF0YTogQW5pbWF0aW9uTWV0YWRhdGFbXSkge1xyXG4gICAgaWYgKHRoaXMucGxheWVyKSB7XHJcbiAgICAgIHRoaXMucGxheWVyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICAgIGlmIChtZXRhZGF0YSkge1xyXG4gICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5idWlsZGVyLmJ1aWxkKG1ldGFkYXRhKTtcclxuICAgICAgY29uc3QgcGxheWVyID0gZmFjdG9yeS5jcmVhdGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICBwbGF5ZXIucGxheSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIG1vdmUoKSB7XHJcbiAgICBjb25zdCBhbmltYXRpb25NZXRhZGF0YTogQW5pbWF0aW9uTWV0YWRhdGFbXSA9IHRoaXMuYW5pbWF0ZSgpO1xyXG4gICAgdGhpcy5zaG93KGFuaW1hdGlvbk1ldGFkYXRhKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBhbmltYXRlKCk6IEFuaW1hdGlvbk1ldGFkYXRhW10ge1xyXG4gICAgY29uc3QgaW5pdGlhbFN0eWxlID0gc3R5bGUoe1xyXG4gICAgICBtYXJnaW5Ub3A6ICcwJyxcclxuICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgbWFyZ2luTGVmdDogJzAnLFxyXG4gICAgICBtYXJnaW5SaWdodDogJzAnXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLmdldEFuaW1hdGlvbih0aGlzLmFuaW1hdGVTbmFja2JhciwgaW5pdGlhbFN0eWxlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0QW5pbWF0aW9uID0gKFxyXG4gICAgYW5pbWF0aW9uTmFtZTogUG9zaXRpb25BbmltYXRpb24sXHJcbiAgICBpbml0aWFsU3R5bGU6IEFuaW1hdGlvblN0eWxlTWV0YWRhdGFcclxuICApOiBBbmltYXRpb25NZXRhZGF0YVtdID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnRXaWR0aCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIC0gMyAqIE1BUkdJTjtcclxuICAgIGNvbnN0IGluU3RhY2tTdHlsZSA9IHN0eWxlKHtcclxuICAgICAgbWFyZ2luVG9wOiBNQVJHSU4gKyAncHgnLFxyXG4gICAgICBtYXJnaW5MZWZ0OiBNQVJHSU4gKyAncHgnLFxyXG4gICAgICBtYXJnaW5SaWdodDogTUFSR0lOICsgJ3B4JyxcclxuICAgICAgd2lkdGg6IGVsZW1lbnRXaWR0aCArICdweCdcclxuICAgIH0pO1xyXG4gICAgc3dpdGNoIChhbmltYXRpb25OYW1lKSB7XHJcbiAgICAgIGNhc2UgUG9zaXRpb25BbmltYXRpb24uRnJvbVN0YWNrOlxyXG4gICAgICAgIHJldHVybiBbYW5pbWF0ZShBTklNQVRJT05fRFVSQVRJT04gKyAnbXMgZWFzZS1pbicsIGluU3RhY2tTdHlsZSksIGluaXRpYWxTdHlsZV07XHJcblxyXG4gICAgICBjYXNlIFBvc2l0aW9uQW5pbWF0aW9uLlRvU3RhY2s6IHtcclxuICAgICAgICByZXR1cm4gW2luaXRpYWxTdHlsZSwgYW5pbWF0ZShBTklNQVRJT05fRFVSQVRJT04gKyAnbXMgZWFzZS1pbicsIGluU3RhY2tTdHlsZSldO1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIFtpbml0aWFsU3R5bGUsIGFuaW1hdGUoJzFtcyBlYXNlLWluJywgaW5pdGlhbFN0eWxlKV07XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iXX0=