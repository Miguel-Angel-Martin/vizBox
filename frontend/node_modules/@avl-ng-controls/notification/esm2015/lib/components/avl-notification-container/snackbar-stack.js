var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BehaviorSubject } from 'rxjs';
import { skipWhile } from 'rxjs/operators';
import { ANIMATION_DURATION, ACTION_BUTTON_MESSAGE } from './avl-notification-container.consts';
import { SnackbarMethodDescription } from './directives/show-hide-snackbar.directive';
/** @hidden */
export class SnackbarStack {
    constructor(stackType) {
        /** @hidden */
        this.notificationList = [];
        /** @hidden */
        this.activeNotification$ = new BehaviorSubject(undefined);
        /** @hidden */
        this.stackIndicator = false;
        /** @hidden */
        this.actionButtonMessage = ACTION_BUTTON_MESSAGE;
        this.openNextNotification = (stackType) => {
            this.methodDescription = new SnackbarMethodDescription('show', !this.reopen);
            if (!this.reopen) {
                this.stackAnimation = 1 /* ToTop */;
            }
            else {
                this.stackAnimation = 4 /* FromStack */;
            }
            this.setStackIndicatorProperties(stackType);
            this.reopen = false;
            this.dismissedSilently = false;
        };
        this.resetValues = () => {
            this.notificationList = [];
            this.previousNotification = undefined;
            this.stackIndicator = undefined;
        };
        this.setStackIndicatorProperties = (stackType) => {
            const notificationsCount = this.notificationList.length;
            this.stackIndicator = notificationsCount > 1;
            const timeout = setTimeout(() => {
                this.previousNotification = this.notificationList[notificationsCount - 1];
                this.buttonLabel = this.setButtonLabel(notificationsCount, stackType);
                this.stackIndicatorButtonLabel = this.setButtonLabel(notificationsCount - 1, stackType);
                clearTimeout(timeout);
            }, this.previousNotification ? ANIMATION_DURATION : 0);
        };
        this.setButtonLabel = (notificationsCount, type) => {
            return notificationsCount > 0
                ? this.actionButtonMessage
                    .replace('_TYPE ', type === 'info' ? '' : type + ' ')
                    .replace('_X', String(notificationsCount))
                : null;
        };
        this.translateLabels();
        this.methodDescription = new SnackbarMethodDescription(undefined, undefined);
        this.activeNotification$
            .pipe(skipWhile(notification => notification === undefined))
            .subscribe((notification) => {
            if (notification) {
                if (this.notificationList.length > 0) {
                    const timeout = setTimeout(() => {
                        this.openNextNotification(stackType);
                        clearTimeout(timeout);
                    }, this.previousNotification ? ANIMATION_DURATION : 0);
                }
                else {
                    this.openNextNotification(stackType);
                }
            }
            else {
                this.resetValues();
            }
        });
    }
    translateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                return;
            }
            const translationService = AvlLocalizationService.translationService;
            this.actionButtonMessage = yield translationService.translate('VizBox.NotificationContainer._X_more_TYPE_notifications');
        });
    }
}
//# sourceMappingURL=data:application/json;base64,