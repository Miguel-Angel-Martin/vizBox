var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { AfterViewChecked, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';
import { Observable } from 'rxjs';
import '@avl-controls/core/dist/avl-snackbar/avl-snackbar';
import { takeUntil } from 'rxjs/operators';
import { SnackbarMethodDescription } from './directives/show-hide-snackbar.directive';
import { Subject } from 'rxjs';
import { SnackbarStack } from './snackbar-stack';
import { ANIMATION_DURATION } from './avl-notification-container.consts';
const NOTIFICATION_TYPE = new Map([
    [0 /* Error */, 'Error'],
    [1 /* Warning */, 'Warning'],
    [2 /* Info */, 'Info'],
    [3 /* OK */, 'OK']
]);
let AvlNotificationContainerComponent = class AvlNotificationContainerComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        /** Observable emits notifications. Default observable emits dummy notifications every 3s for 100s. */
        this.notification$ = new Observable(function subscribe(subscriber) {
            let i = 0;
            const intervalId = setInterval(() => {
                const warning = Math.round(Math.random());
                subscriber.next({
                    id: i++,
                    module: 'notification-container',
                    timestamp: new Date(),
                    type: warning ? 1 /* Warning */ : 2 /* Info */,
                    messageText: 'Snackbar with notification' + new Date().toTimeString(),
                    read: false,
                    link: 'https://vizbox.avl.com'
                });
            }, 3000);
            setTimeout(() => {
                clearInterval(intervalId);
            }, 100000);
        });
        this.openMenu = new EventEmitter();
        /** @hidden */
        this.stackHeight = {};
        /** @hidden */
        this.notificationList = [];
        this.destroyed$ = new Subject();
        /** @hidden */
        this.onButtonClicked = (event) => {
            if (event) {
                this.openMenu.emit();
                this.dismissAll();
            }
        };
        /** @hidden */
        this.onNotificationDismissed = (event, notification) => {
            var _a, _b;
            if (event) {
                const snackType = (_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.id) === null || _b === void 0 ? void 0 : _b.replace('Snackbar', '');
                this.removeNotification(notification, snackType);
            }
        };
        /** @hidden */
        this.openFromStack = (notification) => {
            const stackName = this.getStackName(notification.type);
            this[stackName].methodDescription = new SnackbarMethodDescription('hide', true);
        };
        /** @hidden */
        this.dismissAll = () => {
            this.notificationList = [];
            this.warningStack.activeNotification$.next(undefined);
            this.infoStack.activeNotification$.next(undefined);
        };
        this.handleNotification = (notification) => {
            this.previousNotification = this.notificationList[this.notificationList.length - 1];
            this.notificationList.push(notification);
            this.updateStackActiveNotification(notification);
            this.setStackAnimation(notification.type);
        };
        this.updateStackActiveNotification = (notification) => {
            var _a;
            const stackName = this.getStack(notification === null || notification === void 0 ? void 0 : notification.type);
            this.updateStackNotificationList(notification.type);
            this.activeNotification = notification;
            if (this[stackName].notificationList.length > 1) {
                this.reopen = true;
                if (((_a = this.previousNotification) === null || _a === void 0 ? void 0 : _a.type) === notification.type) {
                    this[stackName].snackbarAnimation = 3 /* ToStack */;
                    // silently dismiss notification after previous notification animation
                    const timeout = setTimeout(() => {
                        this.silentlyDismissNotification(stackName);
                        this[stackName].snackbarAnimation = null;
                        clearTimeout(timeout);
                    }, ANIMATION_DURATION);
                }
                else {
                    this.silentlyDismissNotification(stackName);
                }
            }
            else {
                this[stackName].activeNotification$.next(notification);
            }
        };
        this.updateStackNotificationList = (notificationType) => {
            const stack = this[this.getStack(notificationType)];
            if (stack) {
                stack.notificationList = this.notificationList.filter(item => item.type === notificationType);
            }
            return stack.notificationList;
        };
        this.silentlyDismissNotification = (stackName) => {
            this[stackName].dismissedSilently = true;
            this[stackName].methodDescription = new SnackbarMethodDescription('hide', false);
        };
        this.setStackAnimation = (notificationType, animation) => {
            var _a, _b, _c;
            const currentStack = this.getStack(notificationType);
            const previousStack = this.getStack(notificationType, true);
            if (((_b = (_a = this[previousStack]) === null || _a === void 0 ? void 0 : _a.notificationList) === null || _b === void 0 ? void 0 : _b.length) > 0 &&
                ((_c = this.previousNotification) === null || _c === void 0 ? void 0 : _c.type) !== notificationType) {
                this[previousStack].stackAnimation = animation || 2 /* ToBottom */;
                this[currentStack].stackAnimation =
                    animation === 1 /* ToTop */
                        ? 2 /* ToBottom */
                        : 1 /* ToTop */;
            }
        };
        this.removeNotification = (notification, snackType) => {
            var _a;
            const stackName = this.getStack(notification === null || notification === void 0 ? void 0 : notification.type);
            if (this[stackName].dismissedSilently) {
                //notification dismissed silently
                const stackName = this.getStack((_a = this.activeNotification) === null || _a === void 0 ? void 0 : _a.type);
                this[stackName].activeNotification$.next(this.activeNotification);
                this.reopen = false;
            }
            else {
                //notification dismissed
                this.notificationList = this.notificationList.filter(currentNotification => currentNotification.id !== notification.id);
                this.reopenLastNotification(notification, stackName);
            }
        };
        this.reopenLastNotification = (notification, stackName) => {
            var _a;
            let stackNotificationList = (_a = this[stackName]) === null || _a === void 0 ? void 0 : _a.notificationList;
            if (this.isLastNotificationDismissed(notification, this[stackName]) &&
                (stackNotificationList === null || stackNotificationList === void 0 ? void 0 : stackNotificationList.length) > 0) {
                this[stackName].reopen = true;
                stackNotificationList = this.updateStackNotificationList(notification.type);
                const lastNotification = stackNotificationList[stackNotificationList.length - 1];
                if (lastNotification) {
                    this[stackName].activeNotification$.next(lastNotification);
                }
                else {
                    this[stackName].stackIndicator = false;
                    this[stackName].reopen = false;
                    this[stackName].animateStack = 2 /* ToBottom */;
                    this.setStackAnimation(notification.type, 1 /* ToTop */);
                }
            }
        };
        this.isLastNotificationDismissed = (notification, stack) => {
            const lastNotification = stack.notificationList[stack.notificationList.length - 1];
            return (lastNotification === null || lastNotification === void 0 ? void 0 : lastNotification.id) === (notification === null || notification === void 0 ? void 0 : notification.id);
        };
        this.getStackName = (stackType) => {
            return stackType === 1 ? 'warningStack' : 'infoStack';
        };
        this.warningStack = new SnackbarStack(String(NOTIFICATION_TYPE.get(1 /* Warning */)).toLowerCase());
        this.infoStack = new SnackbarStack(String(NOTIFICATION_TYPE.get(2 /* Info */)).toLowerCase());
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    ngAfterViewChecked() {
        this.cdRef.detectChanges();
    }
    /** @hidden */
    ngOnInit() {
        var _a, _b;
        this.positionTop = ((_a = document.querySelector('main')) === null || _a === void 0 ? void 0 : _a.offsetTop) + 12 + 'px';
        (_b = this.notification$) === null || _b === void 0 ? void 0 : _b.pipe(takeUntil(this.destroyed$)).subscribe(notification => {
            this.handleNotification(notification);
        });
    }
    getStack(notificationType, previous) {
        let stackType;
        if (notificationType === 1 /* Warning */ ||
            notificationType === 0 /* Error */) {
            stackType = previous ? 2 /* Info */ : 1 /* Warning */;
        }
        else {
            stackType = previous ? 1 /* Warning */ : 2 /* Info */;
        }
        return this.getStackName(stackType);
    }
};
AvlNotificationContainerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    HostBinding('style.top'),
    __metadata("design:type", String)
], AvlNotificationContainerComponent.prototype, "positionTop", void 0);
__decorate([
    ViewChild('warningStackElement'),
    __metadata("design:type", ElementRef)
], AvlNotificationContainerComponent.prototype, "warningStackElement", void 0);
__decorate([
    ViewChild('infoStackElement'),
    __metadata("design:type", ElementRef)
], AvlNotificationContainerComponent.prototype, "infoStackElement", void 0);
__decorate([
    ViewChild('infoStackIndicatorElement'),
    __metadata("design:type", ElementRef)
], AvlNotificationContainerComponent.prototype, "infoStackIndicatorElement", void 0);
__decorate([
    ViewChild('infoStackIndicatorElement'),
    __metadata("design:type", ElementRef)
], AvlNotificationContainerComponent.prototype, "warningStackIndicatorElement", void 0);
__decorate([
    Input('display-icon'),
    __metadata("design:type", Boolean)
], AvlNotificationContainerComponent.prototype, "displayIcon", void 0);
__decorate([
    Input('notification$'),
    __metadata("design:type", Observable)
], AvlNotificationContainerComponent.prototype, "notification$", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlNotificationContainerComponent.prototype, "openMenu", void 0);
AvlNotificationContainerComponent = __decorate([
    Component({
        selector: 'avl-notification-container',
        template: "<div class=\"snackbar\" *ngIf=\"notification$ | async as notification\">\r\n  <div\r\n    [animateStack]=\"warningStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? infoSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"warningStack.methodDescription\"\r\n    class=\"snackbar-stack\"\r\n    id=\"warningStack\"\r\n    #warningStackElement\r\n  >\r\n    <div [animateSnackbar]=\"warningStack.snackbarAnimation\" id=\"warningSnack\" #warningSnackElement>\r\n      <avl-snackbar\r\n        *ngIf=\"warningStack.activeNotification$ | async as activeWarningNotification\"\r\n        id=\"warningSnackbar\"\r\n        [message]=\"activeWarningNotification?.messageText\"\r\n        [actionButtonLabel]=\"warningStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeWarningNotification.link\"\r\n        [messageType]=\"activeWarningNotification.type\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeWarningNotification)\"\r\n        snackbarListener\r\n        #warningSnackbar\r\n        showHideSnackbar=\"warningSnackbar\"\r\n        [methodDescription]=\"warningStack.methodDescription\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"warningStack.notificationList.length>1\" #warningStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': warningStack.stackIndicatorButtonLabel}\">\r\n            <avl-icon icon=\"icons:warning\" id=\"warningIcon\" class=\"warning\"></avl-icon>\r\n            <p id=\"snackbarMessage\">{{ warningStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n          <button id=\"actionButton\" *ngIf=\"warningStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(warningStack.previousNotification)\">\r\n            <div class=\"button-label\">{{ warningStack.stackIndicatorButtonLabel }}</div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"snackbar-stack\"\r\n    id=\"infoStack\"\r\n    [animateStack]=\"infoStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? warningSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"infoStack.methodDescription\"\r\n    #infoStackElement\r\n  >\r\n    <div [animateSnackbar]=\"infoStack.snackbarAnimation\" id=\"infoSnack\" #infoSnackElement>\r\n      <avl-snackbar\r\n        id=\"infoSnackbar\"\r\n        *ngIf=\"infoStack.activeNotification$ | async as activeInfoNotification\"\r\n        [message]=\"activeInfoNotification.messageText\"\r\n        [actionButtonLabel]=\"infoStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeInfoNotification.link\"\r\n        [messageType]=\"activeInfoNotification.type\"\r\n        [displayIcon]=\"displayIcon\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeInfoNotification)\"\r\n        snackbarListener\r\n        #infoSnackbar\r\n        showHideSnackbar=\"infoSnackbar\"\r\n        [methodDescription]=\"infoStack.methodDescription\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"infoStack.notificationList.length>1\" #infoStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': infoStack.stackIndicatorButtonLabel}\">\r\n            <p id=\"snackbarMessage\">{{ infoStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n        </div>\r\n        <button id=\"actionButton\" *ngIf=\"infoStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(infoStack.previousNotification)\">\r\n          <div class=\"button-label\">{{ infoStack.stackIndicatorButtonLabel }}</div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    animateButton\r\n    [infoStackHeight]=\"infoStack?.notificationList?.length > 0 ? infoSnackElement.offsetHeight : 0\"\r\n    [warningStackHeight]=\"warningStack?.notificationList?.length > 0 ? warningSnackElement.offsetHeight : 0\"\r\n    [infoStackIndicatorHeight]=\"infoStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    [warningStackIndicatorHeight]=\"warningStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    class=\"dismiss-all\"\r\n    *ngIf=\"notificationList?.length > 1\"\r\n  >\r\n    <avl-button id=\"dismissAll\" (click)=\"dismissAll()\">{{'VizBox.NotificationContainer.DismissAll' | translate}}</avl-button>\r\n  </div>\r\n</div>\r\n\r\n\r\n",
        styles: [":host{position:fixed;right:0;width:445px;display:flex;flex-direction:column;--avl-snackbar-text-color:var(--avl-on-background-info-color)}.snackbar{width:100%;display:flex;flex-direction:column}.snackbar.displayed{flex:1;max-height:100%}.snackbar-stack{position:absolute;top:0;left:0;right:0;width:100%}.stack-indicator-container{margin:0 12px;position:absolute;width:calc(100% - 12px);top:12px;z-index:-1}.snackbar-container{margin-top:0;margin-left:0;margin-right:0;width:100%}.button-label{text-align:left;text-transform:none}.stack-indicator{background-color:var(--avl-background-message-color);top:0;left:0;width:calc(100% - 24px);border-radius:4px;position:relative;height:100%;z-index:-1;box-shadow:0 3px 5px -1px rgb(0 0 0 / 20%),0 6px 10px 0 rgb(0 0 0 / 14%),0 1px 18px 0 rgb(0 0 0 / 12%)}.notification{display:flex;flex:1 1 100%;align-items:center;flex-direction:row;padding:0 12px 0 16px;justify-content:flex-start;cursor:pointer;text-overflow:ellipsis}.notification p{flex-grow:1;-webkit-line-clamp:3;max-height:48px;text-overflow:ellipsis;line-height:19px;font-size:14px;margin:0 0 0 12px;padding:12px 0;font-family:var(--avl-font-family);color:var(--avl-on-background-info-color)}button#actionButton{font-family:var(--avl-font-family);font-weight:500;font-size:14px;color:var(--avl-on-background-message-link-color);background-color:var(--avl-button-background-default-color);max-height:48px;height:48px;width:100%;cursor:pointer;padding:12px;margin:-12px 0 0;border-radius:2px;border:0;outline:0}div#actionButton:hover{color:var(--avl-on-background-message-link-hover-color)}#warningIcon{--avl-icon-custom-color:var(--avl-on-background-message-warning-color);flex:0 0 24px;--avl-icon-custom-color:var(--avl-warning-color)}#errorIcon{--avl-icon-custom-color:var(--avl-on-background-message-error-color);flex:0 0 24px}#infoIcon{--avl-icon-custom-color:var(--avl-on-background-message-emphasis-medium-color);flex:0 0 24px}#OKIcon{--avl-icon-custom-color:var(--avl-on-background-message-ok-color);flex:0 0 24px}.dismiss-all{position:absolute;padding:0 16px;border-radius:25px;background-color:var(--avl-background-message-color);width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;top:12px}#dismissAll{--avl-flat-button-label-color:var(--avl-on-background-message-link-color)}avl-icon-button{flex:0 0 48px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-on-background-message-icon-default-color);--avl-icon-ink-hover-color:var(--avl-on-background-message-icon-hover-color);--avl-icon-ink-focus-color:var(--avl-on-background-message-icon-focus-color);--avl-icon-ink-pressed-color:var(--avl-on-background-message-icon-pressed-color)}@media only screen and (min-width:320px) and (max-width:376px){:host{width:calc(100% - 32px)}}@media only screen and (min-width:460px){:host{width:445px}}@media only screen and (min-width:376px) and (max-width:400px){:host{width:376px}}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], AvlNotificationContainerComponent);
export { AvlNotificationContainerComponent };
//# sourceMappingURL=data:application/json;base64,