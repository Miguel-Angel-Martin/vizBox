import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/animations';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, HostBinding, Input, OnChanges, SimpleChanges } from '@angular/core';
import { animate, AnimationBuilder, AnimationMetadata, AnimationPlayer, AnimationStyleMetadata, style } from '@angular/animations';
import { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';
/** @hidden */
let AnimateSnackbar = class AnimateSnackbar {
    constructor(builder, el) {
        this.builder = builder;
        /** @hidden */
        this.defaultClass = true;
        this.getAnimation = (animationName, initialStyle) => {
            const elementWidth = this.element.nativeElement.offsetWidth - 3 * MARGIN;
            const inStackStyle = style({
                marginTop: MARGIN + 'px',
                marginLeft: MARGIN + 'px',
                marginRight: MARGIN + 'px',
                width: elementWidth + 'px'
            });
            switch (animationName) {
                case 4 /* FromStack */:
                    return [animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle), initialStyle];
                case 3 /* ToStack */: {
                    return [initialStyle, animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle)];
                }
                default:
                    return [initialStyle, animate('1ms ease-in', initialStyle)];
            }
        };
        this.element = el;
    }
    ngOnChanges(changes) {
        if (changes.animateSnackbar) {
            const isInStack = changes.animateSnackbar.currentValue === 3 /* ToStack */;
            if (isInStack) {
                this.move();
            }
            else if (changes.animateSnackbar.previousValue === 3 /* ToStack */) {
                this.move();
            }
        }
    }
    show(metadata) {
        if (this.player) {
            this.player.destroy();
        }
        if (metadata) {
            const factory = this.builder.build(metadata);
            const player = factory.create(this.element.nativeElement);
            player.play();
        }
    }
    move() {
        const animationMetadata = this.animate();
        this.show(animationMetadata);
    }
    animate() {
        const initialStyle = style({
            marginTop: '0',
            width: '100%',
            marginLeft: '0',
            marginRight: '0'
        });
        return this.getAnimation(this.animateSnackbar, initialStyle);
    }
};
AnimateSnackbar.ɵfac = function AnimateSnackbar_Factory(t) { return new (t || AnimateSnackbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AnimationBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AnimateSnackbar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AnimateSnackbar, selectors: [["", "animateSnackbar", ""]], hostVars: 6, hostBindings: function AnimateSnackbar_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("snackbar-container", ctx.defaultClass)("in-stack", ctx.inStack)("no-animation", ctx.noAnimation);
    } }, inputs: { animateSnackbar: "animateSnackbar", positionAnimation: "positionAnimation", notification: "notification", reopen: "reopen" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
AnimateSnackbar.ctorParameters = () => [
    { type: AnimationBuilder },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Number)
], AnimateSnackbar.prototype, "animateSnackbar", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AnimateSnackbar.prototype, "positionAnimation", void 0);
__decorate([
    Input('notification'),
    __metadata("design:type", Object)
], AnimateSnackbar.prototype, "notification", void 0);
__decorate([
    Input('reopen'),
    __metadata("design:type", Boolean)
], AnimateSnackbar.prototype, "reopen", void 0);
__decorate([
    HostBinding('class.in-stack'),
    __metadata("design:type", Boolean)
], AnimateSnackbar.prototype, "inStack", void 0);
__decorate([
    HostBinding('class.no-animation'),
    __metadata("design:type", Boolean)
], AnimateSnackbar.prototype, "noAnimation", void 0);
__decorate([
    HostBinding('class.snackbar-container'),
    __metadata("design:type", Object)
], AnimateSnackbar.prototype, "defaultClass", void 0);
AnimateSnackbar = __decorate([ __metadata("design:paramtypes", [AnimationBuilder, ElementRef])
], AnimateSnackbar);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AnimateSnackbar, [{
        type: Directive,
        args: [{ selector: '[animateSnackbar]' }]
    }], function () { return [{ type: ɵngcc1.AnimationBuilder }, { type: ɵngcc0.ElementRef }]; }, { defaultClass: [{
            type: HostBinding,
            args: ['class.snackbar-container']
        }], animateSnackbar: [{
            type: Input
        }], positionAnimation: [{
            type: Input
        }], notification: [{
            type: Input,
            args: ['notification']
        }], reopen: [{
            type: Input,
            args: ['reopen']
        }], inStack: [{
            type: HostBinding,
            args: ['class.in-stack']
        }], noAnimation: [{
            type: HostBinding,
            args: ['class.no-animation']
        }] }); })();
export { AnimateSnackbar };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,