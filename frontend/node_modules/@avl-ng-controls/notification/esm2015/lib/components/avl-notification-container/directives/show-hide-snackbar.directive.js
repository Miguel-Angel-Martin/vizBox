import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, Input, SimpleChanges, OnChanges, ElementRef } from '@angular/core';
/**@hidden */
export class SnackbarMethodDescription {
    constructor(method, animate) {
        this.method = method;
        this.animate = animate;
    }
}
let ShowHideSnackbarDirective = class ShowHideSnackbarDirective {
    constructor(el) {
        this.element = el;
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d;
        if (changes.methodDescription) {
            if (((_a = changes.methodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                setTimeout(() => { var _a, _b; return (_a = this.element.nativeElement) === null || _a === void 0 ? void 0 : _a.showSnackbar('relative', !((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.animate)); }, 0);
            }
            else if (((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.method) === 'hide') {
                (_c = this.element.nativeElement) === null || _c === void 0 ? void 0 : _c.hideSnackbar((_d = changes.methodDescription.currentValue) === null || _d === void 0 ? void 0 : _d.animate);
            }
        }
    }
};
ShowHideSnackbarDirective.ɵfac = function ShowHideSnackbarDirective_Factory(t) { return new (t || ShowHideSnackbarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ShowHideSnackbarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ShowHideSnackbarDirective, selectors: [["", "showHideSnackbar", ""]], inputs: { methodDescription: "methodDescription" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
ShowHideSnackbarDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", SnackbarMethodDescription)
], ShowHideSnackbarDirective.prototype, "methodDescription", void 0);
ShowHideSnackbarDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], ShowHideSnackbarDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowHideSnackbarDirective, [{
        type: Directive,
        args: [{ selector: '[showHideSnackbar]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { methodDescription: [{
            type: Input
        }] }); })();
export { ShowHideSnackbarDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXNuYWNrYmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtbmctY29udHJvbHMvbm90aWZpY2F0aW9uL2xpYi9jb21wb25lbnRzL2F2bC1ub3RpZmljYXRpb24tY29udGFpbmVyL2RpcmVjdGl2ZXMvc2hvdy1oaWRlLXNuYWNrYmFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkYsYUFBYTtBQUNiLE1BQU0sT0FBTyx5QkFBeUI7QUFDdEMsSUFHRSxZQUFZLE1BQXVCLEVBQUUsT0FBZ0I7QUFDdkQsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN6QixRQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzNCLElBQUUsQ0FBQztBQUNILENBQUM7QUFHRCxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtBQUFHLElBS3ZDLFlBQVksRUFBYztBQUM1QixRQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLElBQUUsQ0FBQztBQUNILElBQUUsV0FBVyxDQUFDLE9BQXNCO0FBQUk7QUFDbEIsUUFBbEIsSUFBSSxPQUFPLENBQUMsaUJBQWlCLEVBQUU7QUFDbkMsWUFBTSxJQUFJLE9BQUEsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFlBQVksMENBQUUsTUFBTSxNQUFLLE1BQU0sRUFBRTtBQUNyRSxnQkFBUSxVQUFVLENBQ1IsR0FBRyxFQUFFLDRCQUNILElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSwwQ0FBRSxZQUFZLENBQ3RDLFVBQVUsRUFDVixRQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLDBDQUFFLE9BQU8sQ0FBQSxJQUNqRCxFQUNILENBQUMsQ0FDRixDQUFDO0FBQ1YsYUFBTztBQUFDLGlCQUFLLElBQUksT0FBQSxPQUFPLENBQUMsaUJBQWlCLENBQUMsWUFBWSwwQ0FBRSxNQUFNLE1BQUssTUFBTSxFQUFFO0FBQzVFLGdCQUFRLE1BQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLDBDQUFFLFlBQVksT0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsWUFBWSwwQ0FBRSxPQUFPLEVBQUU7QUFDbEcsYUFBTztBQUNQLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxDQUFDOzt1T0FBQTtBQUNEO0FBQW1ELFlBcEJqQyxVQUFVO0FBQUc7QUFIcEI7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBRSw4QkFBa0IseUJBQXlCO0FBQ3ZELG9FQUR3RDtBQUYzQyx5QkFBeUIsb0JBRHJDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSwzQkFDbkIsa0NBS2MsVUFBVTtBQU5lLEVBQUUsQ0FBQyxIQU1mLEdBTGxCLHlCQUF5QixDQXdCckM7Ozs7OztvQkFDRDs7QUF2Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBbkJBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBTEEsQUFBQSxBQXdCQSxBQXhCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipAaGlkZGVuICovXHJcbmV4cG9ydCBjbGFzcyBTbmFja2Jhck1ldGhvZERlc2NyaXB0aW9uIHtcclxuICBtZXRob2Q6ICdzaG93JyB8ICdoaWRlJztcclxuICBhbmltYXRlOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihtZXRob2Q6ICdzaG93JyB8ICdoaWRlJywgYW5pbWF0ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XHJcbiAgICB0aGlzLmFuaW1hdGUgPSBhbmltYXRlO1xyXG4gIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3Nob3dIaWRlU25hY2tiYXJdJyB9KVxyXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVTbmFja2JhckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSBtZXRob2REZXNjcmlwdGlvbjogU25hY2tiYXJNZXRob2REZXNjcmlwdGlvbjtcclxuICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbDtcclxuICB9XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24pIHtcclxuICAgICAgaWYgKGNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24uY3VycmVudFZhbHVlPy5tZXRob2QgPT09ICdzaG93Jykge1xyXG4gICAgICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudD8uc2hvd1NuYWNrYmFyKFxyXG4gICAgICAgICAgICAgICdyZWxhdGl2ZScsXHJcbiAgICAgICAgICAgICAgIWNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24uY3VycmVudFZhbHVlPy5hbmltYXRlXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAwXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIGlmIChjaGFuZ2VzLm1ldGhvZERlc2NyaXB0aW9uLmN1cnJlbnRWYWx1ZT8ubWV0aG9kID09PSAnaGlkZScpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudD8uaGlkZVNuYWNrYmFyKGNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24uY3VycmVudFZhbHVlPy5hbmltYXRlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=