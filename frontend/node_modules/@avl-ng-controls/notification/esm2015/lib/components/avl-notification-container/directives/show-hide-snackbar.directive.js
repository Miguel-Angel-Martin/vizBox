import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**@hidden */
export class SnackbarMethodDescription {
    constructor(method, animate) {
        this.method = method;
        this.animate = animate;
    }
}
export class ShowHideSnackbarDirective {
    constructor(el) {
        this.element = el;
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d;
        if (changes.methodDescription) {
            if (((_a = changes.methodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                setTimeout(() => {
                    var _a, _b;
                    return (_a = this.element.nativeElement) === null || _a === void 0 ? void 0 : _a.showSnackbar('relative', !((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.animate));
                }, 0);
            }
            else if (((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.method) === 'hide') {
                (_c = this.element.nativeElement) === null || _c === void 0 ? void 0 : _c.hideSnackbar((_d = changes.methodDescription.currentValue) === null || _d === void 0 ? void 0 : _d.animate);
            }
        }
    }
}
ShowHideSnackbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: ShowHideSnackbarDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ShowHideSnackbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: ShowHideSnackbarDirective, selector: "[showHideSnackbar]", inputs: { methodDescription: "methodDescription" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: ShowHideSnackbarDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[showHideSnackbar]' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { methodDescription: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXNuYWNrYmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25vdGlmaWNhdGlvbi9zcmMvbGliL2NvbXBvbmVudHMvYXZsLW5vdGlmaWNhdGlvbi1jb250YWluZXIvZGlyZWN0aXZlcy9zaG93LWhpZGUtc25hY2tiYXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF3QyxNQUFNLGVBQWUsQ0FBQzs7QUFFdkYsYUFBYTtBQUNiLE1BQU0sT0FBTyx5QkFBeUI7SUFJcEMsWUFBWSxNQUF1QixFQUFFLE9BQWdCO1FBQ25ELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQUdELE1BQU0sT0FBTyx5QkFBeUI7SUFLcEMsWUFBWSxFQUFjO1FBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxXQUFXLENBQUMsT0FBc0I7O1FBQ2hDLElBQUksT0FBTyxDQUFDLGlCQUFpQixFQUFFO1lBQzdCLElBQUksQ0FBQSxNQUFBLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLDBDQUFFLE1BQU0sTUFBSyxNQUFNLEVBQUU7Z0JBQzdELFVBQVUsQ0FDUixHQUFHLEVBQUU7O29CQUNILE9BQUEsTUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsMENBQUUsWUFBWSxDQUN0QyxVQUFVLEVBQ1YsQ0FBQyxDQUFBLE1BQUEsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFlBQVksMENBQUUsT0FBTyxDQUFBLENBQ2pELENBQUE7aUJBQUEsRUFDSCxDQUFDLENBQ0YsQ0FBQzthQUNIO2lCQUFNLElBQUksQ0FBQSxNQUFBLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLDBDQUFFLE1BQU0sTUFBSyxNQUFNLEVBQUU7Z0JBQ3BFLE1BQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLDBDQUFFLFlBQVksQ0FBQyxNQUFBLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLDBDQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzNGO1NBQ0Y7SUFDSCxDQUFDOztzSEF2QlUseUJBQXlCOzBHQUF6Qix5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFEckMsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTtpR0FHbEMsaUJBQWlCO3NCQUF6QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipAaGlkZGVuICovXHJcbmV4cG9ydCBjbGFzcyBTbmFja2Jhck1ldGhvZERlc2NyaXB0aW9uIHtcclxuICBtZXRob2Q6ICdzaG93JyB8ICdoaWRlJztcclxuICBhbmltYXRlOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihtZXRob2Q6ICdzaG93JyB8ICdoaWRlJywgYW5pbWF0ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XHJcbiAgICB0aGlzLmFuaW1hdGUgPSBhbmltYXRlO1xyXG4gIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3Nob3dIaWRlU25hY2tiYXJdJyB9KVxyXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVTbmFja2JhckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSBtZXRob2REZXNjcmlwdGlvbjogU25hY2tiYXJNZXRob2REZXNjcmlwdGlvbjtcclxuICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbDtcclxuICB9XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24pIHtcclxuICAgICAgaWYgKGNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24uY3VycmVudFZhbHVlPy5tZXRob2QgPT09ICdzaG93Jykge1xyXG4gICAgICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudD8uc2hvd1NuYWNrYmFyKFxyXG4gICAgICAgICAgICAgICdyZWxhdGl2ZScsXHJcbiAgICAgICAgICAgICAgIWNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24uY3VycmVudFZhbHVlPy5hbmltYXRlXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAwXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIGlmIChjaGFuZ2VzLm1ldGhvZERlc2NyaXB0aW9uLmN1cnJlbnRWYWx1ZT8ubWV0aG9kID09PSAnaGlkZScpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudD8uaGlkZVNuYWNrYmFyKGNoYW5nZXMubWV0aG9kRGVzY3JpcHRpb24uY3VycmVudFZhbHVlPy5hbmltYXRlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=