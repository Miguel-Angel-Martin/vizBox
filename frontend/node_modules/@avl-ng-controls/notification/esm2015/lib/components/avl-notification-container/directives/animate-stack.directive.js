import { Directive, Input } from '@angular/core';
import { animate, style } from '@angular/animations';
import { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';
import * as i0 from "@angular/core";
import * as i1 from "@angular/animations";
export class AnimateStack {
    constructor(builder, el) {
        this.builder = builder;
        this.getAnimation = (animationName, initialStyle) => {
            const allStyle = style('*');
            switch (animationName) {
                case 2 /* ToBottom */: {
                    return [
                        allStyle,
                        animate(ANIMATION_DURATION + 'ms ease-in', style({
                            top: this.styleTop + 'px',
                            zIndex: 0
                        }))
                    ];
                }
                case 1 /* ToTop */: {
                    return [allStyle, animate(ANIMATION_DURATION + 'ms ease-in', initialStyle)];
                }
                default:
                    return [initialStyle, animate('0ms', initialStyle)];
            }
        };
        this.element = el;
    }
    ngOnChanges(changes) {
        var _a;
        if (changes.animateStack) {
            this.move(this.previousStackHeight);
        }
        else if (changes.previousStackHeight) {
            this.move(changes === null || changes === void 0 ? void 0 : changes.previousStackHeight.currentValue);
        }
        else if (changes.snackbarMethodDescription) {
            if (((_a = changes.snackbarMethodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                this.move(this.previousStackHeight);
            }
        }
    }
    show(metadata) {
        if (this.player) {
            this.player.destroy();
        }
        if (metadata) {
            const factory = this.builder.build(metadata);
            const player = factory.create(this.element.nativeElement);
            player.play();
        }
    }
    move(height) {
        if (this.animateStack === 2 /* ToBottom */) {
            this.styleTop = height + MARGIN * 2;
        }
        const animationMetadata = this.animate();
        this.show(animationMetadata);
    }
    animate() {
        const initialStyle = style({
            top: '0',
            width: '100%',
            left: '0',
            zIndex: 1
        });
        return this.getAnimation(this.animateStack, initialStyle);
    }
}
AnimateStack.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AnimateStack, deps: [{ token: i1.AnimationBuilder }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
AnimateStack.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: AnimateStack, selector: "[animateStack]", inputs: { animateStack: "animateStack", notification: "notification", previousStackHeight: "previousStackHeight", snackbarMethodDescription: "snackbarMethodDescription", reopen: "reopen" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AnimateStack, decorators: [{
            type: Directive,
            args: [{ selector: '[animateStack]' }]
        }], ctorParameters: function () { return [{ type: i1.AnimationBuilder }, { type: i0.ElementRef }]; }, propDecorators: { animateStack: [{
                type: Input
            }], notification: [{
                type: Input
            }], previousStackHeight: [{
                type: Input
            }], snackbarMethodDescription: [{
                type: Input
            }], reopen: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0ZS1zdGFjay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9ub3RpZmljYXRpb24vc3JjL2xpYi9jb21wb25lbnRzL2F2bC1ub3RpZmljYXRpb24tY29udGFpbmVyL2RpcmVjdGl2ZXMvYW5pbWF0ZS1zdGFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFDTCxPQUFPLEVBS1AsS0FBSyxFQUNOLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7QUFXbEYsTUFBTSxPQUFPLFlBQVk7SUFvQnZCLFlBQXFCLE9BQXlCLEVBQUUsRUFBYztRQUF6QyxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQTJDdEMsaUJBQVksR0FBRyxDQUNyQixhQUFnQyxFQUNoQyxZQUFvQyxFQUNmLEVBQUU7WUFDdkIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVCLFFBQVEsYUFBYSxFQUFFO2dCQUNyQixxQkFBK0IsQ0FBQyxDQUFDO29CQUMvQixPQUFPO3dCQUNMLFFBQVE7d0JBQ1IsT0FBTyxDQUNMLGtCQUFrQixHQUFHLFlBQVksRUFDakMsS0FBSyxDQUFDOzRCQUNKLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUk7NEJBQ3pCLE1BQU0sRUFBRSxDQUFDO3lCQUNWLENBQUMsQ0FDSDtxQkFDRixDQUFDO2lCQUNIO2dCQUNELGtCQUE0QixDQUFDLENBQUM7b0JBQzVCLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixHQUFHLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO2lCQUM3RTtnQkFDRDtvQkFDRSxPQUFPLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUN2RDtRQUNILENBQUMsQ0FBQztRQW5FQSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCOztRQUNoQyxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUNyQzthQUFNLElBQUksT0FBTyxDQUFDLG1CQUFtQixFQUFFO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3REO2FBQU0sSUFBSSxPQUFPLENBQUMseUJBQXlCLEVBQUU7WUFDNUMsSUFBSSxDQUFBLE1BQUEsT0FBTyxDQUFDLHlCQUF5QixDQUFDLFlBQVksMENBQUUsTUFBTSxNQUFLLE1BQU0sRUFBRTtnQkFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQzthQUNyQztTQUNGO0lBQ0gsQ0FBQztJQUVPLElBQUksQ0FBQyxRQUE2QjtRQUN4QyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM3QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0lBQ08sSUFBSSxDQUFDLE1BQWM7UUFDekIsSUFBSSxJQUFJLENBQUMsWUFBWSxxQkFBK0IsRUFBRTtZQUNwRCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsTUFBTSxpQkFBaUIsR0FBd0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ08sT0FBTztRQUNiLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQztZQUN6QixHQUFHLEVBQUUsR0FBRztZQUNSLEtBQUssRUFBRSxNQUFNO1lBQ2IsSUFBSSxFQUFFLEdBQUc7WUFDVCxNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzVELENBQUM7O3lHQTdEVSxZQUFZOzZGQUFaLFlBQVk7MkZBQVosWUFBWTtrQkFEeEIsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRTtnSUFHckIsWUFBWTtzQkFBN0IsS0FBSztnQkFHWSxZQUFZO3NCQUE3QixLQUFLO2dCQUdZLG1CQUFtQjtzQkFBcEMsS0FBSztnQkFHWSx5QkFBeUI7c0JBQTFDLEtBQUs7Z0JBR1ksTUFBTTtzQkFBdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGFuaW1hdGUsXHJcbiAgQW5pbWF0aW9uQnVpbGRlcixcclxuICBBbmltYXRpb25NZXRhZGF0YSxcclxuICBBbmltYXRpb25QbGF5ZXIsXHJcbiAgQW5pbWF0aW9uU3R5bGVNZXRhZGF0YSxcclxuICBzdHlsZVxyXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xyXG5pbXBvcnQgeyBBdmxOb3RpZmljYXRpb24gfSBmcm9tICdAYXZsLWludGVyZmFjZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IEFOSU1BVElPTl9EVVJBVElPTiwgTUFSR0lOIH0gZnJvbSAnLi4vYXZsLW5vdGlmaWNhdGlvbi1jb250YWluZXIuY29uc3RzJztcclxuaW1wb3J0IHsgU25hY2tiYXJNZXRob2REZXNjcmlwdGlvbiB9IGZyb20gJy4vc2hvdy1oaWRlLXNuYWNrYmFyLmRpcmVjdGl2ZSc7XHJcbi8qKiBAaGlkZGVuICovXHJcbmV4cG9ydCBjb25zdCBlbnVtIFBvc2l0aW9uQW5pbWF0aW9uIHtcclxuICBUb0xvd2VyU3RhY2ssXHJcbiAgVG9Ub3AsXHJcbiAgVG9Cb3R0b20sXHJcbiAgVG9TdGFjayxcclxuICBGcm9tU3RhY2tcclxufVxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbYW5pbWF0ZVN0YWNrXScgfSlcclxuZXhwb3J0IGNsYXNzIEFuaW1hdGVTdGFjayBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSByZWFkb25seSBhbmltYXRlU3RhY2s6IFBvc2l0aW9uQW5pbWF0aW9uO1xyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBJbnB1dCgpIHJlYWRvbmx5IG5vdGlmaWNhdGlvbjogQXZsTm90aWZpY2F0aW9uO1xyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBJbnB1dCgpIHJlYWRvbmx5IHByZXZpb3VzU3RhY2tIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSByZWFkb25seSBzbmFja2Jhck1ldGhvZERlc2NyaXB0aW9uOiBTbmFja2Jhck1ldGhvZERlc2NyaXB0aW9uO1xyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBJbnB1dCgpIHJlYWRvbmx5IHJlb3BlbjogYm9vbGVhbjtcclxuXHJcbiAgcHJpdmF0ZSBzdHlsZVRvcDogbnVtYmVyO1xyXG4gIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZjtcclxuICBwcml2YXRlIHBsYXllcjogQW5pbWF0aW9uUGxheWVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBidWlsZGVyOiBBbmltYXRpb25CdWlsZGVyLCBlbDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWw7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBpZiAoY2hhbmdlcy5hbmltYXRlU3RhY2spIHtcclxuICAgICAgdGhpcy5tb3ZlKHRoaXMucHJldmlvdXNTdGFja0hlaWdodCk7XHJcbiAgICB9IGVsc2UgaWYgKGNoYW5nZXMucHJldmlvdXNTdGFja0hlaWdodCkge1xyXG4gICAgICB0aGlzLm1vdmUoY2hhbmdlcz8ucHJldmlvdXNTdGFja0hlaWdodC5jdXJyZW50VmFsdWUpO1xyXG4gICAgfSBlbHNlIGlmIChjaGFuZ2VzLnNuYWNrYmFyTWV0aG9kRGVzY3JpcHRpb24pIHtcclxuICAgICAgaWYgKGNoYW5nZXMuc25hY2tiYXJNZXRob2REZXNjcmlwdGlvbi5jdXJyZW50VmFsdWU/Lm1ldGhvZCA9PT0gJ3Nob3cnKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlKHRoaXMucHJldmlvdXNTdGFja0hlaWdodCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2hvdyhtZXRhZGF0YTogQW5pbWF0aW9uTWV0YWRhdGFbXSkge1xyXG4gICAgaWYgKHRoaXMucGxheWVyKSB7XHJcbiAgICAgIHRoaXMucGxheWVyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICAgIGlmIChtZXRhZGF0YSkge1xyXG4gICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5idWlsZGVyLmJ1aWxkKG1ldGFkYXRhKTtcclxuICAgICAgY29uc3QgcGxheWVyID0gZmFjdG9yeS5jcmVhdGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICBwbGF5ZXIucGxheSgpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIG1vdmUoaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIGlmICh0aGlzLmFuaW1hdGVTdGFjayA9PT0gUG9zaXRpb25BbmltYXRpb24uVG9Cb3R0b20pIHtcclxuICAgICAgdGhpcy5zdHlsZVRvcCA9IGhlaWdodCArIE1BUkdJTiAqIDI7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhbmltYXRpb25NZXRhZGF0YTogQW5pbWF0aW9uTWV0YWRhdGFbXSA9IHRoaXMuYW5pbWF0ZSgpO1xyXG4gICAgdGhpcy5zaG93KGFuaW1hdGlvbk1ldGFkYXRhKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBhbmltYXRlKCk6IEFuaW1hdGlvbk1ldGFkYXRhW10ge1xyXG4gICAgY29uc3QgaW5pdGlhbFN0eWxlID0gc3R5bGUoe1xyXG4gICAgICB0b3A6ICcwJyxcclxuICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgbGVmdDogJzAnLFxyXG4gICAgICB6SW5kZXg6IDFcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QW5pbWF0aW9uKHRoaXMuYW5pbWF0ZVN0YWNrLCBpbml0aWFsU3R5bGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRBbmltYXRpb24gPSAoXHJcbiAgICBhbmltYXRpb25OYW1lOiBQb3NpdGlvbkFuaW1hdGlvbixcclxuICAgIGluaXRpYWxTdHlsZTogQW5pbWF0aW9uU3R5bGVNZXRhZGF0YVxyXG4gICk6IEFuaW1hdGlvbk1ldGFkYXRhW10gPT4ge1xyXG4gICAgY29uc3QgYWxsU3R5bGUgPSBzdHlsZSgnKicpO1xyXG5cclxuICAgIHN3aXRjaCAoYW5pbWF0aW9uTmFtZSkge1xyXG4gICAgICBjYXNlIFBvc2l0aW9uQW5pbWF0aW9uLlRvQm90dG9tOiB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIGFsbFN0eWxlLFxyXG4gICAgICAgICAgYW5pbWF0ZShcclxuICAgICAgICAgICAgQU5JTUFUSU9OX0RVUkFUSU9OICsgJ21zIGVhc2UtaW4nLFxyXG4gICAgICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgICAgdG9wOiB0aGlzLnN0eWxlVG9wICsgJ3B4JyxcclxuICAgICAgICAgICAgICB6SW5kZXg6IDBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIClcclxuICAgICAgICBdO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgUG9zaXRpb25BbmltYXRpb24uVG9Ub3A6IHtcclxuICAgICAgICByZXR1cm4gW2FsbFN0eWxlLCBhbmltYXRlKEFOSU1BVElPTl9EVVJBVElPTiArICdtcyBlYXNlLWluJywgaW5pdGlhbFN0eWxlKV07XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gW2luaXRpYWxTdHlsZSwgYW5pbWF0ZSgnMG1zJywgaW5pdGlhbFN0eWxlKV07XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iXX0=