import { Directive, HostListener, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class SnackbarListener {
    constructor() {
        /** @hidden */
        this.notificationClicked = new EventEmitter();
        /** @hidden */
        this.buttonClicked = new EventEmitter();
        /** @hidden */
        this.notificationDismissed = new EventEmitter();
    }
    onNotificationClicked(event) {
        this.notificationClicked.emit(event);
    }
    onButtonClicked(event) {
        if (event instanceof Event) {
            this.buttonClicked.emit(event);
        }
    }
    onNotificationDismissed(event) {
        if (event instanceof Event) {
            this.notificationDismissed.emit(event);
        }
    }
}
SnackbarListener.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: SnackbarListener, deps: [], target: i0.ɵɵFactoryTarget.Directive });
SnackbarListener.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: SnackbarListener, selector: "[snackbarListener]", outputs: { notificationClicked: "notificationClicked", buttonClicked: "buttonClicked", notificationDismissed: "notificationDismissed" }, host: { listeners: { "notification-clicked": "onNotificationClicked($event)", "button-clicked": "onButtonClicked($event)", "notification-dismissed": "onNotificationDismissed($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: SnackbarListener, decorators: [{
            type: Directive,
            args: [{ selector: '[snackbarListener]' }]
        }], propDecorators: { notificationClicked: [{
                type: Output
            }], buttonClicked: [{
                type: Output
            }], notificationDismissed: [{
                type: Output
            }], onNotificationClicked: [{
                type: HostListener,
                args: ['notification-clicked', ['$event']]
            }], onButtonClicked: [{
                type: HostListener,
                args: ['button-clicked', ['$event']]
            }], onNotificationDismissed: [{
                type: HostListener,
                args: ['notification-dismissed', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2tiYXItbGlzdGVuZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbm90aWZpY2F0aW9uL3NyYy9saWIvY29tcG9uZW50cy9hdmwtbm90aWZpY2F0aW9uLWNvbnRhaW5lci9kaXJlY3RpdmVzL3NuYWNrYmFyLWxpc3RlbmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUc5RSxNQUFNLE9BQU8sZ0JBQWdCO0lBRDdCO1FBRUUsY0FBYztRQUNKLHdCQUFtQixHQUF3QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hFLGNBQWM7UUFDSixrQkFBYSxHQUF3QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xFLGNBQWM7UUFDSiwwQkFBcUIsR0FBd0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztLQWMzRTtJQWJtRCxxQkFBcUIsQ0FBQyxLQUFZO1FBQ2xGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUMyQyxlQUFlLENBQUMsS0FBWTtRQUN0RSxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBQ21ELHVCQUF1QixDQUFDLEtBQVk7UUFDdEYsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDOzs2R0FuQlUsZ0JBQWdCO2lHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFENUIsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTs4QkFHakMsbUJBQW1CO3NCQUE1QixNQUFNO2dCQUVHLGFBQWE7c0JBQXRCLE1BQU07Z0JBRUcscUJBQXFCO3NCQUE5QixNQUFNO2dCQUMyQyxxQkFBcUI7c0JBQXRFLFlBQVk7dUJBQUMsc0JBQXNCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBR0osZUFBZTtzQkFBMUQsWUFBWTt1QkFBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFLVSx1QkFBdUI7c0JBQTFFLFlBQVk7dUJBQUMsd0JBQXdCLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tzbmFja2Jhckxpc3RlbmVyXScgfSlcclxuZXhwb3J0IGNsYXNzIFNuYWNrYmFyTGlzdGVuZXIge1xyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgQE91dHB1dCgpIG5vdGlmaWNhdGlvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBAT3V0cHV0KCkgYnV0dG9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBPdXRwdXQoKSBub3RpZmljYXRpb25EaXNtaXNzZWQ6IEV2ZW50RW1pdHRlcjxFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQEhvc3RMaXN0ZW5lcignbm90aWZpY2F0aW9uLWNsaWNrZWQnLCBbJyRldmVudCddKSBvbk5vdGlmaWNhdGlvbkNsaWNrZWQoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICB0aGlzLm5vdGlmaWNhdGlvbkNsaWNrZWQuZW1pdChldmVudCk7XHJcbiAgfVxyXG4gIEBIb3N0TGlzdGVuZXIoJ2J1dHRvbi1jbGlja2VkJywgWyckZXZlbnQnXSkgb25CdXR0b25DbGlja2VkKGV2ZW50OiBFdmVudCkge1xyXG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmJ1dHRvbkNsaWNrZWQuZW1pdChldmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBIb3N0TGlzdGVuZXIoJ25vdGlmaWNhdGlvbi1kaXNtaXNzZWQnLCBbJyRldmVudCddKSBvbk5vdGlmaWNhdGlvbkRpc21pc3NlZChldmVudDogRXZlbnQpIHtcclxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25EaXNtaXNzZWQuZW1pdChldmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==