import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, HostListener, Output, EventEmitter } from '@angular/core';
let SnackbarListener = class SnackbarListener {
    constructor() {
        /** @hidden */
        this.notificationClicked = new EventEmitter();
        /** @hidden */
        this.buttonClicked = new EventEmitter();
        /** @hidden */
        this.notificationDismissed = new EventEmitter();
    }
    onNotificationClicked(event) {
        this.notificationClicked.emit(event);
    }
    onButtonClicked(event) {
        if (event instanceof Event) {
            this.buttonClicked.emit(event);
        }
    }
    onNotificationDismissed(event) {
        if (event instanceof Event) {
            this.notificationDismissed.emit(event);
        }
    }
};
SnackbarListener.ɵfac = function SnackbarListener_Factory(t) { return new (t || SnackbarListener)(); };
SnackbarListener.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SnackbarListener, selectors: [["", "snackbarListener", ""]], hostBindings: function SnackbarListener_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("notification-clicked", function SnackbarListener_notification_clicked_HostBindingHandler($event) { return ctx.onNotificationClicked($event); })("button-clicked", function SnackbarListener_button_clicked_HostBindingHandler($event) { return ctx.onButtonClicked($event); })("notification-dismissed", function SnackbarListener_notification_dismissed_HostBindingHandler($event) { return ctx.onNotificationDismissed($event); });
    } }, outputs: { notificationClicked: "notificationClicked", buttonClicked: "buttonClicked", notificationDismissed: "notificationDismissed" } });
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SnackbarListener.prototype, "notificationClicked", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SnackbarListener.prototype, "buttonClicked", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], SnackbarListener.prototype, "notificationDismissed", void 0);
__decorate([
    HostListener('notification-clicked', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], SnackbarListener.prototype, "onNotificationClicked", null);
__decorate([
    HostListener('button-clicked', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], SnackbarListener.prototype, "onButtonClicked", null);
__decorate([
    HostListener('notification-dismissed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], SnackbarListener.prototype, "onNotificationDismissed", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SnackbarListener, [{
        type: Directive,
        args: [{ selector: '[snackbarListener]' }]
    }], function () { return []; }, { notificationClicked: [{
            type: Output
        }], buttonClicked: [{
            type: Output
        }], notificationDismissed: [{
            type: Output
        }], onNotificationClicked: [{
            type: HostListener,
            args: ['notification-clicked', ['$event']]
        }], onButtonClicked: [{
            type: HostListener,
            args: ['button-clicked', ['$event']]
        }], onNotificationDismissed: [{
            type: HostListener,
            args: ['notification-dismissed', ['$event']]
        }] }); })();
export { SnackbarListener };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2tiYXItbGlzdGVuZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1uZy1jb250cm9scy9ub3RpZmljYXRpb24vbGliL2NvbXBvbmVudHMvYXZsLW5vdGlmaWNhdGlvbi1jb250YWluZXIvZGlyZWN0aXZlcy9zbmFja2Jhci1saXN0ZW5lci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHOUUsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7QUFDN0IsSUFEQTtBQUFnQixRQUNkLGNBQWM7QUFDaEIsUUFBWSx3QkFBbUIsR0FBd0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUMxRSxRQUFFLGNBQWM7QUFDaEIsUUFBWSxrQkFBYSxHQUF3QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3BFLFFBQUUsY0FBYztBQUNoQixRQUFZLDBCQUFxQixHQUF3QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzVFLElBYUEsQ0FBQztBQUNELElBZG9ELHFCQUFxQixDQUFDLEtBQVk7QUFDdEYsUUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLElBQUUsQ0FBQztBQUNILElBQThDLGVBQWUsQ0FBQyxLQUFZO0FBQzFFLFFBQUksSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO0FBQ2hDLFlBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQXNELHVCQUF1QixDQUFDLEtBQVk7QUFDMUYsUUFBSSxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7QUFDaEMsWUFBUSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9DLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxDQUFDOzs7O29KQUFBO0FBbEJXO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUUsOEJBQW9CLFlBQVk7QUFBRSw2REFBMkI7QUFFOUQ7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBYyxZQUFZO0FBQUUsdURBQTJCO0FBRXhEO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUUsOEJBQXNCLFlBQVk7QUFBRSwrREFBMkI7QUFDeEI7QUFBYSxJQUE5RCxZQUFZLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUFFO0FBQ2pELHFDQUQ2RSxLQUFLO0FBQ3RGO0FBQ0UsNkRBQUM7QUFDMkM7QUFBYSxJQUF4RCxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUFFO0FBQ3JDLHFDQUQyRCxLQUFLO0FBQzFFO0FBQ1UsdURBRVA7QUFDbUQ7QUFBYSxJQUFoRSxZQUFZLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUFFO0FBQ3JELHFDQURtRixLQUFLO0FBQzFGO0FBQ1UsK0RBRVA7QUFuQlUsZ0JBQWdCLG9CQUQ1QixTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUU7R0FBb0IsRUFBRSxDQUFDLElBQ2pDO0NBQWdCLENBb0I1Qjs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDs7QUF4QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBY0EsQUFBQSxBQWJBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBbEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQW5CQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQW9CQSxBQXBCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbc25hY2tiYXJMaXN0ZW5lcl0nIH0pXHJcbmV4cG9ydCBjbGFzcyBTbmFja2Jhckxpc3RlbmVyIHtcclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBPdXRwdXQoKSBub3RpZmljYXRpb25DbGlja2VkOiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgQE91dHB1dCgpIGJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBAT3V0cHV0KCkgbm90aWZpY2F0aW9uRGlzbWlzc2VkOiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBIb3N0TGlzdGVuZXIoJ25vdGlmaWNhdGlvbi1jbGlja2VkJywgWyckZXZlbnQnXSkgb25Ob3RpZmljYXRpb25DbGlja2VkKGV2ZW50OiBFdmVudCkge1xyXG4gICAgdGhpcy5ub3RpZmljYXRpb25DbGlja2VkLmVtaXQoZXZlbnQpO1xyXG4gIH1cclxuICBASG9zdExpc3RlbmVyKCdidXR0b24tY2xpY2tlZCcsIFsnJGV2ZW50J10pIG9uQnV0dG9uQ2xpY2tlZChldmVudDogRXZlbnQpIHtcclxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5idXR0b25DbGlja2VkLmVtaXQoZXZlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBASG9zdExpc3RlbmVyKCdub3RpZmljYXRpb24tZGlzbWlzc2VkJywgWyckZXZlbnQnXSkgb25Ob3RpZmljYXRpb25EaXNtaXNzZWQoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBFdmVudCkge1xyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uRGlzbWlzc2VkLmVtaXQoZXZlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=