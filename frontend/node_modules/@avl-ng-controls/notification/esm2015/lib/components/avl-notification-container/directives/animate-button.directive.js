import { Directive, Input, HostBinding } from '@angular/core';
import { MARGIN } from '../avl-notification-container.consts';
import * as i0 from "@angular/core";
export class AnimateButton {
    constructor() {
        this.getInfoHeight = () => {
            return this.infoStackHeight > this.infoStackIndicatorHeight
                ? this.infoStackHeight
                : this.infoStackIndicatorHeight;
        };
        this.getWarningHeight = () => {
            return this.warningStackHeight > this.warningStackIndicatorHeight
                ? this.warningStackHeight
                : this.warningStackIndicatorHeight;
        };
        this.getOffsetHeight = (height) => {
            return height ? height + MARGIN * 2 : 0;
        };
    }
    ngOnChanges(changes) {
        const infoStackOffsetHeight = this.getOffsetHeight(this.getInfoHeight());
        const warningStackOffsetHeight = this.getOffsetHeight(this.getWarningHeight());
        this.styleTop = infoStackOffsetHeight + warningStackOffsetHeight + 'px';
    }
}
AnimateButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AnimateButton, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AnimateButton.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: AnimateButton, selector: "[animateButton]", inputs: { increment: "increment", infoStackHeight: "infoStackHeight", warningStackHeight: "warningStackHeight", infoStackIndicatorHeight: "infoStackIndicatorHeight", warningStackIndicatorHeight: "warningStackIndicatorHeight" }, host: { properties: { "style.top": "this.styleTop" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AnimateButton, decorators: [{
            type: Directive,
            args: [{ selector: '[animateButton]' }]
        }], ctorParameters: function () { return []; }, propDecorators: { increment: [{
                type: Input
            }], infoStackHeight: [{
                type: Input
            }], warningStackHeight: [{
                type: Input
            }], infoStackIndicatorHeight: [{
                type: Input
            }], warningStackIndicatorHeight: [{
                type: Input
            }], styleTop: [{
                type: HostBinding,
                args: ['style.top']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0ZS1idXR0b24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbm90aWZpY2F0aW9uL3NyYy9saWIvY29tcG9uZW50cy9hdmwtbm90aWZpY2F0aW9uLWNvbnRhaW5lci9kaXJlY3RpdmVzL2FuaW1hdGUtYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFHOUQsTUFBTSxPQUFPLGFBQWE7SUFleEI7UUFNUSxrQkFBYSxHQUFHLEdBQVcsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLHdCQUF3QjtnQkFDekQsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlO2dCQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDO1FBQ3BDLENBQUMsQ0FBQztRQUNNLHFCQUFnQixHQUFHLEdBQVcsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsMkJBQTJCO2dCQUMvRCxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQjtnQkFDekIsQ0FBQyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQztRQUN2QyxDQUFDLENBQUM7UUFFTSxvQkFBZSxHQUFHLENBQUMsTUFBYyxFQUFVLEVBQUU7WUFDbkQsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDO0lBbkJhLENBQUM7SUFDaEIsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUN6RSxNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixHQUFHLHdCQUF3QixHQUFHLElBQUksQ0FBQztJQUMxRSxDQUFDOzswR0FwQlUsYUFBYTs4RkFBYixhQUFhOzJGQUFiLGFBQWE7a0JBRHpCLFNBQVM7bUJBQUMsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7MEVBRy9CLFNBQVM7c0JBQWpCLEtBQUs7Z0JBR0csZUFBZTtzQkFBdkIsS0FBSztnQkFFRyxrQkFBa0I7c0JBQTFCLEtBQUs7Z0JBRUcsd0JBQXdCO3NCQUFoQyxLQUFLO2dCQUVHLDJCQUEyQjtzQkFBbkMsS0FBSztnQkFFb0IsUUFBUTtzQkFBakMsV0FBVzt1QkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSG9zdEJpbmRpbmcsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNQVJHSU4gfSBmcm9tICcuLi9hdmwtbm90aWZpY2F0aW9uLWNvbnRhaW5lci5jb25zdHMnO1xyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2FuaW1hdGVCdXR0b25dJyB9KVxyXG5leHBvcnQgY2xhc3MgQW5pbWF0ZUJ1dHRvbiBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSBpbmNyZW1lbnQ6IG51bWJlcjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSBpbmZvU3RhY2tIZWlnaHQ6IG51bWJlcjtcclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBJbnB1dCgpIHdhcm5pbmdTdGFja0hlaWdodDogbnVtYmVyO1xyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgQElucHV0KCkgaW5mb1N0YWNrSW5kaWNhdG9ySGVpZ2h0OiBudW1iZXI7XHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASW5wdXQoKSB3YXJuaW5nU3RhY2tJbmRpY2F0b3JIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS50b3AnKSBzdHlsZVRvcDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5mb1N0YWNrT2Zmc2V0SGVpZ2h0ID0gdGhpcy5nZXRPZmZzZXRIZWlnaHQodGhpcy5nZXRJbmZvSGVpZ2h0KCkpO1xyXG4gICAgY29uc3Qgd2FybmluZ1N0YWNrT2Zmc2V0SGVpZ2h0ID0gdGhpcy5nZXRPZmZzZXRIZWlnaHQodGhpcy5nZXRXYXJuaW5nSGVpZ2h0KCkpO1xyXG4gICAgdGhpcy5zdHlsZVRvcCA9IGluZm9TdGFja09mZnNldEhlaWdodCArIHdhcm5pbmdTdGFja09mZnNldEhlaWdodCArICdweCc7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0SW5mb0hlaWdodCA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5mb1N0YWNrSGVpZ2h0ID4gdGhpcy5pbmZvU3RhY2tJbmRpY2F0b3JIZWlnaHRcclxuICAgICAgPyB0aGlzLmluZm9TdGFja0hlaWdodFxyXG4gICAgICA6IHRoaXMuaW5mb1N0YWNrSW5kaWNhdG9ySGVpZ2h0O1xyXG4gIH07XHJcbiAgcHJpdmF0ZSBnZXRXYXJuaW5nSGVpZ2h0ID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy53YXJuaW5nU3RhY2tIZWlnaHQgPiB0aGlzLndhcm5pbmdTdGFja0luZGljYXRvckhlaWdodFxyXG4gICAgICA/IHRoaXMud2FybmluZ1N0YWNrSGVpZ2h0XHJcbiAgICAgIDogdGhpcy53YXJuaW5nU3RhY2tJbmRpY2F0b3JIZWlnaHQ7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBnZXRPZmZzZXRIZWlnaHQgPSAoaGVpZ2h0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gICAgcmV0dXJuIGhlaWdodCA/IGhlaWdodCArIE1BUkdJTiAqIDIgOiAwO1xyXG4gIH07XHJcbn1cclxuIl19