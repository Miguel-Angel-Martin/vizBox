var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, OnInit, ChangeDetectorRef, AfterViewChecked } from '@angular/core';
import '@avl-controls/datatable/dist/avl-datatable/avl-datatable';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';
import '@avl-controls/core/dist/avl-checkbox/avl-checkbox';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-date/avl-date';
import { DEFAULT_COLUMN_DEFINITIONS, DEFAULT_FILTERS, DEFAULT_PAGE_SIZE_OPTIONS, TYPE_ICON_STYLE_MAPPINGS, TYPE_ICON_MAPPINGS, STATE_ICON_MAPPINGS, NOTIFICATION_TYPE_MAPPINGS, DEFAULT_ICON_STYLE } from './avl-notification-dialog.consts';
import { NgForm } from '@angular/forms';
let AvlNotificationDialogComponent = class AvlNotificationDialogComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.open = false;
        this.pageSizeOptions = DEFAULT_PAGE_SIZE_OPTIONS;
        this.columnDefinitions = DEFAULT_COLUMN_DEFINITIONS;
        this.openChange = new EventEmitter();
        this.markSelectedAsRead = new EventEmitter();
        this.markSelectedAsUnread = new EventEmitter();
        this.tableData = [];
        this.filteredData = [];
        this.badge = false;
        this.disableMarkingSelected = true;
        this.filters = this.deepCopyObject(DEFAULT_FILTERS);
        this.filtersOpen = true;
        this.showRefreshButton = false;
        this.dateFromLabel = 'Date from';
        this.dateToLabel = 'Date to';
        this.dateFilterGroupInitHeader = 'Date';
        this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
        //notification datatable options
        this.selectedRows = [];
        this.pageSize = 15;
        this.appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);
        this._notifications = [];
    }
    get notifications() {
        return this._notifications;
    }
    set notifications(notifications) {
        if (this._notifications.length === notifications.length) {
            return;
        }
        this.showRefreshButton = true;
        this._notifications = notifications;
    }
    ngOnInit() {
        this.translateLabels();
        this.refreshTable();
    }
    ngAfterViewChecked() {
        this.cdRef.detectChanges();
    }
    /** Emits event when dialog opens or closes */
    openChanged(open) {
        this.openChange.emit(open);
    }
    /** Toggles displaying of filter sheet */
    toggleFilters() {
        this.filtersOpen = !this.filtersOpen;
    }
    /** Refreshes the datatable when refresh button is clicked */
    refreshTable() {
        this.showRefreshButton = false;
        this.tableData = this.prepareNotifications(this._notifications);
        this.filters = this.deepCopyObject(this.appliedFilters);
        this.filterData();
    }
    /**
     * Invoked when clicking apply button - filters data by given filters.
     */
    applyFilters() {
        this.appliedFilters = this.deepCopyObject(this.filters);
        this.filterData();
    }
    /** Filters notifications according to applied filters */
    filterData() {
        this.filteredData = [];
        const filters = this.getActiveFilters();
        for (const element of this.tableData) {
            if (this.doesElementPassEveryFilter(filters, element)) {
                this.filteredData.push(element);
            }
        }
    }
    /** Changes selected notification state to read */
    markAsRead() {
        this.updateStateOfSelectedRowsTo(true);
        this.markSelectedAsRead.emit(this.selectedRows);
    }
    /** Changes selected notification state to unread */
    markAsUnread() {
        this.updateStateOfSelectedRowsTo(false);
        this.markSelectedAsUnread.emit(this.selectedRows);
    }
    /**
     * Resets all filters.
     */
    reset() {
        this.filters = this.deepCopyObject(DEFAULT_FILTERS);
        this.appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);
        this.filterData();
        this.updateLabels();
        this.badge = false;
    }
    /** Calculates active filters from filter object */
    getActiveFilters() {
        this.badge = false;
        const setFilters = {};
        // Mapping applied filters object to better format used for filtering, 
        // creates arrays from objects
        for (const item of Object.keys(this.appliedFilters)) {
            const secondLevelFilter = [];
            for (const filter of Object.keys(this.appliedFilters[item])) {
                if (this.appliedFilters[item][filter] === true) {
                    secondLevelFilter.push(filter);
                    this.badge = true;
                }
            }
            if (secondLevelFilter.length) {
                setFilters[item] = secondLevelFilter;
            }
            if (item === 'date') {
                setFilters[item] = [
                    this.appliedFilters[item]['dateFromValue'],
                    this.appliedFilters[item]['dateToValue']
                ];
            }
        }
        return setFilters;
    }
    /** Called when selection is applied to the table rows */
    selectedValuesChanged() {
        this.disableMarkingSelected = false;
        if (this.selectedRows.length == 0) {
            this.disableMarkingSelected = true;
        }
    }
    /** Updates date filter header labels when date changes */
    updateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            const translationService = AvlLocalizationService.translationService;
            const { dateFromValue, dateToValue } = this.filters.date;
            if (!dateFromValue && !dateToValue) {
                this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            }
            else {
                this.dateFilterGroupHeader = yield translationService.translate('VizBox.NotificationDialog.DateRange', {
                    dateFrom: this.formatDateTime(dateFromValue),
                    dateTo: this.formatDateTime(dateToValue)
                });
            }
        });
    }
    /** Calculates number of notifications with specific type */
    getNumberOfNotificationsWithType(data, type) {
        return data.filter(element => NOTIFICATION_TYPE_MAPPINGS[element.type] === type).length;
    }
    /** Calculates number of unread notifications */
    getNumberOfUnreadNotifications(data) {
        return data.filter(element => !element.state).length;
    }
    /** Calculates number of notifications currently displayed in datatable */
    getNumberOfNotifications() {
        if (this.filteredData.length === this.tableData.length && !this.badge) {
            return this.filteredData.length.toString();
        }
        else {
            return `${this.filteredData.length}/${this.tableData.length}`;
        }
    }
    /** Opens link in new tab when table row is clicked */
    onRowClicked(event) {
        const row = event.detail;
        if (row.link) {
            window.open(row.link, '_blank');
        }
    }
    /** Maps general avl notification list to table specific list */
    prepareNotifications(notifications) {
        return notifications.map(notification => (Object.assign(Object.assign({}, notification), { icon: TYPE_ICON_MAPPINGS[notification.type], iconStyle: TYPE_ICON_STYLE_MAPPINGS[notification.type], currentIconToggle: STATE_ICON_MAPPINGS[String(notification.read)], currentIconToggleStyle: DEFAULT_ICON_STYLE, state: notification.read })));
    }
    /** Formats date time to date-short */
    formatDateTime(d) {
        return d ? AvlLocalizationService.formatDateTime(d, { format: 'date-short' }) : '(-)';
    }
    /** Deep copy of filters object */
    deepCopyObject(object) {
        const copiedObject = {};
        Object.keys(object).forEach(key => {
            copiedObject[key] = Object.assign({}, object[key]);
        });
        return copiedObject;
    }
    /** Determines if element satisfies filter for every key in this.apppliedFilters */
    doesElementPassEveryFilter(activeFilters, element) {
        return Object.keys(activeFilters).every(key => {
            if (key === 'date') {
                const [dateFrom, dateTo] = this.prepareDates(activeFilters[key]);
                // If dates not set, filter this element as well
                if (!dateFrom.getTime() && !dateTo.getTime()) {
                    return true;
                }
                this.badge = true;
                // If timestamp is not a Date, don't filter this element
                const timestamp = new Date(element.timestamp);
                if (!timestamp.getTime()) {
                    return false;
                }
                return this.compareDates(timestamp, dateFrom, dateTo);
            }
            return activeFilters[key].includes(NOTIFICATION_TYPE_MAPPINGS[element[key]]);
        });
    }
    prepareDates(dates) {
        const dateFrom = new Date(dates[0]);
        const dateTo = new Date(dates[1]);
        dateFrom.setHours(0, 0, 0, 0);
        dateTo.setHours(23, 59, 59, 999);
        return [dateFrom, dateTo];
    }
    compareDates(timestamp, from, to) {
        const ts = timestamp.getTime();
        const fromTs = from === null || from === void 0 ? void 0 : from.getTime();
        const toTs = to === null || to === void 0 ? void 0 : to.getTime();
        if (fromTs && toTs) {
            return ts >= fromTs && ts <= toTs;
        }
        else if (fromTs) {
            return ts >= fromTs;
        }
        else if (toTs) {
            return ts <= toTs;
        }
        return false;
    }
    updateStateOfSelectedRowsTo(state) {
        this.tableData
            .filter(notification => this.isRowSelected(notification.id))
            .forEach(notification => {
            notification.state = state;
            notification.currentIconToggle = STATE_ICON_MAPPINGS[String(state)];
        });
        this.tableData = [...this.tableData];
        this.filterData();
    }
    isRowSelected(id) {
        return this.selectedRows.map(row => row.id).includes(id);
    }
    // Translations
    translateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                return;
            }
            const translationService = AvlLocalizationService.translationService;
            this.dateFilterGroupInitHeader = yield translationService.translate('VizBox.NotificationDialog.Date');
            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            this.dateFromLabel = yield translationService.translate('VizBox.NotificationDialog.DateFrom');
            this.dateToLabel = yield translationService.translate('VizBox.NotificationDialog.DateTo');
            this.pageSizeOptions = yield this.translatePageSizeOptions(this.pageSizeOptions);
            this.columnDefinitions = yield this.translateColumns(this.columnDefinitions);
        });
    }
    translatePageSizeOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.all(options.map((option) => __awaiter(this, void 0, void 0, function* () { return yield this.translatePageSizeOption(option); })));
        });
    }
    translatePageSizeOption(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translationService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { label: item.value === Number.MAX_SAFE_INTEGER
                    ? yield translationService.translate('VizBox.NotificationDialog.ShowAll')
                    : yield translationService.translate('VizBox.NotificationDialog.ShowXPerPage', {
                        rows: item.value
                    }) });
        });
    }
    translateColumns(column) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.all(column.map((item) => __awaiter(this, void 0, void 0, function* () { return yield this.translateColumnItem(item); })));
        });
    }
    translateColumnItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translateService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { caption: yield translateService.translate(item.caption) });
        });
    }
};
AvlNotificationDialogComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AvlNotificationDialogComponent.prototype, "open", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AvlNotificationDialogComponent.prototype, "pageSizeOptions", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AvlNotificationDialogComponent.prototype, "columnDefinitions", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], AvlNotificationDialogComponent.prototype, "notifications", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlNotificationDialogComponent.prototype, "openChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlNotificationDialogComponent.prototype, "markSelectedAsRead", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlNotificationDialogComponent.prototype, "markSelectedAsUnread", void 0);
__decorate([
    ViewChild('notificationTable'),
    __metadata("design:type", ElementRef)
], AvlNotificationDialogComponent.prototype, "table", void 0);
__decorate([
    ViewChild('filterForm', { read: NgForm }),
    __metadata("design:type", NgForm)
], AvlNotificationDialogComponent.prototype, "filterForm", void 0);
AvlNotificationDialogComponent = __decorate([
    Component({
        selector: 'avl-notification-dialog',
        template: "<avl-dialog\r\n  id=\"outerDialog\"\r\n  [open]=\"open\"\r\n  (openChange)=\"openChanged($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"true\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>{{ 'VizBox.NotificationDialog.Details' | translate }}</avl-dialog-header>\r\n    <avl-dialog-content>\r\n      <div class=\"main-container\">\r\n        <div class=\"content\">\r\n          <div class=\"table-header\">\r\n            <h1>\r\n              {{ 'VizBox.NotificationDialog.Notifications' | translate }} ({{\r\n                getNumberOfNotifications()\r\n              }})\r\n            </h1>\r\n            <div class=\"table-header-right\">\r\n              <avl-icon-button\r\n                *ngIf=\"showRefreshButton\"\r\n                id=\"updateIcon\"\r\n                (click)=\"refreshTable()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:refresh\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip *ngIf=\"showRefreshButton\" for=\"updateIcon\"\r\n                > {{ 'VizBox.NotificationDialog.Refresh' | translate }}</avl-tooltip\r\n              >\r\n              <avl-icon-button\r\n                id=\"unreadIcon\"\r\n                (click)=\"markAsUnread()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:mail\"\r\n                [disabled]=\"disableMarkingSelected\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"unreadIcon\">{{\r\n                'VizBox.NotificationDialog.MarkSelectedAsUnread' | translate\r\n              }}</avl-tooltip>\r\n              <avl-icon-button\r\n                id=\"readIcon\"\r\n                class=\"pointer\"\r\n                (click)=\"markAsRead()\"\r\n                icon=\"communication:mail-outline\"\r\n                [disabled]=\"disableMarkingSelected\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"readIcon\">{{\r\n                'VizBox.NotificationDialog.MarkSelectedAsRead' | translate\r\n              }}</avl-tooltip>\r\n              <avl-icon-button\r\n                (click)=\"toggleFilters()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:filter-list\"\r\n                [badge]=\"badge\"\r\n              ></avl-icon-button>\r\n            </div>\r\n          </div>\r\n          <avl-datatable\r\n            #notificationTable\r\n            class=\"filterDatatable\"\r\n            multi-select\r\n            allow-active-row\r\n            pagination\r\n            [columnDefinitions]=\"columnDefinitions\"\r\n            [data]=\"filteredData\"\r\n            [pageSize]=\"pageSize\"\r\n            [pageSizeOptions]=\"pageSizeOptions\"\r\n            [(selectedValues)]=\"selectedRows\"\r\n            (selectedValuesChange)=\"selectedValuesChanged()\"\r\n            (on-row-clicked)=\"onRowClicked($event)\"\r\n          >\r\n          </avl-datatable>\r\n        </div>\r\n        <avl-side-sheet class=\"filter-sheet\" divider [(open)]=\"filtersOpen\" #filterSheet>\r\n          <div slot=\"title\">\r\n            <h2>{{ 'VizBox.NotificationDialog.Filters' | translate }}</h2>\r\n          </div>\r\n          <div slot=\"content\">\r\n            <form #filterForm=\"ngForm\">\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3>{{ 'VizBox.NotificationDialog.Type' | translate }}</h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div>\r\n                    <avl-checkbox name=\"warningSwitch\" [(ngModel)]=\"filters.type.warning\">\r\n                      {{ 'VizBox.NotificationDialog.Warning' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'warning') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"warningIcon\" class=\"typeIcons\" icon=\"icons:warning\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"errorSwitch\" [(ngModel)]=\"filters.type.error\">\r\n                      {{ 'VizBox.NotificationDialog.Error' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'error') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"errorIcon\" class=\"typeIcons\" icon=\"icons:cancel\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"infoSwitch\" [(ngModel)]=\"filters.type.info\">\r\n                      {{ 'VizBox.NotificationDialog.Info' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'info') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"infoIcon\" class=\"typeIcons\" icon=\"icons:info-outline\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"okSwitch\" [(ngModel)]=\"filters.type.ok\">\r\n                      {{ 'VizBox.NotificationDialog.Ok' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'ok') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"okIcon\" class=\"typeIcons\" icon=\"icons:check\"></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3>{{ 'VizBox.NotificationDialog.State' | translate }}</h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <avl-checkbox name=\"unreadState\" [(ngModel)]=\"filters.state.unread\">\r\n                    {{ 'VizBox.NotificationDialog.Unread' | translate }} ({{\r\n                      getNumberOfUnreadNotifications(tableData)\r\n                    }})\r\n                  </avl-checkbox>\r\n                  <avl-icon id=\"infoIcon\" class=\"typeIcons\" icon=\"icons:mail\"></avl-icon>\r\n                  <avl-checkbox name=\"readState\" [(ngModel)]=\"filters.state.read\">\r\n                    {{ 'VizBox.NotificationDialog.Read' | translate }} ({{\r\n                      tableData.length - getNumberOfUnreadNotifications(tableData)\r\n                    }})\r\n                  </avl-checkbox>\r\n                  <avl-icon\r\n                    id=\"infoIcon\"\r\n                    class=\"typeIcons\"\r\n                    icon=\"communication:mail-outline\"\r\n                  ></avl-icon>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3 id=\"date-group\" #dateGroup>\r\n                    {{ dateFilterGroupHeader }}\r\n                  </h3>\r\n                  <avl-tooltip for=\"date-group\" *ngIf=\"dateGroup.scrollWidth > dateGroup.clientWidth\">\r\n                    {{ dateFilterGroupHeader }}\r\n                  </avl-tooltip>\r\n                </div>\r\n                <div role=\"content\">\r\n                  <avl-date\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date.dateFromValue\"\r\n                    name=\"dateFromValue\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"dateFromLabel\"\r\n                  ></avl-date>\r\n                  <avl-date\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date.dateToValue\"\r\n                    name=\"dateTo\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"dateToLabel\"\r\n                  ></avl-date>\r\n                </div>\r\n              </avl-list-expander>\r\n            </form>\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <avl-button contained (click)=\"applyFilters()\">{{\r\n              'VizBox.NotificationDialog.Apply' | translate\r\n            }}</avl-button>\r\n            <avl-button (click)=\"reset()\">{{\r\n              'VizBox.NotificationDialog.Reset' | translate\r\n            }}</avl-button>\r\n          </div>\r\n        </avl-side-sheet>\r\n      </div>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n",
        styles: [".content{position:relative;display:flex;flex-direction:column;flex-grow:1}.table-header{display:flex;justify-content:space-between;align-items:center}.main-container{display:flex;height:100%}.main-container.hidden{display:none}.filterDatatable{height:100%}.filter-sheet{--avl-side-sheet-padding:0px;--avl-side-sheet-height:84vh;width:300px}.filter-sheet h2{font-size:20px;margin-left:24px}.filter-sheet h3{font-size:16px;margin:0;text-overflow:ellipsis;overflow:hidden}.pointer{cursor:pointer}#errorIcon{--avl-icon-custom-color:var(--avl-error-color)}#warningIcon{--avl-icon-custom-color:var(--avl-warning-color)}#okIcon{--avl-icon-custom-color:var(--avl-ok-color)}#infoIcon{--avl-icon-custom-color:var(--avl-icon-default-color)}.filterContent{position:relative}.typeIcons{position:absolute;right:0;margin-top:12px;margin-bottom:12px}.date-control{width:100%}avl-dialog-content{--padding-top:1px!important;--padding-right:0px!important;--padding-bottom:2px!important}avl-dialog-header{z-index:1}avl-side-sheet{--avl-side-sheet-height:unset!important;box-shadow:none;border-left:1px solid var(--avl-divider-color)}avl-datatable{--margin-top-pages:0px!important}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], AvlNotificationDialogComponent);
export { AvlNotificationDialogComponent };
//# sourceMappingURL=data:application/json;base64,