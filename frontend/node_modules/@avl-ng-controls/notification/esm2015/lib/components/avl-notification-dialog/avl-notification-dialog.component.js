import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@avl-ng-controls/dialog';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@avl-controls/ng-binders';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@avl-ng-controls/navigation';
import * as ɵngcc6 from '@ngx-translate/core';

const _c0 = ["notificationTable"];
const _c1 = ["filterForm"];
function AvlNotificationDialogComponent_ng_template_1_avl_icon_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "avl-icon-button", 45);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_avl_icon_button_11_Template_avl_icon_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.refreshTable(); });
    ɵngcc0.ɵɵelementEnd();
} }
function AvlNotificationDialogComponent_ng_template_1_avl_tooltip_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "avl-tooltip", 46);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "VizBox.NotificationDialog.Refresh"), "");
} }
function AvlNotificationDialogComponent_ng_template_1_span_43_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r7.getNumberOfNotificationsWithType(ctx_r7.tableData, "warning"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_span_49_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r8.getNumberOfNotificationsWithType(ctx_r8.tableData, "error"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_span_55_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r9.getNumberOfNotificationsWithType(ctx_r9.tableData, "info"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_span_61_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r10.getNumberOfNotificationsWithType(ctx_r10.tableData, "ok"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_avl_tooltip_82_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "avl-tooltip", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r12.dateFilterGroupHeader, " ");
} }
function AvlNotificationDialogComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "avl-dialog-header");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "avl-dialog-content");
    ɵngcc0.ɵɵelementStart(4, "div", 2);
    ɵngcc0.ɵɵelementStart(5, "div", 3);
    ɵngcc0.ɵɵelementStart(6, "div", 4);
    ɵngcc0.ɵɵelementStart(7, "h1");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 5);
    ɵngcc0.ɵɵtemplate(11, AvlNotificationDialogComponent_ng_template_1_avl_icon_button_11_Template, 1, 0, "avl-icon-button", 6);
    ɵngcc0.ɵɵtemplate(12, AvlNotificationDialogComponent_ng_template_1_avl_tooltip_12_Template, 3, 3, "avl-tooltip", 7);
    ɵngcc0.ɵɵelementStart(13, "avl-icon-button", 8);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_icon_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.markAsUnread(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "avl-tooltip", 9);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "avl-icon-button", 10);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_icon_button_click_17_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.markAsRead(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "avl-tooltip", 11);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "avl-icon-button", 12);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_icon_button_click_21_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.toggleFilters(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(22, "avl-datatable", 13, 14);
    ɵngcc0.ɵɵlistener("selectedValuesChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_datatable_selectedValuesChange_22_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.selectedRows = $event; })("selectedValuesChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_datatable_selectedValuesChange_22_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.selectedValuesChanged(); })("on-row-clicked", function AvlNotificationDialogComponent_ng_template_1_Template_avl_datatable_on_row_clicked_22_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onRowClicked($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "avl-side-sheet", 15, 16);
    ɵngcc0.ɵɵlistener("openChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_side_sheet_openChange_24_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.filtersOpen = $event; });
    ɵngcc0.ɵɵelementStart(26, "div", 17);
    ɵngcc0.ɵɵelementStart(27, "h2");
    ɵngcc0.ɵɵtext(28);
    ɵngcc0.ɵɵpipe(29, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(30, "div", 18);
    ɵngcc0.ɵɵelementStart(31, "form", null, 19);
    ɵngcc0.ɵɵelementStart(33, "avl-list-expander", 20);
    ɵngcc0.ɵɵelementStart(34, "div", 21);
    ɵngcc0.ɵɵelementStart(35, "h3");
    ɵngcc0.ɵɵtext(36);
    ɵngcc0.ɵɵpipe(37, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(38, "div", 22);
    ɵngcc0.ɵɵelementStart(39, "div");
    ɵngcc0.ɵɵelementStart(40, "avl-checkbox", 23);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_40_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.filters.type.warning = $event; });
    ɵngcc0.ɵɵtext(41);
    ɵngcc0.ɵɵpipe(42, "translate");
    ɵngcc0.ɵɵtemplate(43, AvlNotificationDialogComponent_ng_template_1_span_43_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(44, "avl-icon", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(45, "div");
    ɵngcc0.ɵɵelementStart(46, "avl-checkbox", 26);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_46_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.filters.type.error = $event; });
    ɵngcc0.ɵɵtext(47);
    ɵngcc0.ɵɵpipe(48, "translate");
    ɵngcc0.ɵɵtemplate(49, AvlNotificationDialogComponent_ng_template_1_span_49_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(50, "avl-icon", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(51, "div");
    ɵngcc0.ɵɵelementStart(52, "avl-checkbox", 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_52_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.filters.type.info = $event; });
    ɵngcc0.ɵɵtext(53);
    ɵngcc0.ɵɵpipe(54, "translate");
    ɵngcc0.ɵɵtemplate(55, AvlNotificationDialogComponent_ng_template_1_span_55_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(56, "avl-icon", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(57, "div");
    ɵngcc0.ɵɵelementStart(58, "avl-checkbox", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_58_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.filters.type.ok = $event; });
    ɵngcc0.ɵɵtext(59);
    ɵngcc0.ɵɵpipe(60, "translate");
    ɵngcc0.ɵɵtemplate(61, AvlNotificationDialogComponent_ng_template_1_span_61_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(62, "avl-icon", 31);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(63, "avl-list-expander", 20);
    ɵngcc0.ɵɵelementStart(64, "div", 21);
    ɵngcc0.ɵɵelementStart(65, "h3");
    ɵngcc0.ɵɵtext(66);
    ɵngcc0.ɵɵpipe(67, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(68, "div", 22);
    ɵngcc0.ɵɵelementStart(69, "avl-checkbox", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_69_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.filters.state.unread = $event; });
    ɵngcc0.ɵɵtext(70);
    ɵngcc0.ɵɵpipe(71, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(72, "avl-icon", 33);
    ɵngcc0.ɵɵelementStart(73, "avl-checkbox", 34);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_73_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.filters.state.read = $event; });
    ɵngcc0.ɵɵtext(74);
    ɵngcc0.ɵɵpipe(75, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(76, "avl-icon", 35);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(77, "avl-list-expander", 20);
    ɵngcc0.ɵɵelementStart(78, "div", 21);
    ɵngcc0.ɵɵelementStart(79, "h3", 36, 37);
    ɵngcc0.ɵɵtext(81);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(82, AvlNotificationDialogComponent_ng_template_1_avl_tooltip_82_Template, 2, 1, "avl-tooltip", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(83, "div", 39);
    ɵngcc0.ɵɵelementStart(84, "avl-date", 40);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_ngModelChange_84_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.filters.date.dateFromValue = $event; })("valueChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_valueChange_84_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.updateLabels(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(85, "avl-date", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_ngModelChange_85_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.filters.date.dateToValue = $event; })("valueChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_valueChange_85_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.updateLabels(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(86, "div", 42);
    ɵngcc0.ɵɵelementStart(87, "avl-button", 43);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_button_click_87_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.applyFilters(); });
    ɵngcc0.ɵɵtext(88);
    ɵngcc0.ɵɵpipe(89, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(90, "avl-button", 44);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_button_click_90_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.reset(); });
    ɵngcc0.ɵɵtext(91);
    ɵngcc0.ɵɵpipe(92, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r11 = ɵngcc0.ɵɵreference(80);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 48, "VizBox.NotificationDialog.Details"));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(9, 50, "VizBox.NotificationDialog.Notifications"), " (", ctx_r1.getNumberOfNotifications(), ") ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showRefreshButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showRefreshButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.disableMarkingSelected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(16, 52, "VizBox.NotificationDialog.MarkSelectedAsUnread"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.disableMarkingSelected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 54, "VizBox.NotificationDialog.MarkSelectedAsRead"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("badge", ctx_r1.badge);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("columnDefinitions", ctx_r1.columnDefinitions)("data", ctx_r1.filteredData)("pageSize", ctx_r1.pageSize)("pageSizeOptions", ctx_r1.pageSizeOptions)("selectedValues", ctx_r1.selectedRows);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("open", ctx_r1.filtersOpen);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(29, 56, "VizBox.NotificationDialog.Filters"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("narrow", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(37, 58, "VizBox.NotificationDialog.Type"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.warning);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(42, 60, "VizBox.NotificationDialog.Warning"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.error);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(48, 62, "VizBox.NotificationDialog.Error"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.info);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(54, 64, "VizBox.NotificationDialog.Info"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.ok);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(60, 66, "VizBox.NotificationDialog.Ok"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("narrow", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(67, 68, "VizBox.NotificationDialog.State"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.state.unread);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(71, 70, "VizBox.NotificationDialog.Unread"), " (", ctx_r1.getNumberOfUnreadNotifications(ctx_r1.tableData), ") ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.state.read);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(75, 72, "VizBox.NotificationDialog.Read"), " (", ctx_r1.tableData.length - ctx_r1.getNumberOfUnreadNotifications(ctx_r1.tableData), ") ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("narrow", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.dateFilterGroupHeader, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r11.scrollWidth > _r11.clientWidth);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.date.dateFromValue)("label", ctx_r1.dateFromLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.date.dateToValue)("label", ctx_r1.dateToLabel);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(89, 74, "VizBox.NotificationDialog.Apply"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(92, 76, "VizBox.NotificationDialog.Reset"));
} }
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, OnInit, ChangeDetectorRef, AfterViewChecked } from '@angular/core';
import '@avl-controls/datatable/dist/avl-datatable/avl-datatable';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';
import '@avl-controls/core/dist/avl-checkbox/avl-checkbox';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-date/avl-date';
import { DEFAULT_COLUMN_DEFINITIONS, DEFAULT_FILTERS, DEFAULT_PAGE_SIZE_OPTIONS, TYPE_ICON_STYLE_MAPPINGS, TYPE_ICON_MAPPINGS, STATE_ICON_MAPPINGS, NOTIFICATION_TYPE_MAPPINGS, DEFAULT_ICON_STYLE } from './avl-notification-dialog.consts';
import { NgForm } from '@angular/forms';
let AvlNotificationDialogComponent = class AvlNotificationDialogComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.open = false;
        this.pageSizeOptions = DEFAULT_PAGE_SIZE_OPTIONS;
        this.columnDefinitions = DEFAULT_COLUMN_DEFINITIONS;
        this.openChange = new EventEmitter();
        this.markSelectedAsRead = new EventEmitter();
        this.markSelectedAsUnread = new EventEmitter();
        this.tableData = [];
        this.filteredData = [];
        this.badge = false;
        this.disableMarkingSelected = true;
        this.filters = this.deepCopyObject(DEFAULT_FILTERS);
        this.filtersOpen = true;
        this.showRefreshButton = false;
        this.dateFromLabel = 'Date from';
        this.dateToLabel = 'Date to';
        this.dateFilterGroupInitHeader = 'Date';
        this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
        //notification datatable options
        this.selectedRows = [];
        this.pageSize = 15;
        this.appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);
        this._notifications = [];
    }
    get notifications() {
        return this._notifications;
    }
    set notifications(notifications) {
        if (this._notifications.length === notifications.length) {
            return;
        }
        this.showRefreshButton = true;
        this._notifications = notifications;
    }
    ngOnInit() {
        this.translateLabels();
        this.refreshTable();
    }
    ngAfterViewChecked() {
        this.cdRef.detectChanges();
    }
    /** Emits event when dialog opens or closes */
    openChanged(open) {
        this.openChange.emit(open);
    }
    /** Toggles displaying of filter sheet */
    toggleFilters() {
        this.filtersOpen = !this.filtersOpen;
    }
    /** Refreshes the datatable when refresh button is clicked */
    refreshTable() {
        this.showRefreshButton = false;
        this.tableData = this.prepareNotifications(this._notifications);
        this.filters = this.deepCopyObject(this.appliedFilters);
        this.filterData();
    }
    /**
     * Invoked when clicking apply button - filters data by given filters.
     */
    applyFilters() {
        this.appliedFilters = this.deepCopyObject(this.filters);
        this.filterData();
    }
    /** Filters notifications according to applied filters */
    filterData() {
        this.filteredData = [];
        const filters = this.getActiveFilters();
        for (const element of this.tableData) {
            if (this.doesElementPassEveryFilter(filters, element)) {
                this.filteredData.push(element);
            }
        }
    }
    /** Changes selected notification state to read */
    markAsRead() {
        this.updateStateOfSelectedRowsTo(true);
        this.markSelectedAsRead.emit(this.selectedRows);
    }
    /** Changes selected notification state to unread */
    markAsUnread() {
        this.updateStateOfSelectedRowsTo(false);
        this.markSelectedAsUnread.emit(this.selectedRows);
    }
    /**
     * Resets all filters.
     */
    reset() {
        this.filters = this.deepCopyObject(DEFAULT_FILTERS);
        this.appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);
        this.filterData();
        this.updateLabels();
        this.badge = false;
    }
    /** Calculates active filters from filter object */
    getActiveFilters() {
        this.badge = false;
        const setFilters = {};
        // Mapping applied filters object to better format used for filtering, 
        // creates arrays from objects
        for (const item of Object.keys(this.appliedFilters)) {
            const secondLevelFilter = [];
            for (const filter of Object.keys(this.appliedFilters[item])) {
                if (this.appliedFilters[item][filter] === true) {
                    secondLevelFilter.push(filter);
                    this.badge = true;
                }
            }
            if (secondLevelFilter.length) {
                setFilters[item] = secondLevelFilter;
            }
            if (item === 'date') {
                setFilters[item] = [
                    this.appliedFilters[item]['dateFromValue'],
                    this.appliedFilters[item]['dateToValue']
                ];
            }
        }
        return setFilters;
    }
    /** Called when selection is applied to the table rows */
    selectedValuesChanged() {
        this.disableMarkingSelected = false;
        if (this.selectedRows.length == 0) {
            this.disableMarkingSelected = true;
        }
    }
    /** Updates date filter header labels when date changes */
    updateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            const translationService = AvlLocalizationService.translationService;
            const { dateFromValue, dateToValue } = this.filters.date;
            if (!dateFromValue && !dateToValue) {
                this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            }
            else {
                this.dateFilterGroupHeader = yield translationService.translate('VizBox.NotificationDialog.DateRange', {
                    dateFrom: this.formatDateTime(dateFromValue),
                    dateTo: this.formatDateTime(dateToValue)
                });
            }
        });
    }
    /** Calculates number of notifications with specific type */
    getNumberOfNotificationsWithType(data, type) {
        return data.filter(element => NOTIFICATION_TYPE_MAPPINGS[element.type] === type).length;
    }
    /** Calculates number of unread notifications */
    getNumberOfUnreadNotifications(data) {
        return data.filter(element => !element.state).length;
    }
    /** Calculates number of notifications currently displayed in datatable */
    getNumberOfNotifications() {
        if (this.filteredData.length === this.tableData.length && !this.badge) {
            return this.filteredData.length.toString();
        }
        else {
            return `${this.filteredData.length}/${this.tableData.length}`;
        }
    }
    /** Opens link in new tab when table row is clicked */
    onRowClicked(event) {
        const row = event.detail;
        if (row.link) {
            window.open(row.link, '_blank');
        }
    }
    /** Maps general avl notification list to table specific list */
    prepareNotifications(notifications) {
        return notifications.map(notification => (Object.assign(Object.assign({}, notification), { icon: TYPE_ICON_MAPPINGS[notification.type], iconStyle: TYPE_ICON_STYLE_MAPPINGS[notification.type], currentIconToggle: STATE_ICON_MAPPINGS[String(notification.read)], currentIconToggleStyle: DEFAULT_ICON_STYLE, state: notification.read })));
    }
    /** Formats date time to date-short */
    formatDateTime(d) {
        return d ? AvlLocalizationService.formatDateTime(d, { format: 'date-short' }) : '(-)';
    }
    /** Deep copy of filters object */
    deepCopyObject(object) {
        const copiedObject = {};
        Object.keys(object).forEach(key => {
            copiedObject[key] = Object.assign({}, object[key]);
        });
        return copiedObject;
    }
    /** Determines if element satisfies filter for every key in this.apppliedFilters */
    doesElementPassEveryFilter(activeFilters, element) {
        return Object.keys(activeFilters).every(key => {
            if (key === 'date') {
                const [dateFrom, dateTo] = this.prepareDates(activeFilters[key]);
                // If dates not set, filter this element as well
                if (!dateFrom.getTime() && !dateTo.getTime()) {
                    return true;
                }
                this.badge = true;
                // If timestamp is not a Date, don't filter this element
                const timestamp = new Date(element.timestamp);
                if (!timestamp.getTime()) {
                    return false;
                }
                return this.compareDates(timestamp, dateFrom, dateTo);
            }
            return activeFilters[key].includes(NOTIFICATION_TYPE_MAPPINGS[element[key]]);
        });
    }
    prepareDates(dates) {
        const dateFrom = new Date(dates[0]);
        const dateTo = new Date(dates[1]);
        dateFrom.setHours(0, 0, 0, 0);
        dateTo.setHours(23, 59, 59, 999);
        return [dateFrom, dateTo];
    }
    compareDates(timestamp, from, to) {
        const ts = timestamp.getTime();
        const fromTs = from === null || from === void 0 ? void 0 : from.getTime();
        const toTs = to === null || to === void 0 ? void 0 : to.getTime();
        if (fromTs && toTs) {
            return ts >= fromTs && ts <= toTs;
        }
        else if (fromTs) {
            return ts >= fromTs;
        }
        else if (toTs) {
            return ts <= toTs;
        }
        return false;
    }
    updateStateOfSelectedRowsTo(state) {
        this.tableData
            .filter(notification => this.isRowSelected(notification.id))
            .forEach(notification => {
            notification.state = state;
            notification.currentIconToggle = STATE_ICON_MAPPINGS[String(state)];
        });
        this.tableData = [...this.tableData];
        this.filterData();
    }
    isRowSelected(id) {
        return this.selectedRows.map(row => row.id).includes(id);
    }
    // Translations
    translateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                return;
            }
            const translationService = AvlLocalizationService.translationService;
            this.dateFilterGroupInitHeader = yield translationService.translate('VizBox.NotificationDialog.Date');
            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            this.dateFromLabel = yield translationService.translate('VizBox.NotificationDialog.DateFrom');
            this.dateToLabel = yield translationService.translate('VizBox.NotificationDialog.DateTo');
            this.pageSizeOptions = yield this.translatePageSizeOptions(this.pageSizeOptions);
            this.columnDefinitions = yield this.translateColumns(this.columnDefinitions);
        });
    }
    translatePageSizeOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.all(options.map((option) => __awaiter(this, void 0, void 0, function* () { return yield this.translatePageSizeOption(option); })));
        });
    }
    translatePageSizeOption(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translationService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { label: item.value === Number.MAX_SAFE_INTEGER
                    ? yield translationService.translate('VizBox.NotificationDialog.ShowAll')
                    : yield translationService.translate('VizBox.NotificationDialog.ShowXPerPage', {
                        rows: item.value
                    }) });
        });
    }
    translateColumns(column) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.all(column.map((item) => __awaiter(this, void 0, void 0, function* () { return yield this.translateColumnItem(item); })));
        });
    }
    translateColumnItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translateService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { caption: yield translateService.translate(item.caption) });
        });
    }
};
AvlNotificationDialogComponent.ɵfac = function AvlNotificationDialogComponent_Factory(t) { return new (t || AvlNotificationDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AvlNotificationDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlNotificationDialogComponent, selectors: [["avl-notification-dialog"]], viewQuery: function AvlNotificationDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true, NgForm);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.table = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterForm = _t.first);
    } }, inputs: { open: "open", pageSizeOptions: "pageSizeOptions", columnDefinitions: "columnDefinitions", notifications: "notifications" }, outputs: { openChange: "openChange", markSelectedAsRead: "markSelectedAsRead", markSelectedAsUnread: "markSelectedAsUnread" }, decls: 3, vars: 3, consts: [["id", "outerDialog", 3, "open", "closeOnScrimClick", "fullscreen", "openChange"], ["content", ""], [1, "main-container"], [1, "content"], [1, "table-header"], [1, "table-header-right"], ["id", "updateIcon", "class", "pointer", "icon", "icons:refresh", 3, "click", 4, "ngIf"], ["for", "updateIcon", 4, "ngIf"], ["id", "unreadIcon", "icon", "icons:mail", 1, "pointer", 3, "disabled", "click"], ["for", "unreadIcon"], ["id", "readIcon", "icon", "communication:mail-outline", 1, "pointer", 3, "disabled", "click"], ["for", "readIcon"], ["icon", "icons:filter-list", 1, "pointer", 3, "badge", "click"], ["multi-select", "", "allow-active-row", "", "pagination", "", 1, "filterDatatable", 3, "columnDefinitions", "data", "pageSize", "pageSizeOptions", "selectedValues", "selectedValuesChange", "on-row-clicked"], ["notificationTable", ""], ["divider", "", 1, "filter-sheet", 3, "open", "openChange"], ["filterSheet", ""], ["slot", "title"], ["slot", "content"], ["filterForm", "ngForm"], [3, "narrow"], ["role", "header"], ["role", "content", 1, "filterContent"], ["name", "warningSwitch", 3, "ngModel", "ngModelChange"], [4, "ngIf"], ["id", "warningIcon", "icon", "icons:warning", 1, "typeIcons"], ["name", "errorSwitch", 3, "ngModel", "ngModelChange"], ["id", "errorIcon", "icon", "icons:cancel", 1, "typeIcons"], ["name", "infoSwitch", 3, "ngModel", "ngModelChange"], ["id", "infoIcon", "icon", "icons:info-outline", 1, "typeIcons"], ["name", "okSwitch", 3, "ngModel", "ngModelChange"], ["id", "okIcon", "icon", "icons:check", 1, "typeIcons"], ["name", "unreadState", 3, "ngModel", "ngModelChange"], ["id", "infoIcon", "icon", "icons:mail", 1, "typeIcons"], ["name", "readState", 3, "ngModel", "ngModelChange"], ["id", "infoIcon", "icon", "communication:mail-outline", 1, "typeIcons"], ["id", "date-group"], ["dateGroup", ""], ["for", "date-group", 4, "ngIf"], ["role", "content"], ["name", "dateFromValue", 1, "date-control", 3, "ngModel", "label", "ngModelChange", "valueChange"], ["name", "dateTo", 1, "date-control", 3, "ngModel", "label", "ngModelChange", "valueChange"], ["slot", "actions"], ["contained", "", 3, "click"], [3, "click"], ["id", "updateIcon", "icon", "icons:refresh", 1, "pointer", 3, "click"], ["for", "updateIcon"], ["for", "date-group"]], template: function AvlNotificationDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "avl-dialog", 0);
        ɵngcc0.ɵɵlistener("openChange", function AvlNotificationDialogComponent_Template_avl_dialog_openChange_0_listener($event) { return ctx.openChanged($event); });
        ɵngcc0.ɵɵtemplate(1, AvlNotificationDialogComponent_ng_template_1_Template, 93, 78, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("open", ctx.open)("closeOnScrimClick", false)("fullscreen", true);
    } }, directives: [ɵngcc1.AvlDialogComponent, ɵngcc1.AvlDialogHeaderComponent, ɵngcc1.AvlDialogContentComponent, ɵngcc2.NgIf, ɵngcc3.AvlInteractionControlDirective, ɵngcc3.AvlIconButtonDirective, ɵngcc3.AvlMultiSelectControlDirective, ɵngcc3.AvlSingleSelectControlDirective, ɵngcc3.AvlDatatableDirective, ɵngcc3.AvlSideSheetDirective, ɵngcc4.ɵangular_packages_forms_forms_y, ɵngcc4.NgControlStatusGroup, ɵngcc4.NgForm, ɵngcc5.AvlListExpanderComponent, ɵngcc3.AvlCheckableControlDirective, ɵngcc3.AvlFormControlDirective, ɵngcc3.AvlCheckboxDirective, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc3.AvlDateDirective], pipes: [ɵngcc6.TranslatePipe], styles: [".content[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;flex-grow:1}.table-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center}.main-container[_ngcontent-%COMP%]{display:flex;height:100%}.main-container.hidden[_ngcontent-%COMP%]{display:none}.filterDatatable[_ngcontent-%COMP%]{height:100%}.filter-sheet[_ngcontent-%COMP%]{--avl-side-sheet-padding:0px;--avl-side-sheet-height:84vh;width:300px}.filter-sheet[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:20px;margin-left:24px}.filter-sheet[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:16px;margin:0;text-overflow:ellipsis;overflow:hidden}.pointer[_ngcontent-%COMP%]{cursor:pointer}#errorIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-error-color)}#warningIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-warning-color)}#okIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-ok-color)}#infoIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-icon-default-color)}.filterContent[_ngcontent-%COMP%]{position:relative}.typeIcons[_ngcontent-%COMP%]{position:absolute;right:0;margin-top:12px;margin-bottom:12px}.date-control[_ngcontent-%COMP%]{width:100%}avl-dialog-content[_ngcontent-%COMP%]{--padding-top:1px!important;--padding-right:0px!important;--padding-bottom:2px!important}avl-dialog-header[_ngcontent-%COMP%]{z-index:1}avl-side-sheet[_ngcontent-%COMP%]{--avl-side-sheet-height:unset!important;box-shadow:none;border-left:1px solid var(--avl-divider-color)}avl-datatable[_ngcontent-%COMP%]{--margin-top-pages:0px!important}"] });
AvlNotificationDialogComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AvlNotificationDialogComponent.prototype, "open", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AvlNotificationDialogComponent.prototype, "pageSizeOptions", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AvlNotificationDialogComponent.prototype, "columnDefinitions", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], AvlNotificationDialogComponent.prototype, "notifications", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlNotificationDialogComponent.prototype, "openChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlNotificationDialogComponent.prototype, "markSelectedAsRead", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlNotificationDialogComponent.prototype, "markSelectedAsUnread", void 0);
__decorate([
    ViewChild('notificationTable'),
    __metadata("design:type", ElementRef)
], AvlNotificationDialogComponent.prototype, "table", void 0);
__decorate([
    ViewChild('filterForm', { read: NgForm }),
    __metadata("design:type", NgForm)
], AvlNotificationDialogComponent.prototype, "filterForm", void 0);
AvlNotificationDialogComponent = __decorate([ __metadata("design:paramtypes", [ChangeDetectorRef])
], AvlNotificationDialogComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlNotificationDialogComponent, [{
        type: Component,
        args: [{
                selector: 'avl-notification-dialog',
                template: "<avl-dialog\r\n  id=\"outerDialog\"\r\n  [open]=\"open\"\r\n  (openChange)=\"openChanged($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"true\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>{{ 'VizBox.NotificationDialog.Details' | translate }}</avl-dialog-header>\r\n    <avl-dialog-content>\r\n      <div class=\"main-container\">\r\n        <div class=\"content\">\r\n          <div class=\"table-header\">\r\n            <h1>\r\n              {{ 'VizBox.NotificationDialog.Notifications' | translate }} ({{\r\n                getNumberOfNotifications()\r\n              }})\r\n            </h1>\r\n            <div class=\"table-header-right\">\r\n              <avl-icon-button\r\n                *ngIf=\"showRefreshButton\"\r\n                id=\"updateIcon\"\r\n                (click)=\"refreshTable()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:refresh\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip *ngIf=\"showRefreshButton\" for=\"updateIcon\"\r\n                > {{ 'VizBox.NotificationDialog.Refresh' | translate }}</avl-tooltip\r\n              >\r\n              <avl-icon-button\r\n                id=\"unreadIcon\"\r\n                (click)=\"markAsUnread()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:mail\"\r\n                [disabled]=\"disableMarkingSelected\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"unreadIcon\">{{\r\n                'VizBox.NotificationDialog.MarkSelectedAsUnread' | translate\r\n              }}</avl-tooltip>\r\n              <avl-icon-button\r\n                id=\"readIcon\"\r\n                class=\"pointer\"\r\n                (click)=\"markAsRead()\"\r\n                icon=\"communication:mail-outline\"\r\n                [disabled]=\"disableMarkingSelected\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"readIcon\">{{\r\n                'VizBox.NotificationDialog.MarkSelectedAsRead' | translate\r\n              }}</avl-tooltip>\r\n              <avl-icon-button\r\n                (click)=\"toggleFilters()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:filter-list\"\r\n                [badge]=\"badge\"\r\n              ></avl-icon-button>\r\n            </div>\r\n          </div>\r\n          <avl-datatable\r\n            #notificationTable\r\n            class=\"filterDatatable\"\r\n            multi-select\r\n            allow-active-row\r\n            pagination\r\n            [columnDefinitions]=\"columnDefinitions\"\r\n            [data]=\"filteredData\"\r\n            [pageSize]=\"pageSize\"\r\n            [pageSizeOptions]=\"pageSizeOptions\"\r\n            [(selectedValues)]=\"selectedRows\"\r\n            (selectedValuesChange)=\"selectedValuesChanged()\"\r\n            (on-row-clicked)=\"onRowClicked($event)\"\r\n          >\r\n          </avl-datatable>\r\n        </div>\r\n        <avl-side-sheet class=\"filter-sheet\" divider [(open)]=\"filtersOpen\" #filterSheet>\r\n          <div slot=\"title\">\r\n            <h2>{{ 'VizBox.NotificationDialog.Filters' | translate }}</h2>\r\n          </div>\r\n          <div slot=\"content\">\r\n            <form #filterForm=\"ngForm\">\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3>{{ 'VizBox.NotificationDialog.Type' | translate }}</h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div>\r\n                    <avl-checkbox name=\"warningSwitch\" [(ngModel)]=\"filters.type.warning\">\r\n                      {{ 'VizBox.NotificationDialog.Warning' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'warning') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"warningIcon\" class=\"typeIcons\" icon=\"icons:warning\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"errorSwitch\" [(ngModel)]=\"filters.type.error\">\r\n                      {{ 'VizBox.NotificationDialog.Error' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'error') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"errorIcon\" class=\"typeIcons\" icon=\"icons:cancel\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"infoSwitch\" [(ngModel)]=\"filters.type.info\">\r\n                      {{ 'VizBox.NotificationDialog.Info' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'info') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"infoIcon\" class=\"typeIcons\" icon=\"icons:info-outline\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"okSwitch\" [(ngModel)]=\"filters.type.ok\">\r\n                      {{ 'VizBox.NotificationDialog.Ok' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'ok') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"okIcon\" class=\"typeIcons\" icon=\"icons:check\"></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3>{{ 'VizBox.NotificationDialog.State' | translate }}</h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <avl-checkbox name=\"unreadState\" [(ngModel)]=\"filters.state.unread\">\r\n                    {{ 'VizBox.NotificationDialog.Unread' | translate }} ({{\r\n                      getNumberOfUnreadNotifications(tableData)\r\n                    }})\r\n                  </avl-checkbox>\r\n                  <avl-icon id=\"infoIcon\" class=\"typeIcons\" icon=\"icons:mail\"></avl-icon>\r\n                  <avl-checkbox name=\"readState\" [(ngModel)]=\"filters.state.read\">\r\n                    {{ 'VizBox.NotificationDialog.Read' | translate }} ({{\r\n                      tableData.length - getNumberOfUnreadNotifications(tableData)\r\n                    }})\r\n                  </avl-checkbox>\r\n                  <avl-icon\r\n                    id=\"infoIcon\"\r\n                    class=\"typeIcons\"\r\n                    icon=\"communication:mail-outline\"\r\n                  ></avl-icon>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3 id=\"date-group\" #dateGroup>\r\n                    {{ dateFilterGroupHeader }}\r\n                  </h3>\r\n                  <avl-tooltip for=\"date-group\" *ngIf=\"dateGroup.scrollWidth > dateGroup.clientWidth\">\r\n                    {{ dateFilterGroupHeader }}\r\n                  </avl-tooltip>\r\n                </div>\r\n                <div role=\"content\">\r\n                  <avl-date\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date.dateFromValue\"\r\n                    name=\"dateFromValue\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"dateFromLabel\"\r\n                  ></avl-date>\r\n                  <avl-date\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date.dateToValue\"\r\n                    name=\"dateTo\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"dateToLabel\"\r\n                  ></avl-date>\r\n                </div>\r\n              </avl-list-expander>\r\n            </form>\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <avl-button contained (click)=\"applyFilters()\">{{\r\n              'VizBox.NotificationDialog.Apply' | translate\r\n            }}</avl-button>\r\n            <avl-button (click)=\"reset()\">{{\r\n              'VizBox.NotificationDialog.Reset' | translate\r\n            }}</avl-button>\r\n          </div>\r\n        </avl-side-sheet>\r\n      </div>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n",
                styles: [".content{position:relative;display:flex;flex-direction:column;flex-grow:1}.table-header{display:flex;justify-content:space-between;align-items:center}.main-container{display:flex;height:100%}.main-container.hidden{display:none}.filterDatatable{height:100%}.filter-sheet{--avl-side-sheet-padding:0px;--avl-side-sheet-height:84vh;width:300px}.filter-sheet h2{font-size:20px;margin-left:24px}.filter-sheet h3{font-size:16px;margin:0;text-overflow:ellipsis;overflow:hidden}.pointer{cursor:pointer}#errorIcon{--avl-icon-custom-color:var(--avl-error-color)}#warningIcon{--avl-icon-custom-color:var(--avl-warning-color)}#okIcon{--avl-icon-custom-color:var(--avl-ok-color)}#infoIcon{--avl-icon-custom-color:var(--avl-icon-default-color)}.filterContent{position:relative}.typeIcons{position:absolute;right:0;margin-top:12px;margin-bottom:12px}.date-control{width:100%}avl-dialog-content{--padding-top:1px!important;--padding-right:0px!important;--padding-bottom:2px!important}avl-dialog-header{z-index:1}avl-side-sheet{--avl-side-sheet-height:unset!important;box-shadow:none;border-left:1px solid var(--avl-divider-color)}avl-datatable{--margin-top-pages:0px!important}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { open: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], columnDefinitions: [{
            type: Input
        }], openChange: [{
            type: Output
        }], markSelectedAsRead: [{
            type: Output
        }], markSelectedAsUnread: [{
            type: Output
        }], notifications: [{
            type: Input
        }], table: [{
            type: ViewChild,
            args: ['notificationTable']
        }], filterForm: [{
            type: ViewChild,
            args: ['filterForm', { read: NgForm }]
        }] }); })();
export { AvlNotificationDialogComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,