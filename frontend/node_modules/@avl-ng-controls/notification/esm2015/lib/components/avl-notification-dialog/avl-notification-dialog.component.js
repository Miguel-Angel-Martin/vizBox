var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Component, Input, ViewChild, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';
import '@avl-controls/core/dist/avl-checkbox/avl-checkbox';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-date/avl-date';
import { DEFAULT_COLUMN_DEFINITIONS, DEFAULT_FILTERS, DEFAULT_PAGE_SIZE_OPTIONS, STATE_ICON_MAPPINGS, TYPE_ICON_MAPPINGS, TRANSLATION_BASE, ACTION_BUTTONS } from './avl-notification-dialog.consts';
import { NgForm } from '@angular/forms';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';
import { NOTIFICATION_TYPE_MAPPINGS } from './avl-notification-dialog.consts';
import * as i0 from "@angular/core";
import * as i1 from "@avl-ng-controls/dialog";
import * as i2 from "@avl-ng-controls/navigation";
import * as i3 from "@angular/common";
import * as i4 from "@avl-controls/ng-binders";
import * as i5 from "@angular/forms";
import * as i6 from "./date-validator.directive";
import * as i7 from "@ngx-translate/core";
import * as i8 from "../../pipes/prepare-notifications.pipe";
import * as i9 from "../../pipes/iterable-object.pipe";
import * as i10 from "../../pipes/capitalize.pipe";
export class AvlNotificationDialogComponent {
    constructor() {
        this.open = false;
        this.pageSizeOptions = DEFAULT_PAGE_SIZE_OPTIONS;
        this.columnDefinitions = DEFAULT_COLUMN_DEFINITIONS;
        this.notificationsCount = {
            warning: 0,
            info: 0,
            ok: 0,
            error: 0,
            unread: 0,
            read: 0,
            total: 0
        };
        this.openChange = new EventEmitter();
        this.filtersChange = new EventEmitter();
        this.markSelectedAsRead = new EventEmitter();
        this.markSelectedAsUnread = new EventEmitter();
        this.tableRefresh = new EventEmitter();
        this.selectedPageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        this.badge = false;
        this.disableMarkingSelected = true;
        this.filters = this.deepCopyObject(DEFAULT_FILTERS);
        this.filtersOpen = true;
        this.translationBase = TRANSLATION_BASE;
        this.actionButtons = ACTION_BUTTONS;
        this.disabledRange = {};
        this.dateFilterGroupInitHeader = 'Date';
        this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
        //notification datatable options
        this.selectedRows = [];
        this.pageSize = 15;
        this._notifications = [];
        this.destroyed$ = new Subject();
    }
    get notifications() {
        return this._notifications || [];
    }
    set notifications(notifications) {
        this._notifications = notifications;
    }
    set filterForm(filterForm) {
        var _a;
        (_a = this.filterFormSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        this.filterFormSubscription = filterForm === null || filterForm === void 0 ? void 0 : filterForm.valueChanges.pipe(debounceTime(300), distinctUntilChanged(), takeUntil(this.destroyed$), filter(_ => filterForm.valid)).subscribe(value => this.handleFiltersChanged(value));
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    ngOnInit() {
        this.translateLabels();
    }
    getIconByType(type) {
        switch (type) {
            case 'unread':
                return STATE_ICON_MAPPINGS['false'];
            case 'read':
                return STATE_ICON_MAPPINGS['true'];
            default:
                for (let [typeKey, typeValue] of NOTIFICATION_TYPE_MAPPINGS) {
                    if (typeValue === type && typeof typeKey === 'number') {
                        return TYPE_ICON_MAPPINGS[typeKey];
                    }
                }
        }
    }
    /** Emits event when dialog opens or closes */
    openChanged(open) {
        this.openChange.emit(open);
    }
    onSelectedPageChanged(event) {
        this.selectedPageChanged.emit(event);
    }
    onPageSizeChanged(event) {
        this.pageSizeChanged.emit(event);
    }
    /** Toggles displaying of filter sheet */
    toggleFilters() {
        this.filtersOpen = !this.filtersOpen;
    }
    /** Refreshes the datatable when refresh button is clicked */
    refreshTable() {
        this.tableRefresh.emit();
    }
    markAs(state) {
        state === NOTIFICATION_TYPE_MAPPINGS.get(true) ? this.markAsRead() : this.markAsUnread();
    }
    /** Changes selected notification state to read */
    markAsRead() {
        this.markSelectedAsRead.emit(this.selectedRows);
    }
    /** Changes selected notification state to unread */
    markAsUnread() {
        this.markSelectedAsUnread.emit(this.selectedRows);
    }
    /**
     * Resets all filters.
     */
    reset() {
        this.filters = this.deepCopyObject(DEFAULT_FILTERS);
        this.updateLabels();
        this.badge = false;
    }
    /** Called when selection is applied to the table rows */
    selectedValuesChanged() {
        this.disableMarkingSelected = false;
        if (this.selectedRows.length == 0) {
            this.disableMarkingSelected = true;
        }
    }
    /** Updates date filter header labels when date changes */
    updateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            const translationService = AvlLocalizationService.translationService;
            const { dateFrom, dateTo } = this.filters.date;
            if (!dateFrom && !dateTo) {
                this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            }
            else {
                this.dateFilterGroupHeader = yield translationService.translate('VizBox.NotificationDialog.DateRange', {
                    dateFrom: this.formatDateTime(dateFrom),
                    dateTo: this.formatDateTime(dateTo)
                });
            }
        });
    }
    /** Event fired when table row is clicked
     * depending on the notification flag it opens in new tab
     */
    onRowClicked(event) {
        const row = event.detail;
        if (row.link) {
            if (row.openInNewTab) {
                window.open(row.link, '_blank');
            }
            else {
                window.open(row.link, '_self');
            }
        }
    }
    handleFiltersChanged(value) {
        var _a;
        this.activeFilters = this.getActiveFilters(value);
        if ((_a = this.activeFilters) === null || _a === void 0 ? void 0 : _a.date) {
            this.disabledRange = this.getDisabledRange();
        }
        this.badge = Boolean(this.activeFilters);
        const event = new CustomEvent('filtersChange', { detail: this.activeFilters });
        this.filtersChange.emit(event);
    }
    /** Calculates active filters from filter object */
    getActiveFilters(filters) {
        Object.keys(filters).forEach(key => {
            const filter = filters[key];
            //don't iterate through search
            if (filter && typeof filter !== 'string') {
                filters[key] = this.removeInactiveFilterKeys(filter);
            }
        });
        return this.removeInactiveFilterKeys(filters);
    }
    /** disable dates before dateFrom in dateTo, and dates after dateTo in dateFrom  */
    getDisabledRange() {
        const { dateFrom, dateTo } = this.filters.date;
        return {
            dateFrom: dateTo ? [{ from: dateTo }] : undefined,
            dateTo: dateFrom ? [{ to: dateFrom }] : undefined
        };
    }
    /** Removes inactive filters from filter object and returns it */
    removeInactiveFilterKeys(filter) {
        var _a;
        Object.keys(filter)
            .filter(secondLevelKey => !Boolean(filter[secondLevelKey]))
            .forEach(secondLevelKey => delete filter[secondLevelKey]);
        return ((_a = Object.keys(filter)) === null || _a === void 0 ? void 0 : _a.length) ? filter : undefined;
    }
    /** Formats date time to date-short */
    formatDateTime(d) {
        return d ? AvlLocalizationService.formatDateTime(d, { format: 'date-short' }) : '(-)';
    }
    /** Deep copy of filters object */
    deepCopyObject(object) {
        const copiedObject = {};
        Object.keys(object).forEach(key => {
            copiedObject[key] =
                typeof object[key] === 'object' ? Object.assign({}, object[key]) : object[key];
        });
        return copiedObject;
    }
    // Translations
    translateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                return;
            }
            const translationService = AvlLocalizationService.translationService;
            this.dateFilterGroupInitHeader = yield translationService.translate('VizBox.NotificationDialog.Date');
            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            this.pageSizeOptions = yield this.translatePageSizeOptions(this.pageSizeOptions);
            this.columnDefinitions = yield this.translateColumns(this.columnDefinitions);
        });
    }
    translatePageSizeOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all(options.map((option) => __awaiter(this, void 0, void 0, function* () { return this.translatePageSizeOption(option); })));
        });
    }
    translatePageSizeOption(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translationService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { label: item.value === Number.MAX_SAFE_INTEGER
                    ? yield translationService.translate('VizBox.NotificationDialog.ShowAll')
                    : yield translationService.translate('VizBox.NotificationDialog.ShowXPerPage', {
                        rows: item.value
                    }) });
        });
    }
    translateColumns(column) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all(column.map((item) => __awaiter(this, void 0, void 0, function* () { return this.translateColumnItem(item); })));
        });
    }
    translateColumnItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translateService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { caption: yield translateService.translate(item.caption) });
        });
    }
}
AvlNotificationDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlNotificationDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlNotificationDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlNotificationDialogComponent, selector: "avl-notification-dialog", inputs: { open: "open", pageSizeOptions: "pageSizeOptions", columnDefinitions: "columnDefinitions", notificationsCount: "notificationsCount", refreshBadge: "refreshBadge", notifications: "notifications" }, outputs: { openChange: "openChange", filtersChange: "filtersChange", markSelectedAsRead: "markSelectedAsRead", markSelectedAsUnread: "markSelectedAsUnread", tableRefresh: "tableRefresh", selectedPageChanged: "selectedPageChanged", pageSizeChanged: "pageSizeChanged" }, viewQueries: [{ propertyName: "table", first: true, predicate: ["notificationTable"], descendants: true }, { propertyName: "filterForm", first: true, predicate: ["filterForm"], descendants: true, read: NgForm }], ngImport: i0, template: "<avl-dialog\r\n  id=\"outerDialog\"\r\n  [open]=\"open\"\r\n  (openChange)=\"openChanged($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"true\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>{{ translationBase + 'Details' | translate }}</avl-dialog-header>\r\n    <avl-dialog-content>\r\n      <div class=\"main-container\">\r\n        <div class=\"content\">\r\n          <div class=\"table-header\">\r\n            <h1>\r\n              {{ translationBase + 'Notifications' | translate }} ({{ notifications?.length }}\r\n              <span\r\n                *ngIf=\"\r\n                  notificationsCount.total && notificationsCount.total !== notifications?.length\r\n                \"\r\n              >\r\n                /{{ notificationsCount.total }} </span\r\n              >)\r\n            </h1>\r\n            <div class=\"table-header-right\">\r\n              <avl-icon-button\r\n                id=\"updateIcon\"\r\n                (click)=\"refreshTable()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:refresh\"\r\n                [badge]=\"refreshBadge\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"updateIcon\">\r\n                {{ translationBase + 'Refresh' | translate }}</avl-tooltip\r\n              >\r\n              <div class=\"divider vertical\"></div>\r\n              <div *ngFor=\"let button of actionButtons\">\r\n                <avl-icon-button\r\n                  id=\"{{ button.id }}Icon\"\r\n                  (click)=\"markAs(button.id)\"\r\n                  class=\"pointer\"\r\n                  [icon]=\"getIconByType(button.id)\"\r\n                  [disabled]=\"disableMarkingSelected\"\r\n                >\r\n                </avl-icon-button>\r\n                <avl-tooltip for=\"{{ button.id }}Icon\">{{\r\n                  button.tooltip | translate\r\n                }}</avl-tooltip>\r\n              </div>\r\n              <div class=\"divider vertical\"></div>\r\n              <div *ngIf=\"!filtersOpen\" class=\"search-bar-holder\">\r\n                <div *ngTemplateOutlet=\"searchBar\"></div>\r\n              </div>\r\n              <avl-icon-button\r\n                (click)=\"toggleFilters()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:filter-list\"\r\n                [badge]=\"badge\"\r\n              ></avl-icon-button>\r\n            </div>\r\n          </div>\r\n          <avl-datatable\r\n            #notificationTable\r\n            class=\"filterDatatable\"\r\n            multi-select\r\n            allow-active-row\r\n            pagination\r\n            [columnDefinitions]=\"columnDefinitions\"\r\n            [pageSize]=\"pageSize\"\r\n            [data]=\"notifications | prepareNotifications: 'dialog'\"\r\n            [pageSizeOptions]=\"pageSizeOptions\"\r\n            [(selectedValues)]=\"selectedRows\"\r\n            (selectedValuesChange)=\"selectedValuesChanged()\"\r\n            (page-size-changed)=\"onPageSizeChanged($event)\"\r\n            (selected-page-changed)=\"onSelectedPageChanged($event)\"\r\n            (on-row-clicked)=\"onRowClicked($event)\"\r\n          >\r\n          </avl-datatable>\r\n        </div>\r\n        <avl-side-sheet class=\"filter-sheet\" divider [(open)]=\"filtersOpen\" #filterSheet>\r\n          <div slot=\"title\">\r\n            <h2>{{ translationBase + 'Filters' | translate }}</h2>\r\n          </div>\r\n          <div slot=\"content\">\r\n            <form #filterForm=\"ngForm\">\r\n              <!--ngIf is needed to rerender template on filtersheet toggle-->\r\n              <div *ngIf=\"filtersOpen\" class=\"search-bar-holder\">\r\n                <div *ngTemplateOutlet=\"searchBar\"></div>\r\n              </div>\r\n\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormType=\"ngModelGroup\"\r\n                ngModelGroup=\"type\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3>\r\n                    <span>{{ translationBase + 'Type' | translate }}</span>\r\n                    <span *ngIf=\"activeFilters?.type | iterableObject as activeFilterGroup\">\r\n                      <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                          currentHeader;\r\n                          context: {\r\n                            activeFilterGroup: activeFilterGroup,\r\n                            filterGroup: filters?.type | iterableObject\r\n                          }\r\n                        \"\r\n                      ></ng-container>\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div *ngFor=\"let type of filters?.type | iterableObject\">\r\n                    <avl-checkbox name=\"{{ type }}\" [(ngModel)]=\"filters.type[type]\">\r\n                      {{ translationBase + (type | titlecase) | translate }}\r\n                      <span *ngIf=\"notifications.length\">({{ notificationsCount[type] }})</span>\r\n                    </avl-checkbox>\r\n                    <avl-icon\r\n                      id=\"{{ type }}Icon\"\r\n                      class=\"typeIcons\"\r\n                      icon=\"icons:{{ getIconByType(type) }}\"\r\n                    ></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormState=\"ngModelGroup\"\r\n                ngModelGroup=\"state\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3>\r\n                    <span>{{ translationBase + 'State' | translate }}</span>\r\n                    <span *ngIf=\"activeFilters?.state | iterableObject as activeFilterGroup\">\r\n                      <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                          currentHeader;\r\n                          context: {\r\n                            activeFilterGroup: activeFilterGroup,\r\n                            filterGroup: filters?.state | iterableObject\r\n                          }\r\n                        \"\r\n                      ></ng-container>\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div *ngFor=\"let state of filters?.state | iterableObject\">\r\n                    <avl-checkbox name=\"{{ state }}\" [(ngModel)]=\"filters.state[state]\">\r\n                      {{ translationBase + (state | titlecase) | translate }} ({{\r\n                        notificationsCount[state]\r\n                      }})\r\n                    </avl-checkbox>\r\n                    <avl-icon\r\n                      id=\"{{ state }}Icon\"\r\n                      class=\"typeIcons\"\r\n                      icon=\"icons:{{ getIconByType(state) }}\"\r\n                    ></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormDate=\"ngModelGroup\"\r\n                ngModelGroup=\"date\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3 id=\"date-group\" #dateGroup>\r\n                    {{ dateFilterGroupHeader }}\r\n                  </h3>\r\n                  <avl-tooltip\r\n                    for=\"date-group\"\r\n                    *ngIf=\"dateGroup.scrollWidth > dateGroup.clientWidth\"\r\n                  >\r\n                    {{ dateFilterGroupHeader }}\r\n                  </avl-tooltip>\r\n                </div>\r\n                <div role=\"content\">\r\n                  <avl-date\r\n                    *ngFor=\"let date of filters?.date | iterableObject\"\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date[date]\"\r\n                    name=\"{{ date }}\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"translationBase + (date | capitalize) | translate\"\r\n                    [disabledRanges]=\"disabledRange[date]\"\r\n                    #dateEl\r\n                    auto-validate\r\n                    [dateInvalid]=\"dateEl\"\r\n                  ></avl-date>\r\n                </div>\r\n              </avl-list-expander>\r\n              <ng-template #searchBar>\r\n                <avl-search-bar\r\n                  placeholder=\"{{ translationBase + 'Search' | translate }}\"\r\n                  always-open\r\n                  #searchBarElement\r\n                  name=\"search\"\r\n                  [(ngModel)]=\"filters.search\"\r\n                ></avl-search-bar>\r\n              </ng-template>\r\n            </form>\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <avl-button (click)=\"reset()\">{{ translationBase + 'Reset' | translate }}</avl-button>\r\n          </div>\r\n        </avl-side-sheet>\r\n      </div>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n\r\n  <ng-template\r\n    #currentHeader\r\n    let-activeFilterGroup=\"activeFilterGroup\"\r\n    let-filterGroup=\"filterGroup\"\r\n  >\r\n    <span>: </span><span *ngIf=\"activeFilterGroup.length === filterGroup.length\">all</span>\r\n    <span *ngIf=\"activeFilterGroup.length !== filterGroup.length\">\r\n      <span *ngFor=\"let item of activeFilterGroup; index as i\">\r\n        <span>{{ translationBase + (item | titlecase) | translate }}</span>\r\n        <span *ngIf=\"i < activeFilterGroup.length - 1\">, </span>\r\n      </span>\r\n    </span>\r\n  </ng-template>\r\n</avl-dialog>\r\n", styles: [".content{position:relative;display:flex;flex-direction:column;flex-grow:1}.divider{background-color:var(--avl-divider-color)}.divider.vertical{width:1px;height:auto;margin:12px 0}.search-bar-holder{padding:0 9px}form .search-bar-holder{display:block;position:relative;padding:12px 24px 12px 12px}.table-header{display:flex;justify-content:space-between;align-items:center}.table-header-right{display:flex}.main-container{display:flex;height:100%}.main-container.hidden{display:none}.filterDatatable{height:100%}.filter-sheet{--avl-side-sheet-padding:0px;--avl-side-sheet-height:84vh;width:300px}.filter-sheet h2{font-size:20px;margin-left:24px}.filter-sheet h3{font-size:16px;margin:0;text-overflow:ellipsis;overflow:hidden}.pointer{cursor:pointer}#errorIcon{--avl-icon-custom-color:var(--avl-error-color)}#warningIcon{--avl-icon-custom-color:var(--avl-warning-color)}#okIcon{--avl-icon-custom-color:var(--avl-ok-color)}#infoIcon{--avl-icon-custom-color:var(--avl-icon-default-color)}.filterContent{position:relative}.typeIcons{position:absolute;right:0;margin-top:12px;margin-bottom:12px}.date-control{width:100%}avl-dialog-content{--padding-top:1px!important;--padding-right:0px!important;--padding-bottom:2px!important}avl-dialog-header{z-index:1}avl-side-sheet{--avl-side-sheet-height:unset!important;box-shadow:none;border-left:1px solid var(--avl-divider-color)}avl-datatable{--margin-top-pages:0px!important}"], components: [{ type: i1.AvlDialogComponent, selector: "avl-dialog", inputs: ["closeOnScrimClick", "complex", "warningHeaderText", "warningDialogText", "fullscreen", "open", "dirty", "warningOnClose"], outputs: ["openChange"] }, { type: i1.AvlDialogHeaderComponent, selector: "avl-dialog-header" }, { type: i1.AvlDialogContentComponent, selector: "avl-dialog-content" }, { type: i2.AvlListExpanderComponent, selector: "avl-list-expander", inputs: ["narrow", "open"], outputs: ["openChange"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i4.AvlIconButtonDirective, selector: "avl-icon-button", outputs: ["badgeChange", "badgeValueChange"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.AvlMultiSelectControlDirective, selector: "avl-datatable,avl-list,avl-chip-list, avl-chip-input", outputs: ["selectedIndexesChange", "selectedValuesChange"] }, { type: i4.AvlSingleSelectControlDirective, selector: "avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box", outputs: ["selectedIndexChange", "selectedValueChange"] }, { type: i4.AvlDatatableDirective, selector: "avl-datatable", outputs: ["buttonClick", "overflowMenuItemClick", "linkClick", "pageSizeChange", "selectedPageChange"] }, { type: i4.AvlSideSheetDirective, selector: "avl-side-sheet", outputs: ["openChange"] }, { type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i4.AvlCheckableControlDirective, selector: "avl-checkbox,avl-radio-button, avl-icon-toggle, avl-switch", outputs: ["checkedChange"] }, { type: i4.AvlFormControlDirective, selector: "avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input", inputs: ["readonly"], outputs: ["invalidChange"] }, { type: i4.AvlCheckboxDirective, selector: "avl-checkbox", outputs: ["indeterminateChange"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.AvlDateDirective, selector: "avl-date", outputs: ["valueChange"] }, { type: i6.DateInvalidValidatorDirective, selector: "[dateInvalid]", inputs: ["dateInvalid"] }, { type: i4.AvlSearchBarDirective, selector: "avl-search-bar", outputs: ["queryChange", "openChange"] }], pipes: { "translate": i7.TranslatePipe, "prepareNotifications": i8.PrepareNotificationsPipe, "iterableObject": i9.IterableObjectPipe, "titlecase": i3.TitleCasePipe, "capitalize": i10.CapitalizePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlNotificationDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-notification-dialog',
                    templateUrl: './avl-notification-dialog.component.html',
                    styleUrls: ['./avl-notification-dialog.component.css'],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { open: [{
                type: Input
            }], pageSizeOptions: [{
                type: Input
            }], columnDefinitions: [{
                type: Input
            }], notificationsCount: [{
                type: Input
            }], refreshBadge: [{
                type: Input
            }], notifications: [{
                type: Input
            }], openChange: [{
                type: Output
            }], filtersChange: [{
                type: Output
            }], markSelectedAsRead: [{
                type: Output
            }], markSelectedAsUnread: [{
                type: Output
            }], tableRefresh: [{
                type: Output
            }], selectedPageChanged: [{
                type: Output
            }], pageSizeChanged: [{
                type: Output
            }], table: [{
                type: ViewChild,
                args: ['notificationTable']
            }], filterForm: [{
                type: ViewChild,
                args: ['filterForm', { read: NgForm }]
            }] } });
//# sourceMappingURL=data:application/json;base64,