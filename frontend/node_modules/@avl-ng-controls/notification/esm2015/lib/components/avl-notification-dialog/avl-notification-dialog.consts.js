import { ColumnType, LeafColumn } from '@avl-controls/datatable/dist/avl-datatable/column-definitions';
export const DEFAULT_PAGE_SIZE_OPTIONS = [
    { value: 15, label: 'Show 15 per page' },
    { value: 50, label: 'Show 50 per page' },
    { value: Number.MAX_SAFE_INTEGER, label: 'Show all' }
];
export const DEFAULT_FILTERS = {
    type: {
        warning: undefined,
        error: undefined,
        info: undefined,
        ok: undefined
    },
    state: {
        read: undefined,
        unread: undefined
    },
    date: {
        dateFromValue: undefined,
        dateToValue: undefined
    }
};
export const DEFAULT_COLUMN_DEFINITIONS = [
    new LeafColumn('VizBox.NotificationDialog.Type', 'icon', ColumnType.Icon, false, false, 0.5),
    new LeafColumn('VizBox.NotificationDialog.Module', 'module', ColumnType.Text, true, false, 3),
    new LeafColumn('VizBox.NotificationDialog.Message', 'messageText', ColumnType.Text, true, false, 8),
    new LeafColumn('VizBox.NotificationDialog.Id', 'id', ColumnType.Number, false, false, 1),
    {
        caption: 'VizBox.NotificationDialog.Timestamp',
        valueField: 'timestamp',
        type: ColumnType.Date,
        sortable: false,
        filterable: false,
        flexWidth: 3,
        dateTimeOptions: { format: 'date-time-short' }
    },
    new LeafColumn('VizBox.NotificationDialog.State', 'currentIconToggle', ColumnType.Icon, false, false, 1)
];
export const NOTIFICATION_TYPE_MAPPINGS = {
    [0]: 'error',
    [1]: 'warning',
    [2]: 'info',
    [3]: 'ok',
    false: 'unread',
    true: 'read'
};
export const TYPE_ICON_MAPPINGS = {
    [0 /* Error */]: 'cancel',
    [1 /* Warning */]: 'warning',
    [2 /* Info */]: 'info-outline',
    [3 /* OK */]: 'check'
};
export const STATE_ICON_MAPPINGS = {
    false: 'mail',
    true: 'communication:mail-outline'
};
export const DEFAULT_ICON_STYLE = 'height:24px; width:24px;';
export const TYPE_ICON_STYLE_MAPPINGS = {
    [0 /* Error */]: `--avl-icon-custom-color: var(--avl-error-color); ${DEFAULT_ICON_STYLE}`,
    [1 /* Warning */]: `--avl-icon-custom-color: var(--avl-warning-color); ${DEFAULT_ICON_STYLE}`,
    [2 /* Info */]: `--avl-icon-custom-color: var(--avl-icon-default-color); ${DEFAULT_ICON_STYLE}`,
    [3 /* OK */]: `--avl-icon-custom-color: var(--avl-ok-color); ${DEFAULT_ICON_STYLE}`
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW5vdGlmaWNhdGlvbi1kaWFsb2cuY29uc3RzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1uZy1jb250cm9scy9ub3RpZmljYXRpb24vIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hdmwtbm90aWZpY2F0aW9uLWRpYWxvZy9hdmwtbm90aWZpY2F0aW9uLWRpYWxvZy5jb25zdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUVMLFVBQVUsRUFDVixVQUFVLEVBQ1gsTUFBTSwrREFBK0QsQ0FBQztBQUd2RSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBcUI7SUFDekQsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtJQUN4QyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFO0lBQ3hDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO0NBQ3RELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7SUFDN0IsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLFNBQVM7UUFDbEIsS0FBSyxFQUFFLFNBQVM7UUFDaEIsSUFBSSxFQUFFLFNBQVM7UUFDZixFQUFFLEVBQUUsU0FBUztLQUNkO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsU0FBUztLQUNsQjtJQUNELElBQUksRUFBRTtRQUNKLGFBQWEsRUFBRSxTQUFTO1FBQ3hCLFdBQVcsRUFBRSxTQUFTO0tBQ3ZCO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHO0lBQ3hDLElBQUksVUFBVSxDQUFDLGdDQUFnQyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDO0lBQzVGLElBQUksVUFBVSxDQUFDLGtDQUFrQyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzdGLElBQUksVUFBVSxDQUNaLG1DQUFtQyxFQUNuQyxhQUFhLEVBQ2IsVUFBVSxDQUFDLElBQUksRUFDZixJQUFJLEVBQ0osS0FBSyxFQUNMLENBQUMsQ0FDRjtJQUNELElBQUksVUFBVSxDQUFDLDhCQUE4QixFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGO1FBQ04sT0FBTyxFQUFFLHFDQUFxQztRQUM5QyxVQUFVLEVBQUUsV0FBVztRQUN2QixJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUk7UUFDckIsUUFBUSxFQUFFLEtBQUs7UUFDZixVQUFVLEVBQUUsS0FBSztRQUNqQixTQUFTLEVBQUUsQ0FBQztRQUNaLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRTtLQUMvQztJQUNELElBQUksVUFBVSxDQUNaLGlDQUFpQyxFQUNqQyxtQkFBbUIsRUFDbkIsVUFBVSxDQUFDLElBQUksRUFDZixLQUFLLEVBQ0wsS0FBSyxFQUNMLENBQUMsQ0FDRjtDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRztJQUN4QyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU87SUFDWixDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVM7SUFDZCxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU07SUFDWCxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUk7SUFDVCxLQUFLLEVBQUUsUUFBUTtJQUNmLElBQUksRUFBRSxNQUFNO0NBQ2IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDLGVBQTJCLEVBQUUsUUFBUTtJQUNyQyxpQkFBNkIsRUFBRSxTQUFTO0lBQ3hDLGNBQTBCLEVBQUUsY0FBYztJQUMxQyxZQUF3QixFQUFFLE9BQU87Q0FDbEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHO0lBQ2pDLEtBQUssRUFBRSxNQUFNO0lBQ2IsSUFBSSxFQUFFLDRCQUE0QjtDQUNuQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsMEJBQTBCLENBQUM7QUFFN0QsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUc7SUFDdEMsZUFBMkIsRUFBRSxvREFBb0Qsa0JBQWtCLEVBQUU7SUFDckcsaUJBQTZCLEVBQUUsc0RBQXNELGtCQUFrQixFQUFFO0lBQ3pHLGNBQTBCLEVBQUUsMkRBQTJELGtCQUFrQixFQUFFO0lBQzNHLFlBQXdCLEVBQUUsaURBQWlELGtCQUFrQixFQUFFO0NBQ2hHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlU2l6ZU9wdGlvbiB9IGZyb20gJ0BhdmwtY29udHJvbHMvZGF0YXRhYmxlL2Rpc3QvYXZsLWRhdGF0YWJsZS9hdmwtZGF0YXRhYmxlJztcclxuaW1wb3J0IHtcclxuICBDb2x1bW4sXHJcbiAgQ29sdW1uVHlwZSxcclxuICBMZWFmQ29sdW1uXHJcbn0gZnJvbSAnQGF2bC1jb250cm9scy9kYXRhdGFibGUvZGlzdC9hdmwtZGF0YXRhYmxlL2NvbHVtbi1kZWZpbml0aW9ucyc7XHJcbmltcG9ydCB7IEF2bE5vdGlmaWNhdGlvblR5cGUgfSBmcm9tICdAYXZsLWNvbnRyb2xzL2ludGVyZmFjZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUEFHRV9TSVpFX09QVElPTlM6IFBhZ2VTaXplT3B0aW9uW10gPSBbXHJcbiAgeyB2YWx1ZTogMTUsIGxhYmVsOiAnU2hvdyAxNSBwZXIgcGFnZScgfSxcclxuICB7IHZhbHVlOiA1MCwgbGFiZWw6ICdTaG93IDUwIHBlciBwYWdlJyB9LFxyXG4gIHsgdmFsdWU6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCBsYWJlbDogJ1Nob3cgYWxsJyB9XHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9GSUxURVJTID0ge1xyXG4gIHR5cGU6IHtcclxuICAgIHdhcm5pbmc6IHVuZGVmaW5lZCxcclxuICAgIGVycm9yOiB1bmRlZmluZWQsXHJcbiAgICBpbmZvOiB1bmRlZmluZWQsXHJcbiAgICBvazogdW5kZWZpbmVkXHJcbiAgfSxcclxuICBzdGF0ZToge1xyXG4gICAgcmVhZDogdW5kZWZpbmVkLFxyXG4gICAgdW5yZWFkOiB1bmRlZmluZWRcclxuICB9LFxyXG4gIGRhdGU6IHtcclxuICAgIGRhdGVGcm9tVmFsdWU6IHVuZGVmaW5lZCxcclxuICAgIGRhdGVUb1ZhbHVlOiB1bmRlZmluZWRcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT0xVTU5fREVGSU5JVElPTlMgPSBbXHJcbiAgbmV3IExlYWZDb2x1bW4oJ1ZpekJveC5Ob3RpZmljYXRpb25EaWFsb2cuVHlwZScsICdpY29uJywgQ29sdW1uVHlwZS5JY29uLCBmYWxzZSwgZmFsc2UsIDAuNSksXHJcbiAgbmV3IExlYWZDb2x1bW4oJ1ZpekJveC5Ob3RpZmljYXRpb25EaWFsb2cuTW9kdWxlJywgJ21vZHVsZScsIENvbHVtblR5cGUuVGV4dCwgdHJ1ZSwgZmFsc2UsIDMpLFxyXG4gIG5ldyBMZWFmQ29sdW1uKFxyXG4gICAgJ1ZpekJveC5Ob3RpZmljYXRpb25EaWFsb2cuTWVzc2FnZScsXHJcbiAgICAnbWVzc2FnZVRleHQnLFxyXG4gICAgQ29sdW1uVHlwZS5UZXh0LFxyXG4gICAgdHJ1ZSxcclxuICAgIGZhbHNlLFxyXG4gICAgOFxyXG4gICksXHJcbiAgbmV3IExlYWZDb2x1bW4oJ1ZpekJveC5Ob3RpZmljYXRpb25EaWFsb2cuSWQnLCAnaWQnLCBDb2x1bW5UeXBlLk51bWJlciwgZmFsc2UsIGZhbHNlLCAxKSxcclxuICA8Q29sdW1uPntcclxuICAgIGNhcHRpb246ICdWaXpCb3guTm90aWZpY2F0aW9uRGlhbG9nLlRpbWVzdGFtcCcsXHJcbiAgICB2YWx1ZUZpZWxkOiAndGltZXN0YW1wJyxcclxuICAgIHR5cGU6IENvbHVtblR5cGUuRGF0ZSxcclxuICAgIHNvcnRhYmxlOiBmYWxzZSxcclxuICAgIGZpbHRlcmFibGU6IGZhbHNlLFxyXG4gICAgZmxleFdpZHRoOiAzLFxyXG4gICAgZGF0ZVRpbWVPcHRpb25zOiB7IGZvcm1hdDogJ2RhdGUtdGltZS1zaG9ydCcgfVxyXG4gIH0sXHJcbiAgbmV3IExlYWZDb2x1bW4oXHJcbiAgICAnVml6Qm94Lk5vdGlmaWNhdGlvbkRpYWxvZy5TdGF0ZScsXHJcbiAgICAnY3VycmVudEljb25Ub2dnbGUnLFxyXG4gICAgQ29sdW1uVHlwZS5JY29uLFxyXG4gICAgZmFsc2UsXHJcbiAgICBmYWxzZSxcclxuICAgIDFcclxuICApXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgTk9USUZJQ0FUSU9OX1RZUEVfTUFQUElOR1MgPSB7XHJcbiAgWzBdOiAnZXJyb3InLFxyXG4gIFsxXTogJ3dhcm5pbmcnLFxyXG4gIFsyXTogJ2luZm8nLFxyXG4gIFszXTogJ29rJyxcclxuICBmYWxzZTogJ3VucmVhZCcsXHJcbiAgdHJ1ZTogJ3JlYWQnXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVFlQRV9JQ09OX01BUFBJTkdTID0ge1xyXG4gIFtBdmxOb3RpZmljYXRpb25UeXBlLkVycm9yXTogJ2NhbmNlbCcsXHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuV2FybmluZ106ICd3YXJuaW5nJyxcclxuICBbQXZsTm90aWZpY2F0aW9uVHlwZS5JbmZvXTogJ2luZm8tb3V0bGluZScsXHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuT0tdOiAnY2hlY2snXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgU1RBVEVfSUNPTl9NQVBQSU5HUyA9IHtcclxuICBmYWxzZTogJ21haWwnLFxyXG4gIHRydWU6ICdjb21tdW5pY2F0aW9uOm1haWwtb3V0bGluZSdcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0lDT05fU1RZTEUgPSAnaGVpZ2h0OjI0cHg7IHdpZHRoOjI0cHg7JztcclxuXHJcbmV4cG9ydCBjb25zdCBUWVBFX0lDT05fU1RZTEVfTUFQUElOR1MgPSB7XHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuRXJyb3JdOiBgLS1hdmwtaWNvbi1jdXN0b20tY29sb3I6IHZhcigtLWF2bC1lcnJvci1jb2xvcik7ICR7REVGQVVMVF9JQ09OX1NUWUxFfWAsXHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuV2FybmluZ106IGAtLWF2bC1pY29uLWN1c3RvbS1jb2xvcjogdmFyKC0tYXZsLXdhcm5pbmctY29sb3IpOyAke0RFRkFVTFRfSUNPTl9TVFlMRX1gLFxyXG4gIFtBdmxOb3RpZmljYXRpb25UeXBlLkluZm9dOiBgLS1hdmwtaWNvbi1jdXN0b20tY29sb3I6IHZhcigtLWF2bC1pY29uLWRlZmF1bHQtY29sb3IpOyAke0RFRkFVTFRfSUNPTl9TVFlMRX1gLFxyXG4gIFtBdmxOb3RpZmljYXRpb25UeXBlLk9LXTogYC0tYXZsLWljb24tY3VzdG9tLWNvbG9yOiB2YXIoLS1hdmwtb2stY29sb3IpOyAke0RFRkFVTFRfSUNPTl9TVFlMRX1gXHJcbn07XHJcblxyXG4iXX0=