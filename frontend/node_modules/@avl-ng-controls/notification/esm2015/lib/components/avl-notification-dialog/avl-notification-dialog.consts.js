import { ColumnType, LeafColumn } from '@avl-controls/datatable/dist/avl-datatable/column-definitions';
export const DEFAULT_PAGE_SIZE_OPTIONS = [
    { value: 15, label: 'Show 15 per page' },
    { value: 50, label: 'Show 50 per page' },
    { value: Number.MAX_SAFE_INTEGER, label: 'Show all' }
];
export const DEFAULT_FILTERS = {
    type: {
        warning: undefined,
        error: undefined,
        info: undefined,
        ok: undefined
    },
    state: {
        read: undefined,
        unread: undefined
    },
    date: {
        dateFrom: undefined,
        dateTo: undefined
    },
    search: undefined
};
export const DEFAULT_COLUMN_DEFINITIONS = [
    new LeafColumn('VizBox.NotificationDialog.Type', 'icon', ColumnType.Icon, false, false, 0.5),
    new LeafColumn('VizBox.NotificationDialog.Module', 'module', ColumnType.Text, true, false, 3),
    new LeafColumn('VizBox.NotificationDialog.Message', 'messageText', ColumnType.Text, true, false, 8),
    new LeafColumn('VizBox.NotificationDialog.Id', 'id', ColumnType.Number, false, false, 1),
    {
        caption: 'VizBox.NotificationDialog.Timestamp',
        valueField: 'timestamp',
        type: ColumnType.Date,
        sortable: false,
        filterable: false,
        flexWidth: 3,
        dateTimeOptions: { format: 'date-time-short' }
    },
    new LeafColumn('VizBox.NotificationDialog.State', 'currentIconToggle', ColumnType.Icon, false, false, 1)
];
export const NOTIFICATION_TYPE_MAPPINGS = new Map([
    [0 /* Error */, 'error'],
    [1 /* Warning */, 'warning'],
    [2 /* Info */, 'info'],
    [3 /* OK */, 'ok'],
    [false, 'unread'],
    [true, 'read']
]);
export const TYPE_ICON_MAPPINGS = {
    [0 /* Error */]: 'cancel',
    [1 /* Warning */]: 'warning',
    [2 /* Info */]: 'info-outline',
    [3 /* OK */]: 'check'
};
export const STATE_ICON_MAPPINGS = {
    false: 'mail',
    true: 'communication:mail-outline'
};
export const DEFAULT_ICON_STYLE = 'height:24px; width:24px;';
export const TYPE_ICON_STYLE_MAPPINGS = {
    [0 /* Error */]: `--avl-icon-custom-color: var(--avl-error-color); ${DEFAULT_ICON_STYLE}`,
    [1 /* Warning */]: `--avl-icon-custom-color: var(--avl-warning-color); ${DEFAULT_ICON_STYLE}`,
    [2 /* Info */]: `--avl-icon-custom-color: var(--avl-icon-default-color); ${DEFAULT_ICON_STYLE}`,
    [3 /* OK */]: `--avl-icon-custom-color: var(--avl-ok-color); ${DEFAULT_ICON_STYLE}`
};
export const TRANSLATION_BASE = 'VizBox.NotificationDialog.';
export const ACTION_BUTTONS = [
    {
        id: 'unread',
        tooltip: TRANSLATION_BASE + "MarkSelectedAsUnread"
    },
    {
        id: 'read',
        tooltip: TRANSLATION_BASE + "MarkSelectedAsRead"
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW5vdGlmaWNhdGlvbi1kaWFsb2cuY29uc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbm90aWZpY2F0aW9uL3NyYy9saWIvY29tcG9uZW50cy9hdmwtbm90aWZpY2F0aW9uLWRpYWxvZy9hdmwtbm90aWZpY2F0aW9uLWRpYWxvZy5jb25zdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUVMLFVBQVUsRUFDVixVQUFVLEVBQ1gsTUFBTSwrREFBK0QsQ0FBQztBQUd2RSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBcUI7SUFDekQsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtJQUN4QyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFO0lBQ3hDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO0NBQ3RELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7SUFDN0IsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLFNBQVM7UUFDbEIsS0FBSyxFQUFFLFNBQVM7UUFDaEIsSUFBSSxFQUFFLFNBQVM7UUFDZixFQUFFLEVBQUUsU0FBUztLQUNkO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsU0FBUztLQUNsQjtJQUNELElBQUksRUFBRTtRQUNKLFFBQVEsRUFBRSxTQUFTO1FBQ25CLE1BQU0sRUFBRSxTQUFTO0tBQ2xCO0lBQ0QsTUFBTSxFQUFFLFNBQVM7Q0FDbEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHO0lBQ3hDLElBQUksVUFBVSxDQUFDLGdDQUFnQyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDO0lBQzVGLElBQUksVUFBVSxDQUFDLGtDQUFrQyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzdGLElBQUksVUFBVSxDQUNaLG1DQUFtQyxFQUNuQyxhQUFhLEVBQ2IsVUFBVSxDQUFDLElBQUksRUFDZixJQUFJLEVBQ0osS0FBSyxFQUNMLENBQUMsQ0FDRjtJQUNELElBQUksVUFBVSxDQUFDLDhCQUE4QixFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGO1FBQ04sT0FBTyxFQUFFLHFDQUFxQztRQUM5QyxVQUFVLEVBQUUsV0FBVztRQUN2QixJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUk7UUFDckIsUUFBUSxFQUFFLEtBQUs7UUFDZixVQUFVLEVBQUUsS0FBSztRQUNqQixTQUFTLEVBQUUsQ0FBQztRQUNaLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRTtLQUMvQztJQUNELElBQUksVUFBVSxDQUNaLGlDQUFpQyxFQUNqQyxtQkFBbUIsRUFDbkIsVUFBVSxDQUFDLElBQUksRUFDZixLQUFLLEVBQ0wsS0FBSyxFQUNMLENBQUMsQ0FDRjtDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLEdBQUcsQ0FBMkI7SUFDMUUsZ0JBQTRCLE9BQU8sQ0FBQztJQUNwQyxrQkFBOEIsU0FBUyxDQUFDO0lBQ3hDLGVBQTJCLE1BQU0sQ0FBQztJQUNsQyxhQUF5QixJQUFJLENBQUM7SUFDOUIsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDO0lBQ2pCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztDQUNmLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDLGVBQTJCLEVBQUUsUUFBUTtJQUNyQyxpQkFBNkIsRUFBRSxTQUFTO0lBQ3hDLGNBQTBCLEVBQUUsY0FBYztJQUMxQyxZQUF3QixFQUFFLE9BQU87Q0FDbEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHO0lBQ2pDLEtBQUssRUFBRSxNQUFNO0lBQ2IsSUFBSSxFQUFFLDRCQUE0QjtDQUNuQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsMEJBQTBCLENBQUM7QUFFN0QsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUc7SUFDdEMsZUFBMkIsRUFBRSxvREFBb0Qsa0JBQWtCLEVBQUU7SUFDckcsaUJBQTZCLEVBQUUsc0RBQXNELGtCQUFrQixFQUFFO0lBQ3pHLGNBQTBCLEVBQUUsMkRBQTJELGtCQUFrQixFQUFFO0lBQzNHLFlBQXdCLEVBQUUsaURBQWlELGtCQUFrQixFQUFFO0NBQ2hHLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyw0QkFBNEIsQ0FBQztBQUU3RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUc7SUFDNUI7UUFDRSxFQUFFLEVBQUUsUUFBUTtRQUNaLE9BQU8sRUFBRSxnQkFBZ0IsR0FBRyxzQkFBc0I7S0FDbkQ7SUFDRDtRQUNFLEVBQUUsRUFBRSxNQUFNO1FBQ1YsT0FBTyxFQUFFLGdCQUFnQixHQUFHLG9CQUFvQjtLQUNqRDtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlU2l6ZU9wdGlvbiB9IGZyb20gJ0BhdmwtY29udHJvbHMvZGF0YXRhYmxlL2Rpc3QvYXZsLWRhdGF0YWJsZS9hdmwtZGF0YXRhYmxlJztcclxuaW1wb3J0IHtcclxuICBDb2x1bW4sXHJcbiAgQ29sdW1uVHlwZSxcclxuICBMZWFmQ29sdW1uXHJcbn0gZnJvbSAnQGF2bC1jb250cm9scy9kYXRhdGFibGUvZGlzdC9hdmwtZGF0YXRhYmxlL2NvbHVtbi1kZWZpbml0aW9ucyc7XHJcbmltcG9ydCB7IEF2bE5vdGlmaWNhdGlvblR5cGUgfSBmcm9tICdAYXZsLWludGVyZmFjZXMvaW50ZXJmYWNlcyc7XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9QQUdFX1NJWkVfT1BUSU9OUzogUGFnZVNpemVPcHRpb25bXSA9IFtcclxuICB7IHZhbHVlOiAxNSwgbGFiZWw6ICdTaG93IDE1IHBlciBwYWdlJyB9LFxyXG4gIHsgdmFsdWU6IDUwLCBsYWJlbDogJ1Nob3cgNTAgcGVyIHBhZ2UnIH0sXHJcbiAgeyB2YWx1ZTogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIGxhYmVsOiAnU2hvdyBhbGwnIH1cclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZJTFRFUlMgPSB7XHJcbiAgdHlwZToge1xyXG4gICAgd2FybmluZzogdW5kZWZpbmVkLFxyXG4gICAgZXJyb3I6IHVuZGVmaW5lZCxcclxuICAgIGluZm86IHVuZGVmaW5lZCxcclxuICAgIG9rOiB1bmRlZmluZWRcclxuICB9LFxyXG4gIHN0YXRlOiB7XHJcbiAgICByZWFkOiB1bmRlZmluZWQsXHJcbiAgICB1bnJlYWQ6IHVuZGVmaW5lZFxyXG4gIH0sXHJcbiAgZGF0ZToge1xyXG4gICAgZGF0ZUZyb206IHVuZGVmaW5lZCxcclxuICAgIGRhdGVUbzogdW5kZWZpbmVkXHJcbiAgfSxcclxuICBzZWFyY2g6IHVuZGVmaW5lZFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ09MVU1OX0RFRklOSVRJT05TID0gW1xyXG4gIG5ldyBMZWFmQ29sdW1uKCdWaXpCb3guTm90aWZpY2F0aW9uRGlhbG9nLlR5cGUnLCAnaWNvbicsIENvbHVtblR5cGUuSWNvbiwgZmFsc2UsIGZhbHNlLCAwLjUpLFxyXG4gIG5ldyBMZWFmQ29sdW1uKCdWaXpCb3guTm90aWZpY2F0aW9uRGlhbG9nLk1vZHVsZScsICdtb2R1bGUnLCBDb2x1bW5UeXBlLlRleHQsIHRydWUsIGZhbHNlLCAzKSxcclxuICBuZXcgTGVhZkNvbHVtbihcclxuICAgICdWaXpCb3guTm90aWZpY2F0aW9uRGlhbG9nLk1lc3NhZ2UnLFxyXG4gICAgJ21lc3NhZ2VUZXh0JyxcclxuICAgIENvbHVtblR5cGUuVGV4dCxcclxuICAgIHRydWUsXHJcbiAgICBmYWxzZSxcclxuICAgIDhcclxuICApLFxyXG4gIG5ldyBMZWFmQ29sdW1uKCdWaXpCb3guTm90aWZpY2F0aW9uRGlhbG9nLklkJywgJ2lkJywgQ29sdW1uVHlwZS5OdW1iZXIsIGZhbHNlLCBmYWxzZSwgMSksXHJcbiAgPENvbHVtbj57XHJcbiAgICBjYXB0aW9uOiAnVml6Qm94Lk5vdGlmaWNhdGlvbkRpYWxvZy5UaW1lc3RhbXAnLFxyXG4gICAgdmFsdWVGaWVsZDogJ3RpbWVzdGFtcCcsXHJcbiAgICB0eXBlOiBDb2x1bW5UeXBlLkRhdGUsXHJcbiAgICBzb3J0YWJsZTogZmFsc2UsXHJcbiAgICBmaWx0ZXJhYmxlOiBmYWxzZSxcclxuICAgIGZsZXhXaWR0aDogMyxcclxuICAgIGRhdGVUaW1lT3B0aW9uczogeyBmb3JtYXQ6ICdkYXRlLXRpbWUtc2hvcnQnIH1cclxuICB9LFxyXG4gIG5ldyBMZWFmQ29sdW1uKFxyXG4gICAgJ1ZpekJveC5Ob3RpZmljYXRpb25EaWFsb2cuU3RhdGUnLFxyXG4gICAgJ2N1cnJlbnRJY29uVG9nZ2xlJyxcclxuICAgIENvbHVtblR5cGUuSWNvbixcclxuICAgIGZhbHNlLFxyXG4gICAgZmFsc2UsXHJcbiAgICAxXHJcbiAgKVxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IE5PVElGSUNBVElPTl9UWVBFX01BUFBJTkdTID0gbmV3IE1hcDxudW1iZXIgfCBib29sZWFuLCBzdHJpbmc+KFtcclxuICBbQXZsTm90aWZpY2F0aW9uVHlwZS5FcnJvciwgJ2Vycm9yJ10sXHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuV2FybmluZywgJ3dhcm5pbmcnXSxcclxuICBbQXZsTm90aWZpY2F0aW9uVHlwZS5JbmZvLCAnaW5mbyddLFxyXG4gIFtBdmxOb3RpZmljYXRpb25UeXBlLk9LLCAnb2snXSxcclxuICBbZmFsc2UsICd1bnJlYWQnXSxcclxuICBbdHJ1ZSwgJ3JlYWQnXVxyXG5dKTtcclxuXHJcbmV4cG9ydCBjb25zdCBUWVBFX0lDT05fTUFQUElOR1MgPSB7XHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuRXJyb3JdOiAnY2FuY2VsJyxcclxuICBbQXZsTm90aWZpY2F0aW9uVHlwZS5XYXJuaW5nXTogJ3dhcm5pbmcnLFxyXG4gIFtBdmxOb3RpZmljYXRpb25UeXBlLkluZm9dOiAnaW5mby1vdXRsaW5lJyxcclxuICBbQXZsTm90aWZpY2F0aW9uVHlwZS5PS106ICdjaGVjaydcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBTVEFURV9JQ09OX01BUFBJTkdTID0ge1xyXG4gIGZhbHNlOiAnbWFpbCcsXHJcbiAgdHJ1ZTogJ2NvbW11bmljYXRpb246bWFpbC1vdXRsaW5lJ1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSUNPTl9TVFlMRSA9ICdoZWlnaHQ6MjRweDsgd2lkdGg6MjRweDsnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRZUEVfSUNPTl9TVFlMRV9NQVBQSU5HUyA9IHtcclxuICBbQXZsTm90aWZpY2F0aW9uVHlwZS5FcnJvcl06IGAtLWF2bC1pY29uLWN1c3RvbS1jb2xvcjogdmFyKC0tYXZsLWVycm9yLWNvbG9yKTsgJHtERUZBVUxUX0lDT05fU1RZTEV9YCxcclxuICBbQXZsTm90aWZpY2F0aW9uVHlwZS5XYXJuaW5nXTogYC0tYXZsLWljb24tY3VzdG9tLWNvbG9yOiB2YXIoLS1hdmwtd2FybmluZy1jb2xvcik7ICR7REVGQVVMVF9JQ09OX1NUWUxFfWAsXHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuSW5mb106IGAtLWF2bC1pY29uLWN1c3RvbS1jb2xvcjogdmFyKC0tYXZsLWljb24tZGVmYXVsdC1jb2xvcik7ICR7REVGQVVMVF9JQ09OX1NUWUxFfWAsXHJcbiAgW0F2bE5vdGlmaWNhdGlvblR5cGUuT0tdOiBgLS1hdmwtaWNvbi1jdXN0b20tY29sb3I6IHZhcigtLWF2bC1vay1jb2xvcik7ICR7REVGQVVMVF9JQ09OX1NUWUxFfWBcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBUUkFOU0xBVElPTl9CQVNFID0gJ1ZpekJveC5Ob3RpZmljYXRpb25EaWFsb2cuJztcclxuXHJcbmV4cG9ydCBjb25zdCBBQ1RJT05fQlVUVE9OUyA9IFtcclxuICB7XHJcbiAgICBpZDogJ3VucmVhZCcsXHJcbiAgICB0b29sdGlwOiBUUkFOU0xBVElPTl9CQVNFICsgXCJNYXJrU2VsZWN0ZWRBc1VucmVhZFwiXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ3JlYWQnLFxyXG4gICAgdG9vbHRpcDogVFJBTlNMQVRJT05fQkFTRSArIFwiTWFya1NlbGVjdGVkQXNSZWFkXCJcclxuICB9XHJcbl07XHJcbiJdfQ==