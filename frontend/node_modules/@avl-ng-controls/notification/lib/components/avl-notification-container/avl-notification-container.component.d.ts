import { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import '@avl-controls/core/dist/avl-snackbar/avl-snackbar';
import { AvlNotification } from '@avl-interfaces/interfaces';
import { SnackbarStack } from './snackbar-stack';
import * as i0 from "@angular/core";
export declare class AvlNotificationContainerComponent implements OnInit, OnDestroy, AfterViewChecked {
    readonly cdRef: ChangeDetectorRef;
    /** @hidden */
    positionTop: string;
    /** @hidden */
    warningStackElement: ElementRef;
    /** @hidden */
    infoStackElement: ElementRef;
    /** @hidden */
    infoStackIndicatorElement: ElementRef;
    /** @hidden */
    warningStackIndicatorElement: ElementRef;
    /** If set optional icon (for info and OK notifications) is displayed, hidden otherwise. */
    displayIcon: boolean;
    /** Observable emits notifications. Default observable emits dummy notifications every 3s for 100s. */
    notification$: Observable<AvlNotification>;
    openMenu: EventEmitter<void>;
    /** @hidden */
    warningStack: SnackbarStack;
    /** @hidden */
    infoStack: SnackbarStack;
    /** @hidden */
    previousNotification: AvlNotification;
    /** @hidden */
    stackHeight: {
        [key: string]: number;
    };
    /** @hidden */
    reopen: boolean;
    /** @hidden */
    notificationList: AvlNotification[];
    private activeNotification;
    private destroyed$;
    constructor(cdRef: ChangeDetectorRef);
    ngOnDestroy(): void;
    ngAfterViewChecked(): void;
    /** @hidden */
    ngOnInit(): void;
    /** @hidden */
    onButtonClicked: (event: any) => void;
    /** @hidden */
    onNotificationDismissed: (event: any, notification: AvlNotification) => void;
    /** @hidden */
    /** Event fired when notification snackbar is clicked
     * depending on the notification flag it opens in new tab
    */
    onNotificationSnackbarClicked(event: Event): void;
    /** @hidden */
    openFromStack: (notification: AvlNotification) => void;
    /** @hidden */
    dismissAll: () => void;
    private handleNotification;
    private updateStackActiveNotification;
    private updateStackNotificationList;
    private silentlyDismissNotification;
    private setStackAnimation;
    private removeNotification;
    private reopenLastNotification;
    private isLastNotificationDismissed;
    private getStack;
    private getStackName;
    static ɵfac: i0.ɵɵFactoryDeclaration<AvlNotificationContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AvlNotificationContainerComponent, "avl-notification-container", never, { "displayIcon": "display-icon"; "notification$": "notification$"; }, { "openMenu": "openMenu"; }, never, never>;
}
