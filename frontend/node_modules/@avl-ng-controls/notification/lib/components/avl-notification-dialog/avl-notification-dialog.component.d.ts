import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { Column } from '@avl-controls/datatable/dist/avl-datatable/column-definitions';
import { AvlDatatable, PageSizeOption } from '@avl-controls/datatable/dist/avl-datatable/avl-datatable';
import { DateRange } from '@avl-controls/core/dist/avl-date/avl-date';
import { AvlNotification, AvlNotificationsCount } from '@avl-interfaces/interfaces';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';
import '@avl-controls/core/dist/avl-checkbox/avl-checkbox';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-date/avl-date';
import { AvlNotificationTableItem } from '../../models/notification-dialog.model';
import { NgForm } from '@angular/forms';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class AvlNotificationDialogComponent implements OnInit {
    open: boolean;
    pageSizeOptions: PageSizeOption[];
    columnDefinitions: Column[];
    notificationsCount: AvlNotificationsCount;
    refreshBadge: boolean;
    get notifications(): AvlNotification[];
    set notifications(notifications: AvlNotification[]);
    openChange: EventEmitter<boolean>;
    filtersChange: EventEmitter<CustomEvent>;
    markSelectedAsRead: EventEmitter<any[]>;
    markSelectedAsUnread: EventEmitter<any[]>;
    tableRefresh: EventEmitter<any[]>;
    selectedPageChanged: EventEmitter<any[]>;
    pageSizeChanged: EventEmitter<any[]>;
    table: ElementRef<AvlDatatable>;
    badge: boolean;
    disableMarkingSelected: boolean;
    filters: any;
    filtersOpen: boolean;
    activeFilters: {
        [key: string]: object;
    };
    private filterFormSubscription;
    set filterForm(filterForm: NgForm);
    translationBase: string;
    actionButtons: {
        id: string;
        tooltip: string;
    }[];
    disabledRange: {
        [key: string]: DateRange[];
    };
    private dateFilterGroupInitHeader;
    dateFilterGroupHeader: string;
    selectedRows: AvlNotificationTableItem[];
    pageSize: number;
    private _notifications;
    protected destroyed$: Subject<void>;
    ngOnDestroy(): void;
    ngOnInit(): void;
    getIconByType(type: string): string;
    /** Emits event when dialog opens or closes */
    openChanged(open: boolean): void;
    onSelectedPageChanged(event: any): void;
    onPageSizeChanged(event: any): void;
    /** Toggles displaying of filter sheet */
    toggleFilters(): void;
    /** Refreshes the datatable when refresh button is clicked */
    refreshTable(): void;
    markAs(state: string): void;
    /** Changes selected notification state to read */
    markAsRead(): void;
    /** Changes selected notification state to unread */
    markAsUnread(): void;
    /**
     * Resets all filters.
     */
    reset(): void;
    /** Called when selection is applied to the table rows */
    selectedValuesChanged(): void;
    /** Updates date filter header labels when date changes */
    updateLabels(): Promise<void>;
    /** Event fired when table row is clicked
     * depending on the notification flag it opens in new tab
     */
    onRowClicked(event: Event): void;
    private handleFiltersChanged;
    /** Calculates active filters from filter object */
    getActiveFilters(filters: object): any;
    /** disable dates before dateFrom in dateTo, and dates after dateTo in dateFrom  */
    private getDisabledRange;
    /** Removes inactive filters from filter object and returns it */
    private removeInactiveFilterKeys;
    /** Formats date time to date-short */
    private formatDateTime;
    /** Deep copy of filters object */
    private deepCopyObject;
    private translateLabels;
    private translatePageSizeOptions;
    private translatePageSizeOption;
    private translateColumns;
    private translateColumnItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<AvlNotificationDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AvlNotificationDialogComponent, "avl-notification-dialog", never, { "open": "open"; "pageSizeOptions": "pageSizeOptions"; "columnDefinitions": "columnDefinitions"; "notificationsCount": "notificationsCount"; "refreshBadge": "refreshBadge"; "notifications": "notifications"; }, { "openChange": "openChange"; "filtersChange": "filtersChange"; "markSelectedAsRead": "markSelectedAsRead"; "markSelectedAsUnread": "markSelectedAsUnread"; "tableRefresh": "tableRefresh"; "selectedPageChanged": "selectedPageChanged"; "pageSizeChanged": "pageSizeChanged"; }, never, never>;
}
