import { ElementRef, EventEmitter, OnInit, ChangeDetectorRef, AfterViewChecked } from '@angular/core';
import { Column } from '@avl-controls/datatable/dist/avl-datatable/column-definitions';
import { AvlDatatable, PageSizeOption } from '@avl-controls/datatable/dist/avl-datatable/avl-datatable';
import { AvlNotification } from '@avl-controls/interfaces';
import '@avl-controls/datatable/dist/avl-datatable/avl-datatable';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';
import '@avl-controls/core/dist/avl-checkbox/avl-checkbox';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-date/avl-date';
import { AvlNotificationTableItem } from '../../models/notification-dialog.model';
import { NgForm } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class AvlNotificationDialogComponent implements OnInit, AfterViewChecked {
    private cdRef;
    open: boolean;
    pageSizeOptions: PageSizeOption[];
    columnDefinitions: Column[];
    get notifications(): AvlNotification[];
    set notifications(notifications: AvlNotification[]);
    openChange: EventEmitter<boolean>;
    markSelectedAsRead: EventEmitter<any[]>;
    markSelectedAsUnread: EventEmitter<any[]>;
    table: ElementRef<AvlDatatable>;
    filterForm: NgForm;
    tableData: AvlNotificationTableItem[];
    filteredData: AvlNotificationTableItem[];
    badge: boolean;
    disableMarkingSelected: boolean;
    filters: any;
    filtersOpen: boolean;
    showRefreshButton: boolean;
    dateFromLabel: string;
    dateToLabel: string;
    private dateFilterGroupInitHeader;
    dateFilterGroupHeader: string;
    selectedRows: AvlNotificationTableItem[];
    pageSize: number;
    appliedFilters: any;
    private _notifications;
    constructor(cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    /** Emits event when dialog opens or closes */
    openChanged(open: boolean): void;
    /** Toggles displaying of filter sheet */
    toggleFilters(): void;
    /** Refreshes the datatable when refresh button is clicked */
    refreshTable(): void;
    /**
     * Invoked when clicking apply button - filters data by given filters.
     */
    applyFilters(): void;
    /** Filters notifications according to applied filters */
    filterData(): void;
    /** Changes selected notification state to read */
    markAsRead(): void;
    /** Changes selected notification state to unread */
    markAsUnread(): void;
    /**
     * Resets all filters.
     */
    reset(): void;
    /** Calculates active filters from filter object */
    getActiveFilters(): Object;
    /** Called when selection is applied to the table rows */
    selectedValuesChanged(): void;
    /** Updates date filter header labels when date changes */
    updateLabels(): Promise<void>;
    /** Calculates number of notifications with specific type */
    getNumberOfNotificationsWithType(data: AvlNotificationTableItem[], type: string): number;
    /** Calculates number of unread notifications */
    getNumberOfUnreadNotifications(data: AvlNotificationTableItem[]): number;
    /** Calculates number of notifications currently displayed in datatable */
    getNumberOfNotifications(): string;
    /** Opens link in new tab when table row is clicked */
    onRowClicked(event: Event): void;
    /** Maps general avl notification list to table specific list */
    private prepareNotifications;
    /** Formats date time to date-short */
    private formatDateTime;
    /** Deep copy of filters object */
    private deepCopyObject;
    /** Determines if element satisfies filter for every key in this.apppliedFilters */
    private doesElementPassEveryFilter;
    private prepareDates;
    private compareDates;
    private updateStateOfSelectedRowsTo;
    private isRowSelected;
    private translateLabels;
    private translatePageSizeOptions;
    private translatePageSizeOption;
    private translateColumns;
    private translateColumnItem;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlNotificationDialogComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlNotificationDialogComponent, "avl-notification-dialog", never, { "open": "open"; "pageSizeOptions": "pageSizeOptions"; "columnDefinitions": "columnDefinitions"; "notifications": "notifications"; }, { "openChange": "openChange"; "markSelectedAsRead": "markSelectedAsRead"; "markSelectedAsUnread": "markSelectedAsUnread"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW5vdGlmaWNhdGlvbi1kaWFsb2cuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImF2bC1ub3RpZmljYXRpb24tZGlhbG9nLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEFmdGVyVmlld0NoZWNrZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnQGF2bC1jb250cm9scy9kYXRhdGFibGUvZGlzdC9hdmwtZGF0YXRhYmxlL2NvbHVtbi1kZWZpbml0aW9ucyc7XHJcbmltcG9ydCB7IEF2bERhdGF0YWJsZSwgUGFnZVNpemVPcHRpb24gfSBmcm9tICdAYXZsLWNvbnRyb2xzL2RhdGF0YWJsZS9kaXN0L2F2bC1kYXRhdGFibGUvYXZsLWRhdGF0YWJsZSc7XHJcbmltcG9ydCB7IEF2bE5vdGlmaWNhdGlvbiB9IGZyb20gJ0BhdmwtY29udHJvbHMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCAnQGF2bC1jb250cm9scy9kYXRhdGFibGUvZGlzdC9hdmwtZGF0YXRhYmxlL2F2bC1kYXRhdGFibGUnO1xyXG5pbXBvcnQgJ0BhdmwtY29udHJvbHMvY29yZS9kaXN0L2F2bC1pY29uLWJ1dHRvbi9hdmwtaWNvbi1idXR0b24nO1xyXG5pbXBvcnQgJ0BhdmwtY29udHJvbHMvY29yZS9kaXN0L2F2bC1pY29uL2F2bC1pY29uJztcclxuaW1wb3J0ICdAYXZsLWNvbnRyb2xzL2NvcmUvZGlzdC9hdmwtc2lkZS1zaGVldC9hdmwtc2lkZS1zaGVldCc7XHJcbmltcG9ydCAnQGF2bC1jb250cm9scy9jb3JlL2Rpc3QvYXZsLWNoZWNrYm94L2F2bC1jaGVja2JveCc7XHJcbmltcG9ydCAnQGF2bC1jb250cm9scy9jb3JlL2Rpc3QvYXZsLXRvb2x0aXAvYXZsLXRvb2x0aXAnO1xyXG5pbXBvcnQgJ0BhdmwtY29udHJvbHMvY29yZS9kaXN0L2F2bC1kYXRlL2F2bC1kYXRlJztcclxuaW1wb3J0IHsgQXZsTm90aWZpY2F0aW9uVGFibGVJdGVtIH0gZnJvbSAnLi4vLi4vbW9kZWxzL25vdGlmaWNhdGlvbi1kaWFsb2cubW9kZWwnO1xyXG5pbXBvcnQgeyBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2bE5vdGlmaWNhdGlvbkRpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCB7XHJcbiAgICBwcml2YXRlIGNkUmVmO1xyXG4gICAgb3BlbjogYm9vbGVhbjtcclxuICAgIHBhZ2VTaXplT3B0aW9uczogUGFnZVNpemVPcHRpb25bXTtcclxuICAgIGNvbHVtbkRlZmluaXRpb25zOiBDb2x1bW5bXTtcclxuICAgIGdldCBub3RpZmljYXRpb25zKCk6IEF2bE5vdGlmaWNhdGlvbltdO1xyXG4gICAgc2V0IG5vdGlmaWNhdGlvbnMobm90aWZpY2F0aW9uczogQXZsTm90aWZpY2F0aW9uW10pO1xyXG4gICAgb3BlbkNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgbWFya1NlbGVjdGVkQXNSZWFkOiBFdmVudEVtaXR0ZXI8YW55W10+O1xyXG4gICAgbWFya1NlbGVjdGVkQXNVbnJlYWQ6IEV2ZW50RW1pdHRlcjxhbnlbXT47XHJcbiAgICB0YWJsZTogRWxlbWVudFJlZjxBdmxEYXRhdGFibGU+O1xyXG4gICAgZmlsdGVyRm9ybTogTmdGb3JtO1xyXG4gICAgdGFibGVEYXRhOiBBdmxOb3RpZmljYXRpb25UYWJsZUl0ZW1bXTtcclxuICAgIGZpbHRlcmVkRGF0YTogQXZsTm90aWZpY2F0aW9uVGFibGVJdGVtW107XHJcbiAgICBiYWRnZTogYm9vbGVhbjtcclxuICAgIGRpc2FibGVNYXJraW5nU2VsZWN0ZWQ6IGJvb2xlYW47XHJcbiAgICBmaWx0ZXJzOiBhbnk7XHJcbiAgICBmaWx0ZXJzT3BlbjogYm9vbGVhbjtcclxuICAgIHNob3dSZWZyZXNoQnV0dG9uOiBib29sZWFuO1xyXG4gICAgZGF0ZUZyb21MYWJlbDogc3RyaW5nO1xyXG4gICAgZGF0ZVRvTGFiZWw6IHN0cmluZztcclxuICAgIHByaXZhdGUgZGF0ZUZpbHRlckdyb3VwSW5pdEhlYWRlcjtcclxuICAgIGRhdGVGaWx0ZXJHcm91cEhlYWRlcjogc3RyaW5nO1xyXG4gICAgc2VsZWN0ZWRSb3dzOiBBdmxOb3RpZmljYXRpb25UYWJsZUl0ZW1bXTtcclxuICAgIHBhZ2VTaXplOiBudW1iZXI7XHJcbiAgICBhcHBsaWVkRmlsdGVyczogYW55O1xyXG4gICAgcHJpdmF0ZSBfbm90aWZpY2F0aW9ucztcclxuICAgIGNvbnN0cnVjdG9yKGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XHJcbiAgICAvKiogRW1pdHMgZXZlbnQgd2hlbiBkaWFsb2cgb3BlbnMgb3IgY2xvc2VzICovXHJcbiAgICBvcGVuQ2hhbmdlZChvcGVuOiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKiBUb2dnbGVzIGRpc3BsYXlpbmcgb2YgZmlsdGVyIHNoZWV0ICovXHJcbiAgICB0b2dnbGVGaWx0ZXJzKCk6IHZvaWQ7XHJcbiAgICAvKiogUmVmcmVzaGVzIHRoZSBkYXRhdGFibGUgd2hlbiByZWZyZXNoIGJ1dHRvbiBpcyBjbGlja2VkICovXHJcbiAgICByZWZyZXNoVGFibGUoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlZCB3aGVuIGNsaWNraW5nIGFwcGx5IGJ1dHRvbiAtIGZpbHRlcnMgZGF0YSBieSBnaXZlbiBmaWx0ZXJzLlxyXG4gICAgICovXHJcbiAgICBhcHBseUZpbHRlcnMoKTogdm9pZDtcclxuICAgIC8qKiBGaWx0ZXJzIG5vdGlmaWNhdGlvbnMgYWNjb3JkaW5nIHRvIGFwcGxpZWQgZmlsdGVycyAqL1xyXG4gICAgZmlsdGVyRGF0YSgpOiB2b2lkO1xyXG4gICAgLyoqIENoYW5nZXMgc2VsZWN0ZWQgbm90aWZpY2F0aW9uIHN0YXRlIHRvIHJlYWQgKi9cclxuICAgIG1hcmtBc1JlYWQoKTogdm9pZDtcclxuICAgIC8qKiBDaGFuZ2VzIHNlbGVjdGVkIG5vdGlmaWNhdGlvbiBzdGF0ZSB0byB1bnJlYWQgKi9cclxuICAgIG1hcmtBc1VucmVhZCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldHMgYWxsIGZpbHRlcnMuXHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCk6IHZvaWQ7XHJcbiAgICAvKiogQ2FsY3VsYXRlcyBhY3RpdmUgZmlsdGVycyBmcm9tIGZpbHRlciBvYmplY3QgKi9cclxuICAgIGdldEFjdGl2ZUZpbHRlcnMoKTogT2JqZWN0O1xyXG4gICAgLyoqIENhbGxlZCB3aGVuIHNlbGVjdGlvbiBpcyBhcHBsaWVkIHRvIHRoZSB0YWJsZSByb3dzICovXHJcbiAgICBzZWxlY3RlZFZhbHVlc0NoYW5nZWQoKTogdm9pZDtcclxuICAgIC8qKiBVcGRhdGVzIGRhdGUgZmlsdGVyIGhlYWRlciBsYWJlbHMgd2hlbiBkYXRlIGNoYW5nZXMgKi9cclxuICAgIHVwZGF0ZUxhYmVscygpOiBQcm9taXNlPHZvaWQ+O1xyXG4gICAgLyoqIENhbGN1bGF0ZXMgbnVtYmVyIG9mIG5vdGlmaWNhdGlvbnMgd2l0aCBzcGVjaWZpYyB0eXBlICovXHJcbiAgICBnZXROdW1iZXJPZk5vdGlmaWNhdGlvbnNXaXRoVHlwZShkYXRhOiBBdmxOb3RpZmljYXRpb25UYWJsZUl0ZW1bXSwgdHlwZTogc3RyaW5nKTogbnVtYmVyO1xyXG4gICAgLyoqIENhbGN1bGF0ZXMgbnVtYmVyIG9mIHVucmVhZCBub3RpZmljYXRpb25zICovXHJcbiAgICBnZXROdW1iZXJPZlVucmVhZE5vdGlmaWNhdGlvbnMoZGF0YTogQXZsTm90aWZpY2F0aW9uVGFibGVJdGVtW10pOiBudW1iZXI7XHJcbiAgICAvKiogQ2FsY3VsYXRlcyBudW1iZXIgb2Ygbm90aWZpY2F0aW9ucyBjdXJyZW50bHkgZGlzcGxheWVkIGluIGRhdGF0YWJsZSAqL1xyXG4gICAgZ2V0TnVtYmVyT2ZOb3RpZmljYXRpb25zKCk6IHN0cmluZztcclxuICAgIC8qKiBPcGVucyBsaW5rIGluIG5ldyB0YWIgd2hlbiB0YWJsZSByb3cgaXMgY2xpY2tlZCAqL1xyXG4gICAgb25Sb3dDbGlja2VkKGV2ZW50OiBFdmVudCk6IHZvaWQ7XHJcbiAgICAvKiogTWFwcyBnZW5lcmFsIGF2bCBub3RpZmljYXRpb24gbGlzdCB0byB0YWJsZSBzcGVjaWZpYyBsaXN0ICovXHJcbiAgICBwcml2YXRlIHByZXBhcmVOb3RpZmljYXRpb25zO1xyXG4gICAgLyoqIEZvcm1hdHMgZGF0ZSB0aW1lIHRvIGRhdGUtc2hvcnQgKi9cclxuICAgIHByaXZhdGUgZm9ybWF0RGF0ZVRpbWU7XHJcbiAgICAvKiogRGVlcCBjb3B5IG9mIGZpbHRlcnMgb2JqZWN0ICovXHJcbiAgICBwcml2YXRlIGRlZXBDb3B5T2JqZWN0O1xyXG4gICAgLyoqIERldGVybWluZXMgaWYgZWxlbWVudCBzYXRpc2ZpZXMgZmlsdGVyIGZvciBldmVyeSBrZXkgaW4gdGhpcy5hcHBwbGllZEZpbHRlcnMgKi9cclxuICAgIHByaXZhdGUgZG9lc0VsZW1lbnRQYXNzRXZlcnlGaWx0ZXI7XHJcbiAgICBwcml2YXRlIHByZXBhcmVEYXRlcztcclxuICAgIHByaXZhdGUgY29tcGFyZURhdGVzO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVTdGF0ZU9mU2VsZWN0ZWRSb3dzVG87XHJcbiAgICBwcml2YXRlIGlzUm93U2VsZWN0ZWQ7XHJcbiAgICBwcml2YXRlIHRyYW5zbGF0ZUxhYmVscztcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlUGFnZVNpemVPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVQYWdlU2l6ZU9wdGlvbjtcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlQ29sdW1ucztcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlQ29sdW1uSXRlbTtcclxufVxyXG4iXX0=