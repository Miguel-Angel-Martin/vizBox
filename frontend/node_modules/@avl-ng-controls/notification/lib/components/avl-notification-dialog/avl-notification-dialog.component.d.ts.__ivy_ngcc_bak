import { ElementRef, EventEmitter, OnInit, ChangeDetectorRef, AfterViewChecked } from '@angular/core';
import { Column } from '@avl-controls/datatable/dist/avl-datatable/column-definitions';
import { AvlDatatable, PageSizeOption } from '@avl-controls/datatable/dist/avl-datatable/avl-datatable';
import { AvlNotification } from '@avl-controls/interfaces';
import '@avl-controls/datatable/dist/avl-datatable/avl-datatable';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';
import '@avl-controls/core/dist/avl-checkbox/avl-checkbox';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-date/avl-date';
import { AvlNotificationTableItem } from '../../models/notification-dialog.model';
import { NgForm } from '@angular/forms';
export declare class AvlNotificationDialogComponent implements OnInit, AfterViewChecked {
    private cdRef;
    open: boolean;
    pageSizeOptions: PageSizeOption[];
    columnDefinitions: Column[];
    get notifications(): AvlNotification[];
    set notifications(notifications: AvlNotification[]);
    openChange: EventEmitter<boolean>;
    markSelectedAsRead: EventEmitter<any[]>;
    markSelectedAsUnread: EventEmitter<any[]>;
    table: ElementRef<AvlDatatable>;
    filterForm: NgForm;
    tableData: AvlNotificationTableItem[];
    filteredData: AvlNotificationTableItem[];
    badge: boolean;
    disableMarkingSelected: boolean;
    filters: any;
    filtersOpen: boolean;
    showRefreshButton: boolean;
    dateFromLabel: string;
    dateToLabel: string;
    private dateFilterGroupInitHeader;
    dateFilterGroupHeader: string;
    selectedRows: AvlNotificationTableItem[];
    pageSize: number;
    appliedFilters: any;
    private _notifications;
    constructor(cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    /** Emits event when dialog opens or closes */
    openChanged(open: boolean): void;
    /** Toggles displaying of filter sheet */
    toggleFilters(): void;
    /** Refreshes the datatable when refresh button is clicked */
    refreshTable(): void;
    /**
     * Invoked when clicking apply button - filters data by given filters.
     */
    applyFilters(): void;
    /** Filters notifications according to applied filters */
    filterData(): void;
    /** Changes selected notification state to read */
    markAsRead(): void;
    /** Changes selected notification state to unread */
    markAsUnread(): void;
    /**
     * Resets all filters.
     */
    reset(): void;
    /** Calculates active filters from filter object */
    getActiveFilters(): Object;
    /** Called when selection is applied to the table rows */
    selectedValuesChanged(): void;
    /** Updates date filter header labels when date changes */
    updateLabels(): Promise<void>;
    /** Calculates number of notifications with specific type */
    getNumberOfNotificationsWithType(data: AvlNotificationTableItem[], type: string): number;
    /** Calculates number of unread notifications */
    getNumberOfUnreadNotifications(data: AvlNotificationTableItem[]): number;
    /** Calculates number of notifications currently displayed in datatable */
    getNumberOfNotifications(): string;
    /** Opens link in new tab when table row is clicked */
    onRowClicked(event: Event): void;
    /** Maps general avl notification list to table specific list */
    private prepareNotifications;
    /** Formats date time to date-short */
    private formatDateTime;
    /** Deep copy of filters object */
    private deepCopyObject;
    /** Determines if element satisfies filter for every key in this.apppliedFilters */
    private doesElementPassEveryFilter;
    private prepareDates;
    private compareDates;
    private updateStateOfSelectedRowsTo;
    private isRowSelected;
    private translateLabels;
    private translatePageSizeOptions;
    private translatePageSizeOption;
    private translateColumns;
    private translateColumnItem;
}
