import { AfterViewInit, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { AvlList } from '@avl-controls/core/dist/avl-list/avl-list.api';
import { AvlOverflowMenuGroup, AvlOverflowMenuItem } from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu.api';
import { AvlNotification } from '@avl-interfaces/interfaces';
import * as i0 from "@angular/core";
export declare class AvlNotificationMenuComponent implements OnInit, AfterViewInit {
    open: boolean;
    trigger: HTMLElement;
    set notifications(notifications: AvlNotification[]);
    get notifications(): AvlNotification[];
    openChange: EventEmitter<boolean>;
    openDetails: EventEmitter<void>;
    notificationStateChanged: EventEmitter<AvlNotification>;
    markAllAsRead: EventEmitter<void>;
    markAllAsUnread: EventEmitter<void>;
    list: ElementRef<AvlList>;
    overflowMenuItems: AvlOverflowMenuGroup[];
    numberOfUnreadNotifications: number;
    private _notifications;
    private overflowMenuHandlers;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    onNotificationStateChanged(event: Event): void;
    onItemClicked(item: AvlOverflowMenuItem): void;
    onOpenChanged(event: Event): void;
    onOverflowMenuClicked(): void;
    onDetailsClicked(): void;
    /**Event fired when list item is clicked on
     * depending on the notification flag it opens in new tab
     */
    onListItemClicked(event: Event): void;
    private translateLabels;
    private translateMenu;
    private translateMenuGroup;
    private translateMenuItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<AvlNotificationMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AvlNotificationMenuComponent, "avl-notification-menu", never, { "open": "open"; "trigger": "trigger"; "notifications": "notifications"; }, { "openChange": "openChange"; "openDetails": "openDetails"; "notificationStateChanged": "notificationStateChanged"; "markAllAsRead": "markAllAsRead"; "markAllAsUnread": "markAllAsUnread"; }, never, never>;
}
