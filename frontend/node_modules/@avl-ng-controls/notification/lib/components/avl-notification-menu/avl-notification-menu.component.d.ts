import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { AvlList } from '@avl-controls/core/dist/avl-list/avl-list.api';
import { AvlOverflowMenuGroup, AvlOverflowMenuItem } from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu.api';
import { AvlNotification } from '@avl-controls/interfaces';
import { AvlNotificationMenuItem } from '../../models/notification-menu.model';
import * as ɵngcc0 from '@angular/core';
export declare class AvlNotificationMenuComponent implements AfterViewInit {
    open: boolean;
    trigger: HTMLElement;
    set notifications(notifications: AvlNotification[]);
    openChange: EventEmitter<boolean>;
    openDetails: EventEmitter<void>;
    notificationStateChanged: EventEmitter<AvlNotification>;
    markAllAsRead: EventEmitter<void>;
    markAllAsUnread: EventEmitter<void>;
    list: ElementRef<AvlList>;
    overflowMenuItems: AvlOverflowMenuGroup[];
    notificationList: AvlNotificationMenuItem[];
    numberOfUnreadNotifications: number;
    private overflowMenuHandlers;
    constructor();
    ngAfterViewInit(): void;
    onNotificationStateChanged(event: Event): void;
    onItemClicked(item: AvlOverflowMenuItem): void;
    onOpenChanged(event: Event): void;
    onOverflowMenuClicked(): void;
    onDetailsClicked(): void;
    private prepareNotifications;
    private formatDateTime;
    private translateLabels;
    private translateMenu;
    private translateMenuGroup;
    private translateMenuItem;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlNotificationMenuComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlNotificationMenuComponent, "avl-notification-menu", never, { "open": "open"; "notifications": "notifications"; "trigger": "trigger"; }, { "openChange": "openChange"; "openDetails": "openDetails"; "notificationStateChanged": "notificationStateChanged"; "markAllAsRead": "markAllAsRead"; "markAllAsUnread": "markAllAsUnread"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW5vdGlmaWNhdGlvbi1tZW51LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdmwtbm90aWZpY2F0aW9uLW1lbnUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEF2bExpc3QgfSBmcm9tICdAYXZsLWNvbnRyb2xzL2NvcmUvZGlzdC9hdmwtbGlzdC9hdmwtbGlzdC5hcGknO1xyXG5pbXBvcnQgeyBBdmxPdmVyZmxvd01lbnVHcm91cCwgQXZsT3ZlcmZsb3dNZW51SXRlbSB9IGZyb20gJ0BhdmwtY29udHJvbHMvY29yZS9kaXN0L2F2bC1vdmVyZmxvdy1tZW51L2F2bC1vdmVyZmxvdy1tZW51LmFwaSc7XHJcbmltcG9ydCB7IEF2bE5vdGlmaWNhdGlvbiB9IGZyb20gJ0BhdmwtY29udHJvbHMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IEF2bE5vdGlmaWNhdGlvbk1lbnVJdGVtIH0gZnJvbSAnLi4vLi4vbW9kZWxzL25vdGlmaWNhdGlvbi1tZW51Lm1vZGVsJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXZsTm90aWZpY2F0aW9uTWVudUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG4gICAgb3BlbjogYm9vbGVhbjtcclxuICAgIHRyaWdnZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgc2V0IG5vdGlmaWNhdGlvbnMobm90aWZpY2F0aW9uczogQXZsTm90aWZpY2F0aW9uW10pO1xyXG4gICAgb3BlbkNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgb3BlbkRldGFpbHM6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIG5vdGlmaWNhdGlvblN0YXRlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPEF2bE5vdGlmaWNhdGlvbj47XHJcbiAgICBtYXJrQWxsQXNSZWFkOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICBtYXJrQWxsQXNVbnJlYWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIGxpc3Q6IEVsZW1lbnRSZWY8QXZsTGlzdD47XHJcbiAgICBvdmVyZmxvd01lbnVJdGVtczogQXZsT3ZlcmZsb3dNZW51R3JvdXBbXTtcclxuICAgIG5vdGlmaWNhdGlvbkxpc3Q6IEF2bE5vdGlmaWNhdGlvbk1lbnVJdGVtW107XHJcbiAgICBudW1iZXJPZlVucmVhZE5vdGlmaWNhdGlvbnM6IG51bWJlcjtcclxuICAgIHByaXZhdGUgb3ZlcmZsb3dNZW51SGFuZGxlcnM7XHJcbiAgICBjb25zdHJ1Y3RvcigpO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBvbk5vdGlmaWNhdGlvblN0YXRlQ2hhbmdlZChldmVudDogRXZlbnQpOiB2b2lkO1xyXG4gICAgb25JdGVtQ2xpY2tlZChpdGVtOiBBdmxPdmVyZmxvd01lbnVJdGVtKTogdm9pZDtcclxuICAgIG9uT3BlbkNoYW5nZWQoZXZlbnQ6IEV2ZW50KTogdm9pZDtcclxuICAgIG9uT3ZlcmZsb3dNZW51Q2xpY2tlZCgpOiB2b2lkO1xyXG4gICAgb25EZXRhaWxzQ2xpY2tlZCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBwcmVwYXJlTm90aWZpY2F0aW9ucztcclxuICAgIHByaXZhdGUgZm9ybWF0RGF0ZVRpbWU7XHJcbiAgICBwcml2YXRlIHRyYW5zbGF0ZUxhYmVscztcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlTWVudTtcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlTWVudUdyb3VwO1xyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVNZW51SXRlbTtcclxufVxyXG4iXX0=