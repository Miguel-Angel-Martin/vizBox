var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BehaviorSubject } from 'rxjs';
import { skipWhile } from 'rxjs/operators';
import { ANIMATION_DURATION, ACTION_BUTTON_MESSAGE } from './avl-notification-container.consts';
import { SnackbarMethodDescription } from './directives/show-hide-snackbar.directive';
/** @hidden */
var SnackbarStack = /** @class */ (function () {
    function SnackbarStack(stackType) {
        var _this = this;
        /** @hidden */
        this.notificationList = [];
        /** @hidden */
        this.activeNotification$ = new BehaviorSubject(undefined);
        /** @hidden */
        this.stackIndicator = false;
        /** @hidden */
        this.actionButtonMessage = ACTION_BUTTON_MESSAGE;
        this.openNextNotification = function (stackType) {
            _this.methodDescription = new SnackbarMethodDescription('show', !_this.reopen);
            if (!_this.reopen) {
                _this.stackAnimation = 1 /* ToTop */;
            }
            else {
                _this.stackAnimation = 4 /* FromStack */;
            }
            _this.setStackIndicatorProperties(stackType);
            _this.reopen = false;
            _this.dismissedSilently = false;
        };
        this.resetValues = function () {
            _this.notificationList = [];
            _this.previousNotification = undefined;
            _this.stackIndicator = undefined;
        };
        this.setStackIndicatorProperties = function (stackType) {
            var notificationsCount = _this.notificationList.length;
            _this.stackIndicator = notificationsCount > 1;
            var timeout = setTimeout(function () {
                _this.previousNotification = _this.notificationList[notificationsCount - 1];
                _this.buttonLabel = _this.setButtonLabel(notificationsCount, stackType);
                _this.stackIndicatorButtonLabel = _this.setButtonLabel(notificationsCount - 1, stackType);
                clearTimeout(timeout);
            }, _this.previousNotification ? ANIMATION_DURATION : 0);
        };
        this.setButtonLabel = function (notificationsCount, type) {
            return notificationsCount > 0
                ? _this.actionButtonMessage
                    .replace('_TYPE ', type === 'info' ? '' : type + ' ')
                    .replace('_X', String(notificationsCount))
                : null;
        };
        this.translateLabels();
        this.methodDescription = new SnackbarMethodDescription(undefined, undefined);
        this.activeNotification$
            .pipe(skipWhile(function (notification) { return notification === undefined; }))
            .subscribe(function (notification) {
            if (notification) {
                if (_this.notificationList.length > 0) {
                    var timeout_1 = setTimeout(function () {
                        _this.openNextNotification(stackType);
                        clearTimeout(timeout_1);
                    }, _this.previousNotification ? ANIMATION_DURATION : 0);
                }
                else {
                    _this.openNextNotification(stackType);
                }
            }
            else {
                _this.resetValues();
            }
        });
    }
    SnackbarStack.prototype.translateLabels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var translationService, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                            return [2 /*return*/];
                        }
                        translationService = AvlLocalizationService.translationService;
                        _a = this;
                        return [4 /*yield*/, translationService.translate('VizBox.NotificationContainer._X_more_TYPE_notifications')];
                    case 1:
                        _a.actionButtonMessage = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return SnackbarStack;
}());
export { SnackbarStack };
//# sourceMappingURL=data:application/json;base64,