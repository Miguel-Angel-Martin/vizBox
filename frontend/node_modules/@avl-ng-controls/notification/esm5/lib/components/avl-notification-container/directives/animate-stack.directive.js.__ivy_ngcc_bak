var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';
import { animate, AnimationBuilder, AnimationMetadata, AnimationPlayer, AnimationStyleMetadata, style } from '@angular/animations';
import { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';
import { SnackbarMethodDescription } from './show-hide-snackbar.directive';
var AnimateStack = /** @class */ (function () {
    function AnimateStack(builder, el) {
        var _this = this;
        this.builder = builder;
        this.getAnimation = function (animationName, initialStyle) {
            var allStyle = style('*');
            switch (animationName) {
                case 2 /* ToBottom */: {
                    return [
                        allStyle,
                        animate(ANIMATION_DURATION + 'ms ease-in', style({
                            top: _this.styleTop + 'px',
                            zIndex: 0
                        }))
                    ];
                }
                case 1 /* ToTop */: {
                    return [allStyle, animate(ANIMATION_DURATION + 'ms ease-in', initialStyle)];
                }
                default:
                    return [initialStyle, animate('0ms', initialStyle)];
            }
        };
        this.element = el;
    }
    AnimateStack.prototype.ngOnChanges = function (changes) {
        var _a;
        if (changes.animateStack) {
            this.move(this.previousStackHeight);
        }
        else if (changes.previousStackHeight) {
            this.move(changes === null || changes === void 0 ? void 0 : changes.previousStackHeight.currentValue);
        }
        else if (changes.snackbarMethodDescription) {
            if (((_a = changes.snackbarMethodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                this.move(this.previousStackHeight);
            }
        }
    };
    AnimateStack.prototype.show = function (metadata) {
        if (this.player) {
            this.player.destroy();
        }
        if (metadata) {
            var factory = this.builder.build(metadata);
            var player = factory.create(this.element.nativeElement);
            player.play();
        }
    };
    AnimateStack.prototype.move = function (height) {
        if (this.animateStack === 2 /* ToBottom */) {
            this.styleTop = height + MARGIN * 2;
        }
        var animationMetadata = this.animate();
        this.show(animationMetadata);
    };
    AnimateStack.prototype.animate = function () {
        var initialStyle = style({
            top: '0',
            width: '100%',
            left: '0',
            zIndex: 1
        });
        return this.getAnimation(this.animateStack, initialStyle);
    };
    AnimateStack.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], AnimateStack.prototype, "animateStack", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AnimateStack.prototype, "notification", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], AnimateStack.prototype, "previousStackHeight", void 0);
    __decorate([
        Input(),
        __metadata("design:type", SnackbarMethodDescription)
    ], AnimateStack.prototype, "snackbarMethodDescription", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], AnimateStack.prototype, "reopen", void 0);
    AnimateStack = __decorate([
        Directive({ selector: '[animateStack]' }),
        __metadata("design:paramtypes", [AnimationBuilder, ElementRef])
    ], AnimateStack);
    return AnimateStack;
}());
export { AnimateStack };
//# sourceMappingURL=data:application/json;base64,