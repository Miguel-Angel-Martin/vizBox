{"version":3,"file":"avl-ng-controls-notification.js","sources":["../../../projects/notification/src/lib/components/avl-notification-menu/avl-notification-menu.consts.ts","../../../projects/notification/src/lib/components/avl-notification-dialog/avl-notification-dialog.consts.ts","../../../projects/notification/src/lib/pipes/prepare-notifications.pipe.ts","../../../projects/notification/src/lib/components/avl-notification-menu/avl-notification-menu.component.ts","../../../projects/notification/src/lib/components/avl-notification-menu/avl-notification-menu.component.html","../../../projects/notification/src/lib/components/avl-notification-container/avl-notification-container.consts.ts","../../../projects/notification/src/lib/components/avl-notification-container/directives/animate-button.directive.ts","../../../projects/notification/src/lib/components/avl-notification-container/directives/animate-snackbar.directive.ts","../../../projects/notification/src/lib/components/avl-notification-container/directives/animate-stack.directive.ts","../../../projects/notification/src/lib/components/avl-notification-container/directives/show-hide-snackbar.directive.ts","../../../projects/notification/src/lib/components/avl-notification-container/directives/snackbar-listener.directive.ts","../../../projects/notification/src/lib/components/avl-notification-container/snackbar-stack.ts","../../../projects/notification/src/lib/components/avl-notification-container/avl-notification-container.component.ts","../../../projects/notification/src/lib/components/avl-notification-container/avl-notification-container.component.html","../../../projects/notification/src/lib/components/avl-notification-dialog/date-validator.directive.ts","../../../projects/notification/src/lib/pipes/iterable-object.pipe.ts","../../../projects/notification/src/lib/pipes/capitalize.pipe.ts","../../../projects/notification/src/lib/components/avl-notification-dialog/avl-notification-dialog.component.ts","../../../projects/notification/src/lib/components/avl-notification-dialog/avl-notification-dialog.component.html","../../../projects/notification/src/lib/notification.module.ts","../../../projects/notification/src/public-api.ts","../../../projects/notification/src/avl-ng-controls-notification.ts"],"sourcesContent":["import { AvlOverflowMenuGroup } from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu';\r\nimport { AvlNotificationType } from '@avl-interfaces/interfaces';\r\n\r\nexport const NOTIFICATIONS_OVERFLOW_MENU: AvlOverflowMenuGroup[] = [\r\n  {\r\n    items: [\r\n      {\r\n        label: 'VizBox.NotificationMenu.MarkAllAsRead',\r\n        action: 'markAllAsRead'\r\n      },\r\n      {\r\n        label: 'VizBox.NotificationMenu.MarkAllAsUnread',\r\n        action: 'markAllAsUnread'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const TYPE_ICON_MAPPINGS = {\r\n  [AvlNotificationType.Error]: 'cancel',\r\n  [AvlNotificationType.Warning]: 'warning',\r\n  [AvlNotificationType.Info]: 'info-outline',\r\n  [AvlNotificationType.OK]: 'check'\r\n};\r\n","import { PageSizeOption } from '@avl-controls/datatable/dist/avl-datatable/avl-datatable';\r\nimport {\r\n  Column,\r\n  ColumnType,\r\n  LeafColumn\r\n} from '@avl-controls/datatable/dist/avl-datatable/column-definitions';\r\nimport { AvlNotificationType } from '@avl-interfaces/interfaces';\r\n\r\nexport const DEFAULT_PAGE_SIZE_OPTIONS: PageSizeOption[] = [\r\n  { value: 15, label: 'Show 15 per page' },\r\n  { value: 50, label: 'Show 50 per page' },\r\n  { value: Number.MAX_SAFE_INTEGER, label: 'Show all' }\r\n];\r\n\r\nexport const DEFAULT_FILTERS = {\r\n  type: {\r\n    warning: undefined,\r\n    error: undefined,\r\n    info: undefined,\r\n    ok: undefined\r\n  },\r\n  state: {\r\n    read: undefined,\r\n    unread: undefined\r\n  },\r\n  date: {\r\n    dateFrom: undefined,\r\n    dateTo: undefined\r\n  },\r\n  search: undefined\r\n};\r\n\r\nexport const DEFAULT_COLUMN_DEFINITIONS = [\r\n  new LeafColumn('VizBox.NotificationDialog.Type', 'icon', ColumnType.Icon, false, false, 0.5),\r\n  new LeafColumn('VizBox.NotificationDialog.Module', 'module', ColumnType.Text, true, false, 3),\r\n  new LeafColumn(\r\n    'VizBox.NotificationDialog.Message',\r\n    'messageText',\r\n    ColumnType.Text,\r\n    true,\r\n    false,\r\n    8\r\n  ),\r\n  new LeafColumn('VizBox.NotificationDialog.Id', 'id', ColumnType.Number, false, false, 1),\r\n  <Column>{\r\n    caption: 'VizBox.NotificationDialog.Timestamp',\r\n    valueField: 'timestamp',\r\n    type: ColumnType.Date,\r\n    sortable: false,\r\n    filterable: false,\r\n    flexWidth: 3,\r\n    dateTimeOptions: { format: 'date-time-short' }\r\n  },\r\n  new LeafColumn(\r\n    'VizBox.NotificationDialog.State',\r\n    'currentIconToggle',\r\n    ColumnType.Icon,\r\n    false,\r\n    false,\r\n    1\r\n  )\r\n];\r\n\r\nexport const NOTIFICATION_TYPE_MAPPINGS = new Map<number | boolean, string>([\r\n  [AvlNotificationType.Error, 'error'],\r\n  [AvlNotificationType.Warning, 'warning'],\r\n  [AvlNotificationType.Info, 'info'],\r\n  [AvlNotificationType.OK, 'ok'],\r\n  [false, 'unread'],\r\n  [true, 'read']\r\n]);\r\n\r\nexport const TYPE_ICON_MAPPINGS = {\r\n  [AvlNotificationType.Error]: 'cancel',\r\n  [AvlNotificationType.Warning]: 'warning',\r\n  [AvlNotificationType.Info]: 'info-outline',\r\n  [AvlNotificationType.OK]: 'check'\r\n};\r\n\r\nexport const STATE_ICON_MAPPINGS = {\r\n  false: 'mail',\r\n  true: 'communication:mail-outline'\r\n};\r\n\r\nexport const DEFAULT_ICON_STYLE = 'height:24px; width:24px;';\r\n\r\nexport const TYPE_ICON_STYLE_MAPPINGS = {\r\n  [AvlNotificationType.Error]: `--avl-icon-custom-color: var(--avl-error-color); ${DEFAULT_ICON_STYLE}`,\r\n  [AvlNotificationType.Warning]: `--avl-icon-custom-color: var(--avl-warning-color); ${DEFAULT_ICON_STYLE}`,\r\n  [AvlNotificationType.Info]: `--avl-icon-custom-color: var(--avl-icon-default-color); ${DEFAULT_ICON_STYLE}`,\r\n  [AvlNotificationType.OK]: `--avl-icon-custom-color: var(--avl-ok-color); ${DEFAULT_ICON_STYLE}`\r\n};\r\n\r\nexport const TRANSLATION_BASE = 'VizBox.NotificationDialog.';\r\n\r\nexport const ACTION_BUTTONS = [\r\n  {\r\n    id: 'unread',\r\n    tooltip: TRANSLATION_BASE + \"MarkSelectedAsUnread\"\r\n  },\r\n  {\r\n    id: 'read',\r\n    tooltip: TRANSLATION_BASE + \"MarkSelectedAsRead\"\r\n  }\r\n];\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { AvlNotification } from '@avl-interfaces/interfaces';\r\nimport { AvlNotificationTableItem } from '../models/notification-dialog.model';\r\nimport { AvlNotificationMenuItem } from '../models/notification-menu.model';\r\nimport {\r\n  DEFAULT_ICON_STYLE,\r\n  STATE_ICON_MAPPINGS,\r\n  TYPE_ICON_MAPPINGS,\r\n  TYPE_ICON_STYLE_MAPPINGS\r\n} from '../components/avl-notification-dialog/avl-notification-dialog.consts';\r\n\r\n@Pipe({\r\n  name: 'prepareNotifications'\r\n})\r\n\r\n/** Maps general avl notification list to table specific list */\r\nexport class PrepareNotificationsPipe implements PipeTransform {\r\n  transform(\r\n    notifications: AvlNotification[],\r\n    prepareFor: 'dialog' | 'menu'\r\n  ): AvlNotificationTableItem[] | AvlNotificationMenuItem[] {\r\n    return this[prepareFor](notifications);\r\n  }\r\n  dialog(notifications: AvlNotification[]): AvlNotificationTableItem[] {\r\n    return notifications.map(notification => ({\r\n      ...notification,\r\n      icon: TYPE_ICON_MAPPINGS[notification.type],\r\n      iconStyle: TYPE_ICON_STYLE_MAPPINGS[notification.type],\r\n      currentIconToggle: STATE_ICON_MAPPINGS[String(notification.read)],\r\n      currentIconToggleStyle: DEFAULT_ICON_STYLE,\r\n      state: notification.read\r\n    }));\r\n  }\r\n  menu(notifications: AvlNotification[]): AvlNotificationMenuItem[] {\r\n    return notifications.map(notification => ({\r\n      ...notification,\r\n      label: notification.messageText,\r\n      sublabel: this.formatDateTime(notification.timestamp),\r\n      icon: TYPE_ICON_MAPPINGS[notification.type],\r\n      iconToggleUnchecked: 'mail',\r\n      iconToggleChecked: 'communication:mail-outline',\r\n      iconToggleValue: notification.read\r\n    }));\r\n  }\r\n  private formatDateTime(date: Date): string {\r\n    return date === null\r\n      ? ''\r\n      : `${AvlLocalizationService.formatDateTime(date, {\r\n          format: 'date-short'\r\n        })} ${AvlLocalizationService.formatDateTime(date, { format: 'time-long' })}`;\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AvlList } from '@avl-controls/core/dist/avl-list/avl-list.api';\r\nimport {\r\n  AvlOverflowMenuGroup,\r\n  AvlOverflowMenuItem\r\n} from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu.api';\r\nimport { AvlNotification } from '@avl-interfaces/interfaces';\r\nimport { AvlNotificationMenuItem } from '../../models/notification-menu.model';\r\nimport { NOTIFICATIONS_OVERFLOW_MENU } from './avl-notification-menu.consts';\r\n\r\n@Component({\r\n  selector: 'avl-notification-menu',\r\n  templateUrl: './avl-notification-menu.component.html',\r\n  styleUrls: ['./avl-notification-menu.component.css']\r\n})\r\nexport class AvlNotificationMenuComponent implements OnInit, AfterViewInit {\r\n  @Input() open: boolean = false;\r\n  @Input() trigger: HTMLElement;\r\n  @Input()\r\n  set notifications(notifications: AvlNotification[]) {\r\n    this.numberOfUnreadNotifications = notifications.filter(notif => !notif.read).length;\r\n    this._notifications = notifications;\r\n  }\r\n  get notifications() {\r\n    return this._notifications;\r\n  }\r\n\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n  @Output() openDetails = new EventEmitter<void>();\r\n  @Output() notificationStateChanged = new EventEmitter<AvlNotification>();\r\n  @Output() markAllAsRead = new EventEmitter<void>();\r\n  @Output() markAllAsUnread = new EventEmitter<void>();\r\n\r\n  @ViewChild('list') list: ElementRef<AvlList>;\r\n\r\n  public overflowMenuItems: AvlOverflowMenuGroup[] = [];\r\n  public numberOfUnreadNotifications: number = 0;\r\n\r\n  private _notifications: AvlNotification[] = [];\r\n\r\n  private overflowMenuHandlers: { [key: string]: () => void } = {\r\n    markAllAsRead: () => {\r\n      this.markAllAsRead.emit();\r\n      this.numberOfUnreadNotifications = 0;\r\n    },\r\n    markAllAsUnread: () => {\r\n      this.markAllAsUnread.emit();\r\n      this.numberOfUnreadNotifications = this.notifications.length;\r\n    },\r\n    undefined: () => {}\r\n  };\r\n\r\n  public ngOnInit(): void {\r\n    this.translateLabels();\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.list.nativeElement.revertedList = true;\r\n  }\r\n\r\n  public onNotificationStateChanged(event: Event): void {\r\n    const notificationMenuItem: AvlNotificationMenuItem = { ...(<CustomEvent>event).detail.value };\r\n    const notification = {\r\n      ...notificationMenuItem,\r\n      read: notificationMenuItem.iconToggleValue\r\n    } as AvlNotification;\r\n    notification.read ? this.numberOfUnreadNotifications-- : this.numberOfUnreadNotifications++;\r\n    this.notificationStateChanged.emit(notification);\r\n\r\n    this.list.nativeElement.removeFocus();\r\n  }\r\n\r\n  public onItemClicked(item: AvlOverflowMenuItem): void {\r\n    this.overflowMenuHandlers[item.action]();\r\n  }\r\n\r\n  public onOpenChanged(event: Event): void {\r\n    if (!(<CustomEvent>event).detail.value) {\r\n      this.openChange.emit(false);\r\n    }\r\n  }\r\n\r\n  public onOverflowMenuClicked(): void {\r\n    this.list.nativeElement.removeFocus();\r\n  }\r\n\r\n  public onDetailsClicked(): void {\r\n    this.open = false;\r\n    this.openDetails.emit();\r\n    this.openChange.emit(false);\r\n  }\r\n\r\n  /**Event fired when list item is clicked on\r\n   * depending on the notification flag it opens in new tab\r\n   */\r\n  public onListItemClicked(event: Event): void {\r\n    const item = (<CustomEvent>event).detail;\r\n    if (item.link) {\r\n      if (item.openInNewTab) {\r\n        window.open(item.link, '_blank');\r\n      } else {\r\n        window.open(item.link, '_self');\r\n      }\r\n    }\r\n  }\r\n\r\n  private async translateLabels() {\r\n    if (!AvlLocalizationService || !AvlLocalizationService.translationService) {\r\n      return;\r\n    }\r\n\r\n    this.overflowMenuItems = await this.translateMenu(NOTIFICATIONS_OVERFLOW_MENU);\r\n  }\r\n\r\n  private async translateMenu(menu: AvlOverflowMenuGroup[]): Promise<AvlOverflowMenuGroup[]> {\r\n    return await Promise.all(menu.map(async group => await this.translateMenuGroup(group)));\r\n  }\r\n\r\n  private async translateMenuGroup(group: AvlOverflowMenuGroup): Promise<AvlOverflowMenuGroup> {\r\n    return {\r\n      items: await Promise.all(group.items.map(async item => await this.translateMenuItem(item)))\r\n    };\r\n  }\r\n\r\n  private async translateMenuItem(item: AvlOverflowMenuItem): Promise<AvlOverflowMenuItem> {\r\n    const translateService = AvlLocalizationService.translationService;\r\n    return {\r\n      ...item,\r\n      label: await translateService.translate(item.label),\r\n      sublabel: item.sublabel ? await translateService.translate(item.sublabel) : null\r\n    };\r\n  }\r\n}\r\n","<avl-popup\r\n  [noCloseOnInsideClick]=\"true\"\r\n  [open]=\"open\"\r\n  [trigger]=\"trigger\"\r\n  (open-changed)=\"onOpenChanged($event)\"\r\n>\r\n  <div id=\"header\">\r\n    <div id=\"headerText\">\r\n      <span>{{ 'VizBox.NotificationMenu.Notifications' | translate }}</span>\r\n      <span *ngIf=\"numberOfUnreadNotifications\"> ({{ numberOfUnreadNotifications }}) </span>\r\n    </div>\r\n    <avl-overflow-menu (itemClicked)=\"onItemClicked($event)\" [items]=\"overflowMenuItems\">\r\n      <avl-icon-button\r\n        icon=\"more-vert\"\r\n        slot=\"trigger\"\r\n        (click)=\"onOverflowMenuClicked()\"\r\n      ></avl-icon-button>\r\n    </avl-overflow-menu>\r\n  </div>\r\n  <avl-list\r\n    #list\r\n    [rows]=\"notifications | prepareNotifications: 'menu'\"\r\n    (row-changed)=\"onNotificationStateChanged($event)\"\r\n    (list-item-clicked)=\"onListItemClicked($event)\"\r\n  ></avl-list>\r\n  <div id=\"footer\">\r\n    <avl-button (click)=\"onDetailsClicked()\">{{\r\n      'VizBox.NotificationMenu.Details' | translate\r\n    }}</avl-button>\r\n  </div>\r\n</avl-popup>\r\n","\r\n/** @hidden */\r\nexport const ANIMATION_DURATION = 400;\r\n\r\n/** @hidden */\r\nexport const ACTION_BUTTON_MESSAGE = '_X more _TYPE notifications';\r\n\r\n/** @hidden */\r\nexport const MARGIN = 12;\r\n\r\n\r\n\r\n\r\n","import { Directive, Input, HostBinding, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { MARGIN } from '../avl-notification-container.consts';\r\n\r\n@Directive({ selector: '[animateButton]' })\r\nexport class AnimateButton implements OnChanges {\r\n  /** @hidden */\r\n  @Input() increment: number;\r\n\r\n  /** @hidden */\r\n  @Input() infoStackHeight: number;\r\n  /** @hidden */\r\n  @Input() warningStackHeight: number;\r\n  /** @hidden */\r\n  @Input() infoStackIndicatorHeight: number;\r\n  /** @hidden */\r\n  @Input() warningStackIndicatorHeight: number;\r\n\r\n  @HostBinding('style.top') styleTop: string;\r\n\r\n  constructor() {}\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const infoStackOffsetHeight = this.getOffsetHeight(this.getInfoHeight());\r\n    const warningStackOffsetHeight = this.getOffsetHeight(this.getWarningHeight());\r\n    this.styleTop = infoStackOffsetHeight + warningStackOffsetHeight + 'px';\r\n  }\r\n  private getInfoHeight = (): number => {\r\n    return this.infoStackHeight > this.infoStackIndicatorHeight\r\n      ? this.infoStackHeight\r\n      : this.infoStackIndicatorHeight;\r\n  };\r\n  private getWarningHeight = (): number => {\r\n    return this.warningStackHeight > this.warningStackIndicatorHeight\r\n      ? this.warningStackHeight\r\n      : this.warningStackIndicatorHeight;\r\n  };\r\n\r\n  private getOffsetHeight = (height: number): number => {\r\n    return height ? height + MARGIN * 2 : 0;\r\n  };\r\n}\r\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport {\r\n  animate,\r\n  AnimationBuilder,\r\n  AnimationMetadata,\r\n  AnimationPlayer,\r\n  AnimationStyleMetadata,\r\n  style\r\n} from '@angular/animations';\r\nimport { AvlNotification } from '@avl-interfaces/interfaces';\r\nimport { PositionAnimation } from './animate-stack.directive';\r\nimport { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';\r\n/** @hidden */\r\n\r\n@Directive({ selector: '[animateSnackbar]' })\r\nexport class AnimateSnackbar implements OnChanges {\r\n  /** @hidden */\r\n  @Input() readonly animateSnackbar: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  @Input() readonly positionAnimation: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  @Input('notification') readonly notification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  @Input('reopen') readonly reopen: boolean;\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.in-stack') inStack: boolean;\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.no-animation') noAnimation: boolean;\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.snackbar-container') defaultClass = true;\r\n\r\n  private element: ElementRef;\r\n  private player: AnimationPlayer;\r\n\r\n  constructor(readonly builder: AnimationBuilder, el: ElementRef) {\r\n    this.element = el;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.animateSnackbar) {\r\n      const isInStack = changes.animateSnackbar.currentValue === PositionAnimation.ToStack;\r\n      if (isInStack) {\r\n        this.move();\r\n      } else if (changes.animateSnackbar.previousValue === PositionAnimation.ToStack) {\r\n        this.move();\r\n      }\r\n    }\r\n  }\r\n\r\n  private show(metadata: AnimationMetadata[]) {\r\n    if (this.player) {\r\n      this.player.destroy();\r\n    }\r\n    if (metadata) {\r\n      const factory = this.builder.build(metadata);\r\n      const player = factory.create(this.element.nativeElement);\r\n      player.play();\r\n    }\r\n  }\r\n  private move() {\r\n    const animationMetadata: AnimationMetadata[] = this.animate();\r\n    this.show(animationMetadata);\r\n  }\r\n  private animate(): AnimationMetadata[] {\r\n    const initialStyle = style({\r\n      marginTop: '0',\r\n      width: '100%',\r\n      marginLeft: '0',\r\n      marginRight: '0'\r\n    });\r\n    return this.getAnimation(this.animateSnackbar, initialStyle);\r\n  }\r\n\r\n  private getAnimation = (\r\n    animationName: PositionAnimation,\r\n    initialStyle: AnimationStyleMetadata\r\n  ): AnimationMetadata[] => {\r\n    const elementWidth = this.element.nativeElement.offsetWidth - 3 * MARGIN;\r\n    const inStackStyle = style({\r\n      marginTop: MARGIN + 'px',\r\n      marginLeft: MARGIN + 'px',\r\n      marginRight: MARGIN + 'px',\r\n      width: elementWidth + 'px'\r\n    });\r\n    switch (animationName) {\r\n      case PositionAnimation.FromStack:\r\n        return [animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle), initialStyle];\r\n\r\n      case PositionAnimation.ToStack: {\r\n        return [initialStyle, animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle)];\r\n      }\r\n      default:\r\n        return [initialStyle, animate('1ms ease-in', initialStyle)];\r\n    }\r\n  };\r\n}\r\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport {\r\n  animate,\r\n  AnimationBuilder,\r\n  AnimationMetadata,\r\n  AnimationPlayer,\r\n  AnimationStyleMetadata,\r\n  style\r\n} from '@angular/animations';\r\nimport { AvlNotification } from '@avl-interfaces/interfaces';\r\nimport { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';\r\nimport { SnackbarMethodDescription } from './show-hide-snackbar.directive';\r\n/** @hidden */\r\nexport const enum PositionAnimation {\r\n  ToLowerStack,\r\n  ToTop,\r\n  ToBottom,\r\n  ToStack,\r\n  FromStack\r\n}\r\n@Directive({ selector: '[animateStack]' })\r\nexport class AnimateStack implements OnChanges {\r\n  /** @hidden */\r\n  @Input() readonly animateStack: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  @Input() readonly notification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  @Input() readonly previousStackHeight: number;\r\n\r\n  /** @hidden */\r\n  @Input() readonly snackbarMethodDescription: SnackbarMethodDescription;\r\n\r\n  /** @hidden */\r\n  @Input() readonly reopen: boolean;\r\n\r\n  private styleTop: number;\r\n  private element: ElementRef;\r\n  private player: AnimationPlayer;\r\n\r\n  constructor(readonly builder: AnimationBuilder, el: ElementRef) {\r\n    this.element = el;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.animateStack) {\r\n      this.move(this.previousStackHeight);\r\n    } else if (changes.previousStackHeight) {\r\n      this.move(changes?.previousStackHeight.currentValue);\r\n    } else if (changes.snackbarMethodDescription) {\r\n      if (changes.snackbarMethodDescription.currentValue?.method === 'show') {\r\n        this.move(this.previousStackHeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  private show(metadata: AnimationMetadata[]) {\r\n    if (this.player) {\r\n      this.player.destroy();\r\n    }\r\n    if (metadata) {\r\n      const factory = this.builder.build(metadata);\r\n      const player = factory.create(this.element.nativeElement);\r\n      player.play();\r\n    }\r\n  }\r\n  private move(height: number) {\r\n    if (this.animateStack === PositionAnimation.ToBottom) {\r\n      this.styleTop = height + MARGIN * 2;\r\n    }\r\n    const animationMetadata: AnimationMetadata[] = this.animate();\r\n    this.show(animationMetadata);\r\n  }\r\n  private animate(): AnimationMetadata[] {\r\n    const initialStyle = style({\r\n      top: '0',\r\n      width: '100%',\r\n      left: '0',\r\n      zIndex: 1\r\n    });\r\n    return this.getAnimation(this.animateStack, initialStyle);\r\n  }\r\n\r\n  private getAnimation = (\r\n    animationName: PositionAnimation,\r\n    initialStyle: AnimationStyleMetadata\r\n  ): AnimationMetadata[] => {\r\n    const allStyle = style('*');\r\n\r\n    switch (animationName) {\r\n      case PositionAnimation.ToBottom: {\r\n        return [\r\n          allStyle,\r\n          animate(\r\n            ANIMATION_DURATION + 'ms ease-in',\r\n            style({\r\n              top: this.styleTop + 'px',\r\n              zIndex: 0\r\n            })\r\n          )\r\n        ];\r\n      }\r\n      case PositionAnimation.ToTop: {\r\n        return [allStyle, animate(ANIMATION_DURATION + 'ms ease-in', initialStyle)];\r\n      }\r\n      default:\r\n        return [initialStyle, animate('0ms', initialStyle)];\r\n    }\r\n  };\r\n}\r\n","import { Directive, Input, SimpleChanges, OnChanges, ElementRef } from '@angular/core';\r\n\r\n/**@hidden */\r\nexport class SnackbarMethodDescription {\r\n  method: 'show' | 'hide';\r\n  animate: boolean;\r\n\r\n  constructor(method: 'show' | 'hide', animate: boolean) {\r\n    this.method = method;\r\n    this.animate = animate;\r\n  }\r\n}\r\n\r\n@Directive({ selector: '[showHideSnackbar]' })\r\nexport class ShowHideSnackbarDirective implements OnChanges {\r\n  /** @hidden */\r\n  @Input() methodDescription: SnackbarMethodDescription;\r\n  private element: ElementRef;\r\n\r\n  constructor(el: ElementRef) {\r\n    this.element = el;\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.methodDescription) {\r\n      if (changes.methodDescription.currentValue?.method === 'show') {\r\n        setTimeout(\r\n          () =>\r\n            this.element.nativeElement?.showSnackbar(\r\n              'relative',\r\n              !changes.methodDescription.currentValue?.animate\r\n            ),\r\n          0\r\n        );\r\n      } else if (changes.methodDescription.currentValue?.method === 'hide') {\r\n        this.element.nativeElement?.hideSnackbar(changes.methodDescription.currentValue?.animate);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Directive, HostListener, Output, EventEmitter } from '@angular/core';\r\n\r\n@Directive({ selector: '[snackbarListener]' })\r\nexport class SnackbarListener {\r\n  /** @hidden */\r\n  @Output() notificationClicked: EventEmitter<Event> = new EventEmitter();\r\n  /** @hidden */\r\n  @Output() buttonClicked: EventEmitter<Event> = new EventEmitter();\r\n  /** @hidden */\r\n  @Output() notificationDismissed: EventEmitter<Event> = new EventEmitter();\r\n  @HostListener('notification-clicked', ['$event']) onNotificationClicked(event: Event) {\r\n    this.notificationClicked.emit(event);\r\n  }\r\n  @HostListener('button-clicked', ['$event']) onButtonClicked(event: Event) {\r\n    if (event instanceof Event) {\r\n        this.buttonClicked.emit(event);\r\n    }\r\n  }\r\n  @HostListener('notification-dismissed', ['$event']) onNotificationDismissed(event: Event) {\r\n    if (event instanceof Event) {\r\n        this.notificationDismissed.emit(event);\r\n    }\r\n  }\r\n}\r\n","import { AvlNotification } from '@avl-interfaces/interfaces';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { skipWhile } from 'rxjs/operators';\r\nimport { PositionAnimation } from './directives/animate-stack.directive';\r\nimport { ANIMATION_DURATION, ACTION_BUTTON_MESSAGE } from './avl-notification-container.consts';\r\nimport { SnackbarMethodDescription } from './directives/show-hide-snackbar.directive';\r\n\r\n/** @hidden */\r\nexport class SnackbarStack {\r\n  /** @hidden */\r\n  public buttonLabel: string;\r\n\r\n  /** @hidden */\r\n  public notificationList: AvlNotification[] = [];\r\n\r\n  /** @hidden */\r\n  public activeNotification$: BehaviorSubject<AvlNotification> = new BehaviorSubject(undefined);\r\n\r\n  /** @hidden */\r\n  public stackAnimation: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  public snackbarAnimation: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  public stackIndicator = false;\r\n\r\n  /** @hidden */\r\n  public stackIndicatorButtonLabel: string;\r\n\r\n  /** @hidden */\r\n  public previousNotification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  public methodDescription: SnackbarMethodDescription;\r\n  \r\n  /** @hidden */\r\n  public reopen: boolean;\r\n  \r\n  /** @hidden */\r\n  public dismissedSilently: boolean;\r\n\r\n  /** @hidden */\r\n  public actionButtonMessage = ACTION_BUTTON_MESSAGE;\r\n\r\n  constructor(stackType: string) {\r\n    this.translateLabels();\r\n    this.methodDescription = new SnackbarMethodDescription(undefined, undefined)\r\n    this.activeNotification$\r\n      .pipe(skipWhile(notification => notification === undefined))\r\n      .subscribe((notification: AvlNotification) => {\r\n        if (notification) {\r\n          if (this.notificationList.length > 0) {\r\n            const timeout = setTimeout(\r\n              () => {\r\n                this.openNextNotification(stackType);\r\n                clearTimeout(timeout);\r\n              },\r\n              this.previousNotification ? ANIMATION_DURATION : 0\r\n            );\r\n          } else {\r\n            this.openNextNotification(stackType);\r\n          }\r\n        } else {\r\n          this.resetValues();\r\n        }\r\n      });\r\n  }\r\n\r\n  private async translateLabels() {\r\n    if (!AvlLocalizationService || !AvlLocalizationService.translationService) {\r\n      return;\r\n    }\r\n\r\n    const translationService = AvlLocalizationService.translationService;\r\n    this.actionButtonMessage = await translationService.translate('VizBox.NotificationContainer._X_more_TYPE_notifications');\r\n  }\r\n\r\n  private openNextNotification = (stackType): void => {\r\n    this.methodDescription = new SnackbarMethodDescription('show', !this.reopen);\r\n    if (!this.reopen) {\r\n      this.stackAnimation = PositionAnimation.ToTop;\r\n    } else {\r\n      this.stackAnimation = PositionAnimation.FromStack;\r\n    }\r\n    this.setStackIndicatorProperties(stackType);\r\n    this.reopen = false;\r\n    this.dismissedSilently = false;\r\n  };\r\n\r\n  private resetValues = () => {\r\n    this.notificationList = [];\r\n    this.previousNotification = undefined;\r\n    this.stackIndicator = undefined;\r\n  };\r\n  private setStackIndicatorProperties = (stackType: string): void => {\r\n    const notificationsCount = this.notificationList.length;\r\n    this.stackIndicator = notificationsCount > 1;\r\n    const timeout = setTimeout(\r\n      () => {\r\n        this.previousNotification = this.notificationList[notificationsCount-1];\r\n        this.buttonLabel = this.setButtonLabel(notificationsCount, stackType);\r\n        this.stackIndicatorButtonLabel = this.setButtonLabel(notificationsCount - 1, stackType);\r\n        clearTimeout(timeout);\r\n      },\r\n      this.previousNotification ? ANIMATION_DURATION : 0\r\n    );\r\n  };\r\n  private setButtonLabel = (notificationsCount: number, type: string): string => {\r\n    return notificationsCount > 0\r\n      ? this.actionButtonMessage\r\n        .replace('_TYPE ', type === 'info' ? '' : type + ' ')\r\n        .replace('_X', String(notificationsCount))\r\n      : null;\r\n  };\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport '@avl-controls/core/dist/avl-snackbar/avl-snackbar';\r\nimport { AvlNotification, AvlNotificationType } from '@avl-interfaces/interfaces';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { SnackbarMethodDescription } from './directives/show-hide-snackbar.directive';\r\nimport { Subject } from 'rxjs';\r\nimport { PositionAnimation } from './directives/animate-stack.directive';\r\nimport { SnackbarStack } from './snackbar-stack';\r\nimport { ANIMATION_DURATION } from './avl-notification-container.consts';\r\n\r\nconst NOTIFICATION_TYPE = new Map<number, string>([\r\n  [AvlNotificationType.Error, 'Error'],\r\n  [AvlNotificationType.Warning, 'Warning'],\r\n  [AvlNotificationType.Info, 'Info'],\r\n  [AvlNotificationType.OK, 'OK']\r\n]);\r\n@Component({\r\n  selector: 'avl-notification-container',\r\n  templateUrl: './avl-notification-container.component.html',\r\n  styleUrls: ['./avl-notification-container.component.css']\r\n})\r\nexport class AvlNotificationContainerComponent implements OnInit, OnDestroy, AfterViewChecked {\r\n  /** @hidden */\r\n  @HostBinding('style.top') positionTop: string;\r\n\r\n  /** @hidden */\r\n  @ViewChild('warningStackElement') warningStackElement: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('infoStackElement') infoStackElement: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('infoStackIndicatorElement') infoStackIndicatorElement: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('infoStackIndicatorElement') warningStackIndicatorElement: ElementRef;\r\n\r\n  /** If set optional icon (for info and OK notifications) is displayed, hidden otherwise. */\r\n  @Input('display-icon') public displayIcon: boolean;\r\n\r\n  /** Observable emits notifications. Default observable emits dummy notifications every 3s for 100s. */\r\n  @Input('notification$') public notification$: Observable<AvlNotification> = new Observable(\r\n    function subscribe(subscriber) {\r\n      let i = 0;\r\n      const intervalId = setInterval(() => {\r\n        const warning = Math.round(Math.random());\r\n        subscriber.next({\r\n          id: i++,\r\n          module: 'notification-container',\r\n          timestamp: new Date(),\r\n          type: warning ? AvlNotificationType.Warning : AvlNotificationType.Info,\r\n          messageText: 'Snackbar with notification' + new Date().toTimeString(),\r\n          read: false,\r\n          link: 'https://vizbox.avl.com'\r\n        });\r\n      }, 3000);\r\n\r\n      setTimeout(() => {\r\n        clearInterval(intervalId);\r\n      }, 100000);\r\n    }\r\n  );\r\n\r\n  @Output() openMenu: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** @hidden */\r\n  public warningStack: SnackbarStack;\r\n  /** @hidden */\r\n  public infoStack: SnackbarStack;\r\n\r\n  /** @hidden */\r\n  public previousNotification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  public stackHeight: { [key: string]: number } = {};\r\n\r\n  /** @hidden */\r\n  public reopen: boolean;\r\n\r\n  /** @hidden */\r\n  public notificationList: AvlNotification[] = [];\r\n\r\n  private activeNotification: AvlNotification;\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  constructor(readonly cdRef: ChangeDetectorRef) {\r\n    this.warningStack = new SnackbarStack(\r\n      String(NOTIFICATION_TYPE.get(AvlNotificationType.Warning)).toLowerCase()\r\n    );\r\n\r\n    this.infoStack = new SnackbarStack(\r\n      String(NOTIFICATION_TYPE.get(AvlNotificationType.Info)).toLowerCase()\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /** @hidden */\r\n  public ngOnInit(): void {\r\n    this.positionTop = document.querySelector('main')?.offsetTop + 12 + 'px';\r\n    this.notification$?.pipe(takeUntil(this.destroyed$)).subscribe(notification => {\r\n      this.handleNotification(notification);\r\n    });\r\n  }\r\n\r\n  /** @hidden */\r\n  public onButtonClicked = (event: any): void => {\r\n    if (event) {\r\n      this.openMenu.emit();\r\n      this.dismissAll();\r\n    }\r\n  };\r\n\r\n  /** @hidden */\r\n  public onNotificationDismissed = (event: any, notification: AvlNotification): void => {\r\n    if (event) {\r\n      const snackType = (event.target as HTMLElement)?.id?.replace('Snackbar', '');\r\n      this.removeNotification(notification, snackType);\r\n    }\r\n  };\r\n  /** @hidden */\r\n  /** Event fired when notification snackbar is clicked \r\n   * depending on the notification flag it opens in new tab\r\n  */\r\n  public onNotificationSnackbarClicked(event: Event): void {\r\n    const snackbar = (<CustomEvent>event).detail;\r\n    if (snackbar.link) {\r\n      if (snackbar.openInNewTab) {\r\n        window.open(snackbar.link, '_blank');\r\n      } else {\r\n        window.open(snackbar.link, '_self');\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @hidden */\r\n  public openFromStack = (notification: AvlNotification): void => {\r\n    const stackName = this.getStackName(notification.type);\r\n    this[stackName].methodDescription = new SnackbarMethodDescription('hide', true);\r\n  };\r\n\r\n  /** @hidden */\r\n  public dismissAll = (): void => {\r\n    this.notificationList = [];\r\n    this.warningStack.activeNotification$.next(undefined);\r\n    this.infoStack.activeNotification$.next(undefined);\r\n  };\r\n\r\n  private handleNotification = (notification: any): void => {\r\n    this.previousNotification = this.notificationList[this.notificationList.length - 1];\r\n    this.notificationList.push(notification);\r\n    this.updateStackActiveNotification(notification);\r\n    this.setStackAnimation(notification.type);\r\n  };\r\n\r\n  private updateStackActiveNotification = (notification: AvlNotification): void => {\r\n    const stackName: string = this.getStack(notification?.type);\r\n    this.updateStackNotificationList(notification.type);\r\n    this.activeNotification = notification;\r\n\r\n    if (this[stackName].notificationList.length > 1) {\r\n      this.reopen = true;\r\n      if (this.previousNotification?.type === notification.type) {\r\n        this[stackName].snackbarAnimation = PositionAnimation.ToStack;\r\n\r\n        // silently dismiss notification after previous notification animation\r\n        const timeout = setTimeout(() => {\r\n          this.silentlyDismissNotification(stackName);\r\n          this[stackName].snackbarAnimation = null;\r\n          clearTimeout(timeout);\r\n        }, ANIMATION_DURATION);\r\n      } else {\r\n        this.silentlyDismissNotification(stackName);\r\n      }\r\n    } else {\r\n      this[stackName].activeNotification$.next(notification);\r\n    }\r\n  };\r\n  private updateStackNotificationList = (\r\n    notificationType: AvlNotificationType\r\n  ): AvlNotification[] => {\r\n    const stack = this[this.getStack(notificationType)];\r\n    if (stack) {\r\n      stack.notificationList = this.notificationList.filter(item => item.type === notificationType);\r\n    }\r\n    return stack.notificationList;\r\n  };\r\n\r\n  private silentlyDismissNotification = (stackName: string): void => {\r\n    this[stackName].dismissedSilently = true;\r\n    this[stackName].methodDescription = new SnackbarMethodDescription('hide', false);\r\n  };\r\n\r\n  private setStackAnimation = (\r\n    notificationType: AvlNotificationType,\r\n    animation?: PositionAnimation\r\n  ): void => {\r\n    const currentStack = this.getStack(notificationType);\r\n    const previousStack = this.getStack(notificationType, true);\r\n\r\n    if (\r\n      this[previousStack]?.notificationList?.length > 0 &&\r\n      this.previousNotification?.type !== notificationType\r\n    ) {\r\n      this[previousStack].stackAnimation = animation || PositionAnimation.ToBottom;\r\n\r\n      this[currentStack].stackAnimation =\r\n        animation === PositionAnimation.ToTop\r\n          ? PositionAnimation.ToBottom\r\n          : PositionAnimation.ToTop;\r\n    }\r\n  };\r\n\r\n  private removeNotification = (notification: AvlNotification, snackType?: string): void => {\r\n    const stackName: string = this.getStack(notification?.type);\r\n    if (this[stackName].dismissedSilently) {\r\n      //notification dismissed silently\r\n      const stackName: string = this.getStack(this.activeNotification?.type);\r\n      this[stackName].activeNotification$.next(this.activeNotification);\r\n      this.reopen = false;\r\n    } else {\r\n      //notification dismissed\r\n      this.notificationList = this.notificationList.filter(\r\n        currentNotification => currentNotification.id !== notification.id\r\n      );\r\n      this.reopenLastNotification(notification, stackName);\r\n    }\r\n  };\r\n\r\n  private reopenLastNotification = (notification: AvlNotification, stackName: string): void => {\r\n    let stackNotificationList: AvlNotification[] = this[stackName]?.notificationList;\r\n    if (\r\n      this.isLastNotificationDismissed(notification, this[stackName]) &&\r\n      stackNotificationList?.length > 0\r\n    ) {\r\n      this[stackName].reopen = true;\r\n\r\n      stackNotificationList = this.updateStackNotificationList(notification.type);\r\n      const lastNotification = stackNotificationList[stackNotificationList.length - 1];\r\n      if (lastNotification) {\r\n        this[stackName].activeNotification$.next(lastNotification);\r\n      } else {\r\n        this[stackName].stackIndicator = false;\r\n        this[stackName].reopen = false;\r\n        this[stackName].animateStack = PositionAnimation.ToBottom;\r\n        this.setStackAnimation(notification.type, PositionAnimation.ToTop);\r\n      }\r\n    }\r\n  };\r\n\r\n  private isLastNotificationDismissed = (\r\n    notification: AvlNotification,\r\n    stack: SnackbarStack\r\n  ): boolean => {\r\n    const lastNotification: AvlNotification =\r\n      stack.notificationList[stack.notificationList.length - 1];\r\n    return lastNotification?.id === notification?.id;\r\n  };\r\n  private getStack(notificationType: number, previous?: boolean): string {\r\n    let stackType: AvlNotificationType;\r\n    if (\r\n      notificationType === AvlNotificationType.Warning ||\r\n      notificationType === AvlNotificationType.Error\r\n    ) {\r\n      stackType = previous ? AvlNotificationType.Info : AvlNotificationType.Warning;\r\n    } else {\r\n      stackType = previous ? AvlNotificationType.Warning : AvlNotificationType.Info;\r\n    }\r\n    return this.getStackName(stackType);\r\n  }\r\n\r\n  private getStackName = (stackType: AvlNotificationType): string => {\r\n    return stackType === 1 ? 'warningStack' : 'infoStack';\r\n  };\r\n}\r\n","<div class=\"snackbar\" *ngIf=\"notification$ | async as notification\">\r\n  <div\r\n    [animateStack]=\"warningStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? infoSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"warningStack.methodDescription\"\r\n    class=\"snackbar-stack\"\r\n    id=\"warningStack\"\r\n    #warningStackElement\r\n  >\r\n    <div [animateSnackbar]=\"warningStack.snackbarAnimation\" id=\"warningSnack\" #warningSnackElement>\r\n      <avl-snackbar\r\n        *ngIf=\"warningStack.activeNotification$ | async as activeWarningNotification\"\r\n        id=\"warningSnackbar\"\r\n        [message]=\"activeWarningNotification?.messageText\"\r\n        [openInNewTab]=\"activeWarningNotification.openInNewTab\"\r\n        [actionButtonLabel]=\"warningStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeWarningNotification.link\"\r\n        [messageType]=\"activeWarningNotification.type\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeWarningNotification)\"\r\n        snackbarListener\r\n        #warningSnackbar\r\n        showHideSnackbar=\"warningSnackbar\"\r\n        [methodDescription]=\"warningStack.methodDescription\"\r\n        (snackbar-clicked)=\"onNotificationSnackbarClicked($event)\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"warningStack.notificationList.length>1\" #warningStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': warningStack.stackIndicatorButtonLabel}\">\r\n            <avl-icon icon=\"icons:warning\" id=\"warningIcon\" class=\"warning\"></avl-icon>\r\n            <p id=\"snackbarMessage\">{{ warningStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n          <button id=\"actionButton\" *ngIf=\"warningStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(warningStack.previousNotification)\">\r\n            <div class=\"button-label\">{{ warningStack.stackIndicatorButtonLabel }}</div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"snackbar-stack\"\r\n    id=\"infoStack\"\r\n    [animateStack]=\"infoStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? warningSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"infoStack.methodDescription\"\r\n    #infoStackElement\r\n  >\r\n    <div [animateSnackbar]=\"infoStack.snackbarAnimation\" id=\"infoSnack\" #infoSnackElement>\r\n      <avl-snackbar\r\n        id=\"infoSnackbar\"\r\n        *ngIf=\"infoStack.activeNotification$ | async as activeInfoNotification\"\r\n        [message]=\"activeInfoNotification.messageText\"\r\n        [openInNewTab]=\"activeInfoNotification.openInNewTab\"\r\n        [actionButtonLabel]=\"infoStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeInfoNotification.link\"\r\n        [messageType]=\"activeInfoNotification.type\"\r\n        [displayIcon]=\"displayIcon\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeInfoNotification)\"\r\n        snackbarListener\r\n        #infoSnackbar\r\n        showHideSnackbar=\"infoSnackbar\"\r\n        [methodDescription]=\"infoStack.methodDescription\"\r\n        (snackbar-clicked)=\"onNotificationSnackbarClicked($event)\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"infoStack.notificationList.length>1\" #infoStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': infoStack.stackIndicatorButtonLabel}\">\r\n            <p id=\"snackbarMessage\">{{ infoStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n        </div>\r\n        <button id=\"actionButton\" *ngIf=\"infoStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(infoStack.previousNotification)\">\r\n          <div class=\"button-label\">{{ infoStack.stackIndicatorButtonLabel }}</div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    animateButton\r\n    [infoStackHeight]=\"infoStack?.notificationList?.length > 0 ? infoSnackElement.offsetHeight : 0\"\r\n    [warningStackHeight]=\"warningStack?.notificationList?.length > 0 ? warningSnackElement.offsetHeight : 0\"\r\n    [infoStackIndicatorHeight]=\"infoStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    [warningStackIndicatorHeight]=\"warningStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    class=\"dismiss-all\"\r\n    *ngIf=\"notificationList?.length > 1\"\r\n  >\r\n    <avl-button id=\"dismissAll\" (click)=\"dismissAll()\">{{'VizBox.NotificationContainer.DismissAll' | translate}}</avl-button>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Directive, Input } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  NG_VALIDATORS,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn\r\n} from '@angular/forms';\r\nimport { AvlDate } from '@avl-controls/core/dist/avl-date/avl-date';\r\nexport function dateValidator(date: AvlDate): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    return date.invalid ? { date: { value: control.value } } : null;\r\n  };\r\n}\r\n\r\n@Directive({\r\n  selector: '[dateInvalid]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: DateInvalidValidatorDirective, multi: true }]\r\n})\r\nexport class DateInvalidValidatorDirective implements Validator {\r\n  @Input('dateInvalid') dateInvalid: HTMLElement;\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    return this.dateInvalid ? dateValidator(this.dateInvalid as AvlDate)(control) : null;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'iterableObject'\r\n})\r\n\r\nexport class IterableObjectPipe implements PipeTransform {\r\n  transform(object: object): string[] {\r\n    if (!object) {\r\n      return undefined\r\n    }\r\n    return Object.keys(object);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'capitalize'\r\n})\r\n\r\nexport class CapitalizePipe implements PipeTransform {\r\n  transform(text: string): string {\r\n    let firstLetter = text.substr(0, 1).toUpperCase();\r\n    return firstLetter + text.substr(1);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { Column } from '@avl-controls/datatable/dist/avl-datatable/column-definitions';\r\nimport {\r\n  AvlDatatable,\r\n  PageSizeOption\r\n} from '@avl-controls/datatable/dist/avl-datatable/avl-datatable';\r\nimport { DateRange } from '@avl-controls/core/dist/avl-date/avl-date';\r\nimport { AvlNotification, AvlNotificationsCount } from '@avl-interfaces/interfaces';\r\n\r\nimport '@avl-controls/core/dist/avl-icon-button/avl-icon-button';\r\nimport '@avl-controls/core/dist/avl-icon/avl-icon';\r\nimport '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';\r\nimport '@avl-controls/core/dist/avl-checkbox/avl-checkbox';\r\nimport '@avl-controls/core/dist/avl-tooltip/avl-tooltip';\r\nimport '@avl-controls/core/dist/avl-date/avl-date';\r\nimport { AvlNotificationTableItem } from '../../models/notification-dialog.model';\r\nimport {\r\n  DEFAULT_COLUMN_DEFINITIONS,\r\n  DEFAULT_FILTERS,\r\n  DEFAULT_PAGE_SIZE_OPTIONS,\r\n  STATE_ICON_MAPPINGS,\r\n  TYPE_ICON_MAPPINGS,\r\n  TRANSLATION_BASE,\r\n  ACTION_BUTTONS\r\n} from './avl-notification-dialog.consts';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\r\nimport { NOTIFICATION_TYPE_MAPPINGS } from './avl-notification-dialog.consts';\r\n\r\n@Component({\r\n  selector: 'avl-notification-dialog',\r\n  templateUrl: './avl-notification-dialog.component.html',\r\n  styleUrls: ['./avl-notification-dialog.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AvlNotificationDialogComponent implements OnInit {\r\n  @Input() open: boolean = false;\r\n  @Input() pageSizeOptions: PageSizeOption[] = DEFAULT_PAGE_SIZE_OPTIONS;\r\n  @Input() columnDefinitions: Column[] = DEFAULT_COLUMN_DEFINITIONS;\r\n  @Input() notificationsCount: AvlNotificationsCount = {\r\n    warning: 0,\r\n    info: 0,\r\n    ok: 0,\r\n    error: 0,\r\n    unread: 0,\r\n    read: 0,\r\n    total: 0\r\n  };\r\n  @Input() refreshBadge: boolean;\r\n  @Input()\r\n  get notifications(): AvlNotification[] {\r\n    return this._notifications || [];\r\n  }\r\n\r\n  set notifications(notifications: AvlNotification[]) {\r\n    this._notifications = notifications;\r\n  }\r\n\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() filtersChange: EventEmitter<CustomEvent> = new EventEmitter<CustomEvent>();\r\n  @Output() markSelectedAsRead: EventEmitter<any[]> = new EventEmitter<AvlNotification[]>();\r\n  @Output() markSelectedAsUnread: EventEmitter<any[]> = new EventEmitter<AvlNotification[]>();\r\n  @Output() tableRefresh: EventEmitter<any[]> = new EventEmitter<AvlNotification[]>();\r\n  @Output() selectedPageChanged: EventEmitter<any[]> = new EventEmitter<AvlNotification[]>();\r\n  @Output() pageSizeChanged: EventEmitter<any[]> = new EventEmitter<AvlNotification[]>();\r\n\r\n  @ViewChild('notificationTable') public table: ElementRef<AvlDatatable>;\r\n\r\n  public badge: boolean = false;\r\n  public disableMarkingSelected: boolean = true;\r\n  public filters = this.deepCopyObject(DEFAULT_FILTERS);\r\n  public filtersOpen = true;\r\n  public activeFilters: {[key:string]: object};\r\n\r\n  private filterFormSubscription: Subscription;\r\n\r\n  @ViewChild('filterForm', { read: NgForm }) set filterForm(filterForm: NgForm) {\r\n    this.filterFormSubscription?.unsubscribe();\r\n    this.filterFormSubscription = filterForm?.valueChanges\r\n      .pipe(\r\n        debounceTime(300),\r\n        distinctUntilChanged(),\r\n        takeUntil(this.destroyed$),\r\n        filter(_ => filterForm.valid)\r\n      )\r\n      .subscribe(value => this.handleFiltersChanged(value));\r\n  }\r\n\r\n  public translationBase = TRANSLATION_BASE;\r\n  public actionButtons = ACTION_BUTTONS;\r\n  public disabledRange: { [key: string]: DateRange[] } = {};\r\n  private dateFilterGroupInitHeader = 'Date';\r\n  public dateFilterGroupHeader = this.dateFilterGroupInitHeader;\r\n\r\n  //notification datatable options\r\n  public selectedRows: AvlNotificationTableItem[] = [];\r\n  public pageSize = 15;\r\n\r\n  private _notifications: AvlNotification[] = [];\r\n  protected destroyed$: Subject<void> = new Subject();\r\n\r\n  public ngOnDestroy(): void {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.translateLabels();\r\n  }\r\n\r\n  public getIconByType(type: string): string {\r\n    switch (type) {\r\n      case 'unread':\r\n        return STATE_ICON_MAPPINGS['false'];\r\n      case 'read':\r\n        return STATE_ICON_MAPPINGS['true'];\r\n      default:\r\n        for (let [typeKey, typeValue] of NOTIFICATION_TYPE_MAPPINGS) {\r\n          if (typeValue === type && typeof typeKey === 'number') {\r\n            return TYPE_ICON_MAPPINGS[typeKey];\r\n          }\r\n        }\r\n    }\r\n  }\r\n\r\n  /** Emits event when dialog opens or closes */\r\n  public openChanged(open: boolean): void {\r\n    this.openChange.emit(open);\r\n  }\r\n\r\n  public onSelectedPageChanged(event) {\r\n    this.selectedPageChanged.emit(event);\r\n  }\r\n\r\n  public onPageSizeChanged(event) {\r\n    this.pageSizeChanged.emit(event);\r\n  }\r\n\r\n  /** Toggles displaying of filter sheet */\r\n  public toggleFilters(): void {\r\n    this.filtersOpen = !this.filtersOpen;\r\n  }\r\n\r\n  /** Refreshes the datatable when refresh button is clicked */\r\n  public refreshTable(): void {\r\n    this.tableRefresh.emit();\r\n  }\r\n\r\n  public markAs(state: string) {\r\n    state === NOTIFICATION_TYPE_MAPPINGS.get(true) ? this.markAsRead() : this.markAsUnread();\r\n  }\r\n\r\n  /** Changes selected notification state to read */\r\n  public markAsRead(): void {\r\n    this.markSelectedAsRead.emit(this.selectedRows);\r\n  }\r\n\r\n  /** Changes selected notification state to unread */\r\n  public markAsUnread(): void {\r\n    this.markSelectedAsUnread.emit(this.selectedRows);\r\n  }\r\n\r\n  /**\r\n   * Resets all filters.\r\n   */\r\n  public reset(): void {\r\n    this.filters = this.deepCopyObject(DEFAULT_FILTERS);\r\n    this.updateLabels();\r\n    this.badge = false;\r\n  }\r\n\r\n  /** Called when selection is applied to the table rows */\r\n  public selectedValuesChanged() {\r\n    this.disableMarkingSelected = false;\r\n    if (this.selectedRows.length == 0) {\r\n      this.disableMarkingSelected = true;\r\n    }\r\n  }\r\n\r\n  /** Updates date filter header labels when date changes */\r\n  public async updateLabels(): Promise<void> {\r\n    const translationService = AvlLocalizationService.translationService;\r\n    const { dateFrom, dateTo } = this.filters.date;\r\n    if (!dateFrom && !dateTo) {\r\n      this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;\r\n    } else {\r\n      this.dateFilterGroupHeader = await translationService.translate(\r\n        'VizBox.NotificationDialog.DateRange',\r\n        {\r\n          dateFrom: this.formatDateTime(dateFrom),\r\n          dateTo: this.formatDateTime(dateTo)\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Event fired when table row is clicked\r\n   * depending on the notification flag it opens in new tab\r\n   */\r\n  public onRowClicked(event: Event): void {\r\n    const row = (<CustomEvent>event).detail;\r\n    if (row.link) {\r\n      if (row.openInNewTab) {\r\n        window.open(row.link, '_blank');\r\n      } else {\r\n        window.open(row.link, '_self');\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleFiltersChanged(value): void {\r\n    this.activeFilters = this.getActiveFilters(value);\r\n    if (this.activeFilters?.date) {\r\n      this.disabledRange = this.getDisabledRange();\r\n    }\r\n    this.badge = Boolean(this.activeFilters);\r\n    const event = new CustomEvent('filtersChange', { detail: this.activeFilters });\r\n    this.filtersChange.emit(event);\r\n  }\r\n\r\n  /** Calculates active filters from filter object */\r\n  public getActiveFilters(filters: object): any {\r\n    Object.keys(filters).forEach(key => {\r\n      const filter = filters[key];\r\n      //don't iterate through search\r\n      if (filter && typeof filter !== 'string') {\r\n        filters[key] = this.removeInactiveFilterKeys(filter);\r\n      }\r\n    });\r\n\r\n    return this.removeInactiveFilterKeys(filters);\r\n  }\r\n\r\n  /** disable dates before dateFrom in dateTo, and dates after dateTo in dateFrom  */\r\n  private getDisabledRange(): { [key: string]: DateRange[] } {\r\n    const { dateFrom, dateTo } = this.filters.date;\r\n    return {\r\n      dateFrom: dateTo ? [{ from: dateTo }] : undefined,\r\n      dateTo: dateFrom ? [{ to: dateFrom }] : undefined\r\n    };\r\n  }\r\n\r\n  /** Removes inactive filters from filter object and returns it */\r\n  private removeInactiveFilterKeys(filter): object {\r\n    Object.keys(filter)\r\n      .filter(secondLevelKey => !Boolean(filter[secondLevelKey]))\r\n      .forEach(secondLevelKey => delete filter[secondLevelKey]);\r\n    return Object.keys(filter)?.length ? filter : undefined;\r\n  }\r\n\r\n  /** Formats date time to date-short */\r\n  private formatDateTime(d: Date): string {\r\n    return d ? AvlLocalizationService.formatDateTime(d, { format: 'date-short' }) : '(-)';\r\n  }\r\n\r\n  /** Deep copy of filters object */\r\n  private deepCopyObject(object: any): any {\r\n    const copiedObject = {};\r\n    Object.keys(object).forEach(key => {\r\n      copiedObject[key] =\r\n        typeof object[key] === 'object' ? Object.assign({}, object[key]) : object[key];\r\n    });\r\n    return copiedObject;\r\n  }\r\n\r\n  // Translations\r\n  private async translateLabels() {\r\n    if (!AvlLocalizationService || !AvlLocalizationService.translationService) {\r\n      return;\r\n    }\r\n\r\n    const translationService = AvlLocalizationService.translationService;\r\n    this.dateFilterGroupInitHeader = await translationService.translate(\r\n      'VizBox.NotificationDialog.Date'\r\n    );\r\n    this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;\r\n    this.pageSizeOptions = await this.translatePageSizeOptions(this.pageSizeOptions);\r\n    this.columnDefinitions = await this.translateColumns(this.columnDefinitions);\r\n  }\r\n\r\n  private async translatePageSizeOptions(options: PageSizeOption[]): Promise<PageSizeOption[]> {\r\n    return Promise.all(options.map(async option => this.translatePageSizeOption(option)));\r\n  }\r\n\r\n  private async translatePageSizeOption(item: PageSizeOption): Promise<PageSizeOption> {\r\n    const translationService = AvlLocalizationService.translationService;\r\n    return {\r\n      ...item,\r\n      label:\r\n        item.value === Number.MAX_SAFE_INTEGER\r\n          ? await translationService.translate('VizBox.NotificationDialog.ShowAll')\r\n          : await translationService.translate('VizBox.NotificationDialog.ShowXPerPage', {\r\n              rows: item.value\r\n            })\r\n    };\r\n  }\r\n\r\n  private async translateColumns(column: Column[]): Promise<Column[]> {\r\n    return Promise.all(column.map(async item => this.translateColumnItem(item)));\r\n  }\r\n\r\n  private async translateColumnItem(item: Column): Promise<Column> {\r\n    const translateService = AvlLocalizationService.translationService;\r\n    return {\r\n      ...item,\r\n      caption: await translateService.translate(item.caption)\r\n    };\r\n  }\r\n}\r\n","<avl-dialog\r\n  id=\"outerDialog\"\r\n  [open]=\"open\"\r\n  (openChange)=\"openChanged($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"true\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>{{ translationBase + 'Details' | translate }}</avl-dialog-header>\r\n    <avl-dialog-content>\r\n      <div class=\"main-container\">\r\n        <div class=\"content\">\r\n          <div class=\"table-header\">\r\n            <h1>\r\n              {{ translationBase + 'Notifications' | translate }} ({{ notifications?.length }}\r\n              <span\r\n                *ngIf=\"\r\n                  notificationsCount.total && notificationsCount.total !== notifications?.length\r\n                \"\r\n              >\r\n                /{{ notificationsCount.total }} </span\r\n              >)\r\n            </h1>\r\n            <div class=\"table-header-right\">\r\n              <avl-icon-button\r\n                id=\"updateIcon\"\r\n                (click)=\"refreshTable()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:refresh\"\r\n                [badge]=\"refreshBadge\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"updateIcon\">\r\n                {{ translationBase + 'Refresh' | translate }}</avl-tooltip\r\n              >\r\n              <div class=\"divider vertical\"></div>\r\n              <div *ngFor=\"let button of actionButtons\">\r\n                <avl-icon-button\r\n                  id=\"{{ button.id }}Icon\"\r\n                  (click)=\"markAs(button.id)\"\r\n                  class=\"pointer\"\r\n                  [icon]=\"getIconByType(button.id)\"\r\n                  [disabled]=\"disableMarkingSelected\"\r\n                >\r\n                </avl-icon-button>\r\n                <avl-tooltip for=\"{{ button.id }}Icon\">{{\r\n                  button.tooltip | translate\r\n                }}</avl-tooltip>\r\n              </div>\r\n              <div class=\"divider vertical\"></div>\r\n              <div *ngIf=\"!filtersOpen\" class=\"search-bar-holder\">\r\n                <div *ngTemplateOutlet=\"searchBar\"></div>\r\n              </div>\r\n              <avl-icon-button\r\n                (click)=\"toggleFilters()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:filter-list\"\r\n                [badge]=\"badge\"\r\n              ></avl-icon-button>\r\n            </div>\r\n          </div>\r\n          <avl-datatable\r\n            #notificationTable\r\n            class=\"filterDatatable\"\r\n            multi-select\r\n            allow-active-row\r\n            pagination\r\n            [columnDefinitions]=\"columnDefinitions\"\r\n            [pageSize]=\"pageSize\"\r\n            [data]=\"notifications | prepareNotifications: 'dialog'\"\r\n            [pageSizeOptions]=\"pageSizeOptions\"\r\n            [(selectedValues)]=\"selectedRows\"\r\n            (selectedValuesChange)=\"selectedValuesChanged()\"\r\n            (page-size-changed)=\"onPageSizeChanged($event)\"\r\n            (selected-page-changed)=\"onSelectedPageChanged($event)\"\r\n            (on-row-clicked)=\"onRowClicked($event)\"\r\n          >\r\n          </avl-datatable>\r\n        </div>\r\n        <avl-side-sheet class=\"filter-sheet\" divider [(open)]=\"filtersOpen\" #filterSheet>\r\n          <div slot=\"title\">\r\n            <h2>{{ translationBase + 'Filters' | translate }}</h2>\r\n          </div>\r\n          <div slot=\"content\">\r\n            <form #filterForm=\"ngForm\">\r\n              <!--ngIf is needed to rerender template on filtersheet toggle-->\r\n              <div *ngIf=\"filtersOpen\" class=\"search-bar-holder\">\r\n                <div *ngTemplateOutlet=\"searchBar\"></div>\r\n              </div>\r\n\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormType=\"ngModelGroup\"\r\n                ngModelGroup=\"type\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3>\r\n                    <span>{{ translationBase + 'Type' | translate }}</span>\r\n                    <span *ngIf=\"activeFilters?.type | iterableObject as activeFilterGroup\">\r\n                      <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                          currentHeader;\r\n                          context: {\r\n                            activeFilterGroup: activeFilterGroup,\r\n                            filterGroup: filters?.type | iterableObject\r\n                          }\r\n                        \"\r\n                      ></ng-container>\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div *ngFor=\"let type of filters?.type | iterableObject\">\r\n                    <avl-checkbox name=\"{{ type }}\" [(ngModel)]=\"filters.type[type]\">\r\n                      {{ translationBase + (type | titlecase) | translate }}\r\n                      <span *ngIf=\"notifications.length\">({{ notificationsCount[type] }})</span>\r\n                    </avl-checkbox>\r\n                    <avl-icon\r\n                      id=\"{{ type }}Icon\"\r\n                      class=\"typeIcons\"\r\n                      icon=\"icons:{{ getIconByType(type) }}\"\r\n                    ></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormState=\"ngModelGroup\"\r\n                ngModelGroup=\"state\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3>\r\n                    <span>{{ translationBase + 'State' | translate }}</span>\r\n                    <span *ngIf=\"activeFilters?.state | iterableObject as activeFilterGroup\">\r\n                      <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                          currentHeader;\r\n                          context: {\r\n                            activeFilterGroup: activeFilterGroup,\r\n                            filterGroup: filters?.state | iterableObject\r\n                          }\r\n                        \"\r\n                      ></ng-container>\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div *ngFor=\"let state of filters?.state | iterableObject\">\r\n                    <avl-checkbox name=\"{{ state }}\" [(ngModel)]=\"filters.state[state]\">\r\n                      {{ translationBase + (state | titlecase) | translate }} ({{\r\n                        notificationsCount[state]\r\n                      }})\r\n                    </avl-checkbox>\r\n                    <avl-icon\r\n                      id=\"{{ state }}Icon\"\r\n                      class=\"typeIcons\"\r\n                      icon=\"icons:{{ getIconByType(state) }}\"\r\n                    ></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormDate=\"ngModelGroup\"\r\n                ngModelGroup=\"date\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3 id=\"date-group\" #dateGroup>\r\n                    {{ dateFilterGroupHeader }}\r\n                  </h3>\r\n                  <avl-tooltip\r\n                    for=\"date-group\"\r\n                    *ngIf=\"dateGroup.scrollWidth > dateGroup.clientWidth\"\r\n                  >\r\n                    {{ dateFilterGroupHeader }}\r\n                  </avl-tooltip>\r\n                </div>\r\n                <div role=\"content\">\r\n                  <avl-date\r\n                    *ngFor=\"let date of filters?.date | iterableObject\"\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date[date]\"\r\n                    name=\"{{ date }}\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"translationBase + (date | capitalize) | translate\"\r\n                    [disabledRanges]=\"disabledRange[date]\"\r\n                    #dateEl\r\n                    auto-validate\r\n                    [dateInvalid]=\"dateEl\"\r\n                  ></avl-date>\r\n                </div>\r\n              </avl-list-expander>\r\n              <ng-template #searchBar>\r\n                <avl-search-bar\r\n                  placeholder=\"{{ translationBase + 'Search' | translate }}\"\r\n                  always-open\r\n                  #searchBarElement\r\n                  name=\"search\"\r\n                  [(ngModel)]=\"filters.search\"\r\n                ></avl-search-bar>\r\n              </ng-template>\r\n            </form>\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <avl-button (click)=\"reset()\">{{ translationBase + 'Reset' | translate }}</avl-button>\r\n          </div>\r\n        </avl-side-sheet>\r\n      </div>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n\r\n  <ng-template\r\n    #currentHeader\r\n    let-activeFilterGroup=\"activeFilterGroup\"\r\n    let-filterGroup=\"filterGroup\"\r\n  >\r\n    <span>: </span><span *ngIf=\"activeFilterGroup.length === filterGroup.length\">all</span>\r\n    <span *ngIf=\"activeFilterGroup.length !== filterGroup.length\">\r\n      <span *ngFor=\"let item of activeFilterGroup; index as i\">\r\n        <span>{{ translationBase + (item | titlecase) | translate }}</span>\r\n        <span *ngIf=\"i < activeFilterGroup.length - 1\">, </span>\r\n      </span>\r\n    </span>\r\n  </ng-template>\r\n</avl-dialog>\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AvlNgBindersModule } from '@avl-controls/ng-binders';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AvlNotificationMenuComponent } from './components/avl-notification-menu/avl-notification-menu.component';\r\nimport { AnimateButton } from './components/avl-notification-container/directives/animate-button.directive';\r\nimport { AnimateSnackbar } from './components/avl-notification-container/directives/animate-snackbar.directive';\r\nimport { AnimateStack } from './components/avl-notification-container/directives/animate-stack.directive';\r\nimport { ShowHideSnackbarDirective } from './components/avl-notification-container/directives/show-hide-snackbar.directive';\r\nimport { SnackbarListener } from './components/avl-notification-container/directives/snackbar-listener.directive';\r\nimport { AvlNotificationContainerComponent } from './components/avl-notification-container/avl-notification-container.component';\r\nimport { AvlNotificationDialogComponent } from './components/avl-notification-dialog/avl-notification-dialog.component';\r\n\r\nimport { AvlDialogModule } from '@avl-ng-controls/dialog';\r\nimport { AvlNavigationModule } from '@avl-ng-controls/navigation';\r\nimport { PrepareNotificationsPipe } from './pipes/prepare-notifications.pipe';\r\nimport { CapitalizePipe } from './pipes/capitalize.pipe';\r\nimport { DateInvalidValidatorDirective } from './components/avl-notification-dialog/date-validator.directive';\r\nimport { IterableObjectPipe } from './pipes/iterable-object.pipe';\r\n\r\nconst componentsAndDirectives = [\r\n  AvlNotificationMenuComponent,\r\n  AvlNotificationContainerComponent,\r\n  SnackbarListener,\r\n  AnimateStack,\r\n  AnimateSnackbar,\r\n  ShowHideSnackbarDirective,\r\n  AnimateButton,\r\n  AvlNotificationDialogComponent,\r\n  PrepareNotificationsPipe,\r\n  CapitalizePipe,\r\n  IterableObjectPipe,\r\n  DateInvalidValidatorDirective\r\n];\r\n@NgModule({\r\n  declarations: [...componentsAndDirectives],\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule,\r\n    AvlNgBindersModule,\r\n    AvlDialogModule,\r\n    AvlNavigationModule,\r\n    FormsModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  exports: [\r\n    AvlNotificationMenuComponent,\r\n    AvlNotificationContainerComponent,\r\n    AvlNotificationDialogComponent\r\n  ]\r\n})\r\nexport class AvlNotificationModule {}\r\n","/*\r\n * Public API Surface of notification\r\n */\r\n\r\nexport { AvlNotificationModule } from './lib/notification.module';\r\nexport { AvlNotificationMenuComponent } from './lib/components/avl-notification-menu/avl-notification-menu.component';\r\nexport { AvlNotificationMenuItem } from './lib/models/notification-menu.model'\r\n\r\nexport { AvlNotificationDialogComponent } from './lib/components/avl-notification-dialog/avl-notification-dialog.component';\r\nexport { AvlNotificationContainerComponent } from './lib/components/avl-notification-container/avl-notification-container.component';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["TYPE_ICON_MAPPINGS"],"mappings":"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"}