(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('@avl-controls/ng-binders'),require('@ngx-translate/core'),require('@angular/animations'),require('@avl-ng-controls/dialog'),require('@angular/forms'),require('@avl-ng-controls/navigation'),exports, require('@angular/common'), require('@angular/core'), require('@ngx-translate/core'), require('@avl-controls/ng-binders'), require('@angular/forms'), require('@angular/animations'), require('rxjs'), require('@avl-controls/core/dist/avl-snackbar/avl-snackbar'), require('rxjs/operators'), require('@avl-controls/datatable/dist/avl-datatable/avl-datatable'), require('@avl-controls/core/dist/avl-icon-button/avl-icon-button'), require('@avl-controls/core/dist/avl-icon/avl-icon'), require('@avl-controls/core/dist/avl-side-sheet/avl-side-sheet'), require('@avl-controls/core/dist/avl-checkbox/avl-checkbox'), require('@avl-controls/core/dist/avl-tooltip/avl-tooltip'), require('@avl-controls/core/dist/avl-date/avl-date'), require('@avl-controls/datatable/dist/avl-datatable/column-definitions'), require('@avl-ng-controls/dialog'), require('@avl-ng-controls/navigation')) :
    typeof define === 'function' && define.amd ? define('@avl-ng-controls/notification', ['@angular/core','@angular/common','@avl-controls/ng-binders','@ngx-translate/core','@angular/animations','@avl-ng-controls/dialog','@angular/forms','@avl-ng-controls/navigation','exports', '@angular/common', '@angular/core', '@ngx-translate/core', '@avl-controls/ng-binders', '@angular/forms', '@angular/animations', 'rxjs', '@avl-controls/core/dist/avl-snackbar/avl-snackbar', 'rxjs/operators', '@avl-controls/datatable/dist/avl-datatable/avl-datatable', '@avl-controls/core/dist/avl-icon-button/avl-icon-button', '@avl-controls/core/dist/avl-icon/avl-icon', '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet', '@avl-controls/core/dist/avl-checkbox/avl-checkbox', '@avl-controls/core/dist/avl-tooltip/avl-tooltip', '@avl-controls/core/dist/avl-date/avl-date', '@avl-controls/datatable/dist/avl-datatable/column-definitions', '@avl-ng-controls/dialog', '@avl-ng-controls/navigation'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,global.avlControls.ngBinders,global.ngxTranslate.core,global.ng.animations,global.avlNgControls.dialog,global.ng.forms,global.avlNgControls.navigation,(global['avl-ng-controls'] = global['avl-ng-controls'] || {}, global['avl-ng-controls'].notification = {}), global.ng.common, global.ng.core, global.core$1, global.ngBinders, global.ng.forms, global.ng.animations, global.rxjs, null, global.rxjs.operators, null, null, null, null, null, null, null, global.columnDefinitions, global.dialog, global.navigation));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,exports, common, core, core$1, ngBinders, forms, animations, rxjs, avlSnackbar, operators, avlDatatable, avlIconButton, avlIcon, avlSideSheet, avlCheckbox, avlTooltip, avlDate, columnDefinitions, dialog, navigation) { 
var _c0 = ["list"];
function AvlNotificationMenuComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" (", ctx_r0.numberOfUnreadNotifications, ") ");
} }
var _c1 = ["warningStackElement"];
var _c2 = ["infoStackElement"];
var _c3 = ["infoStackIndicatorElement"];
function AvlNotificationContainerComponent_div_0_avl_snackbar_5_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "avl-snackbar", 14, 15);
    ɵngcc0.ɵɵlistener("buttonClicked", function AvlNotificationContainerComponent_div_0_avl_snackbar_5_Template_avl_snackbar_buttonClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); var ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onButtonClicked($event); })("notificationDismissed", function AvlNotificationContainerComponent_div_0_avl_snackbar_5_Template_avl_snackbar_notificationDismissed_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); var activeWarningNotification_r11 = ctx.ngIf; var ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onNotificationDismissed($event, activeWarningNotification_r11); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var activeWarningNotification_r11 = ctx.ngIf;
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("message", activeWarningNotification_r11 == null ? null : activeWarningNotification_r11.messageText)("actionButtonLabel", ctx_r4.warningStack.stackIndicatorButtonLabel)("link", activeWarningNotification_r11.link)("messageType", activeWarningNotification_r11.type)("methodDescription", ctx_r4.warningStack.methodDescription);
} }
function AvlNotificationContainerComponent_div_0_div_7_button_9_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 25);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationContainerComponent_div_0_div_7_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(3); return ctx_r18.openFromStack(ctx_r18.warningStack.previousNotification); });
    ɵngcc0.ɵɵelementStart(1, "div", 26);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r17 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r17.warningStack.stackIndicatorButtonLabel);
} }
var _c4 = function (a1) { return { "notification": true, "has-action": a1 }; };
function AvlNotificationContainerComponent_div_0_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16, 17);
    ɵngcc0.ɵɵelementStart(2, "div", 18);
    ɵngcc0.ɵɵelementStart(3, "div", 19);
    ɵngcc0.ɵɵelementStart(4, "div", 20);
    ɵngcc0.ɵɵelement(5, "avl-icon", 21);
    ɵngcc0.ɵɵelementStart(6, "p", 22);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "avl-icon-button", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, AvlNotificationContainerComponent_div_0_div_7_button_9_Template, 3, 1, "button", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c4, ctx_r5.warningStack.stackIndicatorButtonLabel));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.warningStack.previousNotification == null ? null : ctx_r5.warningStack.previousNotification.messageText);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.warningStack.stackIndicatorButtonLabel);
} }
function AvlNotificationContainerComponent_div_0_avl_snackbar_12_Template(rf, ctx) { if (rf & 1) {
    var _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "avl-snackbar", 27, 28);
    ɵngcc0.ɵɵlistener("buttonClicked", function AvlNotificationContainerComponent_div_0_avl_snackbar_12_Template_avl_snackbar_buttonClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.onButtonClicked($event); })("notificationDismissed", function AvlNotificationContainerComponent_div_0_avl_snackbar_12_Template_avl_snackbar_notificationDismissed_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); var activeInfoNotification_r20 = ctx.ngIf; var ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.onNotificationDismissed($event, activeInfoNotification_r20); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var activeInfoNotification_r20 = ctx.ngIf;
    var ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("message", activeInfoNotification_r20.messageText)("actionButtonLabel", ctx_r8.infoStack.stackIndicatorButtonLabel)("link", activeInfoNotification_r20.link)("messageType", activeInfoNotification_r20.type)("displayIcon", ctx_r8.displayIcon)("methodDescription", ctx_r8.infoStack.methodDescription);
} }
function AvlNotificationContainerComponent_div_0_div_14_button_8_Template(rf, ctx) { if (rf & 1) {
    var _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 25);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationContainerComponent_div_0_div_14_button_8_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r27 = ɵngcc0.ɵɵnextContext(3); return ctx_r27.openFromStack(ctx_r27.infoStack.previousNotification); });
    ɵngcc0.ɵɵelementStart(1, "div", 26);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r26 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r26.infoStack.stackIndicatorButtonLabel);
} }
function AvlNotificationContainerComponent_div_0_div_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16, 29);
    ɵngcc0.ɵɵelementStart(2, "div", 18);
    ɵngcc0.ɵɵelementStart(3, "div", 19);
    ɵngcc0.ɵɵelementStart(4, "div", 20);
    ɵngcc0.ɵɵelementStart(5, "p", 22);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(7, "avl-icon-button", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, AvlNotificationContainerComponent_div_0_div_14_button_8_Template, 3, 1, "button", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c4, ctx_r9.infoStack.stackIndicatorButtonLabel));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r9.infoStack.previousNotification == null ? null : ctx_r9.infoStack.previousNotification.messageText);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.infoStack.stackIndicatorButtonLabel);
} }
function AvlNotificationContainerComponent_div_0_div_15_Template(rf, ctx) { if (rf & 1) {
    var _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelementStart(1, "avl-button", 31);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationContainerComponent_div_0_div_15_Template_avl_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r30); var ctx_r29 = ɵngcc0.ɵɵnextContext(2); return ctx_r29.dismissAll(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    var _r7 = ɵngcc0.ɵɵreference(11);
    var _r3 = ɵngcc0.ɵɵreference(4);
    var ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("infoStackHeight", (ctx_r10.infoStack == null ? null : ctx_r10.infoStack.notificationList == null ? null : ctx_r10.infoStack.notificationList.length) > 0 ? _r7.offsetHeight : 0)("warningStackHeight", (ctx_r10.warningStack == null ? null : ctx_r10.warningStack.notificationList == null ? null : ctx_r10.warningStack.notificationList.length) > 0 ? _r3.offsetHeight : 0)("infoStackIndicatorHeight", ctx_r10.infoStackIndicatorElement == null ? null : ctx_r10.infoStackIndicatorElement.nativeElement == null ? null : ctx_r10.infoStackIndicatorElement.nativeElement.offsetHeight)("warningStackIndicatorHeight", ctx_r10.warningStackIndicatorElement == null ? null : ctx_r10.warningStackIndicatorElement.nativeElement == null ? null : ctx_r10.warningStackIndicatorElement.nativeElement.offsetHeight);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 5, "VizBox.NotificationContainer.DismissAll"));
} }
function AvlNotificationContainerComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2, 3);
    ɵngcc0.ɵɵelementStart(3, "div", 4, 5);
    ɵngcc0.ɵɵtemplate(5, AvlNotificationContainerComponent_div_0_avl_snackbar_5_Template, 2, 5, "avl-snackbar", 6);
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, AvlNotificationContainerComponent_div_0_div_7_Template, 10, 5, "div", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 8, 9);
    ɵngcc0.ɵɵelementStart(10, "div", 10, 11);
    ɵngcc0.ɵɵtemplate(12, AvlNotificationContainerComponent_div_0_avl_snackbar_12_Template, 2, 6, "avl-snackbar", 12);
    ɵngcc0.ɵɵpipe(13, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, AvlNotificationContainerComponent_div_0_div_14_Template, 9, 5, "div", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(15, AvlNotificationContainerComponent_div_0_div_15_Template, 4, 7, "div", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r3 = ɵngcc0.ɵɵreference(4);
    var _r7 = ɵngcc0.ɵɵreference(11);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("animateStack", ctx_r0.warningStack == null ? null : ctx_r0.warningStack.stackAnimation)("previousStackHeight", ctx_r0.infoStack.notificationList.length > 0 ? _r7.offsetHeight : 0)("snackbarMethodDescription", ctx_r0.warningStack.methodDescription);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("animateSnackbar", ctx_r0.warningStack.snackbarAnimation);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(6, 13, ctx_r0.warningStack.activeNotification$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.warningStack.notificationList.length > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("animateStack", ctx_r0.infoStack == null ? null : ctx_r0.infoStack.stackAnimation)("previousStackHeight", ctx_r0.infoStack.notificationList.length > 0 ? _r3.offsetHeight : 0)("snackbarMethodDescription", ctx_r0.infoStack.methodDescription);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("animateSnackbar", ctx_r0.infoStack.snackbarAnimation);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(13, 15, ctx_r0.infoStack.activeNotification$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.infoStack.notificationList.length > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.notificationList == null ? null : ctx_r0.notificationList.length) > 1);
} }
var _c5 = ["notificationTable"];
var _c6 = ["filterForm"];
function AvlNotificationDialogComponent_ng_template_1_avl_icon_button_11_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "avl-icon-button", 45);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_avl_icon_button_11_Template_avl_icon_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); var ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.refreshTable(); });
    ɵngcc0.ɵɵelementEnd();
} }
function AvlNotificationDialogComponent_ng_template_1_avl_tooltip_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "avl-tooltip", 46);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "VizBox.NotificationDialog.Refresh"), "");
} }
function AvlNotificationDialogComponent_ng_template_1_span_43_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r7.getNumberOfNotificationsWithType(ctx_r7.tableData, "warning"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_span_49_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r8.getNumberOfNotificationsWithType(ctx_r8.tableData, "error"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_span_55_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r9.getNumberOfNotificationsWithType(ctx_r9.tableData, "info"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_span_61_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r10.getNumberOfNotificationsWithType(ctx_r10.tableData, "ok"), ")");
} }
function AvlNotificationDialogComponent_ng_template_1_avl_tooltip_82_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "avl-tooltip", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r12.dateFilterGroupHeader, " ");
} }
function AvlNotificationDialogComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "avl-dialog-header");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "avl-dialog-content");
    ɵngcc0.ɵɵelementStart(4, "div", 2);
    ɵngcc0.ɵɵelementStart(5, "div", 3);
    ɵngcc0.ɵɵelementStart(6, "div", 4);
    ɵngcc0.ɵɵelementStart(7, "h1");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 5);
    ɵngcc0.ɵɵtemplate(11, AvlNotificationDialogComponent_ng_template_1_avl_icon_button_11_Template, 1, 0, "avl-icon-button", 6);
    ɵngcc0.ɵɵtemplate(12, AvlNotificationDialogComponent_ng_template_1_avl_tooltip_12_Template, 3, 3, "avl-tooltip", 7);
    ɵngcc0.ɵɵelementStart(13, "avl-icon-button", 8);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_icon_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.markAsUnread(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "avl-tooltip", 9);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "avl-icon-button", 10);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_icon_button_click_17_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.markAsRead(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "avl-tooltip", 11);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "avl-icon-button", 12);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_icon_button_click_21_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.toggleFilters(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(22, "avl-datatable", 13, 14);
    ɵngcc0.ɵɵlistener("selectedValuesChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_datatable_selectedValuesChange_22_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.selectedRows = $event; })("selectedValuesChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_datatable_selectedValuesChange_22_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.selectedValuesChanged(); })("on-row-clicked", function AvlNotificationDialogComponent_ng_template_1_Template_avl_datatable_on_row_clicked_22_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onRowClicked($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "avl-side-sheet", 15, 16);
    ɵngcc0.ɵɵlistener("openChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_side_sheet_openChange_24_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.filtersOpen = $event; });
    ɵngcc0.ɵɵelementStart(26, "div", 17);
    ɵngcc0.ɵɵelementStart(27, "h2");
    ɵngcc0.ɵɵtext(28);
    ɵngcc0.ɵɵpipe(29, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(30, "div", 18);
    ɵngcc0.ɵɵelementStart(31, "form", null, 19);
    ɵngcc0.ɵɵelementStart(33, "avl-list-expander", 20);
    ɵngcc0.ɵɵelementStart(34, "div", 21);
    ɵngcc0.ɵɵelementStart(35, "h3");
    ɵngcc0.ɵɵtext(36);
    ɵngcc0.ɵɵpipe(37, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(38, "div", 22);
    ɵngcc0.ɵɵelementStart(39, "div");
    ɵngcc0.ɵɵelementStart(40, "avl-checkbox", 23);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_40_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.filters.type.warning = $event; });
    ɵngcc0.ɵɵtext(41);
    ɵngcc0.ɵɵpipe(42, "translate");
    ɵngcc0.ɵɵtemplate(43, AvlNotificationDialogComponent_ng_template_1_span_43_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(44, "avl-icon", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(45, "div");
    ɵngcc0.ɵɵelementStart(46, "avl-checkbox", 26);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_46_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.filters.type.error = $event; });
    ɵngcc0.ɵɵtext(47);
    ɵngcc0.ɵɵpipe(48, "translate");
    ɵngcc0.ɵɵtemplate(49, AvlNotificationDialogComponent_ng_template_1_span_49_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(50, "avl-icon", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(51, "div");
    ɵngcc0.ɵɵelementStart(52, "avl-checkbox", 28);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_52_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.filters.type.info = $event; });
    ɵngcc0.ɵɵtext(53);
    ɵngcc0.ɵɵpipe(54, "translate");
    ɵngcc0.ɵɵtemplate(55, AvlNotificationDialogComponent_ng_template_1_span_55_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(56, "avl-icon", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(57, "div");
    ɵngcc0.ɵɵelementStart(58, "avl-checkbox", 30);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_58_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.filters.type.ok = $event; });
    ɵngcc0.ɵɵtext(59);
    ɵngcc0.ɵɵpipe(60, "translate");
    ɵngcc0.ɵɵtemplate(61, AvlNotificationDialogComponent_ng_template_1_span_61_Template, 2, 1, "span", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(62, "avl-icon", 31);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(63, "avl-list-expander", 20);
    ɵngcc0.ɵɵelementStart(64, "div", 21);
    ɵngcc0.ɵɵelementStart(65, "h3");
    ɵngcc0.ɵɵtext(66);
    ɵngcc0.ɵɵpipe(67, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(68, "div", 22);
    ɵngcc0.ɵɵelementStart(69, "avl-checkbox", 32);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_69_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.filters.state.unread = $event; });
    ɵngcc0.ɵɵtext(70);
    ɵngcc0.ɵɵpipe(71, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(72, "avl-icon", 33);
    ɵngcc0.ɵɵelementStart(73, "avl-checkbox", 34);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_checkbox_ngModelChange_73_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.filters.state.read = $event; });
    ɵngcc0.ɵɵtext(74);
    ɵngcc0.ɵɵpipe(75, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(76, "avl-icon", 35);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(77, "avl-list-expander", 20);
    ɵngcc0.ɵɵelementStart(78, "div", 21);
    ɵngcc0.ɵɵelementStart(79, "h3", 36, 37);
    ɵngcc0.ɵɵtext(81);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(82, AvlNotificationDialogComponent_ng_template_1_avl_tooltip_82_Template, 2, 1, "avl-tooltip", 38);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(83, "div", 39);
    ɵngcc0.ɵɵelementStart(84, "avl-date", 40);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_ngModelChange_84_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.filters.date.dateFromValue = $event; })("valueChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_valueChange_84_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.updateLabels(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(85, "avl-date", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_ngModelChange_85_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.filters.date.dateToValue = $event; })("valueChange", function AvlNotificationDialogComponent_ng_template_1_Template_avl_date_valueChange_85_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.updateLabels(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(86, "div", 42);
    ɵngcc0.ɵɵelementStart(87, "avl-button", 43);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_button_click_87_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.applyFilters(); });
    ɵngcc0.ɵɵtext(88);
    ɵngcc0.ɵɵpipe(89, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(90, "avl-button", 44);
    ɵngcc0.ɵɵlistener("click", function AvlNotificationDialogComponent_ng_template_1_Template_avl_button_click_90_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.reset(); });
    ɵngcc0.ɵɵtext(91);
    ɵngcc0.ɵɵpipe(92, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r11 = ɵngcc0.ɵɵreference(80);
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 48, "VizBox.NotificationDialog.Details"));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(9, 50, "VizBox.NotificationDialog.Notifications"), " (", ctx_r1.getNumberOfNotifications(), ") ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showRefreshButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showRefreshButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.disableMarkingSelected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(16, 52, "VizBox.NotificationDialog.MarkSelectedAsUnread"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.disableMarkingSelected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 54, "VizBox.NotificationDialog.MarkSelectedAsRead"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("badge", ctx_r1.badge);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("columnDefinitions", ctx_r1.columnDefinitions)("data", ctx_r1.filteredData)("pageSize", ctx_r1.pageSize)("pageSizeOptions", ctx_r1.pageSizeOptions)("selectedValues", ctx_r1.selectedRows);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("open", ctx_r1.filtersOpen);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(29, 56, "VizBox.NotificationDialog.Filters"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("narrow", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(37, 58, "VizBox.NotificationDialog.Type"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.warning);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(42, 60, "VizBox.NotificationDialog.Warning"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.error);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(48, 62, "VizBox.NotificationDialog.Error"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.info);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(54, 64, "VizBox.NotificationDialog.Info"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.type.ok);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(60, 66, "VizBox.NotificationDialog.Ok"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.tableData.length);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("narrow", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(67, 68, "VizBox.NotificationDialog.State"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.state.unread);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(71, 70, "VizBox.NotificationDialog.Unread"), " (", ctx_r1.getNumberOfUnreadNotifications(ctx_r1.tableData), ") ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.state.read);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(75, 72, "VizBox.NotificationDialog.Read"), " (", ctx_r1.tableData.length - ctx_r1.getNumberOfUnreadNotifications(ctx_r1.tableData), ") ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("narrow", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.dateFilterGroupHeader, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r11.scrollWidth > _r11.clientWidth);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.date.dateFromValue)("label", ctx_r1.dateFromLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.filters.date.dateToValue)("label", ctx_r1.dateToLabel);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(89, 74, "VizBox.NotificationDialog.Apply"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(92, 76, "VizBox.NotificationDialog.Reset"));
} }
'use strict';

    var _a;
    var NOTIFICATIONS_OVERFLOW_MENU = [
        {
            items: [
                {
                    label: 'VizBox.NotificationMenu.MarkAllAsRead',
                    action: 'markAllAsRead'
                },
                {
                    label: 'VizBox.NotificationMenu.MarkAllAsUnread',
                    action: 'markAllAsUnread'
                }
            ]
        }
    ];
    var TYPE_ICON_MAPPINGS = (_a = {},
        _a[0 /* Error */] = 'cancel',
        _a[1 /* Warning */] = 'warning',
        _a[2 /* Info */] = 'info-outline',
        _a[3 /* OK */] = 'check',
        _a);

    var __assign = (this && this.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read = (this && this.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (this && this.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    var AvlNotificationMenuComponent = /** @class */ (function () {
        function AvlNotificationMenuComponent() {
            var _this = this;
            this.open = false;
            this.openChange = new core.EventEmitter();
            this.openDetails = new core.EventEmitter();
            this.notificationStateChanged = new core.EventEmitter();
            this.markAllAsRead = new core.EventEmitter();
            this.markAllAsUnread = new core.EventEmitter();
            this.overflowMenuItems = [];
            this.notificationList = [];
            this.numberOfUnreadNotifications = 0;
            this.overflowMenuHandlers = {
                markAllAsRead: function () {
                    _this.markAllAsRead.emit();
                    _this.numberOfUnreadNotifications = 0;
                },
                markAllAsUnread: function () {
                    _this.markAllAsUnread.emit();
                    _this.numberOfUnreadNotifications = _this.notificationList.length;
                },
                undefined: function () { }
            };
            this.translateLabels();
        }
        Object.defineProperty(AvlNotificationMenuComponent.prototype, "notifications", {
            set: function (notifications) {
                this.notificationList = this.prepareNotifications(notifications);
                this.numberOfUnreadNotifications = notifications.filter(function (notif) { return !notif.read; }).length;
            },
            enumerable: true,
            configurable: true
        });
        AvlNotificationMenuComponent.prototype.ngAfterViewInit = function () {
            this.list.nativeElement.revertedList = true;
        };
        AvlNotificationMenuComponent.prototype.onNotificationStateChanged = function (event) {
            var notificationMenuItem = __assign({}, event.detail.value);
            var notification = __assign(__assign({}, notificationMenuItem), { read: notificationMenuItem.iconToggleValue });
            notification.read ? this.numberOfUnreadNotifications-- : this.numberOfUnreadNotifications++;
            this.notificationStateChanged.emit(notification);
            this.list.nativeElement.removeFocus();
        };
        AvlNotificationMenuComponent.prototype.onItemClicked = function (item) {
            this.overflowMenuHandlers[item.action]();
        };
        AvlNotificationMenuComponent.prototype.onOpenChanged = function (event) {
            if (!event.detail.value) {
                this.openChange.emit(false);
            }
            else {
                this.notificationList = __spread(this.notificationList);
            }
        };
        AvlNotificationMenuComponent.prototype.onOverflowMenuClicked = function () {
            this.list.nativeElement.removeFocus();
        };
        AvlNotificationMenuComponent.prototype.onDetailsClicked = function () {
            this.open = false;
            this.openDetails.emit();
            this.openChange.emit(false);
        };
        AvlNotificationMenuComponent.prototype.prepareNotifications = function (notifications) {
            var _this = this;
            return notifications.map(function (notification) { return (__assign(__assign({}, notification), { label: notification.messageText, sublabel: _this.formatDateTime(notification.timestamp), icon: TYPE_ICON_MAPPINGS[notification.type], iconToggleUnchecked: 'mail', iconToggleChecked: 'communication:mail-outline', iconToggleValue: notification.read })); });
        };
        AvlNotificationMenuComponent.prototype.formatDateTime = function (date) {
            return date === null
                ? ''
                : AvlLocalizationService.formatDateTime(date, {
                    format: 'date-short'
                }) + " " + AvlLocalizationService.formatDateTime(date, { format: 'time-long' });
        };
        AvlNotificationMenuComponent.prototype.translateLabels = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                                return [2 /*return*/];
                            }
                            _a = this;
                            return [4 /*yield*/, this.translateMenu(NOTIFICATIONS_OVERFLOW_MENU)];
                        case 1:
                            _a.overflowMenuItems = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AvlNotificationMenuComponent.prototype.translateMenu = function (menu) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(menu.map(function (group) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.translateMenuGroup(group)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        AvlNotificationMenuComponent.prototype.translateMenuGroup = function (group) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = {};
                            return [4 /*yield*/, Promise.all(group.items.map(function (item) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.translateMenuItem(item)];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); }))];
                        case 1: return [2 /*return*/, (_a.items = _b.sent(),
                                _a)];
                    }
                });
            });
        };
        AvlNotificationMenuComponent.prototype.translateMenuItem = function (item) {
            return __awaiter(this, void 0, void 0, function () {
                var translateService, _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            translateService = AvlLocalizationService.translationService;
                            _a = [__assign({}, item)];
                            _b = {};
                            return [4 /*yield*/, translateService.translate(item.label)];
                        case 1:
                            _b.label = _d.sent();
                            if (!item.sublabel) return [3 /*break*/, 3];
                            return [4 /*yield*/, translateService.translate(item.sublabel)];
                        case 2:
                            _c = _d.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _c = null;
                            _d.label = 4;
                        case 4: return [2 /*return*/, __assign.apply(void 0, _a.concat([(_b.sublabel = _c, _b)]))];
                    }
                });
            });
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AvlNotificationMenuComponent.prototype, "open", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", HTMLElement)
        ], AvlNotificationMenuComponent.prototype, "trigger", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], AvlNotificationMenuComponent.prototype, "notifications", null);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], AvlNotificationMenuComponent.prototype, "openChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], AvlNotificationMenuComponent.prototype, "openDetails", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], AvlNotificationMenuComponent.prototype, "notificationStateChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], AvlNotificationMenuComponent.prototype, "markAllAsRead", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], AvlNotificationMenuComponent.prototype, "markAllAsUnread", void 0);
        __decorate([
            core.ViewChild('list'),
            __metadata("design:type", core.ElementRef)
        ], AvlNotificationMenuComponent.prototype, "list", void 0);
        AvlNotificationMenuComponent = __decorate([ __metadata("design:paramtypes", [])
        ], AvlNotificationMenuComponent);
AvlNotificationMenuComponent.ɵfac = function AvlNotificationMenuComponent_Factory(t) { return new (t || AvlNotificationMenuComponent)(); };
AvlNotificationMenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlNotificationMenuComponent, selectors: [["avl-notification-menu"]], viewQuery: function AvlNotificationMenuComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.list = _t.first);
    } }, inputs: { open: "open", notifications: "notifications", trigger: "trigger" }, outputs: { openChange: "openChange", openDetails: "openDetails", notificationStateChanged: "notificationStateChanged", markAllAsRead: "markAllAsRead", markAllAsUnread: "markAllAsUnread" }, decls: 15, vars: 12, consts: [[3, "noCloseOnInsideClick", "open", "trigger", "open-changed"], ["id", "header"], ["id", "headerText"], [4, "ngIf"], [3, "items", "itemClicked"], ["icon", "more-vert", "slot", "trigger", 3, "click"], [3, "rows", "row-changed"], ["list", ""], ["id", "footer"], [3, "click"]], template: function AvlNotificationMenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "avl-popup", 0);
        ɵngcc0.ɵɵlistener("open-changed", function AvlNotificationMenuComponent_Template_avl_popup_open_changed_0_listener($event) { return ctx.onOpenChanged($event); });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "span");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, AvlNotificationMenuComponent_span_6_Template, 2, 1, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "avl-overflow-menu", 4);
        ɵngcc0.ɵɵlistener("itemClicked", function AvlNotificationMenuComponent_Template_avl_overflow_menu_itemClicked_7_listener($event) { return ctx.onItemClicked($event); });
        ɵngcc0.ɵɵelementStart(8, "avl-icon-button", 5);
        ɵngcc0.ɵɵlistener("click", function AvlNotificationMenuComponent_Template_avl_icon_button_click_8_listener() { return ctx.onOverflowMenuClicked(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "avl-list", 6, 7);
        ɵngcc0.ɵɵlistener("row-changed", function AvlNotificationMenuComponent_Template_avl_list_row_changed_9_listener($event) { return ctx.onNotificationStateChanged($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵelementStart(12, "avl-button", 9);
        ɵngcc0.ɵɵlistener("click", function AvlNotificationMenuComponent_Template_avl_button_click_12_listener() { return ctx.onDetailsClicked(); });
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("noCloseOnInsideClick", true)("open", ctx.open)("trigger", ctx.trigger);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 8, "VizBox.NotificationMenu.Notifications"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.numberOfUnreadNotifications);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ctx.overflowMenuItems);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("rows", ctx.notificationList);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 10, "VizBox.NotificationMenu.Details"));
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.AvlOverflowMenuDirective, ɵngcc2.AvlInteractionControlDirective, ɵngcc2.AvlIconButtonDirective, ɵngcc2.AvlMultiSelectControlDirective, ɵngcc2.AvlSingleSelectControlDirective, ɵngcc2.AvlListDirective], pipes: [ɵngcc3.TranslatePipe], styles: ["avl-popup[_ngcontent-%COMP%]{width:40%}avl-list[_ngcontent-%COMP%]{width:100%;height:250px;padding-top:8px;--avl-item-padding-left:16px;--avl-item-padding-right:16px;--notification-item-height:48px}#header[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:space-between;box-sizing:border-box;height:56px;padding:0 16px;border-bottom:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#footer[_ngcontent-%COMP%]{display:flex;align-items:center;box-sizing:border-box;height:56px;border-top:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#headerText[_ngcontent-%COMP%]{font-size:20px;color:var(--avl-primary-text-color);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlNotificationMenuComponent, [{
        type: core.Component,
        args: [{
                selector: 'avl-notification-menu',
                template: "<avl-popup\r\n  [noCloseOnInsideClick]=\"true\"\r\n  [open]=\"open\"\r\n  [trigger]=\"trigger\"\r\n  (open-changed)=\"onOpenChanged($event)\"\r\n>\r\n  <div id=\"header\">\r\n    <div id=\"headerText\">\r\n      <span>{{ 'VizBox.NotificationMenu.Notifications' | translate }}</span>\r\n      <span *ngIf=\"numberOfUnreadNotifications\"> ({{ numberOfUnreadNotifications }}) </span>\r\n    </div>\r\n    <avl-overflow-menu (itemClicked)=\"onItemClicked($event)\" [items]=\"overflowMenuItems\">\r\n      <avl-icon-button\r\n        icon=\"more-vert\"\r\n        slot=\"trigger\"\r\n        (click)=\"onOverflowMenuClicked()\"\r\n      ></avl-icon-button>\r\n    </avl-overflow-menu>\r\n  </div>\r\n  <avl-list\r\n    #list\r\n    [rows]=\"notificationList\"\r\n    (row-changed)=\"onNotificationStateChanged($event)\"\r\n  ></avl-list>\r\n  <div id=\"footer\">\r\n    <avl-button (click)=\"onDetailsClicked()\">{{ 'VizBox.NotificationMenu.Details' | translate }}</avl-button>\r\n  </div>\r\n</avl-popup>\r\n",
                styles: ["avl-popup{width:40%}avl-list{width:100%;height:250px;padding-top:8px;--avl-item-padding-left:16px;--avl-item-padding-right:16px;--notification-item-height:48px}#header{display:flex;align-items:center;justify-content:space-between;box-sizing:border-box;height:56px;padding:0 16px;border-bottom:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#footer{display:flex;align-items:center;box-sizing:border-box;height:56px;border-top:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#headerText{font-size:20px;color:var(--avl-primary-text-color);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}"]
            }]
    }], function () { return []; }, { open: [{
            type: core.Input
        }], openChange: [{
            type: core.Output
        }], openDetails: [{
            type: core.Output
        }], notificationStateChanged: [{
            type: core.Output
        }], markAllAsRead: [{
            type: core.Output
        }], markAllAsUnread: [{
            type: core.Output
        }], notifications: [{
            type: core.Input
        }], trigger: [{
            type: core.Input
        }], list: [{
            type: core.ViewChild,
            args: ['list']
        }] }); })();
        return AvlNotificationMenuComponent;
    }());

    /** @hidden */
    var ANIMATION_DURATION = 400;
    /** @hidden */
    var ACTION_BUTTON_MESSAGE = '_X more _TYPE notifications';
    /** @hidden */
    var MARGIN = 12;

    var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$1 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var AnimateButton = /** @class */ (function () {
        function AnimateButton() {
            var _this = this;
            this.getInfoHeight = function () {
                return _this.infoStackHeight > _this.infoStackIndicatorHeight
                    ? _this.infoStackHeight
                    : _this.infoStackIndicatorHeight;
            };
            this.getWarningHeight = function () {
                return _this.warningStackHeight > _this.warningStackIndicatorHeight
                    ? _this.warningStackHeight
                    : _this.warningStackIndicatorHeight;
            };
            this.getOffsetHeight = function (height) {
                return height ? height + MARGIN * 2 : 0;
            };
        }
        AnimateButton.prototype.ngOnChanges = function (changes) {
            var infoStackOffsetHeight = this.getOffsetHeight(this.getInfoHeight());
            var warningStackOffsetHeight = this.getOffsetHeight(this.getWarningHeight());
            this.styleTop = infoStackOffsetHeight + warningStackOffsetHeight + 'px';
        };
        __decorate$1([
            core.Input(),
            __metadata$1("design:type", Number)
        ], AnimateButton.prototype, "increment", void 0);
        __decorate$1([
            core.Input(),
            __metadata$1("design:type", Number)
        ], AnimateButton.prototype, "infoStackHeight", void 0);
        __decorate$1([
            core.Input(),
            __metadata$1("design:type", Number)
        ], AnimateButton.prototype, "warningStackHeight", void 0);
        __decorate$1([
            core.Input(),
            __metadata$1("design:type", Number)
        ], AnimateButton.prototype, "infoStackIndicatorHeight", void 0);
        __decorate$1([
            core.Input(),
            __metadata$1("design:type", Number)
        ], AnimateButton.prototype, "warningStackIndicatorHeight", void 0);
        __decorate$1([
            core.HostBinding('style.top'),
            __metadata$1("design:type", String)
        ], AnimateButton.prototype, "styleTop", void 0);
        AnimateButton = __decorate$1([ __metadata$1("design:paramtypes", [])
        ], AnimateButton);
AnimateButton.ɵfac = function AnimateButton_Factory(t) { return new (t || AnimateButton)(); };
AnimateButton.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AnimateButton, selectors: [["", "animateButton", ""]], hostVars: 2, hostBindings: function AnimateButton_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("top", ctx.styleTop);
    } }, inputs: { increment: "increment", infoStackHeight: "infoStackHeight", warningStackHeight: "warningStackHeight", infoStackIndicatorHeight: "infoStackIndicatorHeight", warningStackIndicatorHeight: "warningStackIndicatorHeight" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AnimateButton, [{
        type: core.Directive,
        args: [{ selector: '[animateButton]' }]
    }], function () { return []; }, { styleTop: [{
            type: core.HostBinding,
            args: ['style.top']
        }], increment: [{
            type: core.Input
        }], infoStackHeight: [{
            type: core.Input
        }], warningStackHeight: [{
            type: core.Input
        }], infoStackIndicatorHeight: [{
            type: core.Input
        }], warningStackIndicatorHeight: [{
            type: core.Input
        }] }); })();
        return AnimateButton;
    }());

    var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$2 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @hidden */
    var AnimateSnackbar = /** @class */ (function () {
        function AnimateSnackbar(builder, el) {
            var _this = this;
            this.builder = builder;
            /** @hidden */
            this.defaultClass = true;
            this.getAnimation = function (animationName, initialStyle) {
                var elementWidth = _this.element.nativeElement.offsetWidth - 3 * MARGIN;
                var inStackStyle = animations.style({
                    marginTop: MARGIN + 'px',
                    marginLeft: MARGIN + 'px',
                    marginRight: MARGIN + 'px',
                    width: elementWidth + 'px'
                });
                switch (animationName) {
                    case 4 /* FromStack */:
                        return [animations.animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle), initialStyle];
                    case 3 /* ToStack */: {
                        return [initialStyle, animations.animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle)];
                    }
                    default:
                        return [initialStyle, animations.animate('1ms ease-in', initialStyle)];
                }
            };
            this.element = el;
        }
        AnimateSnackbar.prototype.ngOnChanges = function (changes) {
            if (changes.animateSnackbar) {
                var isInStack = changes.animateSnackbar.currentValue === 3 /* ToStack */;
                if (isInStack) {
                    this.move();
                }
                else if (changes.animateSnackbar.previousValue === 3 /* ToStack */) {
                    this.move();
                }
            }
        };
        AnimateSnackbar.prototype.show = function (metadata) {
            if (this.player) {
                this.player.destroy();
            }
            if (metadata) {
                var factory = this.builder.build(metadata);
                var player = factory.create(this.element.nativeElement);
                player.play();
            }
        };
        AnimateSnackbar.prototype.move = function () {
            var animationMetadata = this.animate();
            this.show(animationMetadata);
        };
        AnimateSnackbar.prototype.animate = function () {
            var initialStyle = animations.style({
                marginTop: '0',
                width: '100%',
                marginLeft: '0',
                marginRight: '0'
            });
            return this.getAnimation(this.animateSnackbar, initialStyle);
        };
        AnimateSnackbar.ctorParameters = function () { return [
            { type: animations.AnimationBuilder },
            { type: core.ElementRef }
        ]; };
        __decorate$2([
            core.Input(),
            __metadata$2("design:type", Number)
        ], AnimateSnackbar.prototype, "animateSnackbar", void 0);
        __decorate$2([
            core.Input(),
            __metadata$2("design:type", Number)
        ], AnimateSnackbar.prototype, "positionAnimation", void 0);
        __decorate$2([
            core.Input('notification'),
            __metadata$2("design:type", Object)
        ], AnimateSnackbar.prototype, "notification", void 0);
        __decorate$2([
            core.Input('reopen'),
            __metadata$2("design:type", Boolean)
        ], AnimateSnackbar.prototype, "reopen", void 0);
        __decorate$2([
            core.HostBinding('class.in-stack'),
            __metadata$2("design:type", Boolean)
        ], AnimateSnackbar.prototype, "inStack", void 0);
        __decorate$2([
            core.HostBinding('class.no-animation'),
            __metadata$2("design:type", Boolean)
        ], AnimateSnackbar.prototype, "noAnimation", void 0);
        __decorate$2([
            core.HostBinding('class.snackbar-container'),
            __metadata$2("design:type", Object)
        ], AnimateSnackbar.prototype, "defaultClass", void 0);
        AnimateSnackbar = __decorate$2([ __metadata$2("design:paramtypes", [animations.AnimationBuilder, core.ElementRef])
        ], AnimateSnackbar);
AnimateSnackbar.ɵfac = function AnimateSnackbar_Factory(t) { return new (t || AnimateSnackbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AnimationBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AnimateSnackbar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AnimateSnackbar, selectors: [["", "animateSnackbar", ""]], hostVars: 6, hostBindings: function AnimateSnackbar_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("snackbar-container", ctx.defaultClass)("in-stack", ctx.inStack)("no-animation", ctx.noAnimation);
    } }, inputs: { animateSnackbar: "animateSnackbar", positionAnimation: "positionAnimation", notification: "notification", reopen: "reopen" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AnimateSnackbar, [{
        type: core.Directive,
        args: [{ selector: '[animateSnackbar]' }]
    }], function () { return [{ type: ɵngcc4.AnimationBuilder }, { type: ɵngcc0.ElementRef }]; }, { defaultClass: [{
            type: core.HostBinding,
            args: ['class.snackbar-container']
        }], animateSnackbar: [{
            type: core.Input
        }], positionAnimation: [{
            type: core.Input
        }], notification: [{
            type: core.Input,
            args: ['notification']
        }], reopen: [{
            type: core.Input,
            args: ['reopen']
        }], inStack: [{
            type: core.HostBinding,
            args: ['class.in-stack']
        }], noAnimation: [{
            type: core.HostBinding,
            args: ['class.no-animation']
        }] }); })();
        return AnimateSnackbar;
    }());

    var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$3 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**@hidden */
    var SnackbarMethodDescription = /** @class */ (function () {
        function SnackbarMethodDescription(method, animate) {
            this.method = method;
            this.animate = animate;
        }
        return SnackbarMethodDescription;
    }());
    var ShowHideSnackbarDirective = /** @class */ (function () {
        function ShowHideSnackbarDirective(el) {
            this.element = el;
        }
        ShowHideSnackbarDirective.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var _a, _b, _c, _d;
            if (changes.methodDescription) {
                if (((_a = changes.methodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                    setTimeout(function () { var _a, _b; return (_a = _this.element.nativeElement) === null || _a === void 0 ? void 0 : _a.showSnackbar('relative', !((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.animate)); }, 0);
                }
                else if (((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.method) === 'hide') {
                    (_c = this.element.nativeElement) === null || _c === void 0 ? void 0 : _c.hideSnackbar((_d = changes.methodDescription.currentValue) === null || _d === void 0 ? void 0 : _d.animate);
                }
            }
        };
        ShowHideSnackbarDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate$3([
            core.Input(),
            __metadata$3("design:type", SnackbarMethodDescription)
        ], ShowHideSnackbarDirective.prototype, "methodDescription", void 0);
        ShowHideSnackbarDirective = __decorate$3([ __metadata$3("design:paramtypes", [core.ElementRef])
        ], ShowHideSnackbarDirective);
ShowHideSnackbarDirective.ɵfac = function ShowHideSnackbarDirective_Factory(t) { return new (t || ShowHideSnackbarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ShowHideSnackbarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ShowHideSnackbarDirective, selectors: [["", "showHideSnackbar", ""]], inputs: { methodDescription: "methodDescription" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowHideSnackbarDirective, [{
        type: core.Directive,
        args: [{ selector: '[showHideSnackbar]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { methodDescription: [{
            type: core.Input
        }] }); })();
        return ShowHideSnackbarDirective;
    }());

    var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$4 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var AnimateStack = /** @class */ (function () {
        function AnimateStack(builder, el) {
            var _this = this;
            this.builder = builder;
            this.getAnimation = function (animationName, initialStyle) {
                var allStyle = animations.style('*');
                switch (animationName) {
                    case 2 /* ToBottom */: {
                        return [
                            allStyle,
                            animations.animate(ANIMATION_DURATION + 'ms ease-in', animations.style({
                                top: _this.styleTop + 'px',
                                zIndex: 0
                            }))
                        ];
                    }
                    case 1 /* ToTop */: {
                        return [allStyle, animations.animate(ANIMATION_DURATION + 'ms ease-in', initialStyle)];
                    }
                    default:
                        return [initialStyle, animations.animate('0ms', initialStyle)];
                }
            };
            this.element = el;
        }
        AnimateStack.prototype.ngOnChanges = function (changes) {
            var _a;
            if (changes.animateStack) {
                this.move(this.previousStackHeight);
            }
            else if (changes.previousStackHeight) {
                this.move(changes === null || changes === void 0 ? void 0 : changes.previousStackHeight.currentValue);
            }
            else if (changes.snackbarMethodDescription) {
                if (((_a = changes.snackbarMethodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                    this.move(this.previousStackHeight);
                }
            }
        };
        AnimateStack.prototype.show = function (metadata) {
            if (this.player) {
                this.player.destroy();
            }
            if (metadata) {
                var factory = this.builder.build(metadata);
                var player = factory.create(this.element.nativeElement);
                player.play();
            }
        };
        AnimateStack.prototype.move = function (height) {
            if (this.animateStack === 2 /* ToBottom */) {
                this.styleTop = height + MARGIN * 2;
            }
            var animationMetadata = this.animate();
            this.show(animationMetadata);
        };
        AnimateStack.prototype.animate = function () {
            var initialStyle = animations.style({
                top: '0',
                width: '100%',
                left: '0',
                zIndex: 1
            });
            return this.getAnimation(this.animateStack, initialStyle);
        };
        AnimateStack.ctorParameters = function () { return [
            { type: animations.AnimationBuilder },
            { type: core.ElementRef }
        ]; };
        __decorate$4([
            core.Input(),
            __metadata$4("design:type", Number)
        ], AnimateStack.prototype, "animateStack", void 0);
        __decorate$4([
            core.Input(),
            __metadata$4("design:type", Object)
        ], AnimateStack.prototype, "notification", void 0);
        __decorate$4([
            core.Input(),
            __metadata$4("design:type", Number)
        ], AnimateStack.prototype, "previousStackHeight", void 0);
        __decorate$4([
            core.Input(),
            __metadata$4("design:type", SnackbarMethodDescription)
        ], AnimateStack.prototype, "snackbarMethodDescription", void 0);
        __decorate$4([
            core.Input(),
            __metadata$4("design:type", Boolean)
        ], AnimateStack.prototype, "reopen", void 0);
        AnimateStack = __decorate$4([ __metadata$4("design:paramtypes", [animations.AnimationBuilder, core.ElementRef])
        ], AnimateStack);
AnimateStack.ɵfac = function AnimateStack_Factory(t) { return new (t || AnimateStack)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AnimationBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AnimateStack.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AnimateStack, selectors: [["", "animateStack", ""]], inputs: { animateStack: "animateStack", notification: "notification", previousStackHeight: "previousStackHeight", snackbarMethodDescription: "snackbarMethodDescription", reopen: "reopen" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AnimateStack, [{
        type: core.Directive,
        args: [{ selector: '[animateStack]' }]
    }], function () { return [{ type: ɵngcc4.AnimationBuilder }, { type: ɵngcc0.ElementRef }]; }, { animateStack: [{
            type: core.Input
        }], notification: [{
            type: core.Input
        }], previousStackHeight: [{
            type: core.Input
        }], snackbarMethodDescription: [{
            type: core.Input
        }], reopen: [{
            type: core.Input
        }] }); })();
        return AnimateStack;
    }());

    var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$5 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var SnackbarListener = /** @class */ (function () {
        function SnackbarListener() {
            /** @hidden */
            this.notificationClicked = new core.EventEmitter();
            /** @hidden */
            this.buttonClicked = new core.EventEmitter();
            /** @hidden */
            this.notificationDismissed = new core.EventEmitter();
        }
        SnackbarListener.prototype.onNotificationClicked = function (event) {
            this.notificationClicked.emit(event);
        };
        SnackbarListener.prototype.onButtonClicked = function (event) {
            if (event instanceof Event) {
                this.buttonClicked.emit(event);
            }
        };
        SnackbarListener.prototype.onNotificationDismissed = function (event) {
            if (event instanceof Event) {
                this.notificationDismissed.emit(event);
            }
        };
        __decorate$5([
            core.Output(),
            __metadata$5("design:type", core.EventEmitter)
        ], SnackbarListener.prototype, "notificationClicked", void 0);
        __decorate$5([
            core.Output(),
            __metadata$5("design:type", core.EventEmitter)
        ], SnackbarListener.prototype, "buttonClicked", void 0);
        __decorate$5([
            core.Output(),
            __metadata$5("design:type", core.EventEmitter)
        ], SnackbarListener.prototype, "notificationDismissed", void 0);
        __decorate$5([
            core.HostListener('notification-clicked', ['$event']),
            __metadata$5("design:type", Function),
            __metadata$5("design:paramtypes", [Event]),
            __metadata$5("design:returntype", void 0)
        ], SnackbarListener.prototype, "onNotificationClicked", null);
        __decorate$5([
            core.HostListener('button-clicked', ['$event']),
            __metadata$5("design:type", Function),
            __metadata$5("design:paramtypes", [Event]),
            __metadata$5("design:returntype", void 0)
        ], SnackbarListener.prototype, "onButtonClicked", null);
        __decorate$5([
            core.HostListener('notification-dismissed', ['$event']),
            __metadata$5("design:type", Function),
            __metadata$5("design:paramtypes", [Event]),
            __metadata$5("design:returntype", void 0)
        ], SnackbarListener.prototype, "onNotificationDismissed", null);
SnackbarListener.ɵfac = function SnackbarListener_Factory(t) { return new (t || SnackbarListener)(); };
SnackbarListener.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SnackbarListener, selectors: [["", "snackbarListener", ""]], hostBindings: function SnackbarListener_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("notification-clicked", function SnackbarListener_notification_clicked_HostBindingHandler($event) { return ctx.onNotificationClicked($event); })("button-clicked", function SnackbarListener_button_clicked_HostBindingHandler($event) { return ctx.onButtonClicked($event); })("notification-dismissed", function SnackbarListener_notification_dismissed_HostBindingHandler($event) { return ctx.onNotificationDismissed($event); });
    } }, outputs: { notificationClicked: "notificationClicked", buttonClicked: "buttonClicked", notificationDismissed: "notificationDismissed" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SnackbarListener, [{
        type: core.Directive,
        args: [{ selector: '[snackbarListener]' }]
    }], function () { return []; }, { notificationClicked: [{
            type: core.Output
        }], buttonClicked: [{
            type: core.Output
        }], notificationDismissed: [{
            type: core.Output
        }], onNotificationClicked: [{
            type: core.HostListener,
            args: ['notification-clicked', ['$event']]
        }], onButtonClicked: [{
            type: core.HostListener,
            args: ['button-clicked', ['$event']]
        }], onNotificationDismissed: [{
            type: core.HostListener,
            args: ['notification-dismissed', ['$event']]
        }] }); })();
        return SnackbarListener;
    }());

    var __awaiter$1 = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$1 = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    /** @hidden */
    var SnackbarStack = /** @class */ (function () {
        function SnackbarStack(stackType) {
            var _this = this;
            /** @hidden */
            this.notificationList = [];
            /** @hidden */
            this.activeNotification$ = new rxjs.BehaviorSubject(undefined);
            /** @hidden */
            this.stackIndicator = false;
            /** @hidden */
            this.actionButtonMessage = ACTION_BUTTON_MESSAGE;
            this.openNextNotification = function (stackType) {
                _this.methodDescription = new SnackbarMethodDescription('show', !_this.reopen);
                if (!_this.reopen) {
                    _this.stackAnimation = 1 /* ToTop */;
                }
                else {
                    _this.stackAnimation = 4 /* FromStack */;
                }
                _this.setStackIndicatorProperties(stackType);
                _this.reopen = false;
                _this.dismissedSilently = false;
            };
            this.resetValues = function () {
                _this.notificationList = [];
                _this.previousNotification = undefined;
                _this.stackIndicator = undefined;
            };
            this.setStackIndicatorProperties = function (stackType) {
                var notificationsCount = _this.notificationList.length;
                _this.stackIndicator = notificationsCount > 1;
                var timeout = setTimeout(function () {
                    _this.previousNotification = _this.notificationList[notificationsCount - 1];
                    _this.buttonLabel = _this.setButtonLabel(notificationsCount, stackType);
                    _this.stackIndicatorButtonLabel = _this.setButtonLabel(notificationsCount - 1, stackType);
                    clearTimeout(timeout);
                }, _this.previousNotification ? ANIMATION_DURATION : 0);
            };
            this.setButtonLabel = function (notificationsCount, type) {
                return notificationsCount > 0
                    ? _this.actionButtonMessage
                        .replace('_TYPE ', type === 'info' ? '' : type + ' ')
                        .replace('_X', String(notificationsCount))
                    : null;
            };
            this.translateLabels();
            this.methodDescription = new SnackbarMethodDescription(undefined, undefined);
            this.activeNotification$
                .pipe(operators.skipWhile(function (notification) { return notification === undefined; }))
                .subscribe(function (notification) {
                if (notification) {
                    if (_this.notificationList.length > 0) {
                        var timeout_1 = setTimeout(function () {
                            _this.openNextNotification(stackType);
                            clearTimeout(timeout_1);
                        }, _this.previousNotification ? ANIMATION_DURATION : 0);
                    }
                    else {
                        _this.openNextNotification(stackType);
                    }
                }
                else {
                    _this.resetValues();
                }
            });
        }
        SnackbarStack.prototype.translateLabels = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var translationService, _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                                return [2 /*return*/];
                            }
                            translationService = AvlLocalizationService.translationService;
                            _a = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationContainer._X_more_TYPE_notifications')];
                        case 1:
                            _a.actionButtonMessage = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return SnackbarStack;
    }());

    var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$6 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var NOTIFICATION_TYPE = new Map([
        [0 /* Error */, 'Error'],
        [1 /* Warning */, 'Warning'],
        [2 /* Info */, 'Info'],
        [3 /* OK */, 'OK']
    ]);
    var AvlNotificationContainerComponent = /** @class */ (function () {
        function AvlNotificationContainerComponent(cdRef) {
            var _this = this;
            this.cdRef = cdRef;
            /** Observable emits notifications. Default observable emits dummy notifications every 3s for 100s. */
            this.notification$ = new rxjs.Observable(function subscribe(subscriber) {
                var i = 0;
                var intervalId = setInterval(function () {
                    var warning = Math.round(Math.random());
                    subscriber.next({
                        id: i++,
                        module: 'notification-container',
                        timestamp: new Date(),
                        type: warning ? 1 /* Warning */ : 2 /* Info */,
                        messageText: 'Snackbar with notification' + new Date().toTimeString(),
                        read: false,
                        link: 'https://vizbox.avl.com'
                    });
                }, 3000);
                setTimeout(function () {
                    clearInterval(intervalId);
                }, 100000);
            });
            this.openMenu = new core.EventEmitter();
            /** @hidden */
            this.stackHeight = {};
            /** @hidden */
            this.notificationList = [];
            this.destroyed$ = new rxjs.Subject();
            /** @hidden */
            this.onButtonClicked = function (event) {
                if (event) {
                    _this.openMenu.emit();
                    _this.dismissAll();
                }
            };
            /** @hidden */
            this.onNotificationDismissed = function (event, notification) {
                var _a, _b;
                if (event) {
                    var snackType = (_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.id) === null || _b === void 0 ? void 0 : _b.replace('Snackbar', '');
                    _this.removeNotification(notification, snackType);
                }
            };
            /** @hidden */
            this.openFromStack = function (notification) {
                var stackName = _this.getStackName(notification.type);
                _this[stackName].methodDescription = new SnackbarMethodDescription('hide', true);
            };
            /** @hidden */
            this.dismissAll = function () {
                _this.notificationList = [];
                _this.warningStack.activeNotification$.next(undefined);
                _this.infoStack.activeNotification$.next(undefined);
            };
            this.handleNotification = function (notification) {
                _this.previousNotification = _this.notificationList[_this.notificationList.length - 1];
                _this.notificationList.push(notification);
                _this.updateStackActiveNotification(notification);
                _this.setStackAnimation(notification.type);
            };
            this.updateStackActiveNotification = function (notification) {
                var _a;
                var stackName = _this.getStack(notification === null || notification === void 0 ? void 0 : notification.type);
                _this.updateStackNotificationList(notification.type);
                _this.activeNotification = notification;
                if (_this[stackName].notificationList.length > 1) {
                    _this.reopen = true;
                    if (((_a = _this.previousNotification) === null || _a === void 0 ? void 0 : _a.type) === notification.type) {
                        _this[stackName].snackbarAnimation = 3 /* ToStack */;
                        // silently dismiss notification after previous notification animation
                        var timeout_1 = setTimeout(function () {
                            _this.silentlyDismissNotification(stackName);
                            _this[stackName].snackbarAnimation = null;
                            clearTimeout(timeout_1);
                        }, ANIMATION_DURATION);
                    }
                    else {
                        _this.silentlyDismissNotification(stackName);
                    }
                }
                else {
                    _this[stackName].activeNotification$.next(notification);
                }
            };
            this.updateStackNotificationList = function (notificationType) {
                var stack = _this[_this.getStack(notificationType)];
                if (stack) {
                    stack.notificationList = _this.notificationList.filter(function (item) { return item.type === notificationType; });
                }
                return stack.notificationList;
            };
            this.silentlyDismissNotification = function (stackName) {
                _this[stackName].dismissedSilently = true;
                _this[stackName].methodDescription = new SnackbarMethodDescription('hide', false);
            };
            this.setStackAnimation = function (notificationType, animation) {
                var _a, _b, _c;
                var currentStack = _this.getStack(notificationType);
                var previousStack = _this.getStack(notificationType, true);
                if (((_b = (_a = _this[previousStack]) === null || _a === void 0 ? void 0 : _a.notificationList) === null || _b === void 0 ? void 0 : _b.length) > 0 &&
                    ((_c = _this.previousNotification) === null || _c === void 0 ? void 0 : _c.type) !== notificationType) {
                    _this[previousStack].stackAnimation = animation || 2 /* ToBottom */;
                    _this[currentStack].stackAnimation =
                        animation === 1 /* ToTop */
                            ? 2 /* ToBottom */
                            : 1 /* ToTop */;
                }
            };
            this.removeNotification = function (notification, snackType) {
                var _a;
                var stackName = _this.getStack(notification === null || notification === void 0 ? void 0 : notification.type);
                if (_this[stackName].dismissedSilently) {
                    //notification dismissed silently
                    var stackName_1 = _this.getStack((_a = _this.activeNotification) === null || _a === void 0 ? void 0 : _a.type);
                    _this[stackName_1].activeNotification$.next(_this.activeNotification);
                    _this.reopen = false;
                }
                else {
                    //notification dismissed
                    _this.notificationList = _this.notificationList.filter(function (currentNotification) { return currentNotification.id !== notification.id; });
                    _this.reopenLastNotification(notification, stackName);
                }
            };
            this.reopenLastNotification = function (notification, stackName) {
                var _a;
                var stackNotificationList = (_a = _this[stackName]) === null || _a === void 0 ? void 0 : _a.notificationList;
                if (_this.isLastNotificationDismissed(notification, _this[stackName]) &&
                    (stackNotificationList === null || stackNotificationList === void 0 ? void 0 : stackNotificationList.length) > 0) {
                    _this[stackName].reopen = true;
                    stackNotificationList = _this.updateStackNotificationList(notification.type);
                    var lastNotification = stackNotificationList[stackNotificationList.length - 1];
                    if (lastNotification) {
                        _this[stackName].activeNotification$.next(lastNotification);
                    }
                    else {
                        _this[stackName].stackIndicator = false;
                        _this[stackName].reopen = false;
                        _this[stackName].animateStack = 2 /* ToBottom */;
                        _this.setStackAnimation(notification.type, 1 /* ToTop */);
                    }
                }
            };
            this.isLastNotificationDismissed = function (notification, stack) {
                var lastNotification = stack.notificationList[stack.notificationList.length - 1];
                return (lastNotification === null || lastNotification === void 0 ? void 0 : lastNotification.id) === (notification === null || notification === void 0 ? void 0 : notification.id);
            };
            this.getStackName = function (stackType) {
                return stackType === 1 ? 'warningStack' : 'infoStack';
            };
            this.warningStack = new SnackbarStack(String(NOTIFICATION_TYPE.get(1 /* Warning */)).toLowerCase());
            this.infoStack = new SnackbarStack(String(NOTIFICATION_TYPE.get(2 /* Info */)).toLowerCase());
        }
        AvlNotificationContainerComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        AvlNotificationContainerComponent.prototype.ngAfterViewChecked = function () {
            this.cdRef.detectChanges();
        };
        /** @hidden */
        AvlNotificationContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b;
            this.positionTop = ((_a = document.querySelector('main')) === null || _a === void 0 ? void 0 : _a.offsetTop) + 12 + 'px';
            (_b = this.notification$) === null || _b === void 0 ? void 0 : _b.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (notification) {
                _this.handleNotification(notification);
            });
        };
        AvlNotificationContainerComponent.prototype.getStack = function (notificationType, previous) {
            var stackType;
            if (notificationType === 1 /* Warning */ ||
                notificationType === 0 /* Error */) {
                stackType = previous ? 2 /* Info */ : 1 /* Warning */;
            }
            else {
                stackType = previous ? 1 /* Warning */ : 2 /* Info */;
            }
            return this.getStackName(stackType);
        };
        AvlNotificationContainerComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate$6([
            core.HostBinding('style.top'),
            __metadata$6("design:type", String)
        ], AvlNotificationContainerComponent.prototype, "positionTop", void 0);
        __decorate$6([
            core.ViewChild('warningStackElement'),
            __metadata$6("design:type", core.ElementRef)
        ], AvlNotificationContainerComponent.prototype, "warningStackElement", void 0);
        __decorate$6([
            core.ViewChild('infoStackElement'),
            __metadata$6("design:type", core.ElementRef)
        ], AvlNotificationContainerComponent.prototype, "infoStackElement", void 0);
        __decorate$6([
            core.ViewChild('infoStackIndicatorElement'),
            __metadata$6("design:type", core.ElementRef)
        ], AvlNotificationContainerComponent.prototype, "infoStackIndicatorElement", void 0);
        __decorate$6([
            core.ViewChild('infoStackIndicatorElement'),
            __metadata$6("design:type", core.ElementRef)
        ], AvlNotificationContainerComponent.prototype, "warningStackIndicatorElement", void 0);
        __decorate$6([
            core.Input('display-icon'),
            __metadata$6("design:type", Boolean)
        ], AvlNotificationContainerComponent.prototype, "displayIcon", void 0);
        __decorate$6([
            core.Input('notification$'),
            __metadata$6("design:type", rxjs.Observable)
        ], AvlNotificationContainerComponent.prototype, "notification$", void 0);
        __decorate$6([
            core.Output(),
            __metadata$6("design:type", core.EventEmitter)
        ], AvlNotificationContainerComponent.prototype, "openMenu", void 0);
        AvlNotificationContainerComponent = __decorate$6([ __metadata$6("design:paramtypes", [core.ChangeDetectorRef])
        ], AvlNotificationContainerComponent);
AvlNotificationContainerComponent.ɵfac = function AvlNotificationContainerComponent_Factory(t) { return new (t || AvlNotificationContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AvlNotificationContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlNotificationContainerComponent, selectors: [["avl-notification-container"]], viewQuery: function AvlNotificationContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
        ɵngcc0.ɵɵviewQuery(_c3, true);
        ɵngcc0.ɵɵviewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.warningStackElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoStackElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoStackIndicatorElement = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.warningStackIndicatorElement = _t.first);
    } }, hostVars: 2, hostBindings: function AvlNotificationContainerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("top", ctx.positionTop);
    } }, inputs: { notification$: "notification$", displayIcon: ["display-icon", "displayIcon"] }, outputs: { openMenu: "openMenu" }, decls: 2, vars: 3, consts: [["class", "snackbar", 4, "ngIf"], [1, "snackbar"], ["id", "warningStack", 1, "snackbar-stack", 3, "animateStack", "previousStackHeight", "snackbarMethodDescription"], ["warningStackElement", ""], ["id", "warningSnack", 3, "animateSnackbar"], ["warningSnackElement", ""], ["id", "warningSnackbar", "sliding", "", "snackbarListener", "", "showHideSnackbar", "warningSnackbar", 3, "message", "actionButtonLabel", "link", "messageType", "methodDescription", "buttonClicked", "notificationDismissed", 4, "ngIf"], ["class", "stack-indicator-container", 4, "ngIf"], ["id", "infoStack", 1, "snackbar-stack", 3, "animateStack", "previousStackHeight", "snackbarMethodDescription"], ["infoStackElement", ""], ["id", "infoSnack", 3, "animateSnackbar"], ["infoSnackElement", ""], ["id", "infoSnackbar", "sliding", "", "snackbarListener", "", "showHideSnackbar", "infoSnackbar", 3, "message", "actionButtonLabel", "link", "messageType", "displayIcon", "methodDescription", "buttonClicked", "notificationDismissed", 4, "ngIf"], ["animateButton", "", "class", "dismiss-all", 3, "infoStackHeight", "warningStackHeight", "infoStackIndicatorHeight", "warningStackIndicatorHeight", 4, "ngIf"], ["id", "warningSnackbar", "sliding", "", "snackbarListener", "", "showHideSnackbar", "warningSnackbar", 3, "message", "actionButtonLabel", "link", "messageType", "methodDescription", "buttonClicked", "notificationDismissed"], ["warningSnackbar", ""], [1, "stack-indicator-container"], ["warningStackIndicator", ""], [1, "stack-indicator"], [1, "notification-container"], [3, "ngClass"], ["icon", "icons:warning", "id", "warningIcon", 1, "warning"], ["id", "snackbarMessage"], ["id", "closeButton", "icon", "icons:close"], ["id", "actionButton", 3, "click", 4, "ngIf"], ["id", "actionButton", 3, "click"], [1, "button-label"], ["id", "infoSnackbar", "sliding", "", "snackbarListener", "", "showHideSnackbar", "infoSnackbar", 3, "message", "actionButtonLabel", "link", "messageType", "displayIcon", "methodDescription", "buttonClicked", "notificationDismissed"], ["infoSnackbar", ""], ["infoStackIndicator", ""], ["animateButton", "", 1, "dismiss-all", 3, "infoStackHeight", "warningStackHeight", "infoStackIndicatorHeight", "warningStackIndicatorHeight"], ["id", "dismissAll", 3, "click"]], template: function AvlNotificationContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AvlNotificationContainerComponent_div_0_Template, 16, 17, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.notification$));
    } }, directives: [ɵngcc1.NgIf, AnimateStack,
        AnimateSnackbar, ɵngcc2.AvlInteractionControlDirective, ɵngcc2.AvlSnackbarDirective, SnackbarListener,
        ShowHideSnackbarDirective, ɵngcc1.NgClass, ɵngcc2.AvlIconButtonDirective, AnimateButton], pipes: [ɵngcc1.AsyncPipe, ɵngcc3.TranslatePipe], styles: ["[_nghost-%COMP%]{position:fixed;right:0;width:445px;display:flex;flex-direction:column;--avl-snackbar-text-color:var(--avl-on-background-info-color)}.snackbar[_ngcontent-%COMP%]{width:100%;display:flex;flex-direction:column}.snackbar.displayed[_ngcontent-%COMP%]{flex:1;max-height:100%}.snackbar-stack[_ngcontent-%COMP%]{position:absolute;top:0;left:0;right:0;width:100%}.stack-indicator-container[_ngcontent-%COMP%]{margin:0 12px;position:absolute;width:calc(100% - 12px);top:12px;z-index:-1}.snackbar-container[_ngcontent-%COMP%]{margin-top:0;margin-left:0;margin-right:0;width:100%}.button-label[_ngcontent-%COMP%]{text-align:left;text-transform:none}.stack-indicator[_ngcontent-%COMP%]{background-color:var(--avl-background-message-color);top:0;left:0;width:calc(100% - 24px);border-radius:4px;position:relative;height:100%;z-index:-1;box-shadow:0 3px 5px -1px rgb(0 0 0 / 20%),0 6px 10px 0 rgb(0 0 0 / 14%),0 1px 18px 0 rgb(0 0 0 / 12%)}.notification[_ngcontent-%COMP%]{display:flex;flex:1 1 100%;align-items:center;flex-direction:row;padding:0 12px 0 16px;justify-content:flex-start;cursor:pointer;text-overflow:ellipsis}.notification[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{flex-grow:1;-webkit-line-clamp:3;max-height:48px;text-overflow:ellipsis;line-height:19px;font-size:14px;margin:0 0 0 12px;padding:12px 0;font-family:var(--avl-font-family);color:var(--avl-on-background-info-color)}button#actionButton[_ngcontent-%COMP%]{font-family:var(--avl-font-family);font-weight:500;font-size:14px;color:var(--avl-on-background-message-link-color);background-color:var(--avl-button-background-default-color);max-height:48px;height:48px;width:100%;cursor:pointer;padding:12px;margin:-12px 0 0;border-radius:2px;border:0;outline:0}div#actionButton[_ngcontent-%COMP%]:hover{color:var(--avl-on-background-message-link-hover-color)}#warningIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-on-background-message-warning-color);flex:0 0 24px;--avl-icon-custom-color:var(--avl-warning-color)}#errorIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-on-background-message-error-color);flex:0 0 24px}#infoIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-on-background-message-emphasis-medium-color);flex:0 0 24px}#OKIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-on-background-message-ok-color);flex:0 0 24px}.dismiss-all[_ngcontent-%COMP%]{position:absolute;padding:0 16px;border-radius:25px;background-color:var(--avl-background-message-color);width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;top:12px}#dismissAll[_ngcontent-%COMP%]{--avl-flat-button-label-color:var(--avl-on-background-message-link-color)}avl-icon-button[_ngcontent-%COMP%]{flex:0 0 48px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-on-background-message-icon-default-color);--avl-icon-ink-hover-color:var(--avl-on-background-message-icon-hover-color);--avl-icon-ink-focus-color:var(--avl-on-background-message-icon-focus-color);--avl-icon-ink-pressed-color:var(--avl-on-background-message-icon-pressed-color)}@media only screen and (min-width:320px) and (max-width:376px){[_nghost-%COMP%]{width:calc(100% - 32px)}}@media only screen and (min-width:460px){[_nghost-%COMP%]{width:445px}}@media only screen and (min-width:376px) and (max-width:400px){[_nghost-%COMP%]{width:376px}}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlNotificationContainerComponent, [{
        type: core.Component,
        args: [{
                selector: 'avl-notification-container',
                template: "<div class=\"snackbar\" *ngIf=\"notification$ | async as notification\">\r\n  <div\r\n    [animateStack]=\"warningStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? infoSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"warningStack.methodDescription\"\r\n    class=\"snackbar-stack\"\r\n    id=\"warningStack\"\r\n    #warningStackElement\r\n  >\r\n    <div [animateSnackbar]=\"warningStack.snackbarAnimation\" id=\"warningSnack\" #warningSnackElement>\r\n      <avl-snackbar\r\n        *ngIf=\"warningStack.activeNotification$ | async as activeWarningNotification\"\r\n        id=\"warningSnackbar\"\r\n        [message]=\"activeWarningNotification?.messageText\"\r\n        [actionButtonLabel]=\"warningStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeWarningNotification.link\"\r\n        [messageType]=\"activeWarningNotification.type\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeWarningNotification)\"\r\n        snackbarListener\r\n        #warningSnackbar\r\n        showHideSnackbar=\"warningSnackbar\"\r\n        [methodDescription]=\"warningStack.methodDescription\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"warningStack.notificationList.length>1\" #warningStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': warningStack.stackIndicatorButtonLabel}\">\r\n            <avl-icon icon=\"icons:warning\" id=\"warningIcon\" class=\"warning\"></avl-icon>\r\n            <p id=\"snackbarMessage\">{{ warningStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n          <button id=\"actionButton\" *ngIf=\"warningStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(warningStack.previousNotification)\">\r\n            <div class=\"button-label\">{{ warningStack.stackIndicatorButtonLabel }}</div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"snackbar-stack\"\r\n    id=\"infoStack\"\r\n    [animateStack]=\"infoStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? warningSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"infoStack.methodDescription\"\r\n    #infoStackElement\r\n  >\r\n    <div [animateSnackbar]=\"infoStack.snackbarAnimation\" id=\"infoSnack\" #infoSnackElement>\r\n      <avl-snackbar\r\n        id=\"infoSnackbar\"\r\n        *ngIf=\"infoStack.activeNotification$ | async as activeInfoNotification\"\r\n        [message]=\"activeInfoNotification.messageText\"\r\n        [actionButtonLabel]=\"infoStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeInfoNotification.link\"\r\n        [messageType]=\"activeInfoNotification.type\"\r\n        [displayIcon]=\"displayIcon\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeInfoNotification)\"\r\n        snackbarListener\r\n        #infoSnackbar\r\n        showHideSnackbar=\"infoSnackbar\"\r\n        [methodDescription]=\"infoStack.methodDescription\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"infoStack.notificationList.length>1\" #infoStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': infoStack.stackIndicatorButtonLabel}\">\r\n            <p id=\"snackbarMessage\">{{ infoStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n        </div>\r\n        <button id=\"actionButton\" *ngIf=\"infoStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(infoStack.previousNotification)\">\r\n          <div class=\"button-label\">{{ infoStack.stackIndicatorButtonLabel }}</div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    animateButton\r\n    [infoStackHeight]=\"infoStack?.notificationList?.length > 0 ? infoSnackElement.offsetHeight : 0\"\r\n    [warningStackHeight]=\"warningStack?.notificationList?.length > 0 ? warningSnackElement.offsetHeight : 0\"\r\n    [infoStackIndicatorHeight]=\"infoStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    [warningStackIndicatorHeight]=\"warningStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    class=\"dismiss-all\"\r\n    *ngIf=\"notificationList?.length > 1\"\r\n  >\r\n    <avl-button id=\"dismissAll\" (click)=\"dismissAll()\">{{'VizBox.NotificationContainer.DismissAll' | translate}}</avl-button>\r\n  </div>\r\n</div>\r\n\r\n\r\n",
                styles: [":host{position:fixed;right:0;width:445px;display:flex;flex-direction:column;--avl-snackbar-text-color:var(--avl-on-background-info-color)}.snackbar{width:100%;display:flex;flex-direction:column}.snackbar.displayed{flex:1;max-height:100%}.snackbar-stack{position:absolute;top:0;left:0;right:0;width:100%}.stack-indicator-container{margin:0 12px;position:absolute;width:calc(100% - 12px);top:12px;z-index:-1}.snackbar-container{margin-top:0;margin-left:0;margin-right:0;width:100%}.button-label{text-align:left;text-transform:none}.stack-indicator{background-color:var(--avl-background-message-color);top:0;left:0;width:calc(100% - 24px);border-radius:4px;position:relative;height:100%;z-index:-1;box-shadow:0 3px 5px -1px rgb(0 0 0 / 20%),0 6px 10px 0 rgb(0 0 0 / 14%),0 1px 18px 0 rgb(0 0 0 / 12%)}.notification{display:flex;flex:1 1 100%;align-items:center;flex-direction:row;padding:0 12px 0 16px;justify-content:flex-start;cursor:pointer;text-overflow:ellipsis}.notification p{flex-grow:1;-webkit-line-clamp:3;max-height:48px;text-overflow:ellipsis;line-height:19px;font-size:14px;margin:0 0 0 12px;padding:12px 0;font-family:var(--avl-font-family);color:var(--avl-on-background-info-color)}button#actionButton{font-family:var(--avl-font-family);font-weight:500;font-size:14px;color:var(--avl-on-background-message-link-color);background-color:var(--avl-button-background-default-color);max-height:48px;height:48px;width:100%;cursor:pointer;padding:12px;margin:-12px 0 0;border-radius:2px;border:0;outline:0}div#actionButton:hover{color:var(--avl-on-background-message-link-hover-color)}#warningIcon{--avl-icon-custom-color:var(--avl-on-background-message-warning-color);flex:0 0 24px;--avl-icon-custom-color:var(--avl-warning-color)}#errorIcon{--avl-icon-custom-color:var(--avl-on-background-message-error-color);flex:0 0 24px}#infoIcon{--avl-icon-custom-color:var(--avl-on-background-message-emphasis-medium-color);flex:0 0 24px}#OKIcon{--avl-icon-custom-color:var(--avl-on-background-message-ok-color);flex:0 0 24px}.dismiss-all{position:absolute;padding:0 16px;border-radius:25px;background-color:var(--avl-background-message-color);width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;top:12px}#dismissAll{--avl-flat-button-label-color:var(--avl-on-background-message-link-color)}avl-icon-button{flex:0 0 48px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-on-background-message-icon-default-color);--avl-icon-ink-hover-color:var(--avl-on-background-message-icon-hover-color);--avl-icon-ink-focus-color:var(--avl-on-background-message-icon-focus-color);--avl-icon-ink-pressed-color:var(--avl-on-background-message-icon-pressed-color)}@media only screen and (min-width:320px) and (max-width:376px){:host{width:calc(100% - 32px)}}@media only screen and (min-width:460px){:host{width:445px}}@media only screen and (min-width:376px) and (max-width:400px){:host{width:376px}}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { notification$: [{
            type: core.Input,
            args: ['notification$']
        }], openMenu: [{
            type: core.Output
        }], positionTop: [{
            type: core.HostBinding,
            args: ['style.top']
        }], warningStackElement: [{
            type: core.ViewChild,
            args: ['warningStackElement']
        }], infoStackElement: [{
            type: core.ViewChild,
            args: ['infoStackElement']
        }], infoStackIndicatorElement: [{
            type: core.ViewChild,
            args: ['infoStackIndicatorElement']
        }], warningStackIndicatorElement: [{
            type: core.ViewChild,
            args: ['infoStackIndicatorElement']
        }], displayIcon: [{
            type: core.Input,
            args: ['display-icon']
        }] }); })();
        return AvlNotificationContainerComponent;
    }());

    var _a$1, _b, _c;
    var DEFAULT_PAGE_SIZE_OPTIONS = [
        { value: 15, label: 'Show 15 per page' },
        { value: 50, label: 'Show 50 per page' },
        { value: Number.MAX_SAFE_INTEGER, label: 'Show all' }
    ];
    var DEFAULT_FILTERS = {
        type: {
            warning: undefined,
            error: undefined,
            info: undefined,
            ok: undefined
        },
        state: {
            read: undefined,
            unread: undefined
        },
        date: {
            dateFromValue: undefined,
            dateToValue: undefined
        }
    };
    var DEFAULT_COLUMN_DEFINITIONS = [
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Type', 'icon', columnDefinitions.ColumnType.Icon, false, false, 0.5),
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Module', 'module', columnDefinitions.ColumnType.Text, true, false, 3),
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Message', 'messageText', columnDefinitions.ColumnType.Text, true, false, 8),
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Id', 'id', columnDefinitions.ColumnType.Number, false, false, 1),
        {
            caption: 'VizBox.NotificationDialog.Timestamp',
            valueField: 'timestamp',
            type: columnDefinitions.ColumnType.Date,
            sortable: false,
            filterable: false,
            flexWidth: 3,
            dateTimeOptions: { format: 'date-time-short' }
        },
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.State', 'currentIconToggle', columnDefinitions.ColumnType.Icon, false, false, 1)
    ];
    var NOTIFICATION_TYPE_MAPPINGS = (_a$1 = {},
        _a$1[0] = 'error',
        _a$1[1] = 'warning',
        _a$1[2] = 'info',
        _a$1[3] = 'ok',
        _a$1.false = 'unread',
        _a$1.true = 'read',
        _a$1);
    var TYPE_ICON_MAPPINGS$1 = (_b = {},
        _b[0 /* Error */] = 'cancel',
        _b[1 /* Warning */] = 'warning',
        _b[2 /* Info */] = 'info-outline',
        _b[3 /* OK */] = 'check',
        _b);
    var STATE_ICON_MAPPINGS = {
        false: 'mail',
        true: 'communication:mail-outline'
    };
    var DEFAULT_ICON_STYLE = 'height:24px; width:24px;';
    var TYPE_ICON_STYLE_MAPPINGS = (_c = {},
        _c[0 /* Error */] = "--avl-icon-custom-color: var(--avl-error-color); " + DEFAULT_ICON_STYLE,
        _c[1 /* Warning */] = "--avl-icon-custom-color: var(--avl-warning-color); " + DEFAULT_ICON_STYLE,
        _c[2 /* Info */] = "--avl-icon-custom-color: var(--avl-icon-default-color); " + DEFAULT_ICON_STYLE,
        _c[3 /* OK */] = "--avl-icon-custom-color: var(--avl-ok-color); " + DEFAULT_ICON_STYLE,
        _c);

    var __assign$1 = (this && this.__assign) || function () {
        __assign$1 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };
    var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$7 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __awaiter$2 = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$2 = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __values = (this && this.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$1 = (this && this.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$1 = (this && this.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$1(arguments[i]));
        return ar;
    };
    var AvlNotificationDialogComponent = /** @class */ (function () {
        function AvlNotificationDialogComponent(cdRef) {
            this.cdRef = cdRef;
            this.open = false;
            this.pageSizeOptions = DEFAULT_PAGE_SIZE_OPTIONS;
            this.columnDefinitions = DEFAULT_COLUMN_DEFINITIONS;
            this.openChange = new core.EventEmitter();
            this.markSelectedAsRead = new core.EventEmitter();
            this.markSelectedAsUnread = new core.EventEmitter();
            this.tableData = [];
            this.filteredData = [];
            this.badge = false;
            this.disableMarkingSelected = true;
            this.filters = this.deepCopyObject(DEFAULT_FILTERS);
            this.filtersOpen = true;
            this.showRefreshButton = false;
            this.dateFromLabel = 'Date from';
            this.dateToLabel = 'Date to';
            this.dateFilterGroupInitHeader = 'Date';
            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            //notification datatable options
            this.selectedRows = [];
            this.pageSize = 15;
            this.appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);
            this._notifications = [];
        }
        Object.defineProperty(AvlNotificationDialogComponent.prototype, "notifications", {
            get: function () {
                return this._notifications;
            },
            set: function (notifications) {
                if (this._notifications.length === notifications.length) {
                    return;
                }
                this.showRefreshButton = true;
                this._notifications = notifications;
            },
            enumerable: true,
            configurable: true
        });
        AvlNotificationDialogComponent.prototype.ngOnInit = function () {
            this.translateLabels();
            this.refreshTable();
        };
        AvlNotificationDialogComponent.prototype.ngAfterViewChecked = function () {
            this.cdRef.detectChanges();
        };
        /** Emits event when dialog opens or closes */
        AvlNotificationDialogComponent.prototype.openChanged = function (open) {
            this.openChange.emit(open);
        };
        /** Toggles displaying of filter sheet */
        AvlNotificationDialogComponent.prototype.toggleFilters = function () {
            this.filtersOpen = !this.filtersOpen;
        };
        /** Refreshes the datatable when refresh button is clicked */
        AvlNotificationDialogComponent.prototype.refreshTable = function () {
            this.showRefreshButton = false;
            this.tableData = this.prepareNotifications(this._notifications);
            this.filters = this.deepCopyObject(this.appliedFilters);
            this.filterData();
        };
        /**
         * Invoked when clicking apply button - filters data by given filters.
         */
        AvlNotificationDialogComponent.prototype.applyFilters = function () {
            this.appliedFilters = this.deepCopyObject(this.filters);
            this.filterData();
        };
        /** Filters notifications according to applied filters */
        AvlNotificationDialogComponent.prototype.filterData = function () {
            var e_1, _a;
            this.filteredData = [];
            var filters = this.getActiveFilters();
            try {
                for (var _b = __values(this.tableData), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var element = _c.value;
                    if (this.doesElementPassEveryFilter(filters, element)) {
                        this.filteredData.push(element);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /** Changes selected notification state to read */
        AvlNotificationDialogComponent.prototype.markAsRead = function () {
            this.updateStateOfSelectedRowsTo(true);
            this.markSelectedAsRead.emit(this.selectedRows);
        };
        /** Changes selected notification state to unread */
        AvlNotificationDialogComponent.prototype.markAsUnread = function () {
            this.updateStateOfSelectedRowsTo(false);
            this.markSelectedAsUnread.emit(this.selectedRows);
        };
        /**
         * Resets all filters.
         */
        AvlNotificationDialogComponent.prototype.reset = function () {
            this.filters = this.deepCopyObject(DEFAULT_FILTERS);
            this.appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);
            this.filterData();
            this.updateLabels();
            this.badge = false;
        };
        /** Calculates active filters from filter object */
        AvlNotificationDialogComponent.prototype.getActiveFilters = function () {
            var e_2, _a, e_3, _b;
            this.badge = false;
            var setFilters = {};
            try {
                // Mapping applied filters object to better format used for filtering, 
                // creates arrays from objects
                for (var _c = __values(Object.keys(this.appliedFilters)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var item = _d.value;
                    var secondLevelFilter = [];
                    try {
                        for (var _e = (e_3 = void 0, __values(Object.keys(this.appliedFilters[item]))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var filter = _f.value;
                            if (this.appliedFilters[item][filter] === true) {
                                secondLevelFilter.push(filter);
                                this.badge = true;
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    if (secondLevelFilter.length) {
                        setFilters[item] = secondLevelFilter;
                    }
                    if (item === 'date') {
                        setFilters[item] = [
                            this.appliedFilters[item]['dateFromValue'],
                            this.appliedFilters[item]['dateToValue']
                        ];
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return setFilters;
        };
        /** Called when selection is applied to the table rows */
        AvlNotificationDialogComponent.prototype.selectedValuesChanged = function () {
            this.disableMarkingSelected = false;
            if (this.selectedRows.length == 0) {
                this.disableMarkingSelected = true;
            }
        };
        /** Updates date filter header labels when date changes */
        AvlNotificationDialogComponent.prototype.updateLabels = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var translationService, _a, dateFromValue, dateToValue, _b;
                return __generator$2(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            translationService = AvlLocalizationService.translationService;
                            _a = this.filters.date, dateFromValue = _a.dateFromValue, dateToValue = _a.dateToValue;
                            if (!(!dateFromValue && !dateToValue)) return [3 /*break*/, 1];
                            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
                            return [3 /*break*/, 3];
                        case 1:
                            _b = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.DateRange', {
                                    dateFrom: this.formatDateTime(dateFromValue),
                                    dateTo: this.formatDateTime(dateToValue)
                                })];
                        case 2:
                            _b.dateFilterGroupHeader = _c.sent();
                            _c.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /** Calculates number of notifications with specific type */
        AvlNotificationDialogComponent.prototype.getNumberOfNotificationsWithType = function (data, type) {
            return data.filter(function (element) { return NOTIFICATION_TYPE_MAPPINGS[element.type] === type; }).length;
        };
        /** Calculates number of unread notifications */
        AvlNotificationDialogComponent.prototype.getNumberOfUnreadNotifications = function (data) {
            return data.filter(function (element) { return !element.state; }).length;
        };
        /** Calculates number of notifications currently displayed in datatable */
        AvlNotificationDialogComponent.prototype.getNumberOfNotifications = function () {
            if (this.filteredData.length === this.tableData.length && !this.badge) {
                return this.filteredData.length.toString();
            }
            else {
                return this.filteredData.length + "/" + this.tableData.length;
            }
        };
        /** Opens link in new tab when table row is clicked */
        AvlNotificationDialogComponent.prototype.onRowClicked = function (event) {
            var row = event.detail;
            if (row.link) {
                window.open(row.link, '_blank');
            }
        };
        /** Maps general avl notification list to table specific list */
        AvlNotificationDialogComponent.prototype.prepareNotifications = function (notifications) {
            return notifications.map(function (notification) { return (__assign$1(__assign$1({}, notification), { icon: TYPE_ICON_MAPPINGS$1[notification.type], iconStyle: TYPE_ICON_STYLE_MAPPINGS[notification.type], currentIconToggle: STATE_ICON_MAPPINGS[String(notification.read)], currentIconToggleStyle: DEFAULT_ICON_STYLE, state: notification.read })); });
        };
        /** Formats date time to date-short */
        AvlNotificationDialogComponent.prototype.formatDateTime = function (d) {
            return d ? AvlLocalizationService.formatDateTime(d, { format: 'date-short' }) : '(-)';
        };
        /** Deep copy of filters object */
        AvlNotificationDialogComponent.prototype.deepCopyObject = function (object) {
            var copiedObject = {};
            Object.keys(object).forEach(function (key) {
                copiedObject[key] = Object.assign({}, object[key]);
            });
            return copiedObject;
        };
        /** Determines if element satisfies filter for every key in this.apppliedFilters */
        AvlNotificationDialogComponent.prototype.doesElementPassEveryFilter = function (activeFilters, element) {
            var _this = this;
            return Object.keys(activeFilters).every(function (key) {
                if (key === 'date') {
                    var _a = __read$1(_this.prepareDates(activeFilters[key]), 2), dateFrom = _a[0], dateTo = _a[1];
                    // If dates not set, filter this element as well
                    if (!dateFrom.getTime() && !dateTo.getTime()) {
                        return true;
                    }
                    _this.badge = true;
                    // If timestamp is not a Date, don't filter this element
                    var timestamp = new Date(element.timestamp);
                    if (!timestamp.getTime()) {
                        return false;
                    }
                    return _this.compareDates(timestamp, dateFrom, dateTo);
                }
                return activeFilters[key].includes(NOTIFICATION_TYPE_MAPPINGS[element[key]]);
            });
        };
        AvlNotificationDialogComponent.prototype.prepareDates = function (dates) {
            var dateFrom = new Date(dates[0]);
            var dateTo = new Date(dates[1]);
            dateFrom.setHours(0, 0, 0, 0);
            dateTo.setHours(23, 59, 59, 999);
            return [dateFrom, dateTo];
        };
        AvlNotificationDialogComponent.prototype.compareDates = function (timestamp, from, to) {
            var ts = timestamp.getTime();
            var fromTs = from === null || from === void 0 ? void 0 : from.getTime();
            var toTs = to === null || to === void 0 ? void 0 : to.getTime();
            if (fromTs && toTs) {
                return ts >= fromTs && ts <= toTs;
            }
            else if (fromTs) {
                return ts >= fromTs;
            }
            else if (toTs) {
                return ts <= toTs;
            }
            return false;
        };
        AvlNotificationDialogComponent.prototype.updateStateOfSelectedRowsTo = function (state) {
            var _this = this;
            this.tableData
                .filter(function (notification) { return _this.isRowSelected(notification.id); })
                .forEach(function (notification) {
                notification.state = state;
                notification.currentIconToggle = STATE_ICON_MAPPINGS[String(state)];
            });
            this.tableData = __spread$1(this.tableData);
            this.filterData();
        };
        AvlNotificationDialogComponent.prototype.isRowSelected = function (id) {
            return this.selectedRows.map(function (row) { return row.id; }).includes(id);
        };
        // Translations
        AvlNotificationDialogComponent.prototype.translateLabels = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var translationService, _a, _b, _c, _d, _e;
                return __generator$2(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                                return [2 /*return*/];
                            }
                            translationService = AvlLocalizationService.translationService;
                            _a = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.Date')];
                        case 1:
                            _a.dateFilterGroupInitHeader = _f.sent();
                            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
                            _b = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.DateFrom')];
                        case 2:
                            _b.dateFromLabel = _f.sent();
                            _c = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.DateTo')];
                        case 3:
                            _c.dateToLabel = _f.sent();
                            _d = this;
                            return [4 /*yield*/, this.translatePageSizeOptions(this.pageSizeOptions)];
                        case 4:
                            _d.pageSizeOptions = _f.sent();
                            _e = this;
                            return [4 /*yield*/, this.translateColumns(this.columnDefinitions)];
                        case 5:
                            _e.columnDefinitions = _f.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translatePageSizeOptions = function (options) {
            return __awaiter$2(this, void 0, void 0, function () {
                var _this = this;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(options.map(function (option) { return __awaiter$2(_this, void 0, void 0, function () { return __generator$2(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.translatePageSizeOption(option)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translatePageSizeOption = function (item) {
            return __awaiter$2(this, void 0, void 0, function () {
                var translationService, _a, _b, _c;
                return __generator$2(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            translationService = AvlLocalizationService.translationService;
                            _a = [__assign$1({}, item)];
                            _b = {};
                            if (!(item.value === Number.MAX_SAFE_INTEGER)) return [3 /*break*/, 2];
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.ShowAll')];
                        case 1:
                            _c = _d.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.ShowXPerPage', {
                                rows: item.value
                            })];
                        case 3:
                            _c = _d.sent();
                            _d.label = 4;
                        case 4: return [2 /*return*/, __assign$1.apply(void 0, _a.concat([(_b.label = _c, _b)]))];
                    }
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translateColumns = function (column) {
            return __awaiter$2(this, void 0, void 0, function () {
                var _this = this;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(column.map(function (item) { return __awaiter$2(_this, void 0, void 0, function () { return __generator$2(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.translateColumnItem(item)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translateColumnItem = function (item) {
            return __awaiter$2(this, void 0, void 0, function () {
                var translateService, _a, _b;
                return __generator$2(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            translateService = AvlLocalizationService.translationService;
                            _a = [__assign$1({}, item)];
                            _b = {};
                            return [4 /*yield*/, translateService.translate(item.caption)];
                        case 1: return [2 /*return*/, __assign$1.apply(void 0, _a.concat([(_b.caption = _c.sent(), _b)]))];
                    }
                });
            });
        };
        AvlNotificationDialogComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate$7([
            core.Input(),
            __metadata$7("design:type", Boolean)
        ], AvlNotificationDialogComponent.prototype, "open", void 0);
        __decorate$7([
            core.Input(),
            __metadata$7("design:type", Array)
        ], AvlNotificationDialogComponent.prototype, "pageSizeOptions", void 0);
        __decorate$7([
            core.Input(),
            __metadata$7("design:type", Array)
        ], AvlNotificationDialogComponent.prototype, "columnDefinitions", void 0);
        __decorate$7([
            core.Input(),
            __metadata$7("design:type", Array),
            __metadata$7("design:paramtypes", [Array])
        ], AvlNotificationDialogComponent.prototype, "notifications", null);
        __decorate$7([
            core.Output(),
            __metadata$7("design:type", core.EventEmitter)
        ], AvlNotificationDialogComponent.prototype, "openChange", void 0);
        __decorate$7([
            core.Output(),
            __metadata$7("design:type", core.EventEmitter)
        ], AvlNotificationDialogComponent.prototype, "markSelectedAsRead", void 0);
        __decorate$7([
            core.Output(),
            __metadata$7("design:type", core.EventEmitter)
        ], AvlNotificationDialogComponent.prototype, "markSelectedAsUnread", void 0);
        __decorate$7([
            core.ViewChild('notificationTable'),
            __metadata$7("design:type", core.ElementRef)
        ], AvlNotificationDialogComponent.prototype, "table", void 0);
        __decorate$7([
            core.ViewChild('filterForm', { read: forms.NgForm }),
            __metadata$7("design:type", forms.NgForm)
        ], AvlNotificationDialogComponent.prototype, "filterForm", void 0);
        AvlNotificationDialogComponent = __decorate$7([ __metadata$7("design:paramtypes", [core.ChangeDetectorRef])
        ], AvlNotificationDialogComponent);
AvlNotificationDialogComponent.ɵfac = function AvlNotificationDialogComponent_Factory(t) { return new (t || AvlNotificationDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AvlNotificationDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlNotificationDialogComponent, selectors: [["avl-notification-dialog"]], viewQuery: function AvlNotificationDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c5, true);
        ɵngcc0.ɵɵviewQuery(_c6, true, forms.NgForm);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.table = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterForm = _t.first);
    } }, inputs: { open: "open", pageSizeOptions: "pageSizeOptions", columnDefinitions: "columnDefinitions", notifications: "notifications" }, outputs: { openChange: "openChange", markSelectedAsRead: "markSelectedAsRead", markSelectedAsUnread: "markSelectedAsUnread" }, decls: 3, vars: 3, consts: [["id", "outerDialog", 3, "open", "closeOnScrimClick", "fullscreen", "openChange"], ["content", ""], [1, "main-container"], [1, "content"], [1, "table-header"], [1, "table-header-right"], ["id", "updateIcon", "class", "pointer", "icon", "icons:refresh", 3, "click", 4, "ngIf"], ["for", "updateIcon", 4, "ngIf"], ["id", "unreadIcon", "icon", "icons:mail", 1, "pointer", 3, "disabled", "click"], ["for", "unreadIcon"], ["id", "readIcon", "icon", "communication:mail-outline", 1, "pointer", 3, "disabled", "click"], ["for", "readIcon"], ["icon", "icons:filter-list", 1, "pointer", 3, "badge", "click"], ["multi-select", "", "allow-active-row", "", "pagination", "", 1, "filterDatatable", 3, "columnDefinitions", "data", "pageSize", "pageSizeOptions", "selectedValues", "selectedValuesChange", "on-row-clicked"], ["notificationTable", ""], ["divider", "", 1, "filter-sheet", 3, "open", "openChange"], ["filterSheet", ""], ["slot", "title"], ["slot", "content"], ["filterForm", "ngForm"], [3, "narrow"], ["role", "header"], ["role", "content", 1, "filterContent"], ["name", "warningSwitch", 3, "ngModel", "ngModelChange"], [4, "ngIf"], ["id", "warningIcon", "icon", "icons:warning", 1, "typeIcons"], ["name", "errorSwitch", 3, "ngModel", "ngModelChange"], ["id", "errorIcon", "icon", "icons:cancel", 1, "typeIcons"], ["name", "infoSwitch", 3, "ngModel", "ngModelChange"], ["id", "infoIcon", "icon", "icons:info-outline", 1, "typeIcons"], ["name", "okSwitch", 3, "ngModel", "ngModelChange"], ["id", "okIcon", "icon", "icons:check", 1, "typeIcons"], ["name", "unreadState", 3, "ngModel", "ngModelChange"], ["id", "infoIcon", "icon", "icons:mail", 1, "typeIcons"], ["name", "readState", 3, "ngModel", "ngModelChange"], ["id", "infoIcon", "icon", "communication:mail-outline", 1, "typeIcons"], ["id", "date-group"], ["dateGroup", ""], ["for", "date-group", 4, "ngIf"], ["role", "content"], ["name", "dateFromValue", 1, "date-control", 3, "ngModel", "label", "ngModelChange", "valueChange"], ["name", "dateTo", 1, "date-control", 3, "ngModel", "label", "ngModelChange", "valueChange"], ["slot", "actions"], ["contained", "", 3, "click"], [3, "click"], ["id", "updateIcon", "icon", "icons:refresh", 1, "pointer", 3, "click"], ["for", "updateIcon"], ["for", "date-group"]], template: function AvlNotificationDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "avl-dialog", 0);
        ɵngcc0.ɵɵlistener("openChange", function AvlNotificationDialogComponent_Template_avl_dialog_openChange_0_listener($event) { return ctx.openChanged($event); });
        ɵngcc0.ɵɵtemplate(1, AvlNotificationDialogComponent_ng_template_1_Template, 93, 78, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("open", ctx.open)("closeOnScrimClick", false)("fullscreen", true);
    } }, directives: [ɵngcc5.AvlDialogComponent, ɵngcc5.AvlDialogHeaderComponent, ɵngcc5.AvlDialogContentComponent, ɵngcc1.NgIf, ɵngcc2.AvlInteractionControlDirective, ɵngcc2.AvlIconButtonDirective, ɵngcc2.AvlMultiSelectControlDirective, ɵngcc2.AvlSingleSelectControlDirective, ɵngcc2.AvlDatatableDirective, ɵngcc2.AvlSideSheetDirective, ɵngcc6.ɵangular_packages_forms_forms_y, ɵngcc6.NgControlStatusGroup, ɵngcc6.NgForm, ɵngcc7.AvlListExpanderComponent, ɵngcc2.AvlCheckableControlDirective, ɵngcc2.AvlFormControlDirective, ɵngcc2.AvlCheckboxDirective, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc2.AvlDateDirective], pipes: [ɵngcc3.TranslatePipe], styles: [".content[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;flex-grow:1}.table-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center}.main-container[_ngcontent-%COMP%]{display:flex;height:100%}.main-container.hidden[_ngcontent-%COMP%]{display:none}.filterDatatable[_ngcontent-%COMP%]{height:100%}.filter-sheet[_ngcontent-%COMP%]{--avl-side-sheet-padding:0px;--avl-side-sheet-height:84vh;width:300px}.filter-sheet[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:20px;margin-left:24px}.filter-sheet[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:16px;margin:0;text-overflow:ellipsis;overflow:hidden}.pointer[_ngcontent-%COMP%]{cursor:pointer}#errorIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-error-color)}#warningIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-warning-color)}#okIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-ok-color)}#infoIcon[_ngcontent-%COMP%]{--avl-icon-custom-color:var(--avl-icon-default-color)}.filterContent[_ngcontent-%COMP%]{position:relative}.typeIcons[_ngcontent-%COMP%]{position:absolute;right:0;margin-top:12px;margin-bottom:12px}.date-control[_ngcontent-%COMP%]{width:100%}avl-dialog-content[_ngcontent-%COMP%]{--padding-top:1px!important;--padding-right:0px!important;--padding-bottom:2px!important}avl-dialog-header[_ngcontent-%COMP%]{z-index:1}avl-side-sheet[_ngcontent-%COMP%]{--avl-side-sheet-height:unset!important;box-shadow:none;border-left:1px solid var(--avl-divider-color)}avl-datatable[_ngcontent-%COMP%]{--margin-top-pages:0px!important}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlNotificationDialogComponent, [{
        type: core.Component,
        args: [{
                selector: 'avl-notification-dialog',
                template: "<avl-dialog\r\n  id=\"outerDialog\"\r\n  [open]=\"open\"\r\n  (openChange)=\"openChanged($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"true\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>{{ 'VizBox.NotificationDialog.Details' | translate }}</avl-dialog-header>\r\n    <avl-dialog-content>\r\n      <div class=\"main-container\">\r\n        <div class=\"content\">\r\n          <div class=\"table-header\">\r\n            <h1>\r\n              {{ 'VizBox.NotificationDialog.Notifications' | translate }} ({{\r\n                getNumberOfNotifications()\r\n              }})\r\n            </h1>\r\n            <div class=\"table-header-right\">\r\n              <avl-icon-button\r\n                *ngIf=\"showRefreshButton\"\r\n                id=\"updateIcon\"\r\n                (click)=\"refreshTable()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:refresh\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip *ngIf=\"showRefreshButton\" for=\"updateIcon\"\r\n                > {{ 'VizBox.NotificationDialog.Refresh' | translate }}</avl-tooltip\r\n              >\r\n              <avl-icon-button\r\n                id=\"unreadIcon\"\r\n                (click)=\"markAsUnread()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:mail\"\r\n                [disabled]=\"disableMarkingSelected\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"unreadIcon\">{{\r\n                'VizBox.NotificationDialog.MarkSelectedAsUnread' | translate\r\n              }}</avl-tooltip>\r\n              <avl-icon-button\r\n                id=\"readIcon\"\r\n                class=\"pointer\"\r\n                (click)=\"markAsRead()\"\r\n                icon=\"communication:mail-outline\"\r\n                [disabled]=\"disableMarkingSelected\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"readIcon\">{{\r\n                'VizBox.NotificationDialog.MarkSelectedAsRead' | translate\r\n              }}</avl-tooltip>\r\n              <avl-icon-button\r\n                (click)=\"toggleFilters()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:filter-list\"\r\n                [badge]=\"badge\"\r\n              ></avl-icon-button>\r\n            </div>\r\n          </div>\r\n          <avl-datatable\r\n            #notificationTable\r\n            class=\"filterDatatable\"\r\n            multi-select\r\n            allow-active-row\r\n            pagination\r\n            [columnDefinitions]=\"columnDefinitions\"\r\n            [data]=\"filteredData\"\r\n            [pageSize]=\"pageSize\"\r\n            [pageSizeOptions]=\"pageSizeOptions\"\r\n            [(selectedValues)]=\"selectedRows\"\r\n            (selectedValuesChange)=\"selectedValuesChanged()\"\r\n            (on-row-clicked)=\"onRowClicked($event)\"\r\n          >\r\n          </avl-datatable>\r\n        </div>\r\n        <avl-side-sheet class=\"filter-sheet\" divider [(open)]=\"filtersOpen\" #filterSheet>\r\n          <div slot=\"title\">\r\n            <h2>{{ 'VizBox.NotificationDialog.Filters' | translate }}</h2>\r\n          </div>\r\n          <div slot=\"content\">\r\n            <form #filterForm=\"ngForm\">\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3>{{ 'VizBox.NotificationDialog.Type' | translate }}</h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div>\r\n                    <avl-checkbox name=\"warningSwitch\" [(ngModel)]=\"filters.type.warning\">\r\n                      {{ 'VizBox.NotificationDialog.Warning' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'warning') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"warningIcon\" class=\"typeIcons\" icon=\"icons:warning\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"errorSwitch\" [(ngModel)]=\"filters.type.error\">\r\n                      {{ 'VizBox.NotificationDialog.Error' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'error') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"errorIcon\" class=\"typeIcons\" icon=\"icons:cancel\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"infoSwitch\" [(ngModel)]=\"filters.type.info\">\r\n                      {{ 'VizBox.NotificationDialog.Info' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'info') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"infoIcon\" class=\"typeIcons\" icon=\"icons:info-outline\"></avl-icon>\r\n                  </div>\r\n                  <div>\r\n                    <avl-checkbox name=\"okSwitch\" [(ngModel)]=\"filters.type.ok\">\r\n                      {{ 'VizBox.NotificationDialog.Ok' | translate }}\r\n                      <span *ngIf=\"tableData.length\"\r\n                        >({{ getNumberOfNotificationsWithType(tableData, 'ok') }})</span\r\n                      >\r\n                    </avl-checkbox>\r\n                    <avl-icon id=\"okIcon\" class=\"typeIcons\" icon=\"icons:check\"></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3>{{ 'VizBox.NotificationDialog.State' | translate }}</h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <avl-checkbox name=\"unreadState\" [(ngModel)]=\"filters.state.unread\">\r\n                    {{ 'VizBox.NotificationDialog.Unread' | translate }} ({{\r\n                      getNumberOfUnreadNotifications(tableData)\r\n                    }})\r\n                  </avl-checkbox>\r\n                  <avl-icon id=\"infoIcon\" class=\"typeIcons\" icon=\"icons:mail\"></avl-icon>\r\n                  <avl-checkbox name=\"readState\" [(ngModel)]=\"filters.state.read\">\r\n                    {{ 'VizBox.NotificationDialog.Read' | translate }} ({{\r\n                      tableData.length - getNumberOfUnreadNotifications(tableData)\r\n                    }})\r\n                  </avl-checkbox>\r\n                  <avl-icon\r\n                    id=\"infoIcon\"\r\n                    class=\"typeIcons\"\r\n                    icon=\"communication:mail-outline\"\r\n                  ></avl-icon>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander [narrow]=\"true\">\r\n                <div role=\"header\">\r\n                  <h3 id=\"date-group\" #dateGroup>\r\n                    {{ dateFilterGroupHeader }}\r\n                  </h3>\r\n                  <avl-tooltip for=\"date-group\" *ngIf=\"dateGroup.scrollWidth > dateGroup.clientWidth\">\r\n                    {{ dateFilterGroupHeader }}\r\n                  </avl-tooltip>\r\n                </div>\r\n                <div role=\"content\">\r\n                  <avl-date\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date.dateFromValue\"\r\n                    name=\"dateFromValue\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"dateFromLabel\"\r\n                  ></avl-date>\r\n                  <avl-date\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date.dateToValue\"\r\n                    name=\"dateTo\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"dateToLabel\"\r\n                  ></avl-date>\r\n                </div>\r\n              </avl-list-expander>\r\n            </form>\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <avl-button contained (click)=\"applyFilters()\">{{\r\n              'VizBox.NotificationDialog.Apply' | translate\r\n            }}</avl-button>\r\n            <avl-button (click)=\"reset()\">{{\r\n              'VizBox.NotificationDialog.Reset' | translate\r\n            }}</avl-button>\r\n          </div>\r\n        </avl-side-sheet>\r\n      </div>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n",
                styles: [".content{position:relative;display:flex;flex-direction:column;flex-grow:1}.table-header{display:flex;justify-content:space-between;align-items:center}.main-container{display:flex;height:100%}.main-container.hidden{display:none}.filterDatatable{height:100%}.filter-sheet{--avl-side-sheet-padding:0px;--avl-side-sheet-height:84vh;width:300px}.filter-sheet h2{font-size:20px;margin-left:24px}.filter-sheet h3{font-size:16px;margin:0;text-overflow:ellipsis;overflow:hidden}.pointer{cursor:pointer}#errorIcon{--avl-icon-custom-color:var(--avl-error-color)}#warningIcon{--avl-icon-custom-color:var(--avl-warning-color)}#okIcon{--avl-icon-custom-color:var(--avl-ok-color)}#infoIcon{--avl-icon-custom-color:var(--avl-icon-default-color)}.filterContent{position:relative}.typeIcons{position:absolute;right:0;margin-top:12px;margin-bottom:12px}.date-control{width:100%}avl-dialog-content{--padding-top:1px!important;--padding-right:0px!important;--padding-bottom:2px!important}avl-dialog-header{z-index:1}avl-side-sheet{--avl-side-sheet-height:unset!important;box-shadow:none;border-left:1px solid var(--avl-divider-color)}avl-datatable{--margin-top-pages:0px!important}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { open: [{
            type: core.Input
        }], pageSizeOptions: [{
            type: core.Input
        }], columnDefinitions: [{
            type: core.Input
        }], openChange: [{
            type: core.Output
        }], markSelectedAsRead: [{
            type: core.Output
        }], markSelectedAsUnread: [{
            type: core.Output
        }], notifications: [{
            type: core.Input
        }], table: [{
            type: core.ViewChild,
            args: ['notificationTable']
        }], filterForm: [{
            type: core.ViewChild,
            args: ['filterForm', { read: forms.NgForm }]
        }] }); })();
        return AvlNotificationDialogComponent;
    }());

    var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$2 = (this && this.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$2 = (this && this.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$2(arguments[i]));
        return ar;
    };
    var componentsAndDirectives = [
        AvlNotificationMenuComponent,
        AvlNotificationContainerComponent,
        SnackbarListener,
        AnimateStack,
        AnimateSnackbar,
        ShowHideSnackbarDirective,
        AnimateButton,
        AvlNotificationDialogComponent
    ];
    var AvlNotificationModule = /** @class */ (function () {
        function AvlNotificationModule() {
        }
AvlNotificationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AvlNotificationModule });
AvlNotificationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AvlNotificationModule_Factory(t) { return new (t || AvlNotificationModule)(); }, imports: [[common.CommonModule, core$1.TranslateModule, ngBinders.AvlNgBindersModule, dialog.AvlDialogModule, navigation.AvlNavigationModule, forms.FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AvlNotificationModule, { declarations: [AvlNotificationMenuComponent,
        AvlNotificationContainerComponent,
        SnackbarListener,
        AnimateStack,
        AnimateSnackbar,
        ShowHideSnackbarDirective,
        AnimateButton,
        AvlNotificationDialogComponent], imports: [ɵngcc1.CommonModule, ɵngcc3.TranslateModule, ɵngcc2.AvlNgBindersModule, ɵngcc5.AvlDialogModule, ɵngcc7.AvlNavigationModule, ɵngcc6.FormsModule], exports: [AvlNotificationMenuComponent,
        AvlNotificationContainerComponent,
        SnackbarListener,
        AnimateStack,
        AnimateSnackbar,
        ShowHideSnackbarDirective,
        AnimateButton,
        AvlNotificationDialogComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlNotificationModule, [{
        type: core.NgModule,
        args: [{
                declarations: __spread$2(componentsAndDirectives),
                imports: [common.CommonModule, core$1.TranslateModule, ngBinders.AvlNgBindersModule, dialog.AvlDialogModule, navigation.AvlNavigationModule, forms.FormsModule],
                schemas: [core.CUSTOM_ELEMENTS_SCHEMA],
                exports: __spread$2(componentsAndDirectives)
            }]
    }], function () { return []; }, null); })();
        return AvlNotificationModule;
    }());

    exports.AvlNotificationContainerComponent = AvlNotificationContainerComponent;
    exports.AvlNotificationDialogComponent = AvlNotificationDialogComponent;
    exports.AvlNotificationMenuComponent = AvlNotificationMenuComponent;
    exports.AvlNotificationModule = AvlNotificationModule;
    exports.ɵa = SnackbarListener;
    exports.ɵb = AnimateStack;
    exports.ɵc = AnimateSnackbar;
    exports.ɵd = ShowHideSnackbarDirective;
    exports.ɵe = AnimateButton;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=avl-ng-controls-notification.umd.js.map