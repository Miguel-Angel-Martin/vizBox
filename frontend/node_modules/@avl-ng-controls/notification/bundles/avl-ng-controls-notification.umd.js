(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@ngx-translate/core'), require('@avl-controls/ng-binders'), require('@angular/forms'), require('@avl-controls/datatable/dist/avl-datatable/column-definitions'), require('@angular/animations'), require('rxjs'), require('@avl-controls/core/dist/avl-snackbar/avl-snackbar'), require('rxjs/operators'), require('@avl-controls/core/dist/avl-icon-button/avl-icon-button'), require('@avl-controls/core/dist/avl-icon/avl-icon'), require('@avl-controls/core/dist/avl-side-sheet/avl-side-sheet'), require('@avl-controls/core/dist/avl-checkbox/avl-checkbox'), require('@avl-controls/core/dist/avl-tooltip/avl-tooltip'), require('@avl-controls/core/dist/avl-date/avl-date'), require('@avl-ng-controls/dialog'), require('@avl-ng-controls/navigation')) :
    typeof define === 'function' && define.amd ? define('@avl-ng-controls/notification', ['exports', '@angular/common', '@angular/core', '@ngx-translate/core', '@avl-controls/ng-binders', '@angular/forms', '@avl-controls/datatable/dist/avl-datatable/column-definitions', '@angular/animations', 'rxjs', '@avl-controls/core/dist/avl-snackbar/avl-snackbar', 'rxjs/operators', '@avl-controls/core/dist/avl-icon-button/avl-icon-button', '@avl-controls/core/dist/avl-icon/avl-icon', '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet', '@avl-controls/core/dist/avl-checkbox/avl-checkbox', '@avl-controls/core/dist/avl-tooltip/avl-tooltip', '@avl-controls/core/dist/avl-date/avl-date', '@avl-ng-controls/dialog', '@avl-ng-controls/navigation'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['avl-ng-controls'] = global['avl-ng-controls'] || {}, global['avl-ng-controls'].notification = {}), global.ng.common, global.ng.core, global['@ngx-translate/core'], global['@avl-controls/ng-binders'], global.ng.forms, global['@avl-controls/datatable/dist/avl-datatable/column-definitions'], global.ng.animations, global.rxjs, null, global.rxjs.operators, null, null, null, null, null, null, global['@avl-ng-controls/dialog'], global['@avl-ng-controls/navigation']));
}(this, (function (exports, i1, i0, i3, i4, i5, columnDefinitions, i1$1, rxjs, avlSnackbar, operators, avlIconButton, avlIcon, avlSideSheet, avlCheckbox, avlTooltip, avlDate, i1$2, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter$3(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var _a$1;
    var NOTIFICATIONS_OVERFLOW_MENU = [
        {
            items: [
                {
                    label: 'VizBox.NotificationMenu.MarkAllAsRead',
                    action: 'markAllAsRead'
                },
                {
                    label: 'VizBox.NotificationMenu.MarkAllAsUnread',
                    action: 'markAllAsUnread'
                }
            ]
        }
    ];
    var TYPE_ICON_MAPPINGS$1 = (_a$1 = {},
        _a$1[0 /* Error */] = 'cancel',
        _a$1[1 /* Warning */] = 'warning',
        _a$1[2 /* Info */] = 'info-outline',
        _a$1[3 /* OK */] = 'check',
        _a$1);

    var _a, _b;
    var DEFAULT_PAGE_SIZE_OPTIONS = [
        { value: 15, label: 'Show 15 per page' },
        { value: 50, label: 'Show 50 per page' },
        { value: Number.MAX_SAFE_INTEGER, label: 'Show all' }
    ];
    var DEFAULT_FILTERS = {
        type: {
            warning: undefined,
            error: undefined,
            info: undefined,
            ok: undefined
        },
        state: {
            read: undefined,
            unread: undefined
        },
        date: {
            dateFrom: undefined,
            dateTo: undefined
        },
        search: undefined
    };
    var DEFAULT_COLUMN_DEFINITIONS = [
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Type', 'icon', columnDefinitions.ColumnType.Icon, false, false, 0.5),
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Module', 'module', columnDefinitions.ColumnType.Text, true, false, 3),
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Message', 'messageText', columnDefinitions.ColumnType.Text, true, false, 8),
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.Id', 'id', columnDefinitions.ColumnType.Number, false, false, 1),
        {
            caption: 'VizBox.NotificationDialog.Timestamp',
            valueField: 'timestamp',
            type: columnDefinitions.ColumnType.Date,
            sortable: false,
            filterable: false,
            flexWidth: 3,
            dateTimeOptions: { format: 'date-time-short' }
        },
        new columnDefinitions.LeafColumn('VizBox.NotificationDialog.State', 'currentIconToggle', columnDefinitions.ColumnType.Icon, false, false, 1)
    ];
    var NOTIFICATION_TYPE_MAPPINGS = new Map([
        [0 /* Error */, 'error'],
        [1 /* Warning */, 'warning'],
        [2 /* Info */, 'info'],
        [3 /* OK */, 'ok'],
        [false, 'unread'],
        [true, 'read']
    ]);
    var TYPE_ICON_MAPPINGS = (_a = {},
        _a[0 /* Error */] = 'cancel',
        _a[1 /* Warning */] = 'warning',
        _a[2 /* Info */] = 'info-outline',
        _a[3 /* OK */] = 'check',
        _a);
    var STATE_ICON_MAPPINGS = {
        false: 'mail',
        true: 'communication:mail-outline'
    };
    var DEFAULT_ICON_STYLE = 'height:24px; width:24px;';
    var TYPE_ICON_STYLE_MAPPINGS = (_b = {},
        _b[0 /* Error */] = "--avl-icon-custom-color: var(--avl-error-color); " + DEFAULT_ICON_STYLE,
        _b[1 /* Warning */] = "--avl-icon-custom-color: var(--avl-warning-color); " + DEFAULT_ICON_STYLE,
        _b[2 /* Info */] = "--avl-icon-custom-color: var(--avl-icon-default-color); " + DEFAULT_ICON_STYLE,
        _b[3 /* OK */] = "--avl-icon-custom-color: var(--avl-ok-color); " + DEFAULT_ICON_STYLE,
        _b);
    var TRANSLATION_BASE = 'VizBox.NotificationDialog.';
    var ACTION_BUTTONS = [
        {
            id: 'unread',
            tooltip: TRANSLATION_BASE + "MarkSelectedAsUnread"
        },
        {
            id: 'read',
            tooltip: TRANSLATION_BASE + "MarkSelectedAsRead"
        }
    ];

    /** Maps general avl notification list to table specific list */
    var PrepareNotificationsPipe = /** @class */ (function () {
        function PrepareNotificationsPipe() {
        }
        PrepareNotificationsPipe.prototype.transform = function (notifications, prepareFor) {
            return this[prepareFor](notifications);
        };
        PrepareNotificationsPipe.prototype.dialog = function (notifications) {
            return notifications.map(function (notification) { return (Object.assign(Object.assign({}, notification), { icon: TYPE_ICON_MAPPINGS[notification.type], iconStyle: TYPE_ICON_STYLE_MAPPINGS[notification.type], currentIconToggle: STATE_ICON_MAPPINGS[String(notification.read)], currentIconToggleStyle: DEFAULT_ICON_STYLE, state: notification.read })); });
        };
        PrepareNotificationsPipe.prototype.menu = function (notifications) {
            var _this = this;
            return notifications.map(function (notification) { return (Object.assign(Object.assign({}, notification), { label: notification.messageText, sublabel: _this.formatDateTime(notification.timestamp), icon: TYPE_ICON_MAPPINGS[notification.type], iconToggleUnchecked: 'mail', iconToggleChecked: 'communication:mail-outline', iconToggleValue: notification.read })); });
        };
        PrepareNotificationsPipe.prototype.formatDateTime = function (date) {
            return date === null
                ? ''
                : AvlLocalizationService.formatDateTime(date, {
                    format: 'date-short'
                }) + " " + AvlLocalizationService.formatDateTime(date, { format: 'time-long' });
        };
        return PrepareNotificationsPipe;
    }());
    PrepareNotificationsPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: PrepareNotificationsPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    PrepareNotificationsPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: PrepareNotificationsPipe, name: "prepareNotifications" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: PrepareNotificationsPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'prepareNotifications'
                    }]
            }] });

    var __awaiter$2 = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var AvlNotificationMenuComponent = /** @class */ (function () {
        function AvlNotificationMenuComponent() {
            var _this = this;
            this.open = false;
            this.openChange = new i0.EventEmitter();
            this.openDetails = new i0.EventEmitter();
            this.notificationStateChanged = new i0.EventEmitter();
            this.markAllAsRead = new i0.EventEmitter();
            this.markAllAsUnread = new i0.EventEmitter();
            this.overflowMenuItems = [];
            this.numberOfUnreadNotifications = 0;
            this._notifications = [];
            this.overflowMenuHandlers = {
                markAllAsRead: function () {
                    _this.markAllAsRead.emit();
                    _this.numberOfUnreadNotifications = 0;
                },
                markAllAsUnread: function () {
                    _this.markAllAsUnread.emit();
                    _this.numberOfUnreadNotifications = _this.notifications.length;
                },
                undefined: function () { }
            };
        }
        Object.defineProperty(AvlNotificationMenuComponent.prototype, "notifications", {
            get: function () {
                return this._notifications;
            },
            set: function (notifications) {
                this.numberOfUnreadNotifications = notifications.filter(function (notif) { return !notif.read; }).length;
                this._notifications = notifications;
            },
            enumerable: false,
            configurable: true
        });
        AvlNotificationMenuComponent.prototype.ngOnInit = function () {
            this.translateLabels();
        };
        AvlNotificationMenuComponent.prototype.ngAfterViewInit = function () {
            this.list.nativeElement.revertedList = true;
        };
        AvlNotificationMenuComponent.prototype.onNotificationStateChanged = function (event) {
            var notificationMenuItem = Object.assign({}, event.detail.value);
            var notification = Object.assign(Object.assign({}, notificationMenuItem), { read: notificationMenuItem.iconToggleValue });
            notification.read ? this.numberOfUnreadNotifications-- : this.numberOfUnreadNotifications++;
            this.notificationStateChanged.emit(notification);
            this.list.nativeElement.removeFocus();
        };
        AvlNotificationMenuComponent.prototype.onItemClicked = function (item) {
            this.overflowMenuHandlers[item.action]();
        };
        AvlNotificationMenuComponent.prototype.onOpenChanged = function (event) {
            if (!event.detail.value) {
                this.openChange.emit(false);
            }
        };
        AvlNotificationMenuComponent.prototype.onOverflowMenuClicked = function () {
            this.list.nativeElement.removeFocus();
        };
        AvlNotificationMenuComponent.prototype.onDetailsClicked = function () {
            this.open = false;
            this.openDetails.emit();
            this.openChange.emit(false);
        };
        /**Event fired when list item is clicked on
         * depending on the notification flag it opens in new tab
         */
        AvlNotificationMenuComponent.prototype.onListItemClicked = function (event) {
            var item = event.detail;
            if (item.link) {
                if (item.openInNewTab) {
                    window.open(item.link, '_blank');
                }
                else {
                    window.open(item.link, '_self');
                }
            }
        };
        AvlNotificationMenuComponent.prototype.translateLabels = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                                return [2 /*return*/];
                            }
                            _a = this;
                            return [4 /*yield*/, this.translateMenu(NOTIFICATIONS_OVERFLOW_MENU)];
                        case 1:
                            _a.overflowMenuItems = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AvlNotificationMenuComponent.prototype.translateMenu = function (menu) {
            return __awaiter$2(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(menu.map(function (group) { return __awaiter$2(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.translateMenuGroup(group)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        AvlNotificationMenuComponent.prototype.translateMenuGroup = function (group) {
            return __awaiter$2(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = {};
                            return [4 /*yield*/, Promise.all(group.items.map(function (item) { return __awaiter$2(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.translateMenuItem(item)];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); }))];
                        case 1: return [2 /*return*/, (_a.items = _b.sent(),
                                _a)];
                    }
                });
            });
        };
        AvlNotificationMenuComponent.prototype.translateMenuItem = function (item) {
            return __awaiter$2(this, void 0, void 0, function () {
                var translateService, _a, _b, _c, _d, _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            translateService = AvlLocalizationService.translationService;
                            _b = (_a = Object).assign;
                            _c = [Object.assign({}, item)];
                            _d = {};
                            return [4 /*yield*/, translateService.translate(item.label)];
                        case 1:
                            _d.label = _f.sent();
                            if (!item.sublabel) return [3 /*break*/, 3];
                            return [4 /*yield*/, translateService.translate(item.sublabel)];
                        case 2:
                            _e = _f.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _e = null;
                            _f.label = 4;
                        case 4: return [2 /*return*/, _b.apply(_a, _c.concat([(_d.sublabel = _e, _d)]))];
                    }
                });
            });
        };
        return AvlNotificationMenuComponent;
    }());
    AvlNotificationMenuComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationMenuComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    AvlNotificationMenuComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlNotificationMenuComponent, selector: "avl-notification-menu", inputs: { open: "open", trigger: "trigger", notifications: "notifications" }, outputs: { openChange: "openChange", openDetails: "openDetails", notificationStateChanged: "notificationStateChanged", markAllAsRead: "markAllAsRead", markAllAsUnread: "markAllAsUnread" }, viewQueries: [{ propertyName: "list", first: true, predicate: ["list"], descendants: true }], ngImport: i0__namespace, template: "<avl-popup\r\n  [noCloseOnInsideClick]=\"true\"\r\n  [open]=\"open\"\r\n  [trigger]=\"trigger\"\r\n  (open-changed)=\"onOpenChanged($event)\"\r\n>\r\n  <div id=\"header\">\r\n    <div id=\"headerText\">\r\n      <span>{{ 'VizBox.NotificationMenu.Notifications' | translate }}</span>\r\n      <span *ngIf=\"numberOfUnreadNotifications\"> ({{ numberOfUnreadNotifications }}) </span>\r\n    </div>\r\n    <avl-overflow-menu (itemClicked)=\"onItemClicked($event)\" [items]=\"overflowMenuItems\">\r\n      <avl-icon-button\r\n        icon=\"more-vert\"\r\n        slot=\"trigger\"\r\n        (click)=\"onOverflowMenuClicked()\"\r\n      ></avl-icon-button>\r\n    </avl-overflow-menu>\r\n  </div>\r\n  <avl-list\r\n    #list\r\n    [rows]=\"notifications | prepareNotifications: 'menu'\"\r\n    (row-changed)=\"onNotificationStateChanged($event)\"\r\n    (list-item-clicked)=\"onListItemClicked($event)\"\r\n  ></avl-list>\r\n  <div id=\"footer\">\r\n    <avl-button (click)=\"onDetailsClicked()\">{{\r\n      'VizBox.NotificationMenu.Details' | translate\r\n    }}</avl-button>\r\n  </div>\r\n</avl-popup>\r\n", styles: ["avl-popup{width:40%}avl-list{width:100%;height:250px;padding-top:8px;--avl-item-padding-left:16px;--avl-item-padding-right:16px;--notification-item-height:48px}#header{justify-content:space-between;padding:0 16px;border-bottom:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#footer,#header{display:flex;align-items:center;box-sizing:border-box;height:56px}#footer{border-top:1px solid var(--avl-overflow-menu-divider-color,var(--avl-divider-color))}#headerText{font-size:20px;color:var(--avl-primary-text-color);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}"], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.AvlOverflowMenuDirective, selector: "avl-overflow-menu", outputs: ["itemClicked"] }, { type: i4__namespace.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i4__namespace.AvlIconButtonDirective, selector: "avl-icon-button", outputs: ["badgeChange", "badgeValueChange"] }, { type: i4__namespace.AvlMultiSelectControlDirective, selector: "avl-datatable,avl-list,avl-chip-list, avl-chip-input", outputs: ["selectedIndexesChange", "selectedValuesChange"] }, { type: i4__namespace.AvlSingleSelectControlDirective, selector: "avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box", outputs: ["selectedIndexChange", "selectedValueChange"] }, { type: i4__namespace.AvlListDirective, selector: "avl-list", inputs: ["readonly"], outputs: ["invalidChange", "overflowMenuItemClicked", "rightCheckboxChanged", "activeRowChanged", "rowReordered"] }], pipes: { "translate": i3__namespace.TranslatePipe, "prepareNotifications": PrepareNotificationsPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationMenuComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'avl-notification-menu',
                        templateUrl: './avl-notification-menu.component.html',
                        styleUrls: ['./avl-notification-menu.component.css']
                    }]
            }], propDecorators: { open: [{
                    type: i0.Input
                }], trigger: [{
                    type: i0.Input
                }], notifications: [{
                    type: i0.Input
                }], openChange: [{
                    type: i0.Output
                }], openDetails: [{
                    type: i0.Output
                }], notificationStateChanged: [{
                    type: i0.Output
                }], markAllAsRead: [{
                    type: i0.Output
                }], markAllAsUnread: [{
                    type: i0.Output
                }], list: [{
                    type: i0.ViewChild,
                    args: ['list']
                }] } });

    /** @hidden */
    var ANIMATION_DURATION = 400;
    /** @hidden */
    var ACTION_BUTTON_MESSAGE = '_X more _TYPE notifications';
    /** @hidden */
    var MARGIN = 12;

    var AnimateButton = /** @class */ (function () {
        function AnimateButton() {
            var _this = this;
            this.getInfoHeight = function () {
                return _this.infoStackHeight > _this.infoStackIndicatorHeight
                    ? _this.infoStackHeight
                    : _this.infoStackIndicatorHeight;
            };
            this.getWarningHeight = function () {
                return _this.warningStackHeight > _this.warningStackIndicatorHeight
                    ? _this.warningStackHeight
                    : _this.warningStackIndicatorHeight;
            };
            this.getOffsetHeight = function (height) {
                return height ? height + MARGIN * 2 : 0;
            };
        }
        AnimateButton.prototype.ngOnChanges = function (changes) {
            var infoStackOffsetHeight = this.getOffsetHeight(this.getInfoHeight());
            var warningStackOffsetHeight = this.getOffsetHeight(this.getWarningHeight());
            this.styleTop = infoStackOffsetHeight + warningStackOffsetHeight + 'px';
        };
        return AnimateButton;
    }());
    AnimateButton.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AnimateButton, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AnimateButton.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: AnimateButton, selector: "[animateButton]", inputs: { increment: "increment", infoStackHeight: "infoStackHeight", warningStackHeight: "warningStackHeight", infoStackIndicatorHeight: "infoStackIndicatorHeight", warningStackIndicatorHeight: "warningStackIndicatorHeight" }, host: { properties: { "style.top": "this.styleTop" } }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AnimateButton, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[animateButton]' }]
            }], ctorParameters: function () { return []; }, propDecorators: { increment: [{
                    type: i0.Input
                }], infoStackHeight: [{
                    type: i0.Input
                }], warningStackHeight: [{
                    type: i0.Input
                }], infoStackIndicatorHeight: [{
                    type: i0.Input
                }], warningStackIndicatorHeight: [{
                    type: i0.Input
                }], styleTop: [{
                    type: i0.HostBinding,
                    args: ['style.top']
                }] } });

    /** @hidden */
    var AnimateSnackbar = /** @class */ (function () {
        function AnimateSnackbar(builder, el) {
            var _this = this;
            this.builder = builder;
            /** @hidden */
            this.defaultClass = true;
            this.getAnimation = function (animationName, initialStyle) {
                var elementWidth = _this.element.nativeElement.offsetWidth - 3 * MARGIN;
                var inStackStyle = i1$1.style({
                    marginTop: MARGIN + 'px',
                    marginLeft: MARGIN + 'px',
                    marginRight: MARGIN + 'px',
                    width: elementWidth + 'px'
                });
                switch (animationName) {
                    case 4 /* FromStack */:
                        return [i1$1.animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle), initialStyle];
                    case 3 /* ToStack */: {
                        return [initialStyle, i1$1.animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle)];
                    }
                    default:
                        return [initialStyle, i1$1.animate('1ms ease-in', initialStyle)];
                }
            };
            this.element = el;
        }
        AnimateSnackbar.prototype.ngOnChanges = function (changes) {
            if (changes.animateSnackbar) {
                var isInStack = changes.animateSnackbar.currentValue === 3 /* ToStack */;
                if (isInStack) {
                    this.move();
                }
                else if (changes.animateSnackbar.previousValue === 3 /* ToStack */) {
                    this.move();
                }
            }
        };
        AnimateSnackbar.prototype.show = function (metadata) {
            if (this.player) {
                this.player.destroy();
            }
            if (metadata) {
                var factory = this.builder.build(metadata);
                var player = factory.create(this.element.nativeElement);
                player.play();
            }
        };
        AnimateSnackbar.prototype.move = function () {
            var animationMetadata = this.animate();
            this.show(animationMetadata);
        };
        AnimateSnackbar.prototype.animate = function () {
            var initialStyle = i1$1.style({
                marginTop: '0',
                width: '100%',
                marginLeft: '0',
                marginRight: '0'
            });
            return this.getAnimation(this.animateSnackbar, initialStyle);
        };
        return AnimateSnackbar;
    }());
    AnimateSnackbar.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AnimateSnackbar, deps: [{ token: i1__namespace$1.AnimationBuilder }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AnimateSnackbar.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: AnimateSnackbar, selector: "[animateSnackbar]", inputs: { animateSnackbar: "animateSnackbar", positionAnimation: "positionAnimation", notification: "notification", reopen: "reopen" }, host: { properties: { "class.in-stack": "this.inStack", "class.no-animation": "this.noAnimation", "class.snackbar-container": "this.defaultClass" } }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AnimateSnackbar, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[animateSnackbar]' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.AnimationBuilder }, { type: i0__namespace.ElementRef }]; }, propDecorators: { animateSnackbar: [{
                    type: i0.Input
                }], positionAnimation: [{
                    type: i0.Input
                }], notification: [{
                    type: i0.Input,
                    args: ['notification']
                }], reopen: [{
                    type: i0.Input,
                    args: ['reopen']
                }], inStack: [{
                    type: i0.HostBinding,
                    args: ['class.in-stack']
                }], noAnimation: [{
                    type: i0.HostBinding,
                    args: ['class.no-animation']
                }], defaultClass: [{
                    type: i0.HostBinding,
                    args: ['class.snackbar-container']
                }] } });

    var AnimateStack = /** @class */ (function () {
        function AnimateStack(builder, el) {
            var _this = this;
            this.builder = builder;
            this.getAnimation = function (animationName, initialStyle) {
                var allStyle = i1$1.style('*');
                switch (animationName) {
                    case 2 /* ToBottom */: {
                        return [
                            allStyle,
                            i1$1.animate(ANIMATION_DURATION + 'ms ease-in', i1$1.style({
                                top: _this.styleTop + 'px',
                                zIndex: 0
                            }))
                        ];
                    }
                    case 1 /* ToTop */: {
                        return [allStyle, i1$1.animate(ANIMATION_DURATION + 'ms ease-in', initialStyle)];
                    }
                    default:
                        return [initialStyle, i1$1.animate('0ms', initialStyle)];
                }
            };
            this.element = el;
        }
        AnimateStack.prototype.ngOnChanges = function (changes) {
            var _a;
            if (changes.animateStack) {
                this.move(this.previousStackHeight);
            }
            else if (changes.previousStackHeight) {
                this.move(changes === null || changes === void 0 ? void 0 : changes.previousStackHeight.currentValue);
            }
            else if (changes.snackbarMethodDescription) {
                if (((_a = changes.snackbarMethodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                    this.move(this.previousStackHeight);
                }
            }
        };
        AnimateStack.prototype.show = function (metadata) {
            if (this.player) {
                this.player.destroy();
            }
            if (metadata) {
                var factory = this.builder.build(metadata);
                var player = factory.create(this.element.nativeElement);
                player.play();
            }
        };
        AnimateStack.prototype.move = function (height) {
            if (this.animateStack === 2 /* ToBottom */) {
                this.styleTop = height + MARGIN * 2;
            }
            var animationMetadata = this.animate();
            this.show(animationMetadata);
        };
        AnimateStack.prototype.animate = function () {
            var initialStyle = i1$1.style({
                top: '0',
                width: '100%',
                left: '0',
                zIndex: 1
            });
            return this.getAnimation(this.animateStack, initialStyle);
        };
        return AnimateStack;
    }());
    AnimateStack.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AnimateStack, deps: [{ token: i1__namespace$1.AnimationBuilder }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AnimateStack.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: AnimateStack, selector: "[animateStack]", inputs: { animateStack: "animateStack", notification: "notification", previousStackHeight: "previousStackHeight", snackbarMethodDescription: "snackbarMethodDescription", reopen: "reopen" }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AnimateStack, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[animateStack]' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.AnimationBuilder }, { type: i0__namespace.ElementRef }]; }, propDecorators: { animateStack: [{
                    type: i0.Input
                }], notification: [{
                    type: i0.Input
                }], previousStackHeight: [{
                    type: i0.Input
                }], snackbarMethodDescription: [{
                    type: i0.Input
                }], reopen: [{
                    type: i0.Input
                }] } });

    /**@hidden */
    var SnackbarMethodDescription = /** @class */ (function () {
        function SnackbarMethodDescription(method, animate) {
            this.method = method;
            this.animate = animate;
        }
        return SnackbarMethodDescription;
    }());
    var ShowHideSnackbarDirective = /** @class */ (function () {
        function ShowHideSnackbarDirective(el) {
            this.element = el;
        }
        ShowHideSnackbarDirective.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var _a, _b, _c, _d;
            if (changes.methodDescription) {
                if (((_a = changes.methodDescription.currentValue) === null || _a === void 0 ? void 0 : _a.method) === 'show') {
                    setTimeout(function () {
                        var _a, _b;
                        return (_a = _this.element.nativeElement) === null || _a === void 0 ? void 0 : _a.showSnackbar('relative', !((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.animate));
                    }, 0);
                }
                else if (((_b = changes.methodDescription.currentValue) === null || _b === void 0 ? void 0 : _b.method) === 'hide') {
                    (_c = this.element.nativeElement) === null || _c === void 0 ? void 0 : _c.hideSnackbar((_d = changes.methodDescription.currentValue) === null || _d === void 0 ? void 0 : _d.animate);
                }
            }
        };
        return ShowHideSnackbarDirective;
    }());
    ShowHideSnackbarDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: ShowHideSnackbarDirective, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ShowHideSnackbarDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: ShowHideSnackbarDirective, selector: "[showHideSnackbar]", inputs: { methodDescription: "methodDescription" }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: ShowHideSnackbarDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[showHideSnackbar]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { methodDescription: [{
                    type: i0.Input
                }] } });

    var SnackbarListener = /** @class */ (function () {
        function SnackbarListener() {
            /** @hidden */
            this.notificationClicked = new i0.EventEmitter();
            /** @hidden */
            this.buttonClicked = new i0.EventEmitter();
            /** @hidden */
            this.notificationDismissed = new i0.EventEmitter();
        }
        SnackbarListener.prototype.onNotificationClicked = function (event) {
            this.notificationClicked.emit(event);
        };
        SnackbarListener.prototype.onButtonClicked = function (event) {
            if (event instanceof Event) {
                this.buttonClicked.emit(event);
            }
        };
        SnackbarListener.prototype.onNotificationDismissed = function (event) {
            if (event instanceof Event) {
                this.notificationDismissed.emit(event);
            }
        };
        return SnackbarListener;
    }());
    SnackbarListener.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: SnackbarListener, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    SnackbarListener.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: SnackbarListener, selector: "[snackbarListener]", outputs: { notificationClicked: "notificationClicked", buttonClicked: "buttonClicked", notificationDismissed: "notificationDismissed" }, host: { listeners: { "notification-clicked": "onNotificationClicked($event)", "button-clicked": "onButtonClicked($event)", "notification-dismissed": "onNotificationDismissed($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: SnackbarListener, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[snackbarListener]' }]
            }], propDecorators: { notificationClicked: [{
                    type: i0.Output
                }], buttonClicked: [{
                    type: i0.Output
                }], notificationDismissed: [{
                    type: i0.Output
                }], onNotificationClicked: [{
                    type: i0.HostListener,
                    args: ['notification-clicked', ['$event']]
                }], onButtonClicked: [{
                    type: i0.HostListener,
                    args: ['button-clicked', ['$event']]
                }], onNotificationDismissed: [{
                    type: i0.HostListener,
                    args: ['notification-dismissed', ['$event']]
                }] } });

    var __awaiter$1 = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /** @hidden */
    var SnackbarStack = /** @class */ (function () {
        function SnackbarStack(stackType) {
            var _this = this;
            /** @hidden */
            this.notificationList = [];
            /** @hidden */
            this.activeNotification$ = new rxjs.BehaviorSubject(undefined);
            /** @hidden */
            this.stackIndicator = false;
            /** @hidden */
            this.actionButtonMessage = ACTION_BUTTON_MESSAGE;
            this.openNextNotification = function (stackType) {
                _this.methodDescription = new SnackbarMethodDescription('show', !_this.reopen);
                if (!_this.reopen) {
                    _this.stackAnimation = 1 /* ToTop */;
                }
                else {
                    _this.stackAnimation = 4 /* FromStack */;
                }
                _this.setStackIndicatorProperties(stackType);
                _this.reopen = false;
                _this.dismissedSilently = false;
            };
            this.resetValues = function () {
                _this.notificationList = [];
                _this.previousNotification = undefined;
                _this.stackIndicator = undefined;
            };
            this.setStackIndicatorProperties = function (stackType) {
                var notificationsCount = _this.notificationList.length;
                _this.stackIndicator = notificationsCount > 1;
                var timeout = setTimeout(function () {
                    _this.previousNotification = _this.notificationList[notificationsCount - 1];
                    _this.buttonLabel = _this.setButtonLabel(notificationsCount, stackType);
                    _this.stackIndicatorButtonLabel = _this.setButtonLabel(notificationsCount - 1, stackType);
                    clearTimeout(timeout);
                }, _this.previousNotification ? ANIMATION_DURATION : 0);
            };
            this.setButtonLabel = function (notificationsCount, type) {
                return notificationsCount > 0
                    ? _this.actionButtonMessage
                        .replace('_TYPE ', type === 'info' ? '' : type + ' ')
                        .replace('_X', String(notificationsCount))
                    : null;
            };
            this.translateLabels();
            this.methodDescription = new SnackbarMethodDescription(undefined, undefined);
            this.activeNotification$
                .pipe(operators.skipWhile(function (notification) { return notification === undefined; }))
                .subscribe(function (notification) {
                if (notification) {
                    if (_this.notificationList.length > 0) {
                        var timeout_1 = setTimeout(function () {
                            _this.openNextNotification(stackType);
                            clearTimeout(timeout_1);
                        }, _this.previousNotification ? ANIMATION_DURATION : 0);
                    }
                    else {
                        _this.openNextNotification(stackType);
                    }
                }
                else {
                    _this.resetValues();
                }
            });
        }
        SnackbarStack.prototype.translateLabels = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var translationService, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                                return [2 /*return*/];
                            }
                            translationService = AvlLocalizationService.translationService;
                            _a = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationContainer._X_more_TYPE_notifications')];
                        case 1:
                            _a.actionButtonMessage = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return SnackbarStack;
    }());

    var NOTIFICATION_TYPE = new Map([
        [0 /* Error */, 'Error'],
        [1 /* Warning */, 'Warning'],
        [2 /* Info */, 'Info'],
        [3 /* OK */, 'OK']
    ]);
    var AvlNotificationContainerComponent = /** @class */ (function () {
        function AvlNotificationContainerComponent(cdRef) {
            var _this = this;
            this.cdRef = cdRef;
            /** Observable emits notifications. Default observable emits dummy notifications every 3s for 100s. */
            this.notification$ = new rxjs.Observable(function subscribe(subscriber) {
                var i = 0;
                var intervalId = setInterval(function () {
                    var warning = Math.round(Math.random());
                    subscriber.next({
                        id: i++,
                        module: 'notification-container',
                        timestamp: new Date(),
                        type: warning ? 1 /* Warning */ : 2 /* Info */,
                        messageText: 'Snackbar with notification' + new Date().toTimeString(),
                        read: false,
                        link: 'https://vizbox.avl.com'
                    });
                }, 3000);
                setTimeout(function () {
                    clearInterval(intervalId);
                }, 100000);
            });
            this.openMenu = new i0.EventEmitter();
            /** @hidden */
            this.stackHeight = {};
            /** @hidden */
            this.notificationList = [];
            this.destroyed$ = new rxjs.Subject();
            /** @hidden */
            this.onButtonClicked = function (event) {
                if (event) {
                    _this.openMenu.emit();
                    _this.dismissAll();
                }
            };
            /** @hidden */
            this.onNotificationDismissed = function (event, notification) {
                var _a, _b;
                if (event) {
                    var snackType = (_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.id) === null || _b === void 0 ? void 0 : _b.replace('Snackbar', '');
                    _this.removeNotification(notification, snackType);
                }
            };
            /** @hidden */
            this.openFromStack = function (notification) {
                var stackName = _this.getStackName(notification.type);
                _this[stackName].methodDescription = new SnackbarMethodDescription('hide', true);
            };
            /** @hidden */
            this.dismissAll = function () {
                _this.notificationList = [];
                _this.warningStack.activeNotification$.next(undefined);
                _this.infoStack.activeNotification$.next(undefined);
            };
            this.handleNotification = function (notification) {
                _this.previousNotification = _this.notificationList[_this.notificationList.length - 1];
                _this.notificationList.push(notification);
                _this.updateStackActiveNotification(notification);
                _this.setStackAnimation(notification.type);
            };
            this.updateStackActiveNotification = function (notification) {
                var _a;
                var stackName = _this.getStack(notification === null || notification === void 0 ? void 0 : notification.type);
                _this.updateStackNotificationList(notification.type);
                _this.activeNotification = notification;
                if (_this[stackName].notificationList.length > 1) {
                    _this.reopen = true;
                    if (((_a = _this.previousNotification) === null || _a === void 0 ? void 0 : _a.type) === notification.type) {
                        _this[stackName].snackbarAnimation = 3 /* ToStack */;
                        // silently dismiss notification after previous notification animation
                        var timeout_1 = setTimeout(function () {
                            _this.silentlyDismissNotification(stackName);
                            _this[stackName].snackbarAnimation = null;
                            clearTimeout(timeout_1);
                        }, ANIMATION_DURATION);
                    }
                    else {
                        _this.silentlyDismissNotification(stackName);
                    }
                }
                else {
                    _this[stackName].activeNotification$.next(notification);
                }
            };
            this.updateStackNotificationList = function (notificationType) {
                var stack = _this[_this.getStack(notificationType)];
                if (stack) {
                    stack.notificationList = _this.notificationList.filter(function (item) { return item.type === notificationType; });
                }
                return stack.notificationList;
            };
            this.silentlyDismissNotification = function (stackName) {
                _this[stackName].dismissedSilently = true;
                _this[stackName].methodDescription = new SnackbarMethodDescription('hide', false);
            };
            this.setStackAnimation = function (notificationType, animation) {
                var _a, _b, _c;
                var currentStack = _this.getStack(notificationType);
                var previousStack = _this.getStack(notificationType, true);
                if (((_b = (_a = _this[previousStack]) === null || _a === void 0 ? void 0 : _a.notificationList) === null || _b === void 0 ? void 0 : _b.length) > 0 &&
                    ((_c = _this.previousNotification) === null || _c === void 0 ? void 0 : _c.type) !== notificationType) {
                    _this[previousStack].stackAnimation = animation || 2 /* ToBottom */;
                    _this[currentStack].stackAnimation =
                        animation === 1 /* ToTop */
                            ? 2 /* ToBottom */
                            : 1 /* ToTop */;
                }
            };
            this.removeNotification = function (notification, snackType) {
                var _a;
                var stackName = _this.getStack(notification === null || notification === void 0 ? void 0 : notification.type);
                if (_this[stackName].dismissedSilently) {
                    //notification dismissed silently
                    var stackName_1 = _this.getStack((_a = _this.activeNotification) === null || _a === void 0 ? void 0 : _a.type);
                    _this[stackName_1].activeNotification$.next(_this.activeNotification);
                    _this.reopen = false;
                }
                else {
                    //notification dismissed
                    _this.notificationList = _this.notificationList.filter(function (currentNotification) { return currentNotification.id !== notification.id; });
                    _this.reopenLastNotification(notification, stackName);
                }
            };
            this.reopenLastNotification = function (notification, stackName) {
                var _a;
                var stackNotificationList = (_a = _this[stackName]) === null || _a === void 0 ? void 0 : _a.notificationList;
                if (_this.isLastNotificationDismissed(notification, _this[stackName]) &&
                    (stackNotificationList === null || stackNotificationList === void 0 ? void 0 : stackNotificationList.length) > 0) {
                    _this[stackName].reopen = true;
                    stackNotificationList = _this.updateStackNotificationList(notification.type);
                    var lastNotification = stackNotificationList[stackNotificationList.length - 1];
                    if (lastNotification) {
                        _this[stackName].activeNotification$.next(lastNotification);
                    }
                    else {
                        _this[stackName].stackIndicator = false;
                        _this[stackName].reopen = false;
                        _this[stackName].animateStack = 2 /* ToBottom */;
                        _this.setStackAnimation(notification.type, 1 /* ToTop */);
                    }
                }
            };
            this.isLastNotificationDismissed = function (notification, stack) {
                var lastNotification = stack.notificationList[stack.notificationList.length - 1];
                return (lastNotification === null || lastNotification === void 0 ? void 0 : lastNotification.id) === (notification === null || notification === void 0 ? void 0 : notification.id);
            };
            this.getStackName = function (stackType) {
                return stackType === 1 ? 'warningStack' : 'infoStack';
            };
            this.warningStack = new SnackbarStack(String(NOTIFICATION_TYPE.get(1 /* Warning */)).toLowerCase());
            this.infoStack = new SnackbarStack(String(NOTIFICATION_TYPE.get(2 /* Info */)).toLowerCase());
        }
        AvlNotificationContainerComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        AvlNotificationContainerComponent.prototype.ngAfterViewChecked = function () {
            this.cdRef.detectChanges();
        };
        /** @hidden */
        AvlNotificationContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b;
            this.positionTop = ((_a = document.querySelector('main')) === null || _a === void 0 ? void 0 : _a.offsetTop) + 12 + 'px';
            (_b = this.notification$) === null || _b === void 0 ? void 0 : _b.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (notification) {
                _this.handleNotification(notification);
            });
        };
        /** @hidden */
        /** Event fired when notification snackbar is clicked
         * depending on the notification flag it opens in new tab
        */
        AvlNotificationContainerComponent.prototype.onNotificationSnackbarClicked = function (event) {
            var snackbar = event.detail;
            if (snackbar.link) {
                if (snackbar.openInNewTab) {
                    window.open(snackbar.link, '_blank');
                }
                else {
                    window.open(snackbar.link, '_self');
                }
            }
        };
        AvlNotificationContainerComponent.prototype.getStack = function (notificationType, previous) {
            var stackType;
            if (notificationType === 1 /* Warning */ ||
                notificationType === 0 /* Error */) {
                stackType = previous ? 2 /* Info */ : 1 /* Warning */;
            }
            else {
                stackType = previous ? 1 /* Warning */ : 2 /* Info */;
            }
            return this.getStackName(stackType);
        };
        return AvlNotificationContainerComponent;
    }());
    AvlNotificationContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationContainerComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AvlNotificationContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlNotificationContainerComponent, selector: "avl-notification-container", inputs: { displayIcon: ["display-icon", "displayIcon"], notification$: "notification$" }, outputs: { openMenu: "openMenu" }, host: { properties: { "style.top": "this.positionTop" } }, viewQueries: [{ propertyName: "warningStackElement", first: true, predicate: ["warningStackElement"], descendants: true }, { propertyName: "infoStackElement", first: true, predicate: ["infoStackElement"], descendants: true }, { propertyName: "infoStackIndicatorElement", first: true, predicate: ["infoStackIndicatorElement"], descendants: true }, { propertyName: "warningStackIndicatorElement", first: true, predicate: ["infoStackIndicatorElement"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"snackbar\" *ngIf=\"notification$ | async as notification\">\r\n  <div\r\n    [animateStack]=\"warningStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? infoSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"warningStack.methodDescription\"\r\n    class=\"snackbar-stack\"\r\n    id=\"warningStack\"\r\n    #warningStackElement\r\n  >\r\n    <div [animateSnackbar]=\"warningStack.snackbarAnimation\" id=\"warningSnack\" #warningSnackElement>\r\n      <avl-snackbar\r\n        *ngIf=\"warningStack.activeNotification$ | async as activeWarningNotification\"\r\n        id=\"warningSnackbar\"\r\n        [message]=\"activeWarningNotification?.messageText\"\r\n        [openInNewTab]=\"activeWarningNotification.openInNewTab\"\r\n        [actionButtonLabel]=\"warningStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeWarningNotification.link\"\r\n        [messageType]=\"activeWarningNotification.type\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeWarningNotification)\"\r\n        snackbarListener\r\n        #warningSnackbar\r\n        showHideSnackbar=\"warningSnackbar\"\r\n        [methodDescription]=\"warningStack.methodDescription\"\r\n        (snackbar-clicked)=\"onNotificationSnackbarClicked($event)\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"warningStack.notificationList.length>1\" #warningStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': warningStack.stackIndicatorButtonLabel}\">\r\n            <avl-icon icon=\"icons:warning\" id=\"warningIcon\" class=\"warning\"></avl-icon>\r\n            <p id=\"snackbarMessage\">{{ warningStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n          <button id=\"actionButton\" *ngIf=\"warningStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(warningStack.previousNotification)\">\r\n            <div class=\"button-label\">{{ warningStack.stackIndicatorButtonLabel }}</div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"snackbar-stack\"\r\n    id=\"infoStack\"\r\n    [animateStack]=\"infoStack?.stackAnimation\"\r\n    [previousStackHeight] = \"infoStack.notificationList.length>0 ? warningSnackElement.offsetHeight : 0\"\r\n    [snackbarMethodDescription] = \"infoStack.methodDescription\"\r\n    #infoStackElement\r\n  >\r\n    <div [animateSnackbar]=\"infoStack.snackbarAnimation\" id=\"infoSnack\" #infoSnackElement>\r\n      <avl-snackbar\r\n        id=\"infoSnackbar\"\r\n        *ngIf=\"infoStack.activeNotification$ | async as activeInfoNotification\"\r\n        [message]=\"activeInfoNotification.messageText\"\r\n        [openInNewTab]=\"activeInfoNotification.openInNewTab\"\r\n        [actionButtonLabel]=\"infoStack.stackIndicatorButtonLabel\"\r\n        [link]=\"activeInfoNotification.link\"\r\n        [messageType]=\"activeInfoNotification.type\"\r\n        [displayIcon]=\"displayIcon\"\r\n        sliding\r\n        (buttonClicked)=\"onButtonClicked($event)\"\r\n        (notificationDismissed)=\"onNotificationDismissed($event, activeInfoNotification)\"\r\n        snackbarListener\r\n        #infoSnackbar\r\n        showHideSnackbar=\"infoSnackbar\"\r\n        [methodDescription]=\"infoStack.methodDescription\"\r\n        (snackbar-clicked)=\"onNotificationSnackbarClicked($event)\"\r\n      ></avl-snackbar>\r\n    </div>\r\n\r\n    <div class=\"stack-indicator-container\" *ngIf=\"infoStack.notificationList.length>1\" #infoStackIndicator>\r\n      <div class=\"stack-indicator\">\r\n        <div class=\"notification-container\">\r\n          <div [ngClass]=\"{'notification': true, 'has-action': infoStack.stackIndicatorButtonLabel}\">\r\n            <p id=\"snackbarMessage\">{{ infoStack.previousNotification?.messageText }}</p>\r\n            <avl-icon-button id=\"closeButton\" icon=\"icons:close\"></avl-icon-button>\r\n          </div>\r\n        </div>\r\n        <button id=\"actionButton\" *ngIf=\"infoStack.stackIndicatorButtonLabel\" (click)=\"openFromStack(infoStack.previousNotification)\">\r\n          <div class=\"button-label\">{{ infoStack.stackIndicatorButtonLabel }}</div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div\r\n    animateButton\r\n    [infoStackHeight]=\"infoStack?.notificationList?.length > 0 ? infoSnackElement.offsetHeight : 0\"\r\n    [warningStackHeight]=\"warningStack?.notificationList?.length > 0 ? warningSnackElement.offsetHeight : 0\"\r\n    [infoStackIndicatorHeight]=\"infoStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    [warningStackIndicatorHeight]=\"warningStackIndicatorElement?.nativeElement?.offsetHeight\"\r\n    class=\"dismiss-all\"\r\n    *ngIf=\"notificationList?.length > 1\"\r\n  >\r\n    <avl-button id=\"dismissAll\" (click)=\"dismissAll()\">{{'VizBox.NotificationContainer.DismissAll' | translate}}</avl-button>\r\n  </div>\r\n</div>\r\n\r\n\r\n", styles: [":host{position:fixed;right:0;width:445px;display:flex;flex-direction:column;--avl-snackbar-text-color:var(--avl-on-background-info-color)}.snackbar{width:100%;display:flex;flex-direction:column}.snackbar.displayed{flex:1;max-height:100%}.snackbar-stack{position:absolute;top:0;left:0;right:0;width:100%}.stack-indicator-container{margin:0 12px;position:absolute;width:calc(100% - 12px);top:12px;z-index:-1}.snackbar-container{margin-top:0;margin-left:0;margin-right:0;width:100%}.button-label{text-align:left;text-transform:none}.stack-indicator{background-color:var(--avl-background-message-color);top:0;left:0;width:calc(100% - 24px);border-radius:4px;position:relative;height:100%;z-index:-1;box-shadow:0 3px 5px -1px rgb(0 0 0/20%),0 6px 10px 0 rgb(0 0 0/14%),0 1px 18px 0 rgb(0 0 0/12%)}.notification{display:flex;flex:1 1 100%;align-items:center;flex-direction:row;padding:0 12px 0 16px;justify-content:flex-start;cursor:pointer;text-overflow:ellipsis}.notification p{flex-grow:1;-webkit-line-clamp:3;text-overflow:ellipsis;line-height:19px;margin:0 0 0 12px;padding:12px 0;color:var(--avl-on-background-info-color)}.notification p,button#actionButton{max-height:48px;font-size:14px;font-family:var(--avl-font-family)}button#actionButton{font-weight:500;color:var(--avl-on-background-message-link-color);background-color:var(--avl-button-background-default-color);height:48px;width:100%;cursor:pointer;padding:12px;margin:-12px 0 0;border-radius:2px;border:0;outline:none}div#actionButton:hover{color:var(--avl-on-background-message-link-hover-color)}#warningIcon{--avl-icon-custom-color:var(--avl-on-background-message-warning-color);flex:0 0 24px}#errorIcon{--avl-icon-custom-color:var(--avl-on-background-message-error-color);flex:0 0 24px}#infoIcon{--avl-icon-custom-color:var(--avl-on-background-message-emphasis-medium-color);flex:0 0 24px}#OKIcon{--avl-icon-custom-color:var(--avl-on-background-message-ok-color);flex:0 0 24px}.dismiss-all{position:absolute;padding:0 16px;border-radius:25px;background-color:var(--avl-background-message-color);width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;top:12px}#dismissAll{--avl-flat-button-label-color:var(--avl-on-background-message-link-color)}avl-icon-button{flex:0 0 48px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-on-background-message-icon-default-color);--avl-icon-ink-hover-color:var(--avl-on-background-message-icon-hover-color);--avl-icon-ink-focus-color:var(--avl-on-background-message-icon-focus-color);--avl-icon-ink-pressed-color:var(--avl-on-background-message-icon-pressed-color)}#warningIcon{--avl-icon-custom-color:var(--avl-warning-color)}@media only screen and (min-width:320px) and (max-width:376px){:host{width:calc(100% - 32px)}}@media only screen and (min-width:460px){:host{width:445px}}@media only screen and (min-width:376px) and (max-width:400px){:host{width:376px}}"], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: AnimateStack, selector: "[animateStack]", inputs: ["animateStack", "notification", "previousStackHeight", "snackbarMethodDescription", "reopen"] }, { type: AnimateSnackbar, selector: "[animateSnackbar]", inputs: ["animateSnackbar", "positionAnimation", "notification", "reopen"] }, { type: i4__namespace.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i4__namespace.AvlSnackbarDirective, selector: "avl-snackbar", outputs: ["buttonClicked", "displayedChange"] }, { type: SnackbarListener, selector: "[snackbarListener]", outputs: ["notificationClicked", "buttonClicked", "notificationDismissed"] }, { type: ShowHideSnackbarDirective, selector: "[showHideSnackbar]", inputs: ["methodDescription"] }, { type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4__namespace.AvlIconButtonDirective, selector: "avl-icon-button", outputs: ["badgeChange", "badgeValueChange"] }, { type: AnimateButton, selector: "[animateButton]", inputs: ["increment", "infoStackHeight", "warningStackHeight", "infoStackIndicatorHeight", "warningStackIndicatorHeight"] }], pipes: { "async": i1__namespace.AsyncPipe, "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'avl-notification-container',
                        templateUrl: './avl-notification-container.component.html',
                        styleUrls: ['./avl-notification-container.component.css']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { positionTop: [{
                    type: i0.HostBinding,
                    args: ['style.top']
                }], warningStackElement: [{
                    type: i0.ViewChild,
                    args: ['warningStackElement']
                }], infoStackElement: [{
                    type: i0.ViewChild,
                    args: ['infoStackElement']
                }], infoStackIndicatorElement: [{
                    type: i0.ViewChild,
                    args: ['infoStackIndicatorElement']
                }], warningStackIndicatorElement: [{
                    type: i0.ViewChild,
                    args: ['infoStackIndicatorElement']
                }], displayIcon: [{
                    type: i0.Input,
                    args: ['display-icon']
                }], notification$: [{
                    type: i0.Input,
                    args: ['notification$']
                }], openMenu: [{
                    type: i0.Output
                }] } });

    function dateValidator(date) {
        return function (control) {
            return date.invalid ? { date: { value: control.value } } : null;
        };
    }
    var DateInvalidValidatorDirective = /** @class */ (function () {
        function DateInvalidValidatorDirective() {
        }
        DateInvalidValidatorDirective.prototype.validate = function (control) {
            return this.dateInvalid ? dateValidator(this.dateInvalid)(control) : null;
        };
        return DateInvalidValidatorDirective;
    }());
    DateInvalidValidatorDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: DateInvalidValidatorDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DateInvalidValidatorDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.3", type: DateInvalidValidatorDirective, selector: "[dateInvalid]", inputs: { dateInvalid: "dateInvalid" }, providers: [{ provide: i5.NG_VALIDATORS, useExisting: DateInvalidValidatorDirective, multi: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: DateInvalidValidatorDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[dateInvalid]',
                        providers: [{ provide: i5.NG_VALIDATORS, useExisting: DateInvalidValidatorDirective, multi: true }]
                    }]
            }], propDecorators: { dateInvalid: [{
                    type: i0.Input,
                    args: ['dateInvalid']
                }] } });

    var IterableObjectPipe = /** @class */ (function () {
        function IterableObjectPipe() {
        }
        IterableObjectPipe.prototype.transform = function (object) {
            if (!object) {
                return undefined;
            }
            return Object.keys(object);
        };
        return IterableObjectPipe;
    }());
    IterableObjectPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: IterableObjectPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    IterableObjectPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: IterableObjectPipe, name: "iterableObject" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: IterableObjectPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'iterableObject'
                    }]
            }] });

    var CapitalizePipe = /** @class */ (function () {
        function CapitalizePipe() {
        }
        CapitalizePipe.prototype.transform = function (text) {
            var firstLetter = text.substr(0, 1).toUpperCase();
            return firstLetter + text.substr(1);
        };
        return CapitalizePipe;
    }());
    CapitalizePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: CapitalizePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    CapitalizePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: CapitalizePipe, name: "capitalize" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: CapitalizePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'capitalize'
                    }]
            }] });

    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var AvlNotificationDialogComponent = /** @class */ (function () {
        function AvlNotificationDialogComponent() {
            this.open = false;
            this.pageSizeOptions = DEFAULT_PAGE_SIZE_OPTIONS;
            this.columnDefinitions = DEFAULT_COLUMN_DEFINITIONS;
            this.notificationsCount = {
                warning: 0,
                info: 0,
                ok: 0,
                error: 0,
                unread: 0,
                read: 0,
                total: 0
            };
            this.openChange = new i0.EventEmitter();
            this.filtersChange = new i0.EventEmitter();
            this.markSelectedAsRead = new i0.EventEmitter();
            this.markSelectedAsUnread = new i0.EventEmitter();
            this.tableRefresh = new i0.EventEmitter();
            this.selectedPageChanged = new i0.EventEmitter();
            this.pageSizeChanged = new i0.EventEmitter();
            this.badge = false;
            this.disableMarkingSelected = true;
            this.filters = this.deepCopyObject(DEFAULT_FILTERS);
            this.filtersOpen = true;
            this.translationBase = TRANSLATION_BASE;
            this.actionButtons = ACTION_BUTTONS;
            this.disabledRange = {};
            this.dateFilterGroupInitHeader = 'Date';
            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
            //notification datatable options
            this.selectedRows = [];
            this.pageSize = 15;
            this._notifications = [];
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(AvlNotificationDialogComponent.prototype, "notifications", {
            get: function () {
                return this._notifications || [];
            },
            set: function (notifications) {
                this._notifications = notifications;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AvlNotificationDialogComponent.prototype, "filterForm", {
            set: function (filterForm) {
                var _this = this;
                var _a;
                (_a = this.filterFormSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
                this.filterFormSubscription = filterForm === null || filterForm === void 0 ? void 0 : filterForm.valueChanges.pipe(operators.debounceTime(300), operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$), operators.filter(function (_) { return filterForm.valid; })).subscribe(function (value) { return _this.handleFiltersChanged(value); });
            },
            enumerable: false,
            configurable: true
        });
        AvlNotificationDialogComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        AvlNotificationDialogComponent.prototype.ngOnInit = function () {
            this.translateLabels();
        };
        AvlNotificationDialogComponent.prototype.getIconByType = function (type) {
            var e_1, _b;
            switch (type) {
                case 'unread':
                    return STATE_ICON_MAPPINGS['false'];
                case 'read':
                    return STATE_ICON_MAPPINGS['true'];
                default: try {
                    for (var NOTIFICATION_TYPE_MAPPINGS_1 = __values(NOTIFICATION_TYPE_MAPPINGS), NOTIFICATION_TYPE_MAPPINGS_1_1 = NOTIFICATION_TYPE_MAPPINGS_1.next(); !NOTIFICATION_TYPE_MAPPINGS_1_1.done; NOTIFICATION_TYPE_MAPPINGS_1_1 = NOTIFICATION_TYPE_MAPPINGS_1.next()) {
                        var _c = __read(NOTIFICATION_TYPE_MAPPINGS_1_1.value, 2), typeKey = _c[0], typeValue = _c[1];
                        if (typeValue === type && typeof typeKey === 'number') {
                            return TYPE_ICON_MAPPINGS[typeKey];
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (NOTIFICATION_TYPE_MAPPINGS_1_1 && !NOTIFICATION_TYPE_MAPPINGS_1_1.done && (_b = NOTIFICATION_TYPE_MAPPINGS_1.return)) _b.call(NOTIFICATION_TYPE_MAPPINGS_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        /** Emits event when dialog opens or closes */
        AvlNotificationDialogComponent.prototype.openChanged = function (open) {
            this.openChange.emit(open);
        };
        AvlNotificationDialogComponent.prototype.onSelectedPageChanged = function (event) {
            this.selectedPageChanged.emit(event);
        };
        AvlNotificationDialogComponent.prototype.onPageSizeChanged = function (event) {
            this.pageSizeChanged.emit(event);
        };
        /** Toggles displaying of filter sheet */
        AvlNotificationDialogComponent.prototype.toggleFilters = function () {
            this.filtersOpen = !this.filtersOpen;
        };
        /** Refreshes the datatable when refresh button is clicked */
        AvlNotificationDialogComponent.prototype.refreshTable = function () {
            this.tableRefresh.emit();
        };
        AvlNotificationDialogComponent.prototype.markAs = function (state) {
            state === NOTIFICATION_TYPE_MAPPINGS.get(true) ? this.markAsRead() : this.markAsUnread();
        };
        /** Changes selected notification state to read */
        AvlNotificationDialogComponent.prototype.markAsRead = function () {
            this.markSelectedAsRead.emit(this.selectedRows);
        };
        /** Changes selected notification state to unread */
        AvlNotificationDialogComponent.prototype.markAsUnread = function () {
            this.markSelectedAsUnread.emit(this.selectedRows);
        };
        /**
         * Resets all filters.
         */
        AvlNotificationDialogComponent.prototype.reset = function () {
            this.filters = this.deepCopyObject(DEFAULT_FILTERS);
            this.updateLabels();
            this.badge = false;
        };
        /** Called when selection is applied to the table rows */
        AvlNotificationDialogComponent.prototype.selectedValuesChanged = function () {
            this.disableMarkingSelected = false;
            if (this.selectedRows.length == 0) {
                this.disableMarkingSelected = true;
            }
        };
        /** Updates date filter header labels when date changes */
        AvlNotificationDialogComponent.prototype.updateLabels = function () {
            return __awaiter(this, void 0, void 0, function () {
                var translationService, _b, dateFrom, dateTo, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            translationService = AvlLocalizationService.translationService;
                            _b = this.filters.date, dateFrom = _b.dateFrom, dateTo = _b.dateTo;
                            if (!(!dateFrom && !dateTo)) return [3 /*break*/, 1];
                            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
                            return [3 /*break*/, 3];
                        case 1:
                            _c = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.DateRange', {
                                    dateFrom: this.formatDateTime(dateFrom),
                                    dateTo: this.formatDateTime(dateTo)
                                })];
                        case 2:
                            _c.dateFilterGroupHeader = _d.sent();
                            _d.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /** Event fired when table row is clicked
         * depending on the notification flag it opens in new tab
         */
        AvlNotificationDialogComponent.prototype.onRowClicked = function (event) {
            var row = event.detail;
            if (row.link) {
                if (row.openInNewTab) {
                    window.open(row.link, '_blank');
                }
                else {
                    window.open(row.link, '_self');
                }
            }
        };
        AvlNotificationDialogComponent.prototype.handleFiltersChanged = function (value) {
            var _a;
            this.activeFilters = this.getActiveFilters(value);
            if ((_a = this.activeFilters) === null || _a === void 0 ? void 0 : _a.date) {
                this.disabledRange = this.getDisabledRange();
            }
            this.badge = Boolean(this.activeFilters);
            var event = new CustomEvent('filtersChange', { detail: this.activeFilters });
            this.filtersChange.emit(event);
        };
        /** Calculates active filters from filter object */
        AvlNotificationDialogComponent.prototype.getActiveFilters = function (filters) {
            var _this = this;
            Object.keys(filters).forEach(function (key) {
                var filter = filters[key];
                //don't iterate through search
                if (filter && typeof filter !== 'string') {
                    filters[key] = _this.removeInactiveFilterKeys(filter);
                }
            });
            return this.removeInactiveFilterKeys(filters);
        };
        /** disable dates before dateFrom in dateTo, and dates after dateTo in dateFrom  */
        AvlNotificationDialogComponent.prototype.getDisabledRange = function () {
            var _b = this.filters.date, dateFrom = _b.dateFrom, dateTo = _b.dateTo;
            return {
                dateFrom: dateTo ? [{ from: dateTo }] : undefined,
                dateTo: dateFrom ? [{ to: dateFrom }] : undefined
            };
        };
        /** Removes inactive filters from filter object and returns it */
        AvlNotificationDialogComponent.prototype.removeInactiveFilterKeys = function (filter) {
            var _a;
            Object.keys(filter)
                .filter(function (secondLevelKey) { return !Boolean(filter[secondLevelKey]); })
                .forEach(function (secondLevelKey) { return delete filter[secondLevelKey]; });
            return ((_a = Object.keys(filter)) === null || _a === void 0 ? void 0 : _a.length) ? filter : undefined;
        };
        /** Formats date time to date-short */
        AvlNotificationDialogComponent.prototype.formatDateTime = function (d) {
            return d ? AvlLocalizationService.formatDateTime(d, { format: 'date-short' }) : '(-)';
        };
        /** Deep copy of filters object */
        AvlNotificationDialogComponent.prototype.deepCopyObject = function (object) {
            var copiedObject = {};
            Object.keys(object).forEach(function (key) {
                copiedObject[key] =
                    typeof object[key] === 'object' ? Object.assign({}, object[key]) : object[key];
            });
            return copiedObject;
        };
        // Translations
        AvlNotificationDialogComponent.prototype.translateLabels = function () {
            return __awaiter(this, void 0, void 0, function () {
                var translationService, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                                return [2 /*return*/];
                            }
                            translationService = AvlLocalizationService.translationService;
                            _b = this;
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.Date')];
                        case 1:
                            _b.dateFilterGroupInitHeader = _e.sent();
                            this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;
                            _c = this;
                            return [4 /*yield*/, this.translatePageSizeOptions(this.pageSizeOptions)];
                        case 2:
                            _c.pageSizeOptions = _e.sent();
                            _d = this;
                            return [4 /*yield*/, this.translateColumns(this.columnDefinitions)];
                        case 3:
                            _d.columnDefinitions = _e.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translatePageSizeOptions = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_b) {
                    return [2 /*return*/, Promise.all(options.map(function (option) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                            return [2 /*return*/, this.translatePageSizeOption(option)];
                        }); }); }))];
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translatePageSizeOption = function (item) {
            return __awaiter(this, void 0, void 0, function () {
                var translationService, _b, _c, _d, _e, _f;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            translationService = AvlLocalizationService.translationService;
                            _c = (_b = Object).assign;
                            _d = [Object.assign({}, item)];
                            _e = {};
                            if (!(item.value === Number.MAX_SAFE_INTEGER)) return [3 /*break*/, 2];
                            return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.ShowAll')];
                        case 1:
                            _f = _g.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, translationService.translate('VizBox.NotificationDialog.ShowXPerPage', {
                                rows: item.value
                            })];
                        case 3:
                            _f = _g.sent();
                            _g.label = 4;
                        case 4: return [2 /*return*/, _c.apply(_b, _d.concat([(_e.label = _f, _e)]))];
                    }
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translateColumns = function (column) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_b) {
                    return [2 /*return*/, Promise.all(column.map(function (item) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                            return [2 /*return*/, this.translateColumnItem(item)];
                        }); }); }))];
                });
            });
        };
        AvlNotificationDialogComponent.prototype.translateColumnItem = function (item) {
            return __awaiter(this, void 0, void 0, function () {
                var translateService, _b, _c, _d, _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            translateService = AvlLocalizationService.translationService;
                            _c = (_b = Object).assign;
                            _d = [Object.assign({}, item)];
                            _e = {};
                            return [4 /*yield*/, translateService.translate(item.caption)];
                        case 1: return [2 /*return*/, _c.apply(_b, _d.concat([(_e.caption = _f.sent(), _e)]))];
                    }
                });
            });
        };
        return AvlNotificationDialogComponent;
    }());
    AvlNotificationDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationDialogComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    AvlNotificationDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlNotificationDialogComponent, selector: "avl-notification-dialog", inputs: { open: "open", pageSizeOptions: "pageSizeOptions", columnDefinitions: "columnDefinitions", notificationsCount: "notificationsCount", refreshBadge: "refreshBadge", notifications: "notifications" }, outputs: { openChange: "openChange", filtersChange: "filtersChange", markSelectedAsRead: "markSelectedAsRead", markSelectedAsUnread: "markSelectedAsUnread", tableRefresh: "tableRefresh", selectedPageChanged: "selectedPageChanged", pageSizeChanged: "pageSizeChanged" }, viewQueries: [{ propertyName: "table", first: true, predicate: ["notificationTable"], descendants: true }, { propertyName: "filterForm", first: true, predicate: ["filterForm"], descendants: true, read: i5.NgForm }], ngImport: i0__namespace, template: "<avl-dialog\r\n  id=\"outerDialog\"\r\n  [open]=\"open\"\r\n  (openChange)=\"openChanged($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"true\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>{{ translationBase + 'Details' | translate }}</avl-dialog-header>\r\n    <avl-dialog-content>\r\n      <div class=\"main-container\">\r\n        <div class=\"content\">\r\n          <div class=\"table-header\">\r\n            <h1>\r\n              {{ translationBase + 'Notifications' | translate }} ({{ notifications?.length }}\r\n              <span\r\n                *ngIf=\"\r\n                  notificationsCount.total && notificationsCount.total !== notifications?.length\r\n                \"\r\n              >\r\n                /{{ notificationsCount.total }} </span\r\n              >)\r\n            </h1>\r\n            <div class=\"table-header-right\">\r\n              <avl-icon-button\r\n                id=\"updateIcon\"\r\n                (click)=\"refreshTable()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:refresh\"\r\n                [badge]=\"refreshBadge\"\r\n              >\r\n              </avl-icon-button>\r\n              <avl-tooltip for=\"updateIcon\">\r\n                {{ translationBase + 'Refresh' | translate }}</avl-tooltip\r\n              >\r\n              <div class=\"divider vertical\"></div>\r\n              <div *ngFor=\"let button of actionButtons\">\r\n                <avl-icon-button\r\n                  id=\"{{ button.id }}Icon\"\r\n                  (click)=\"markAs(button.id)\"\r\n                  class=\"pointer\"\r\n                  [icon]=\"getIconByType(button.id)\"\r\n                  [disabled]=\"disableMarkingSelected\"\r\n                >\r\n                </avl-icon-button>\r\n                <avl-tooltip for=\"{{ button.id }}Icon\">{{\r\n                  button.tooltip | translate\r\n                }}</avl-tooltip>\r\n              </div>\r\n              <div class=\"divider vertical\"></div>\r\n              <div *ngIf=\"!filtersOpen\" class=\"search-bar-holder\">\r\n                <div *ngTemplateOutlet=\"searchBar\"></div>\r\n              </div>\r\n              <avl-icon-button\r\n                (click)=\"toggleFilters()\"\r\n                class=\"pointer\"\r\n                icon=\"icons:filter-list\"\r\n                [badge]=\"badge\"\r\n              ></avl-icon-button>\r\n            </div>\r\n          </div>\r\n          <avl-datatable\r\n            #notificationTable\r\n            class=\"filterDatatable\"\r\n            multi-select\r\n            allow-active-row\r\n            pagination\r\n            [columnDefinitions]=\"columnDefinitions\"\r\n            [pageSize]=\"pageSize\"\r\n            [data]=\"notifications | prepareNotifications: 'dialog'\"\r\n            [pageSizeOptions]=\"pageSizeOptions\"\r\n            [(selectedValues)]=\"selectedRows\"\r\n            (selectedValuesChange)=\"selectedValuesChanged()\"\r\n            (page-size-changed)=\"onPageSizeChanged($event)\"\r\n            (selected-page-changed)=\"onSelectedPageChanged($event)\"\r\n            (on-row-clicked)=\"onRowClicked($event)\"\r\n          >\r\n          </avl-datatable>\r\n        </div>\r\n        <avl-side-sheet class=\"filter-sheet\" divider [(open)]=\"filtersOpen\" #filterSheet>\r\n          <div slot=\"title\">\r\n            <h2>{{ translationBase + 'Filters' | translate }}</h2>\r\n          </div>\r\n          <div slot=\"content\">\r\n            <form #filterForm=\"ngForm\">\r\n              <!--ngIf is needed to rerender template on filtersheet toggle-->\r\n              <div *ngIf=\"filtersOpen\" class=\"search-bar-holder\">\r\n                <div *ngTemplateOutlet=\"searchBar\"></div>\r\n              </div>\r\n\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormType=\"ngModelGroup\"\r\n                ngModelGroup=\"type\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3>\r\n                    <span>{{ translationBase + 'Type' | translate }}</span>\r\n                    <span *ngIf=\"activeFilters?.type | iterableObject as activeFilterGroup\">\r\n                      <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                          currentHeader;\r\n                          context: {\r\n                            activeFilterGroup: activeFilterGroup,\r\n                            filterGroup: filters?.type | iterableObject\r\n                          }\r\n                        \"\r\n                      ></ng-container>\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div *ngFor=\"let type of filters?.type | iterableObject\">\r\n                    <avl-checkbox name=\"{{ type }}\" [(ngModel)]=\"filters.type[type]\">\r\n                      {{ translationBase + (type | titlecase) | translate }}\r\n                      <span *ngIf=\"notifications.length\">({{ notificationsCount[type] }})</span>\r\n                    </avl-checkbox>\r\n                    <avl-icon\r\n                      id=\"{{ type }}Icon\"\r\n                      class=\"typeIcons\"\r\n                      icon=\"icons:{{ getIconByType(type) }}\"\r\n                    ></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormState=\"ngModelGroup\"\r\n                ngModelGroup=\"state\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3>\r\n                    <span>{{ translationBase + 'State' | translate }}</span>\r\n                    <span *ngIf=\"activeFilters?.state | iterableObject as activeFilterGroup\">\r\n                      <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                          currentHeader;\r\n                          context: {\r\n                            activeFilterGroup: activeFilterGroup,\r\n                            filterGroup: filters?.state | iterableObject\r\n                          }\r\n                        \"\r\n                      ></ng-container>\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div role=\"content\" class=\"filterContent\">\r\n                  <div *ngFor=\"let state of filters?.state | iterableObject\">\r\n                    <avl-checkbox name=\"{{ state }}\" [(ngModel)]=\"filters.state[state]\">\r\n                      {{ translationBase + (state | titlecase) | translate }} ({{\r\n                        notificationsCount[state]\r\n                      }})\r\n                    </avl-checkbox>\r\n                    <avl-icon\r\n                      id=\"{{ state }}Icon\"\r\n                      class=\"typeIcons\"\r\n                      icon=\"icons:{{ getIconByType(state) }}\"\r\n                    ></avl-icon>\r\n                  </div>\r\n                </div>\r\n              </avl-list-expander>\r\n              <avl-list-expander\r\n                [open]=\"true\"\r\n                [narrow]=\"true\"\r\n                #filterFormDate=\"ngModelGroup\"\r\n                ngModelGroup=\"date\"\r\n              >\r\n                <div role=\"header\">\r\n                  <h3 id=\"date-group\" #dateGroup>\r\n                    {{ dateFilterGroupHeader }}\r\n                  </h3>\r\n                  <avl-tooltip\r\n                    for=\"date-group\"\r\n                    *ngIf=\"dateGroup.scrollWidth > dateGroup.clientWidth\"\r\n                  >\r\n                    {{ dateFilterGroupHeader }}\r\n                  </avl-tooltip>\r\n                </div>\r\n                <div role=\"content\">\r\n                  <avl-date\r\n                    *ngFor=\"let date of filters?.date | iterableObject\"\r\n                    class=\"date-control\"\r\n                    [(ngModel)]=\"filters.date[date]\"\r\n                    name=\"{{ date }}\"\r\n                    (valueChange)=\"updateLabels()\"\r\n                    [label]=\"translationBase + (date | capitalize) | translate\"\r\n                    [disabledRanges]=\"disabledRange[date]\"\r\n                    #dateEl\r\n                    auto-validate\r\n                    [dateInvalid]=\"dateEl\"\r\n                  ></avl-date>\r\n                </div>\r\n              </avl-list-expander>\r\n              <ng-template #searchBar>\r\n                <avl-search-bar\r\n                  placeholder=\"{{ translationBase + 'Search' | translate }}\"\r\n                  always-open\r\n                  #searchBarElement\r\n                  name=\"search\"\r\n                  [(ngModel)]=\"filters.search\"\r\n                ></avl-search-bar>\r\n              </ng-template>\r\n            </form>\r\n          </div>\r\n          <div slot=\"actions\">\r\n            <avl-button (click)=\"reset()\">{{ translationBase + 'Reset' | translate }}</avl-button>\r\n          </div>\r\n        </avl-side-sheet>\r\n      </div>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n\r\n  <ng-template\r\n    #currentHeader\r\n    let-activeFilterGroup=\"activeFilterGroup\"\r\n    let-filterGroup=\"filterGroup\"\r\n  >\r\n    <span>: </span><span *ngIf=\"activeFilterGroup.length === filterGroup.length\">all</span>\r\n    <span *ngIf=\"activeFilterGroup.length !== filterGroup.length\">\r\n      <span *ngFor=\"let item of activeFilterGroup; index as i\">\r\n        <span>{{ translationBase + (item | titlecase) | translate }}</span>\r\n        <span *ngIf=\"i < activeFilterGroup.length - 1\">, </span>\r\n      </span>\r\n    </span>\r\n  </ng-template>\r\n</avl-dialog>\r\n", styles: [".content{position:relative;display:flex;flex-direction:column;flex-grow:1}.divider{background-color:var(--avl-divider-color)}.divider.vertical{width:1px;height:auto;margin:12px 0}.search-bar-holder{padding:0 9px}form .search-bar-holder{display:block;position:relative;padding:12px 24px 12px 12px}.table-header{display:flex;justify-content:space-between;align-items:center}.table-header-right{display:flex}.main-container{display:flex;height:100%}.main-container.hidden{display:none}.filterDatatable{height:100%}.filter-sheet{--avl-side-sheet-padding:0px;--avl-side-sheet-height:84vh;width:300px}.filter-sheet h2{font-size:20px;margin-left:24px}.filter-sheet h3{font-size:16px;margin:0;text-overflow:ellipsis;overflow:hidden}.pointer{cursor:pointer}#errorIcon{--avl-icon-custom-color:var(--avl-error-color)}#warningIcon{--avl-icon-custom-color:var(--avl-warning-color)}#okIcon{--avl-icon-custom-color:var(--avl-ok-color)}#infoIcon{--avl-icon-custom-color:var(--avl-icon-default-color)}.filterContent{position:relative}.typeIcons{position:absolute;right:0;margin-top:12px;margin-bottom:12px}.date-control{width:100%}avl-dialog-content{--padding-top:1px!important;--padding-right:0px!important;--padding-bottom:2px!important}avl-dialog-header{z-index:1}avl-side-sheet{--avl-side-sheet-height:unset!important;box-shadow:none;border-left:1px solid var(--avl-divider-color)}avl-datatable{--margin-top-pages:0px!important}"], components: [{ type: i1__namespace$2.AvlDialogComponent, selector: "avl-dialog", inputs: ["closeOnScrimClick", "complex", "warningHeaderText", "warningDialogText", "fullscreen", "open", "dirty", "warningOnClose"], outputs: ["openChange"] }, { type: i1__namespace$2.AvlDialogHeaderComponent, selector: "avl-dialog-header" }, { type: i1__namespace$2.AvlDialogContentComponent, selector: "avl-dialog-content" }, { type: i2__namespace.AvlListExpanderComponent, selector: "avl-list-expander", inputs: ["narrow", "open"], outputs: ["openChange"] }], directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i4__namespace.AvlIconButtonDirective, selector: "avl-icon-button", outputs: ["badgeChange", "badgeValueChange"] }, { type: i1__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace.AvlMultiSelectControlDirective, selector: "avl-datatable,avl-list,avl-chip-list, avl-chip-input", outputs: ["selectedIndexesChange", "selectedValuesChange"] }, { type: i4__namespace.AvlSingleSelectControlDirective, selector: "avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box", outputs: ["selectedIndexChange", "selectedValueChange"] }, { type: i4__namespace.AvlDatatableDirective, selector: "avl-datatable", outputs: ["buttonClick", "overflowMenuItemClick", "linkClick", "pageSizeChange", "selectedPageChange"] }, { type: i4__namespace.AvlSideSheetDirective, selector: "avl-side-sheet", outputs: ["openChange"] }, { type: i5__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5__namespace.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i4__namespace.AvlCheckableControlDirective, selector: "avl-checkbox,avl-radio-button, avl-icon-toggle, avl-switch", outputs: ["checkedChange"] }, { type: i4__namespace.AvlFormControlDirective, selector: "avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input", inputs: ["readonly"], outputs: ["invalidChange"] }, { type: i4__namespace.AvlCheckboxDirective, selector: "avl-checkbox", outputs: ["indeterminateChange"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4__namespace.AvlDateDirective, selector: "avl-date", outputs: ["valueChange"] }, { type: DateInvalidValidatorDirective, selector: "[dateInvalid]", inputs: ["dateInvalid"] }, { type: i4__namespace.AvlSearchBarDirective, selector: "avl-search-bar", outputs: ["queryChange", "openChange"] }], pipes: { "translate": i3__namespace.TranslatePipe, "prepareNotifications": PrepareNotificationsPipe, "iterableObject": IterableObjectPipe, "titlecase": i1__namespace.TitleCasePipe, "capitalize": CapitalizePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'avl-notification-dialog',
                        templateUrl: './avl-notification-dialog.component.html',
                        styleUrls: ['./avl-notification-dialog.component.css'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], propDecorators: { open: [{
                    type: i0.Input
                }], pageSizeOptions: [{
                    type: i0.Input
                }], columnDefinitions: [{
                    type: i0.Input
                }], notificationsCount: [{
                    type: i0.Input
                }], refreshBadge: [{
                    type: i0.Input
                }], notifications: [{
                    type: i0.Input
                }], openChange: [{
                    type: i0.Output
                }], filtersChange: [{
                    type: i0.Output
                }], markSelectedAsRead: [{
                    type: i0.Output
                }], markSelectedAsUnread: [{
                    type: i0.Output
                }], tableRefresh: [{
                    type: i0.Output
                }], selectedPageChanged: [{
                    type: i0.Output
                }], pageSizeChanged: [{
                    type: i0.Output
                }], table: [{
                    type: i0.ViewChild,
                    args: ['notificationTable']
                }], filterForm: [{
                    type: i0.ViewChild,
                    args: ['filterForm', { read: i5.NgForm }]
                }] } });

    var componentsAndDirectives = [
        AvlNotificationMenuComponent,
        AvlNotificationContainerComponent,
        SnackbarListener,
        AnimateStack,
        AnimateSnackbar,
        ShowHideSnackbarDirective,
        AnimateButton,
        AvlNotificationDialogComponent,
        PrepareNotificationsPipe,
        CapitalizePipe,
        IterableObjectPipe,
        DateInvalidValidatorDirective
    ];
    var AvlNotificationModule = /** @class */ (function () {
        function AvlNotificationModule() {
        }
        return AvlNotificationModule;
    }());
    AvlNotificationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AvlNotificationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationModule, declarations: [AvlNotificationMenuComponent,
            AvlNotificationContainerComponent,
            SnackbarListener,
            AnimateStack,
            AnimateSnackbar,
            ShowHideSnackbarDirective,
            AnimateButton,
            AvlNotificationDialogComponent,
            PrepareNotificationsPipe,
            CapitalizePipe,
            IterableObjectPipe,
            DateInvalidValidatorDirective], imports: [i1.CommonModule,
            i3.TranslateModule,
            i4.AvlNgBindersModule,
            i1$2.AvlDialogModule,
            i2.AvlNavigationModule,
            i5.FormsModule], exports: [AvlNotificationMenuComponent,
            AvlNotificationContainerComponent,
            AvlNotificationDialogComponent] });
    AvlNotificationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationModule, imports: [[
                i1.CommonModule,
                i3.TranslateModule,
                i4.AvlNgBindersModule,
                i1$2.AvlDialogModule,
                i2.AvlNavigationModule,
                i5.FormsModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0__namespace, type: AvlNotificationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(componentsAndDirectives)),
                        imports: [
                            i1.CommonModule,
                            i3.TranslateModule,
                            i4.AvlNgBindersModule,
                            i1$2.AvlDialogModule,
                            i2.AvlNavigationModule,
                            i5.FormsModule
                        ],
                        schemas: [i0.CUSTOM_ELEMENTS_SCHEMA],
                        exports: [
                            AvlNotificationMenuComponent,
                            AvlNotificationContainerComponent,
                            AvlNotificationDialogComponent
                        ]
                    }]
            }] });

    /*
     * Public API Surface of notification
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AvlNotificationContainerComponent = AvlNotificationContainerComponent;
    exports.AvlNotificationDialogComponent = AvlNotificationDialogComponent;
    exports.AvlNotificationMenuComponent = AvlNotificationMenuComponent;
    exports.AvlNotificationModule = AvlNotificationModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=avl-ng-controls-notification.umd.js.map
