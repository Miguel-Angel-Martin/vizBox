{"version":3,"sources":["ng://@avl-ng-controls/notification/lib/components/avl-notification-menu/avl-notification-menu.consts.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-menu/avl-notification-menu.component.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/directives/animate-button.directive.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/directives/animate-snackbar.directive.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/directives/show-hide-snackbar.directive.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/directives/animate-stack.directive.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/directives/snackbar-listener.directive.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/snackbar-stack.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/avl-notification-container.consts.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-container/avl-notification-container.component.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-dialog/avl-notification-dialog.consts.ts","ng://@avl-ng-controls/notification/lib/components/avl-notification-dialog/avl-notification-dialog.component.ts","ng://@avl-ng-controls/notification/lib/notification.module.ts"],"names":["NOTIFICATIONS_OVERFLOW_MENU","items","label","action","TYPE_ICON_MAPPINGS","_a","AvlNotificationMenuComponent","_this","this","open","openChange","EventEmitter","openDetails","notificationStateChanged","markAllAsRead","markAllAsUnread","overflowMenuItems","notificationList","numberOfUnreadNotifications","overflowMenuHandlers","emit","length","undefined","translateLabels","Object","defineProperty","prototype","notifications","prepareNotifications","filter","notif","read","ngAfterViewInit","list","nativeElement","revertedList","onNotificationStateChanged","event","notificationMenuItem","__assign","detail","value","notification","iconToggleValue","removeFocus","onItemClicked","item","onOpenChanged","__spread","onOverflowMenuClicked","onDetailsClicked","map","messageText","sublabel","formatDateTime","timestamp","icon","type","iconToggleUnchecked","iconToggleChecked","date","AvlLocalizationService","format","translationService","translateMenu","_b","sent","menu","Promise","all","group","__awaiter","__generator","translateMenuGroup","translateMenuItem","translateService","translate","_d","_c","apply","concat","__decorate","Input","HTMLElement","Output","ViewChild","ElementRef","Component","selector","template","AnimateButton","getInfoHeight","infoStackHeight","infoStackIndicatorHeight","getWarningHeight","warningStackHeight","warningStackIndicatorHeight","getOffsetHeight","height","MARGIN","ngOnChanges","changes","infoStackOffsetHeight","warningStackOffsetHeight","styleTop","HostBinding","__decorate$1","Directive","AnimateSnackbar","builder","el","defaultClass","getAnimation","animationName","initialStyle","elementWidth","element","offsetWidth","inStackStyle","style","marginTop","marginLeft","marginRight","width","animate","ANIMATION_DURATION","animateSnackbar","currentValue","previousValue","move","show","metadata","player","destroy","build","create","play","animationMetadata","AnimationBuilder","__decorate$2","SnackbarMethodDescription","method","ShowHideSnackbarDirective","methodDescription","setTimeout","showSnackbar","hideSnackbar","__decorate$3","AnimateStack","allStyle","top","zIndex","animateStack","previousStackHeight","snackbarMethodDescription","left","__decorate$4","SnackbarListener","notificationClicked","buttonClicked","notificationDismissed","onNotificationClicked","onButtonClicked","Event","onNotificationDismissed","HostListener","__decorate$5","SnackbarStack","stackType","activeNotification$","BehaviorSubject","stackIndicator","actionButtonMessage","openNextNotification","reopen","stackAnimation","setStackIndicatorProperties","dismissedSilently","resetValues","previousNotification","notificationsCount","timeout","buttonLabel","setButtonLabel","stackIndicatorButtonLabel","clearTimeout","replace","String","pipe","skipWhile","subscribe","timeout_1","NOTIFICATION_TYPE","Map","AvlNotificationContainerComponent","cdRef","notification$","Observable","subscriber","i","intervalId","setInterval","warning","Math","round","random","next","id","module","Date","toTimeString","link","clearInterval","openMenu","stackHeight","destroyed$","Subject","dismissAll","snackType","target","removeNotification","openFromStack","stackName","getStackName","warningStack","infoStack","handleNotification","push","updateStackActiveNotification","setStackAnimation","getStack","updateStackNotificationList","activeNotification","snackbarAnimation","silentlyDismissNotification","notificationType","stack","animation","currentStack","previousStack","stackName_1","currentNotification","reopenLastNotification","stackNotificationList","isLastNotificationDismissed","lastNotification","get","toLowerCase","ngOnDestroy","complete","ngAfterViewChecked","detectChanges","ngOnInit","positionTop","document","querySelector","offsetTop","takeUntil","previous","ChangeDetectorRef","__decorate$6","DEFAULT_PAGE_SIZE_OPTIONS","Number","MAX_SAFE_INTEGER","DEFAULT_FILTERS","error","info","ok","state","unread","dateFromValue","dateToValue","DEFAULT_COLUMN_DEFINITIONS","LeafColumn","ColumnType","Icon","Text","caption","valueField","sortable","filterable","flexWidth","dateTimeOptions","NOTIFICATION_TYPE_MAPPINGS","_a$1","STATE_ICON_MAPPINGS","false","true","TYPE_ICON_STYLE_MAPPINGS","AvlNotificationDialogComponent","pageSizeOptions","columnDefinitions","markSelectedAsRead","markSelectedAsUnread","tableData","filteredData","badge","disableMarkingSelected","filters","deepCopyObject","filtersOpen","showRefreshButton","dateFromLabel","dateToLabel","dateFilterGroupInitHeader","dateFilterGroupHeader","selectedRows","pageSize","appliedFilters","_notifications","refreshTable","openChanged","toggleFilters","filterData","applyFilters","getActiveFilters","__values","done","doesElementPassEveryFilter","markAsRead","updateStateOfSelectedRowsTo","markAsUnread","reset","updateLabels","setFilters","keys","secondLevelFilter","_e","e_3","_f","selectedValuesChanged","dateFrom","dateTo","getNumberOfNotificationsWithType","data","getNumberOfUnreadNotifications","getNumberOfNotifications","toString","onRowClicked","row","window","__assign$1","iconStyle","currentIconToggle","currentIconToggleStyle","d","object","copiedObject","forEach","key","assign","activeFilters","every","__read$1","prepareDates","getTime","compareDates","includes","dates","setHours","from","to","ts","fromTs","toTs","isRowSelected","__spread$1","translatePageSizeOptions","translateColumns","options","option","__awaiter$2","__generator$2","translatePageSizeOption","rows","column","translateColumnItem","NgForm","__decorate$7","componentsAndDirectives","AvlNotificationModule","__decorate$8","NgModule","declarations","__spread$2","imports","CommonModule","TranslateModule","AvlNgBindersModule","AvlDialogModule","AvlNavigationModule","FormsModule","schemas","CUSTOM_ELEMENTS_SCHEMA","exports"],"mappings":"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","sourcesContent":["import { AvlOverflowMenuGroup } from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu';\r\nimport { AvlNotificationType } from '@avl-controls/interfaces';\r\n\r\nexport const NOTIFICATIONS_OVERFLOW_MENU: AvlOverflowMenuGroup[] = [\r\n  {\r\n    items: [\r\n      {\r\n        label: 'VizBox.NotificationMenu.MarkAllAsRead',\r\n        action: 'markAllAsRead'\r\n      },\r\n      {\r\n        label: 'VizBox.NotificationMenu.MarkAllAsUnread',\r\n        action: 'markAllAsUnread'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const TYPE_ICON_MAPPINGS = {\r\n  [AvlNotificationType.Error]: 'cancel',\r\n  [AvlNotificationType.Warning]: 'warning',\r\n  [AvlNotificationType.Info]: 'info-outline',\r\n  [AvlNotificationType.OK]: 'check'\r\n};\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { AvlList } from '@avl-controls/core/dist/avl-list/avl-list.api';\r\nimport {\r\n  AvlOverflowMenuGroup,\r\n  AvlOverflowMenuItem\r\n} from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu.api';\r\nimport { AvlNotification } from '@avl-controls/interfaces';\r\nimport { AvlNotificationMenuItem } from '../../models/notification-menu.model';\r\nimport { NOTIFICATIONS_OVERFLOW_MENU, TYPE_ICON_MAPPINGS } from './avl-notification-menu.consts';\r\n\r\n@Component({\r\n  selector: 'avl-notification-menu',\r\n  templateUrl: './avl-notification-menu.component.html',\r\n  styleUrls: ['./avl-notification-menu.component.css']\r\n})\r\nexport class AvlNotificationMenuComponent implements AfterViewInit {\r\n  @Input() open: boolean = false;\r\n  @Input() trigger: HTMLElement;\r\n  @Input() \r\n  set notifications(notifications: AvlNotification[]) {\r\n    this.notificationList = this.prepareNotifications(notifications);\r\n    this.numberOfUnreadNotifications = notifications.filter(notif => !notif.read).length;\r\n  }\r\n\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n  @Output() openDetails = new EventEmitter<void>();\r\n  @Output() notificationStateChanged = new EventEmitter<AvlNotification>();\r\n  @Output() markAllAsRead = new EventEmitter<void>();\r\n  @Output() markAllAsUnread = new EventEmitter<void>();\r\n\r\n  @ViewChild('list') list: ElementRef<AvlList>;\r\n\r\n  public overflowMenuItems: AvlOverflowMenuGroup[] = [];\r\n  public notificationList: AvlNotificationMenuItem[] = [];\r\n  public numberOfUnreadNotifications: number = 0;\r\n\r\n  private overflowMenuHandlers: { [key: string]: () => void } = {\r\n    markAllAsRead: () => {\r\n      this.markAllAsRead.emit();\r\n      this.numberOfUnreadNotifications = 0;\r\n    },\r\n    markAllAsUnread: () => {\r\n      this.markAllAsUnread.emit();\r\n      this.numberOfUnreadNotifications = this.notificationList.length;\r\n    },\r\n    undefined: () => {}\r\n  };\r\n\r\n  constructor() {\r\n    this.translateLabels();\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.list.nativeElement.revertedList = true;\r\n  }\r\n\r\n  public onNotificationStateChanged(event: Event): void {\r\n    const notificationMenuItem: AvlNotificationMenuItem = { ...(<CustomEvent>event).detail.value };\r\n    const notification = {\r\n      ...notificationMenuItem,\r\n      read: notificationMenuItem.iconToggleValue\r\n    } as AvlNotification;\r\n    notification.read ? this.numberOfUnreadNotifications-- : this.numberOfUnreadNotifications++;\r\n    this.notificationStateChanged.emit(notification);\r\n\r\n    this.list.nativeElement.removeFocus();\r\n  }\r\n\r\n  public onItemClicked(item: AvlOverflowMenuItem): void {\r\n    this.overflowMenuHandlers[item.action]();\r\n  }\r\n\r\n  public onOpenChanged(event: Event): void {\r\n    if (!(<CustomEvent>event).detail.value) {\r\n      this.openChange.emit(false);\r\n    } else {\r\n      this.notificationList = [...this.notificationList];\r\n    }\r\n  }\r\n\r\n  public onOverflowMenuClicked(): void {\r\n    this.list.nativeElement.removeFocus();\r\n  }\r\n\r\n  public onDetailsClicked(): void {\r\n    this.open = false;\r\n    this.openDetails.emit();\r\n    this.openChange.emit(false);\r\n  }\r\n\r\n  private prepareNotifications(notifications: AvlNotification[]): AvlNotificationMenuItem[] {\r\n    return notifications.map(notification => ({\r\n      ...notification,\r\n      label: notification.messageText,\r\n      sublabel: this.formatDateTime(notification.timestamp),\r\n      icon: TYPE_ICON_MAPPINGS[notification.type],\r\n      iconToggleUnchecked: 'mail',\r\n      iconToggleChecked: 'communication:mail-outline',\r\n      iconToggleValue: notification.read\r\n    }));\r\n  }\r\n\r\n  private formatDateTime(date: Date): string {\r\n    return date === null\r\n      ? ''\r\n      : `${AvlLocalizationService.formatDateTime(date, {\r\n          format: 'date-short'\r\n        })} ${AvlLocalizationService.formatDateTime(date, { format: 'time-long' })}`;\r\n  }\r\n\r\n  private async translateLabels() {\r\n    if (!AvlLocalizationService || !AvlLocalizationService.translationService) {\r\n      return;\r\n    }\r\n\r\n    this.overflowMenuItems = await this.translateMenu(NOTIFICATIONS_OVERFLOW_MENU);\r\n  }\r\n\r\n  private async translateMenu(menu: AvlOverflowMenuGroup[]): Promise<AvlOverflowMenuGroup[]> {\r\n    return await Promise.all(menu.map(async group => await this.translateMenuGroup(group)));\r\n  }\r\n\r\n  private async translateMenuGroup(group: AvlOverflowMenuGroup): Promise<AvlOverflowMenuGroup> {\r\n    return {\r\n      items: await Promise.all(group.items.map(async item => await this.translateMenuItem(item)))\r\n    };\r\n  }\r\n\r\n  private async translateMenuItem(item: AvlOverflowMenuItem): Promise<AvlOverflowMenuItem> {\r\n    const translateService = AvlLocalizationService.translationService;\r\n    return {\r\n      ...item,\r\n      label: await translateService.translate(item.label),\r\n      sublabel: item.sublabel ? await translateService.translate(item.sublabel) : null\r\n    };\r\n  }\r\n}\r\n","import { Directive, Input, HostBinding, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { MARGIN } from '../avl-notification-container.consts';\r\n\r\n@Directive({ selector: '[animateButton]' })\r\nexport class AnimateButton implements OnChanges {\r\n  /** @hidden */\r\n  @Input() increment: number;\r\n\r\n  /** @hidden */\r\n  @Input() infoStackHeight: number;\r\n  /** @hidden */\r\n  @Input() warningStackHeight: number;\r\n  /** @hidden */\r\n  @Input() infoStackIndicatorHeight: number;\r\n  /** @hidden */\r\n  @Input() warningStackIndicatorHeight: number;\r\n\r\n  @HostBinding('style.top') styleTop: string;\r\n\r\n  constructor() {}\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const infoStackOffsetHeight = this.getOffsetHeight(this.getInfoHeight());\r\n    const warningStackOffsetHeight = this.getOffsetHeight(this.getWarningHeight());\r\n    this.styleTop = infoStackOffsetHeight + warningStackOffsetHeight + 'px';\r\n  }\r\n  private getInfoHeight = (): number => {\r\n    return this.infoStackHeight > this.infoStackIndicatorHeight\r\n      ? this.infoStackHeight\r\n      : this.infoStackIndicatorHeight;\r\n  };\r\n  private getWarningHeight = (): number => {\r\n    return this.warningStackHeight > this.warningStackIndicatorHeight\r\n      ? this.warningStackHeight\r\n      : this.warningStackIndicatorHeight;\r\n  };\r\n\r\n  private getOffsetHeight = (height: number): number => {\r\n    return height ? height + MARGIN * 2 : 0;\r\n  };\r\n}\r\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport {\r\n  animate,\r\n  AnimationBuilder,\r\n  AnimationMetadata,\r\n  AnimationPlayer,\r\n  AnimationStyleMetadata,\r\n  style\r\n} from '@angular/animations';\r\nimport { AvlNotification } from '@avl-controls/interfaces';\r\nimport { PositionAnimation } from './animate-stack.directive';\r\nimport { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';\r\n/** @hidden */\r\n\r\n@Directive({ selector: '[animateSnackbar]' })\r\nexport class AnimateSnackbar implements OnChanges {\r\n  /** @hidden */\r\n  @Input() readonly animateSnackbar: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  @Input() readonly positionAnimation: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  @Input('notification') readonly notification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  @Input('reopen') readonly reopen: boolean;\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.in-stack') inStack: boolean;\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.no-animation') noAnimation: boolean;\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.snackbar-container') defaultClass = true;\r\n\r\n  private element: ElementRef;\r\n  private player: AnimationPlayer;\r\n\r\n  constructor(readonly builder: AnimationBuilder, el: ElementRef) {\r\n    this.element = el;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.animateSnackbar) {\r\n      const isInStack = changes.animateSnackbar.currentValue === PositionAnimation.ToStack;\r\n      if (isInStack) {\r\n        this.move();\r\n      } else if (changes.animateSnackbar.previousValue === PositionAnimation.ToStack) {\r\n        this.move();\r\n      }\r\n    }\r\n  }\r\n\r\n  private show(metadata: AnimationMetadata[]) {\r\n    if (this.player) {\r\n      this.player.destroy();\r\n    }\r\n    if (metadata) {\r\n      const factory = this.builder.build(metadata);\r\n      const player = factory.create(this.element.nativeElement);\r\n      player.play();\r\n    }\r\n  }\r\n  private move() {\r\n    const animationMetadata: AnimationMetadata[] = this.animate();\r\n    this.show(animationMetadata);\r\n  }\r\n  private animate(): AnimationMetadata[] {\r\n    const initialStyle = style({\r\n      marginTop: '0',\r\n      width: '100%',\r\n      marginLeft: '0',\r\n      marginRight: '0'\r\n    });\r\n    return this.getAnimation(this.animateSnackbar, initialStyle);\r\n  }\r\n\r\n  private getAnimation = (\r\n    animationName: PositionAnimation,\r\n    initialStyle: AnimationStyleMetadata\r\n  ): AnimationMetadata[] => {\r\n    const elementWidth = this.element.nativeElement.offsetWidth - 3 * MARGIN;\r\n    const inStackStyle = style({\r\n      marginTop: MARGIN + 'px',\r\n      marginLeft: MARGIN + 'px',\r\n      marginRight: MARGIN + 'px',\r\n      width: elementWidth + 'px'\r\n    });\r\n    switch (animationName) {\r\n      case PositionAnimation.FromStack:\r\n        return [animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle), initialStyle];\r\n\r\n      case PositionAnimation.ToStack: {\r\n        return [initialStyle, animate(ANIMATION_DURATION + 'ms ease-in', inStackStyle)];\r\n      }\r\n      default:\r\n        return [initialStyle, animate('1ms ease-in', initialStyle)];\r\n    }\r\n  };\r\n}\r\n","import { Directive, Input, SimpleChanges, OnChanges, ElementRef } from '@angular/core';\r\n\r\n/**@hidden */\r\nexport class SnackbarMethodDescription {\r\n  method: 'show' | 'hide';\r\n  animate: boolean;\r\n\r\n  constructor(method: 'show' | 'hide', animate: boolean) {\r\n    this.method = method;\r\n    this.animate = animate;\r\n  }\r\n}\r\n\r\n@Directive({ selector: '[showHideSnackbar]' })\r\nexport class ShowHideSnackbarDirective implements OnChanges {\r\n  /** @hidden */\r\n  @Input() methodDescription: SnackbarMethodDescription;\r\n  private element: ElementRef;\r\n\r\n  constructor(el: ElementRef) {\r\n    this.element = el;\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.methodDescription) {\r\n      if (changes.methodDescription.currentValue?.method === 'show') {\r\n        setTimeout(\r\n          () =>\r\n            this.element.nativeElement?.showSnackbar(\r\n              'relative',\r\n              !changes.methodDescription.currentValue?.animate\r\n            ),\r\n          0\r\n        );\r\n      } else if (changes.methodDescription.currentValue?.method === 'hide') {\r\n        this.element.nativeElement?.hideSnackbar(changes.methodDescription.currentValue?.animate);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport {\r\n  animate,\r\n  AnimationBuilder,\r\n  AnimationMetadata,\r\n  AnimationPlayer,\r\n  AnimationStyleMetadata,\r\n  style\r\n} from '@angular/animations';\r\nimport { AvlNotification } from '@avl-controls/interfaces';\r\nimport { ANIMATION_DURATION, MARGIN } from '../avl-notification-container.consts';\r\nimport { SnackbarMethodDescription } from './show-hide-snackbar.directive';\r\n/** @hidden */\r\nexport const enum PositionAnimation {\r\n  ToLowerStack,\r\n  ToTop,\r\n  ToBottom,\r\n  ToStack,\r\n  FromStack\r\n}\r\n@Directive({ selector: '[animateStack]' })\r\nexport class AnimateStack implements OnChanges {\r\n  /** @hidden */\r\n  @Input() readonly animateStack: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  @Input() readonly notification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  @Input() readonly previousStackHeight: number;\r\n\r\n  /** @hidden */\r\n  @Input() readonly snackbarMethodDescription: SnackbarMethodDescription;\r\n\r\n  /** @hidden */\r\n  @Input() readonly reopen: boolean;\r\n\r\n  private styleTop: number;\r\n  private element: ElementRef;\r\n  private player: AnimationPlayer;\r\n\r\n  constructor(readonly builder: AnimationBuilder, el: ElementRef) {\r\n    this.element = el;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.animateStack) {\r\n      this.move(this.previousStackHeight);\r\n    } else if (changes.previousStackHeight) {\r\n      this.move(changes?.previousStackHeight.currentValue);\r\n    } else if (changes.snackbarMethodDescription) {\r\n      if (changes.snackbarMethodDescription.currentValue?.method === 'show') {\r\n        this.move(this.previousStackHeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  private show(metadata: AnimationMetadata[]) {\r\n    if (this.player) {\r\n      this.player.destroy();\r\n    }\r\n    if (metadata) {\r\n      const factory = this.builder.build(metadata);\r\n      const player = factory.create(this.element.nativeElement);\r\n      player.play();\r\n    }\r\n  }\r\n  private move(height: number) {\r\n    if (this.animateStack === PositionAnimation.ToBottom) {\r\n      this.styleTop = height + MARGIN * 2;\r\n    }\r\n    const animationMetadata: AnimationMetadata[] = this.animate();\r\n    this.show(animationMetadata);\r\n  }\r\n  private animate(): AnimationMetadata[] {\r\n    const initialStyle = style({\r\n      top: '0',\r\n      width: '100%',\r\n      left: '0',\r\n      zIndex: 1\r\n    });\r\n    return this.getAnimation(this.animateStack, initialStyle);\r\n  }\r\n\r\n  private getAnimation = (\r\n    animationName: PositionAnimation,\r\n    initialStyle: AnimationStyleMetadata\r\n  ): AnimationMetadata[] => {\r\n    const allStyle = style('*');\r\n\r\n    switch (animationName) {\r\n      case PositionAnimation.ToBottom: {\r\n        return [\r\n          allStyle,\r\n          animate(\r\n            ANIMATION_DURATION + 'ms ease-in',\r\n            style({\r\n              top: this.styleTop + 'px',\r\n              zIndex: 0\r\n            })\r\n          )\r\n        ];\r\n      }\r\n      case PositionAnimation.ToTop: {\r\n        return [allStyle, animate(ANIMATION_DURATION + 'ms ease-in', initialStyle)];\r\n      }\r\n      default:\r\n        return [initialStyle, animate('0ms', initialStyle)];\r\n    }\r\n  };\r\n}\r\n","import { Directive, HostListener, Output, EventEmitter } from '@angular/core';\r\n\r\n@Directive({ selector: '[snackbarListener]' })\r\nexport class SnackbarListener {\r\n  /** @hidden */\r\n  @Output() notificationClicked: EventEmitter<Event> = new EventEmitter();\r\n  /** @hidden */\r\n  @Output() buttonClicked: EventEmitter<Event> = new EventEmitter();\r\n  /** @hidden */\r\n  @Output() notificationDismissed: EventEmitter<Event> = new EventEmitter();\r\n  @HostListener('notification-clicked', ['$event']) onNotificationClicked(event: Event) {\r\n    this.notificationClicked.emit(event);\r\n  }\r\n  @HostListener('button-clicked', ['$event']) onButtonClicked(event: Event) {\r\n    if (event instanceof Event) {\r\n        this.buttonClicked.emit(event);\r\n    }\r\n  }\r\n  @HostListener('notification-dismissed', ['$event']) onNotificationDismissed(event: Event) {\r\n    if (event instanceof Event) {\r\n        this.notificationDismissed.emit(event);\r\n    }\r\n  }\r\n}\r\n","import { AvlNotification } from '@avl-controls/interfaces';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { skipWhile } from 'rxjs/operators';\r\nimport { PositionAnimation } from './directives/animate-stack.directive';\r\nimport { ANIMATION_DURATION, ACTION_BUTTON_MESSAGE } from './avl-notification-container.consts';\r\nimport { SnackbarMethodDescription } from './directives/show-hide-snackbar.directive';\r\n\r\n/** @hidden */\r\nexport class SnackbarStack {\r\n  /** @hidden */\r\n  public buttonLabel: string;\r\n\r\n  /** @hidden */\r\n  public notificationList: AvlNotification[] = [];\r\n\r\n  /** @hidden */\r\n  public activeNotification$: BehaviorSubject<AvlNotification> = new BehaviorSubject(undefined);\r\n\r\n  /** @hidden */\r\n  public stackAnimation: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  public snackbarAnimation: PositionAnimation;\r\n\r\n  /** @hidden */\r\n  public stackIndicator = false;\r\n\r\n  /** @hidden */\r\n  public stackIndicatorButtonLabel: string;\r\n\r\n  /** @hidden */\r\n  public previousNotification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  public methodDescription: SnackbarMethodDescription;\r\n  \r\n  /** @hidden */\r\n  public reopen: boolean;\r\n  \r\n  /** @hidden */\r\n  public dismissedSilently: boolean;\r\n\r\n  /** @hidden */\r\n  public actionButtonMessage = ACTION_BUTTON_MESSAGE;\r\n\r\n  constructor(stackType: string) {\r\n    this.translateLabels();\r\n    this.methodDescription = new SnackbarMethodDescription(undefined, undefined)\r\n    this.activeNotification$\r\n      .pipe(skipWhile(notification => notification === undefined))\r\n      .subscribe((notification: AvlNotification) => {\r\n        if (notification) {\r\n          if (this.notificationList.length > 0) {\r\n            const timeout = setTimeout(\r\n              () => {\r\n                this.openNextNotification(stackType);\r\n                clearTimeout(timeout);\r\n              },\r\n              this.previousNotification ? ANIMATION_DURATION : 0\r\n            );\r\n          } else {\r\n            this.openNextNotification(stackType);\r\n          }\r\n        } else {\r\n          this.resetValues();\r\n        }\r\n      });\r\n  }\r\n\r\n  private async translateLabels() {\r\n    if (!AvlLocalizationService || !AvlLocalizationService.translationService) {\r\n      return;\r\n    }\r\n\r\n    const translationService = AvlLocalizationService.translationService;\r\n    this.actionButtonMessage = await translationService.translate('VizBox.NotificationContainer._X_more_TYPE_notifications');\r\n  }\r\n\r\n  private openNextNotification = (stackType): void => {\r\n    this.methodDescription = new SnackbarMethodDescription('show', !this.reopen);\r\n    if (!this.reopen) {\r\n      this.stackAnimation = PositionAnimation.ToTop;\r\n    } else {\r\n      this.stackAnimation = PositionAnimation.FromStack;\r\n    }\r\n    this.setStackIndicatorProperties(stackType);\r\n    this.reopen = false;\r\n    this.dismissedSilently = false;\r\n  };\r\n\r\n  private resetValues = () => {\r\n    this.notificationList = [];\r\n    this.previousNotification = undefined;\r\n    this.stackIndicator = undefined;\r\n  };\r\n  private setStackIndicatorProperties = (stackType: string): void => {\r\n    const notificationsCount = this.notificationList.length;\r\n    this.stackIndicator = notificationsCount > 1;\r\n    const timeout = setTimeout(\r\n      () => {\r\n        this.previousNotification = this.notificationList[notificationsCount-1];\r\n        this.buttonLabel = this.setButtonLabel(notificationsCount, stackType);\r\n        this.stackIndicatorButtonLabel = this.setButtonLabel(notificationsCount - 1, stackType);\r\n        clearTimeout(timeout);\r\n      },\r\n      this.previousNotification ? ANIMATION_DURATION : 0\r\n    );\r\n  };\r\n  private setButtonLabel = (notificationsCount: number, type: string): string => {\r\n    return notificationsCount > 0\r\n      ? this.actionButtonMessage\r\n        .replace('_TYPE ', type === 'info' ? '' : type + ' ')\r\n        .replace('_X', String(notificationsCount))\r\n      : null;\r\n  };\r\n}\r\n","\r\n/** @hidden */\r\nexport const ANIMATION_DURATION = 400;\r\n\r\n/** @hidden */\r\nexport const ACTION_BUTTON_MESSAGE = '_X more _TYPE notifications';\r\n\r\n/** @hidden */\r\nexport const MARGIN = 12;\r\n\r\n\r\n\r\n\r\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport '@avl-controls/core/dist/avl-snackbar/avl-snackbar';\r\nimport { AvlNotification, AvlNotificationType } from '@avl-controls/interfaces';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { SnackbarMethodDescription } from './directives/show-hide-snackbar.directive';\r\nimport { Subject } from 'rxjs';\r\nimport { PositionAnimation } from './directives/animate-stack.directive';\r\nimport { SnackbarStack } from './snackbar-stack';\r\nimport { ANIMATION_DURATION } from './avl-notification-container.consts';\r\n\r\nconst NOTIFICATION_TYPE = new Map<number, string>([\r\n  [AvlNotificationType.Error, 'Error'],\r\n  [AvlNotificationType.Warning, 'Warning'],\r\n  [AvlNotificationType.Info, 'Info'],\r\n  [AvlNotificationType.OK, 'OK']\r\n]);\r\n@Component({\r\n  selector: 'avl-notification-container',\r\n  templateUrl: './avl-notification-container.component.html',\r\n  styleUrls: ['./avl-notification-container.component.css']\r\n})\r\nexport class AvlNotificationContainerComponent implements OnInit, OnDestroy, AfterViewChecked {\r\n  /** @hidden */\r\n  @HostBinding('style.top') positionTop: string;\r\n\r\n  /** @hidden */\r\n  @ViewChild('warningStackElement') warningStackElement: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('infoStackElement') infoStackElement: ElementRef;\r\n \r\n  /** @hidden */\r\n  @ViewChild('infoStackIndicatorElement') infoStackIndicatorElement: ElementRef;\r\n  \r\n  /** @hidden */\r\n  @ViewChild('infoStackIndicatorElement') warningStackIndicatorElement: ElementRef;\r\n\r\n  /** If set optional icon (for info and OK notifications) is displayed, hidden otherwise. */\r\n  @Input('display-icon') public displayIcon: boolean;\r\n\r\n  /** Observable emits notifications. Default observable emits dummy notifications every 3s for 100s. */\r\n  @Input('notification$') public notification$: Observable<AvlNotification> = new Observable(\r\n    function subscribe(subscriber) {\r\n      let i = 0;\r\n      const intervalId = setInterval(() => {\r\n        const warning = Math.round(Math.random());\r\n        subscriber.next({\r\n          id: i++,\r\n          module: 'notification-container',\r\n          timestamp: new Date(),\r\n          type: warning ? AvlNotificationType.Warning : AvlNotificationType.Info,\r\n          messageText: 'Snackbar with notification' + new Date().toTimeString(),\r\n          read: false,\r\n          link: 'https://vizbox.avl.com'\r\n        });\r\n      }, 3000);\r\n\r\n      setTimeout(() => {\r\n        clearInterval(intervalId);\r\n      }, 100000);\r\n    }\r\n  );\r\n\r\n  @Output() openMenu: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** @hidden */\r\n  public warningStack: SnackbarStack;\r\n  /** @hidden */\r\n  public infoStack: SnackbarStack;\r\n\r\n  /** @hidden */\r\n  public previousNotification: AvlNotification;\r\n\r\n  /** @hidden */\r\n  public stackHeight: { [key: string]: number } = {};\r\n\r\n  /** @hidden */\r\n  public reopen: boolean;\r\n\r\n  /** @hidden */\r\n  public notificationList: AvlNotification[] = [];\r\n\r\n  private activeNotification: AvlNotification;\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  constructor(readonly cdRef: ChangeDetectorRef) {\r\n    this.warningStack = new SnackbarStack(\r\n      String(NOTIFICATION_TYPE.get(AvlNotificationType.Warning)).toLowerCase()\r\n    );\r\n\r\n    this.infoStack = new SnackbarStack(\r\n      String(NOTIFICATION_TYPE.get(AvlNotificationType.Info)).toLowerCase()\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /** @hidden */\r\n  public ngOnInit(): void {\r\n    this.positionTop = document.querySelector('main')?.offsetTop + 12 + 'px';\r\n    this.notification$?.pipe(takeUntil(this.destroyed$)).subscribe(notification => {\r\n      this.handleNotification(notification);\r\n    });\r\n  }\r\n\r\n  /** @hidden */\r\n  public onButtonClicked = (event: any): void => {\r\n    if (event) {\r\n      this.openMenu.emit();\r\n      this.dismissAll();\r\n    }\r\n  };\r\n\r\n  /** @hidden */\r\n  public onNotificationDismissed = (event: any, notification: AvlNotification): void => {\r\n    if (event) {\r\n      const snackType = (event.target as HTMLElement)?.id?.replace('Snackbar', '');\r\n      this.removeNotification(notification, snackType);\r\n    }\r\n  };\r\n\r\n  /** @hidden */\r\n  public openFromStack = (notification: AvlNotification): void => {\r\n    const stackName = this.getStackName(notification.type);\r\n    this[stackName].methodDescription = new SnackbarMethodDescription('hide', true);\r\n  };\r\n\r\n  /** @hidden */\r\n  public dismissAll = (): void => {\r\n    this.notificationList = [];\r\n    this.warningStack.activeNotification$.next(undefined);\r\n    this.infoStack.activeNotification$.next(undefined);\r\n  };\r\n\r\n  private handleNotification = (notification: any): void => {\r\n    this.previousNotification = this.notificationList[this.notificationList.length - 1];\r\n    this.notificationList.push(notification);\r\n    this.updateStackActiveNotification(notification);\r\n    this.setStackAnimation(notification.type);\r\n  };\r\n\r\n  private updateStackActiveNotification = (notification: AvlNotification): void => {\r\n    const stackName: string = this.getStack(notification?.type);\r\n    this.updateStackNotificationList(notification.type);\r\n    this.activeNotification = notification;\r\n\r\n    if (this[stackName].notificationList.length > 1) {\r\n      this.reopen = true;\r\n      if (this.previousNotification?.type === notification.type) {\r\n        this[stackName].snackbarAnimation = PositionAnimation.ToStack;\r\n\r\n        // silently dismiss notification after previous notification animation\r\n        const timeout = setTimeout(() => {\r\n          this.silentlyDismissNotification(stackName);\r\n          this[stackName].snackbarAnimation = null;\r\n          clearTimeout(timeout);\r\n        }, ANIMATION_DURATION);\r\n      } else {\r\n        this.silentlyDismissNotification(stackName);\r\n      }\r\n    } else {\r\n      this[stackName].activeNotification$.next(notification);\r\n    }\r\n  };\r\n  private updateStackNotificationList = (\r\n    notificationType: AvlNotificationType\r\n  ): AvlNotification[] => {\r\n    const stack = this[this.getStack(notificationType)];\r\n    if (stack) {\r\n      stack.notificationList = this.notificationList.filter(item => item.type === notificationType);\r\n    }\r\n    return stack.notificationList;\r\n  };\r\n\r\n  private silentlyDismissNotification = (stackName: string): void => {\r\n    this[stackName].dismissedSilently = true;\r\n    this[stackName].methodDescription = new SnackbarMethodDescription('hide', false);\r\n  };\r\n\r\n  private setStackAnimation = (\r\n    notificationType: AvlNotificationType,\r\n    animation?: PositionAnimation\r\n  ): void => {\r\n    const currentStack = this.getStack(notificationType);\r\n    const previousStack = this.getStack(notificationType, true);\r\n\r\n    if (\r\n      this[previousStack]?.notificationList?.length > 0 &&\r\n      this.previousNotification?.type !== notificationType\r\n    ) {\r\n      this[previousStack].stackAnimation = animation || PositionAnimation.ToBottom;\r\n\r\n      this[currentStack].stackAnimation =\r\n        animation === PositionAnimation.ToTop\r\n          ? PositionAnimation.ToBottom\r\n          : PositionAnimation.ToTop;\r\n    }\r\n  };\r\n\r\n  private removeNotification = (notification: AvlNotification, snackType?: string): void => {\r\n    const stackName: string = this.getStack(notification?.type);\r\n    if (this[stackName].dismissedSilently) {\r\n      //notification dismissed silently\r\n      const stackName: string = this.getStack(this.activeNotification?.type);\r\n      this[stackName].activeNotification$.next(this.activeNotification);\r\n      this.reopen = false;\r\n    } else {\r\n      //notification dismissed\r\n      this.notificationList = this.notificationList.filter(\r\n        currentNotification => currentNotification.id !== notification.id\r\n      );\r\n      this.reopenLastNotification(notification, stackName);\r\n    }\r\n  };\r\n\r\n  private reopenLastNotification = (notification: AvlNotification, stackName: string): void => {\r\n    let stackNotificationList: AvlNotification[] = this[stackName]?.notificationList;\r\n    if (\r\n      this.isLastNotificationDismissed(notification, this[stackName]) &&\r\n      stackNotificationList?.length > 0\r\n    ) {\r\n      this[stackName].reopen = true;\r\n\r\n      stackNotificationList = this.updateStackNotificationList(notification.type);\r\n      const lastNotification = stackNotificationList[stackNotificationList.length - 1];\r\n      if (lastNotification) {\r\n        this[stackName].activeNotification$.next(lastNotification);\r\n      } else {\r\n        this[stackName].stackIndicator = false;\r\n        this[stackName].reopen = false;\r\n        this[stackName].animateStack = PositionAnimation.ToBottom;\r\n        this.setStackAnimation(notification.type, PositionAnimation.ToTop);\r\n      }\r\n    }\r\n  };\r\n\r\n  private isLastNotificationDismissed = (\r\n    notification: AvlNotification,\r\n    stack: SnackbarStack\r\n  ): boolean => {\r\n    const lastNotification: AvlNotification =\r\n      stack.notificationList[stack.notificationList.length - 1];\r\n    return lastNotification?.id === notification?.id;\r\n  };\r\n  private getStack(notificationType: number, previous?: boolean): string {\r\n    let stackType: AvlNotificationType;\r\n    if (\r\n      notificationType === AvlNotificationType.Warning ||\r\n      notificationType === AvlNotificationType.Error\r\n    ) {\r\n      stackType = previous ? AvlNotificationType.Info : AvlNotificationType.Warning;\r\n    } else {\r\n      stackType = previous ? AvlNotificationType.Warning : AvlNotificationType.Info;\r\n    }\r\n    return this.getStackName(stackType);\r\n  }\r\n\r\n  private getStackName = (stackType: AvlNotificationType): string => {\r\n    return stackType === 1 ? 'warningStack' : 'infoStack';\r\n  };\r\n}\r\n","import { PageSizeOption } from '@avl-controls/datatable/dist/avl-datatable/avl-datatable';\r\nimport {\r\n  Column,\r\n  ColumnType,\r\n  LeafColumn\r\n} from '@avl-controls/datatable/dist/avl-datatable/column-definitions';\r\nimport { AvlNotificationType } from '@avl-controls/interfaces';\r\n\r\nexport const DEFAULT_PAGE_SIZE_OPTIONS: PageSizeOption[] = [\r\n  { value: 15, label: 'Show 15 per page' },\r\n  { value: 50, label: 'Show 50 per page' },\r\n  { value: Number.MAX_SAFE_INTEGER, label: 'Show all' }\r\n];\r\n\r\nexport const DEFAULT_FILTERS = {\r\n  type: {\r\n    warning: undefined,\r\n    error: undefined,\r\n    info: undefined,\r\n    ok: undefined\r\n  },\r\n  state: {\r\n    read: undefined,\r\n    unread: undefined\r\n  },\r\n  date: {\r\n    dateFromValue: undefined,\r\n    dateToValue: undefined\r\n  }\r\n};\r\n\r\nexport const DEFAULT_COLUMN_DEFINITIONS = [\r\n  new LeafColumn('VizBox.NotificationDialog.Type', 'icon', ColumnType.Icon, false, false, 0.5),\r\n  new LeafColumn('VizBox.NotificationDialog.Module', 'module', ColumnType.Text, true, false, 3),\r\n  new LeafColumn(\r\n    'VizBox.NotificationDialog.Message',\r\n    'messageText',\r\n    ColumnType.Text,\r\n    true,\r\n    false,\r\n    8\r\n  ),\r\n  new LeafColumn('VizBox.NotificationDialog.Id', 'id', ColumnType.Number, false, false, 1),\r\n  <Column>{\r\n    caption: 'VizBox.NotificationDialog.Timestamp',\r\n    valueField: 'timestamp',\r\n    type: ColumnType.Date,\r\n    sortable: false,\r\n    filterable: false,\r\n    flexWidth: 3,\r\n    dateTimeOptions: { format: 'date-time-short' }\r\n  },\r\n  new LeafColumn(\r\n    'VizBox.NotificationDialog.State',\r\n    'currentIconToggle',\r\n    ColumnType.Icon,\r\n    false,\r\n    false,\r\n    1\r\n  )\r\n];\r\n\r\nexport const NOTIFICATION_TYPE_MAPPINGS = {\r\n  [0]: 'error',\r\n  [1]: 'warning',\r\n  [2]: 'info',\r\n  [3]: 'ok',\r\n  false: 'unread',\r\n  true: 'read'\r\n};\r\n\r\nexport const TYPE_ICON_MAPPINGS = {\r\n  [AvlNotificationType.Error]: 'cancel',\r\n  [AvlNotificationType.Warning]: 'warning',\r\n  [AvlNotificationType.Info]: 'info-outline',\r\n  [AvlNotificationType.OK]: 'check'\r\n};\r\n\r\nexport const STATE_ICON_MAPPINGS = {\r\n  false: 'mail',\r\n  true: 'communication:mail-outline'\r\n};\r\n\r\nexport const DEFAULT_ICON_STYLE = 'height:24px; width:24px;';\r\n\r\nexport const TYPE_ICON_STYLE_MAPPINGS = {\r\n  [AvlNotificationType.Error]: `--avl-icon-custom-color: var(--avl-error-color); ${DEFAULT_ICON_STYLE}`,\r\n  [AvlNotificationType.Warning]: `--avl-icon-custom-color: var(--avl-warning-color); ${DEFAULT_ICON_STYLE}`,\r\n  [AvlNotificationType.Info]: `--avl-icon-custom-color: var(--avl-icon-default-color); ${DEFAULT_ICON_STYLE}`,\r\n  [AvlNotificationType.OK]: `--avl-icon-custom-color: var(--avl-ok-color); ${DEFAULT_ICON_STYLE}`\r\n};\r\n\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  ChangeDetectorRef,\r\n  AfterViewChecked\r\n} from '@angular/core';\r\nimport { Column } from '@avl-controls/datatable/dist/avl-datatable/column-definitions';\r\nimport {\r\n  AvlDatatable,\r\n  PageSizeOption\r\n} from '@avl-controls/datatable/dist/avl-datatable/avl-datatable';\r\n\r\nimport { AvlNotification } from '@avl-controls/interfaces';\r\n\r\nimport '@avl-controls/datatable/dist/avl-datatable/avl-datatable';\r\nimport '@avl-controls/core/dist/avl-icon-button/avl-icon-button';\r\nimport '@avl-controls/core/dist/avl-icon/avl-icon';\r\nimport '@avl-controls/core/dist/avl-side-sheet/avl-side-sheet';\r\nimport '@avl-controls/core/dist/avl-checkbox/avl-checkbox';\r\nimport '@avl-controls/core/dist/avl-tooltip/avl-tooltip';\r\nimport '@avl-controls/core/dist/avl-date/avl-date';\r\nimport { AvlNotificationTableItem } from '../../models/notification-dialog.model';\r\nimport {\r\n  DEFAULT_COLUMN_DEFINITIONS,\r\n  DEFAULT_FILTERS,\r\n  DEFAULT_PAGE_SIZE_OPTIONS,\r\n  TYPE_ICON_STYLE_MAPPINGS,\r\n  TYPE_ICON_MAPPINGS,\r\n  STATE_ICON_MAPPINGS,\r\n  NOTIFICATION_TYPE_MAPPINGS,\r\n  DEFAULT_ICON_STYLE\r\n} from './avl-notification-dialog.consts';\r\nimport { NgForm } from '@angular/forms';\r\n@Component({\r\n  selector: 'avl-notification-dialog',\r\n  templateUrl: './avl-notification-dialog.component.html',\r\n  styleUrls: ['./avl-notification-dialog.component.css']\r\n})\r\nexport class AvlNotificationDialogComponent implements OnInit, AfterViewChecked {\r\n  @Input() open: boolean = false;\r\n  @Input() pageSizeOptions: PageSizeOption[] = DEFAULT_PAGE_SIZE_OPTIONS;\r\n  @Input() columnDefinitions: Column[] = DEFAULT_COLUMN_DEFINITIONS;\r\n  @Input()\r\n  get notifications(): AvlNotification[] {\r\n    return this._notifications;\r\n  }\r\n\r\n  set notifications(notifications: AvlNotification[]) {\r\n    if (this._notifications.length === notifications.length) {\r\n      return;\r\n    }\r\n\r\n    this.showRefreshButton = true;\r\n    this._notifications = notifications;\r\n  }\r\n\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() markSelectedAsRead: EventEmitter<any[]> = new EventEmitter<AvlNotification[]>();\r\n  @Output() markSelectedAsUnread: EventEmitter<any[]> = new EventEmitter<AvlNotification[]>();\r\n\r\n  @ViewChild('notificationTable') public table: ElementRef<AvlDatatable>;\r\n  @ViewChild('filterForm', { read: NgForm }) filterForm: NgForm;\r\n\r\n  public tableData: AvlNotificationTableItem[] = [];\r\n  public filteredData: AvlNotificationTableItem[] = [];\r\n  public badge: boolean = false;\r\n  public disableMarkingSelected: boolean = true;\r\n  public filters = this.deepCopyObject(DEFAULT_FILTERS);\r\n  public filtersOpen = true;\r\n  public showRefreshButton = false;\r\n  public dateFromLabel = 'Date from';\r\n  public dateToLabel = 'Date to';\r\n\r\n  private dateFilterGroupInitHeader = 'Date';\r\n  public dateFilterGroupHeader = this.dateFilterGroupInitHeader;\r\n\r\n  //notification datatable options\r\n  public selectedRows: AvlNotificationTableItem[] = [];\r\n  public pageSize = 15;\r\n\r\n  public appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);\r\n\r\n  private _notifications: AvlNotification[] = [];\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) {}\r\n\r\n  public ngOnInit(): void {\r\n    this.translateLabels();\r\n    this.refreshTable();\r\n  }\r\n\r\n  public ngAfterViewChecked(): void {\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /** Emits event when dialog opens or closes */\r\n  public openChanged(open: boolean): void {\r\n    this.openChange.emit(open);\r\n  }\r\n\r\n  /** Toggles displaying of filter sheet */\r\n  public toggleFilters(): void {\r\n    this.filtersOpen = !this.filtersOpen;\r\n  }\r\n\r\n  /** Refreshes the datatable when refresh button is clicked */\r\n  public refreshTable(): void {\r\n    this.showRefreshButton = false;\r\n    this.tableData = this.prepareNotifications(this._notifications);\r\n    this.filters = this.deepCopyObject(this.appliedFilters);\r\n    this.filterData();\r\n  }\r\n\r\n  /**\r\n   * Invoked when clicking apply button - filters data by given filters.\r\n   */\r\n  public applyFilters(): void {\r\n    this.appliedFilters = this.deepCopyObject(this.filters);\r\n    this.filterData();\r\n  }\r\n\r\n  /** Filters notifications according to applied filters */\r\n  public filterData(): void {\r\n    this.filteredData = [];\r\n    const filters = this.getActiveFilters();\r\n    for (const element of this.tableData) {\r\n      if (this.doesElementPassEveryFilter(filters, element)) {\r\n        this.filteredData.push(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Changes selected notification state to read */\r\n  public markAsRead(): void {\r\n    this.updateStateOfSelectedRowsTo(true);\r\n    this.markSelectedAsRead.emit(this.selectedRows);\r\n  }\r\n\r\n  /** Changes selected notification state to unread */\r\n  public markAsUnread(): void {\r\n    this.updateStateOfSelectedRowsTo(false);\r\n    this.markSelectedAsUnread.emit(this.selectedRows);\r\n  }\r\n\r\n  /**\r\n   * Resets all filters.\r\n   */\r\n  public reset(): void {\r\n    this.filters = this.deepCopyObject(DEFAULT_FILTERS);\r\n    this.appliedFilters = this.deepCopyObject(DEFAULT_FILTERS);\r\n    this.filterData();\r\n    this.updateLabels();\r\n    this.badge = false;\r\n  }\r\n\r\n  /** Calculates active filters from filter object */\r\n  public getActiveFilters(): Object {\r\n    this.badge = false;\r\n    const setFilters = {};\r\n    // Mapping applied filters object to better format used for filtering, \r\n    // creates arrays from objects\r\n    for (const item of Object.keys(this.appliedFilters)) {\r\n      const secondLevelFilter = [];\r\n      for (const filter of Object.keys(this.appliedFilters[item])) {\r\n        if (this.appliedFilters[item][filter] === true) {\r\n          secondLevelFilter.push(filter);\r\n          this.badge = true;\r\n        }\r\n      }\r\n\r\n      if (secondLevelFilter.length) {\r\n        setFilters[item] = secondLevelFilter;\r\n      }\r\n\r\n      if (item === 'date') {\r\n        setFilters[item] = [\r\n          this.appliedFilters[item]['dateFromValue'],\r\n          this.appliedFilters[item]['dateToValue']\r\n        ];\r\n      }\r\n    }\r\n    return setFilters;\r\n  }\r\n\r\n  /** Called when selection is applied to the table rows */\r\n  public selectedValuesChanged() {\r\n    this.disableMarkingSelected = false;\r\n    if (this.selectedRows.length == 0) {\r\n      this.disableMarkingSelected = true;\r\n    }\r\n  }\r\n\r\n  /** Updates date filter header labels when date changes */\r\n  public async updateLabels(): Promise<void> {\r\n    const translationService = AvlLocalizationService.translationService;\r\n    const { dateFromValue, dateToValue } = this.filters.date;\r\n    if (!dateFromValue && !dateToValue) {\r\n      this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;\r\n    } else {\r\n      this.dateFilterGroupHeader = await translationService.translate(\r\n        'VizBox.NotificationDialog.DateRange',\r\n        {\r\n          dateFrom: this.formatDateTime(dateFromValue),\r\n          dateTo: this.formatDateTime(dateToValue)\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Calculates number of notifications with specific type */\r\n  public getNumberOfNotificationsWithType(data: AvlNotificationTableItem[], type: string): number {\r\n    return data.filter(element => NOTIFICATION_TYPE_MAPPINGS[element.type] === type).length;\r\n  }\r\n\r\n  /** Calculates number of unread notifications */\r\n  public getNumberOfUnreadNotifications(data: AvlNotificationTableItem[]): number {\r\n    return data.filter(element => !element.state).length;\r\n  }\r\n\r\n  /** Calculates number of notifications currently displayed in datatable */\r\n  public getNumberOfNotifications(): string {\r\n    if (this.filteredData.length === this.tableData.length && !this.badge) {\r\n      return this.filteredData.length.toString();\r\n    } else {\r\n      return `${this.filteredData.length}/${this.tableData.length}`;\r\n    }\r\n  }\r\n\r\n  /** Opens link in new tab when table row is clicked */\r\n  public onRowClicked(event: Event): void {\r\n    const row = (<CustomEvent>event).detail;\r\n    if (row.link) {\r\n      window.open(row.link, '_blank');\r\n    }\r\n  }\r\n\r\n  /** Maps general avl notification list to table specific list */\r\n  private prepareNotifications(notifications: AvlNotification[]): AvlNotificationTableItem[] {\r\n    return notifications.map(notification => ({\r\n      ...notification,\r\n      icon: TYPE_ICON_MAPPINGS[notification.type],\r\n      iconStyle: TYPE_ICON_STYLE_MAPPINGS[notification.type],\r\n      currentIconToggle: STATE_ICON_MAPPINGS[String(notification.read)],\r\n      currentIconToggleStyle: DEFAULT_ICON_STYLE,\r\n      state: notification.read\r\n    }));\r\n  }\r\n\r\n  /** Formats date time to date-short */\r\n  private formatDateTime(d: Date): string {\r\n    return d ? AvlLocalizationService.formatDateTime(d, { format: 'date-short' }) : '(-)';\r\n  }\r\n\r\n  /** Deep copy of filters object */\r\n  private deepCopyObject(object: any): any {\r\n    const copiedObject = {};\r\n    Object.keys(object).forEach(key => {\r\n      copiedObject[key] = Object.assign({}, object[key]);\r\n    });\r\n    return copiedObject;\r\n  }\r\n\r\n  /** Determines if element satisfies filter for every key in this.apppliedFilters */\r\n  private doesElementPassEveryFilter(activeFilters: any, element: any): boolean {\r\n    return Object.keys(activeFilters).every(key => {\r\n      if (key === 'date') {\r\n        const [dateFrom, dateTo] = this.prepareDates(activeFilters[key]);\r\n\r\n        // If dates not set, filter this element as well\r\n        if (!dateFrom.getTime() && !dateTo.getTime()) {\r\n          return true;\r\n        }\r\n\r\n        this.badge = true;\r\n\r\n        // If timestamp is not a Date, don't filter this element\r\n        const timestamp = new Date(element.timestamp);\r\n        if (!timestamp.getTime()) {\r\n          return false;\r\n        }\r\n        return this.compareDates(timestamp, dateFrom, dateTo);\r\n      }\r\n\r\n      return activeFilters[key].includes(NOTIFICATION_TYPE_MAPPINGS[element[key]]);\r\n    });\r\n  }\r\n\r\n  private prepareDates(dates: string[]): [Date, Date] {\r\n    const dateFrom = new Date(dates[0]);\r\n    const dateTo = new Date(dates[1]);\r\n    dateFrom.setHours(0, 0, 0, 0);\r\n    dateTo.setHours(23, 59, 59, 999);\r\n    return [dateFrom, dateTo];\r\n  }\r\n\r\n  private compareDates(timestamp: Date, from: Date, to: Date): boolean {\r\n    const ts = timestamp.getTime();\r\n    const fromTs = from?.getTime();\r\n    const toTs = to?.getTime();\r\n\r\n    if (fromTs && toTs) {\r\n      return ts >= fromTs && ts <= toTs;\r\n    } else if (fromTs) {\r\n      return ts >= fromTs;\r\n    } else if (toTs) {\r\n      return ts <= toTs;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private updateStateOfSelectedRowsTo(state: boolean): void {\r\n    this.tableData\r\n      .filter(notification => this.isRowSelected(notification.id))\r\n      .forEach(notification => {\r\n        notification.state = state;\r\n        notification.currentIconToggle = STATE_ICON_MAPPINGS[String(state)];\r\n      });\r\n    this.tableData = [...this.tableData];\r\n    this.filterData();\r\n  }\r\n\r\n  private isRowSelected(id: number): boolean {\r\n    return this.selectedRows.map(row => row.id).includes(id);\r\n  }\r\n\r\n  // Translations\r\n  private async translateLabels() {\r\n    if (!AvlLocalizationService || !AvlLocalizationService.translationService) {\r\n      return;\r\n    }\r\n\r\n    const translationService = AvlLocalizationService.translationService;\r\n    this.dateFilterGroupInitHeader = await translationService.translate(\r\n      'VizBox.NotificationDialog.Date'\r\n    );\r\n    this.dateFilterGroupHeader = this.dateFilterGroupInitHeader;\r\n    this.dateFromLabel = await translationService.translate('VizBox.NotificationDialog.DateFrom');\r\n    this.dateToLabel = await translationService.translate('VizBox.NotificationDialog.DateTo');\r\n    this.pageSizeOptions = await this.translatePageSizeOptions(this.pageSizeOptions);\r\n    this.columnDefinitions = await this.translateColumns(this.columnDefinitions);\r\n  }\r\n\r\n  private async translatePageSizeOptions(options: PageSizeOption[]): Promise<PageSizeOption[]> {\r\n    return await Promise.all(\r\n      options.map(async option => await this.translatePageSizeOption(option))\r\n    );\r\n  }\r\n\r\n  private async translatePageSizeOption(item: PageSizeOption): Promise<PageSizeOption> {\r\n    const translationService = AvlLocalizationService.translationService;\r\n    return {\r\n      ...item,\r\n      label:\r\n        item.value === Number.MAX_SAFE_INTEGER\r\n          ? await translationService.translate('VizBox.NotificationDialog.ShowAll')\r\n          : await translationService.translate('VizBox.NotificationDialog.ShowXPerPage', {\r\n              rows: item.value\r\n            })\r\n    };\r\n  }\r\n\r\n  private async translateColumns(column: Column[]): Promise<Column[]> {\r\n    return await Promise.all(column.map(async item => await this.translateColumnItem(item)));\r\n  }\r\n\r\n  private async translateColumnItem(item: Column): Promise<Column> {\r\n    const translateService = AvlLocalizationService.translationService;\r\n    return {\r\n      ...item,\r\n      caption: await translateService.translate(item.caption)\r\n    };\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { TranslateModule } from \"@ngx-translate/core\";\r\nimport { AvlNgBindersModule } from '@avl-controls/ng-binders';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AvlNotificationMenuComponent } from './components/avl-notification-menu/avl-notification-menu.component';\r\nimport { AnimateButton } from './components/avl-notification-container/directives/animate-button.directive';\r\nimport { AnimateSnackbar } from './components/avl-notification-container/directives/animate-snackbar.directive';\r\nimport { AnimateStack } from './components/avl-notification-container/directives/animate-stack.directive';\r\nimport { ShowHideSnackbarDirective } from './components/avl-notification-container/directives/show-hide-snackbar.directive';\r\nimport { SnackbarListener } from './components/avl-notification-container/directives/snackbar-listener.directive';\r\nimport { AvlNotificationContainerComponent } from './components/avl-notification-container/avl-notification-container.component';\r\nimport { AvlNotificationDialogComponent } from './components/avl-notification-dialog/avl-notification-dialog.component';\r\n\r\nimport { AvlDialogModule } from '@avl-ng-controls/dialog';\r\nimport { AvlNavigationModule } from '@avl-ng-controls/navigation';\r\n\r\nconst componentsAndDirectives = [\r\n  AvlNotificationMenuComponent,\r\n  AvlNotificationContainerComponent,\r\n  SnackbarListener,\r\n  AnimateStack,\r\n  AnimateSnackbar,\r\n  ShowHideSnackbarDirective,\r\n  AnimateButton,\r\n  AvlNotificationDialogComponent\r\n];\r\n@NgModule({\r\n  declarations: [...componentsAndDirectives],\r\n  imports: [CommonModule, TranslateModule, AvlNgBindersModule, AvlDialogModule, AvlNavigationModule, FormsModule],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  exports: [...componentsAndDirectives]\r\n})\r\nexport class AvlNotificationModule {}\r\n"]}