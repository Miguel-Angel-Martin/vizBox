import { EventEmitter, ContentChild, TemplateRef, ViewChild, ElementRef, Input, HostBinding, Output, HostListener, Component, ViewEncapsulation, Directive, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ConfigurableFocusTrapFactory, A11yModule } from '@angular/cdk/a11y';
import { NgForm, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AvlNgBindersModule } from '@avl-controls/ng-binders';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-button/avl-button';
import { AvlNavigationModule } from '@avl-ng-controls/navigation';

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AvlDialogComponent = /** @class */ (function () {
    function AvlDialogComponent(focusTrap) {
        this.focusTrap = focusTrap;
        this._open = false;
        this._dirty = false;
        this._warningOnClose = false;
        this._warningHeaderText = '';
        this._warningDialogText = '';
        this.openWarning = false;
        /**
         * If true, the dialog can be closed by clicking on scrim
         */
        this.closeOnScrimClick = true;
        /**
         * If true, new dialog can open inside a dialog
         */
        this.complex = false;
        /**
         * When checked, dialog opens in fullscreen mode
         */
        this.fullscreen = false;
        this.openChange = new EventEmitter();
    }
    Object.defineProperty(AvlDialogComponent.prototype, "warningHeaderText", {
        /**
         * Sets the text for warning dialog header.
         */
        get: function () {
            return this._warningHeaderText;
        },
        set: function (value) {
            if (this._warningHeaderText !== value) {
                this._warningHeaderText = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlDialogComponent.prototype, "warningDialogText", {
        /**
         * Sets the main warning dialog text.
         */
        get: function () {
            return this._warningDialogText;
        },
        set: function (value) {
            if (this._warningDialogText !== value) {
                this._warningDialogText = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlDialogComponent.prototype, "open", {
        /**
         * Can be set to open or close the dialog.
         * Returns the current state of the dialog.
         */
        get: function () {
            return this._open;
        },
        set: function (value) {
            if (this._open !== value) {
                this._open = !!value;
                this.openChange.emit(this._open);
                this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlDialogComponent.prototype, "dirty", {
        /**
         * Indicates if the form has been touched.
         * Returns the current value of the attribute.
         */
        get: function () {
            return !!this._dirty;
        },
        set: function (value) {
            if (this._dirty !== value) {
                this._dirty = !!value;
                this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlDialogComponent.prototype, "warningOnClose", {
        /**
         * Can be set to indicate if the warning dialog should be opened.
         * Returns the current value of the attribute.
         */
        get: function () {
            return !!this._warningOnClose;
        },
        set: function (value) {
            if (this._warningOnClose !== value) {
                this._warningOnClose = !!value;
                this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    AvlDialogComponent.prototype.close = function (event) {
        var target = event.target;
        if (this.closeOnScrimClick && target.classList.contains('scrim')) {
            if (this.warningOnClose) {
                if (this.openWarning === false) {
                    this.openWarning = true;
                }
            }
            else {
                if (this.dirty === true) {
                    this.openWarning = true;
                }
                else {
                    this.open = false;
                }
            }
        }
    };
    /**
     * Opens a dialog.
     */
    AvlDialogComponent.prototype.openDialog = function () {
        this.open = true;
    };
    /**
     * Closes a dialog.
     */
    AvlDialogComponent.prototype.closeDialog = function () {
        if (this.warningOnClose || this.dirty) {
            this.openWarning = !this.openWarning;
        }
        else {
            this.open = false;
        }
    };
    /**
     * Closes all dialogs.
     */
    AvlDialogComponent.prototype.closeAllDialogs = function () {
        this.openWarning = false;
        this.open = false;
        this.dirty = false;
    };
    /**
     * Opens a warning dialog.
     */
    AvlDialogComponent.prototype.openWarningDialog = function () {
        this.openWarning = true;
    };
    /**
     * Closes a warning dialog.
     */
    AvlDialogComponent.prototype.closeWarningDialog = function () {
        this.openWarning = false;
    };
    /** @hidden */
    AvlDialogComponent.prototype.keyEvent = function (event) {
        if (event.key === 'Esc' || event.key === 'Escape') {
            this.closeDialog();
        }
    };
    Object.defineProperty(AvlDialogComponent.prototype, "openedClosed", {
        /** @hidden */
        get: function () {
            return this._open;
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden */
    AvlDialogComponent.prototype.ngOnInit = function () {
        if (this.complex != null && this.complex !== false) {
            this.complex = true;
        }
    };
    AvlDialogComponent.ctorParameters = function () { return [
        { type: ConfigurableFocusTrapFactory }
    ]; };
    __decorate([
        ContentChild(TemplateRef),
        __metadata("design:type", TemplateRef)
    ], AvlDialogComponent.prototype, "content", void 0);
    __decorate([
        ViewChild('element', { static: true }),
        __metadata("design:type", ElementRef)
    ], AvlDialogComponent.prototype, "element", void 0);
    __decorate([
        ViewChild('optionForm', { read: NgForm }),
        __metadata("design:type", Object)
    ], AvlDialogComponent.prototype, "optionForm", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], AvlDialogComponent.prototype, "closeOnScrimClick", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], AvlDialogComponent.prototype, "complex", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], AvlDialogComponent.prototype, "warningHeaderText", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], AvlDialogComponent.prototype, "warningDialogText", null);
    __decorate([
        HostBinding('class.fullscreen'),
        Input(),
        __metadata("design:type", Object)
    ], AvlDialogComponent.prototype, "fullscreen", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AvlDialogComponent.prototype, "open", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AvlDialogComponent.prototype, "dirty", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AvlDialogComponent.prototype, "warningOnClose", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AvlDialogComponent.prototype, "openChange", void 0);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], AvlDialogComponent.prototype, "keyEvent", null);
    __decorate([
        HostBinding('class.opened'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], AvlDialogComponent.prototype, "openedClosed", null);
    AvlDialogComponent = __decorate([
        Component({
            selector: 'avl-dialog',
            template: "<div class=\"scrim\" (click)=\"close($event)\">\r\n  <div #element class=\"dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <div *ngIf=\"open; then content\"></div>\r\n  </div>\r\n\r\n  <div *ngIf=\"openWarning\" #element class=\"dialog warning-dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <avl-dialog-header>\r\n      {{ warningHeaderText || 'Warning Header' }}\r\n    </avl-dialog-header>\r\n    <avl-dialog-content class=\"warning\">\r\n      <section class=\"supporting-text\">\r\n        <div class=\"column\">\r\n          <avl-icon icon=\"icons:warning\"></avl-icon>\r\n        </div>\r\n        <div class=\"column\">\r\n          <h3>All changes will be lost if you proceed without saving.</h3>\r\n          <p id=\"customText\">{{ warningDialogText }}</p>\r\n        </div>\r\n      </section>\r\n      <section class=\"warning-buttons\">\r\n        <avl-button contained (click)=\"closeAllDialogs()\">Proceed</avl-button>\r\n        <avl-button (click)=\"closeWarningDialog()\">Cancel</avl-button>\r\n      </section>\r\n    </avl-dialog-content>\r\n  </div>\r\n</div>\r\n",
            encapsulation: ViewEncapsulation.Emulated,
            styles: [":host(){font-family:var(--avl-font-family);--avl-dialog-background-color:var(--avl-background-color);--avl-dialog-header-title-color:var(--avl-foreground-color);--avl-dialog-text-color:var(--avl-emphasis-medium-color);--avl-dialog-close-icon-color:var(--avl-icon-default-color);--avl-dialog-separator-color:var(--avl-divider-color);--avl-dialog-close-icon-ink-pressed-color:var(--avl-ink-default-pressed-color);--avl-dialog-close-icon-ink-focus-color:var(--avl-ink-default-focus-color);--avl-dialog-close-icon-ink-hover-color:var(--avl-ink-default-hover-color);display:none}.supporting-text{display:flex}.column{display:flex;flex-direction:column;flex-wrap:nowrap;align-items:flex-start}.supporting-text p#customText{margin-top:-6px;margin-bottom:11px}.supporting-text h3{font-size:16px;margin-top:7px;font-weight:700}form{margin-bottom:24px;margin-left:24px}.supporting-text avl-icon{width:40px;height:40px;margin-right:15px;margin-top:6px;flex-shrink:0;--avl-icon-custom-color:var(--avl-warning-color)}.warning-buttons{display:flex;justify-content:flex-end;margin-bottom:16px}.warning-buttons>avl-button{margin-top:4px}.warning-buttons>avl-button:last-child{margin-left:-7px}:host(.opened){display:block}.scrim{position:fixed;z-index:50;left:0;top:0;width:100%;height:100%;background-color:var(--avl-scrim-color);display:flex;flex-flow:column nowrap;justify-content:center;align-items:center}.dialog{box-sizing:border-box;height:calc(var(--avl-dialog-height) - 2px);outline:0;display:flex;flex-direction:column;position:absolute;width:var(--avl-dialog-width);min-width:280px;min-height:230px;max-width:calc(100vw - 96px);max-height:calc(100vh - 96px);background-color:var(--avl-dialog-background-color);color:var(--avl-dialog-text-color);box-shadow:var(--avl-box-shadow-24dp);min-width:444px}.warning-dialog{min-height:211px!important}:host(.fullscreen)>div>.dialog{width:100%;height:100%;max-width:100%;max-height:100%}"]
        }),
        __metadata("design:paramtypes", [ConfigurableFocusTrapFactory])
    ], AvlDialogComponent);
    return AvlDialogComponent;
}());

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AvlBaseDialogSection = /** @class */ (function () {
    function AvlBaseDialogSection(dialog) {
        this.dialog = dialog;
        this.isComplex = false;
    }
    /** @hidden */
    AvlBaseDialogSection.prototype.closeDialog = function () {
        this.dialog.closeDialog();
    };
    AvlBaseDialogSection.prototype.ngOnInit = function () {
        this.isComplex = this.dialog.complex;
    };
    AvlBaseDialogSection.ctorParameters = function () { return [
        { type: AvlDialogComponent }
    ]; };
    __decorate$1([
        HostBinding('class.complex'),
        __metadata$1("design:type", Boolean)
    ], AvlBaseDialogSection.prototype, "isComplex", void 0);
    AvlBaseDialogSection = __decorate$1([
        Directive(),
        __metadata$1("design:paramtypes", [AvlDialogComponent])
    ], AvlBaseDialogSection);
    return AvlBaseDialogSection;
}());

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AvlDialogHeaderComponent = /** @class */ (function (_super) {
    __extends(AvlDialogHeaderComponent, _super);
    function AvlDialogHeaderComponent(dialog) {
        var _this = _super.call(this, dialog) || this;
        _this.dialog = dialog;
        _this.extended = false;
        return _this;
    }
    AvlDialogHeaderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        Promise.resolve().then(function () { return _this.extended = !!_this.extendedSlot.nativeElement.childElementCount; });
    };
    AvlDialogHeaderComponent.ctorParameters = function () { return [
        { type: AvlDialogComponent }
    ]; };
    __decorate$2([
        HostBinding('class.extended'),
        __metadata$2("design:type", Object)
    ], AvlDialogHeaderComponent.prototype, "extended", void 0);
    __decorate$2([
        ViewChild('extendedSlot'),
        __metadata$2("design:type", ElementRef)
    ], AvlDialogHeaderComponent.prototype, "extendedSlot", void 0);
    AvlDialogHeaderComponent = __decorate$2([
        Component({
            selector: 'avl-dialog-header',
            template: "<div class=\"title-and-close\">\r\n  <div id=\"headerText\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n  <avl-icon-button icon=\"icons:close\" id=\"closeIcon\" (click)=\"closeDialog()\"></avl-icon-button>\r\n</div>\r\n<avl-tooltip for=\"closeIcon\">close</avl-tooltip>\r\n<div class=\"extended-slot\" #extendedSlot>\r\n  <ng-content select=\"[slot=extended]\"></ng-content>\r\n</div>\r\n",
            styles: [":host{display:block;font-family:var(--avl-font-family);font-size:20px;line-height:22px;box-sizing:border-box;color:var(--avl-dialog-header-title-color)}:host(.complex){border-bottom:1px solid var(--avl-dialog-separator-color)}.title-and-close{display:flex;height:64px;padding:6px 8px 0 24px;box-sizing:border-box;flex-grow:0;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:space-between}:host(.complex) .title-and-close{height:63px;padding-right:6px;padding-top:7px}:host(.extended) .title-and-close{height:48px;padding-top:0}.extended-slot{display:none}:host(.extended) .extended-slot{display:block}#headerText{width:calc(100% - 60px);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}#closeIcon{margin-top:1px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-dialog-close-icon-color);--avl-icon-ink-hover-color:transparent;--avl-icon-ink-focus-color:transparent;--avl-icon-ink-pressed-color:transparent;--avl-icon-button-ink-pressed-color:var(--avl-dialog-close-icon-ink-pressed-color);--avl-icon-button-ink-focus-color:var(--avl-dialog-close-icon-ink-focus-color);--avl-icon-button-ink-hover-color:var(--avl-dialog-close-icon-ink-hover-color)}:host(.extended) #closeIcon{margin-top:0}avl-dialog.fullscreen :host{border:none;box-shadow:var(--avl-box-shadow-4dp)}avl-dialog.fullscreen :host .title-and-close{padding:0 6px}avl-dialog.fullscreen :host #closeIcon{order:-1;margin-left:0}"]
        }),
        __metadata$2("design:paramtypes", [AvlDialogComponent])
    ], AvlDialogHeaderComponent);
    return AvlDialogHeaderComponent;
}(AvlBaseDialogSection));

var __extends$1 = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AvlDialogFooterComponent = /** @class */ (function (_super) {
    __extends$1(AvlDialogFooterComponent, _super);
    function AvlDialogFooterComponent(dialog) {
        var _this = _super.call(this, dialog) || this;
        _this.dialog = dialog;
        return _this;
    }
    AvlDialogFooterComponent.ctorParameters = function () { return [
        { type: AvlDialogComponent }
    ]; };
    AvlDialogFooterComponent = __decorate$3([
        Component({
            selector: 'avl-dialog-footer',
            template: "<ng-content></ng-content>",
            styles: [":host(){display:flex;flex-grow:0;flex-shrink:0;color:var(--avl-primary-text-color);padding:6px 16px 16px 8px;flex-wrap:wrap;align-items:center;justify-content:flex-end;overflow:auto}:host(.complex){border-top:1px solid var(--avl-dialog-separator-color);padding:2px 16px}avl-dialog.fullscreen :host{justify-content:flex-start}"]
        }),
        __metadata$3("design:paramtypes", [AvlDialogComponent])
    ], AvlDialogFooterComponent);
    return AvlDialogFooterComponent;
}(AvlBaseDialogSection));

var __extends$2 = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AvlDialogContentComponent = /** @class */ (function (_super) {
    __extends$2(AvlDialogContentComponent, _super);
    function AvlDialogContentComponent(dialog) {
        var _this = _super.call(this, dialog) || this;
        _this.dialog = dialog;
        return _this;
    }
    AvlDialogContentComponent.ctorParameters = function () { return [
        { type: AvlDialogComponent }
    ]; };
    AvlDialogContentComponent = __decorate$4([
        Component({
            selector: 'avl-dialog-content',
            template: "<ng-content></ng-content>",
            styles: [":host(){flex-grow:1;flex-direction:column;font-size:16px;line-height:21px;color:var(--avl-dialog-text-color);padding-top:0;padding-right:var(--padding-right,24px);padding-bottom:var(--padding-bottom,28px);padding-left:var(--padding-left,24px);overflow:auto}:host(.complex){padding-top:var(--padding-top,8px)}:host(.warning){padding:13px 16px 0 23px}"]
        }),
        __metadata$4("design:paramtypes", [AvlDialogComponent])
    ], AvlDialogContentComponent);
    return AvlDialogContentComponent;
}(AvlBaseDialogSection));

var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AvlAboutDialogComponent = /** @class */ (function () {
    function AvlAboutDialogComponent() {
        this.okButtonLabel = 'OK';
        this._open = false;
        this.openChange = new EventEmitter();
    }
    Object.defineProperty(AvlAboutDialogComponent.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (value) {
            this._open = value;
            this.openChange.emit(this._open);
        },
        enumerable: true,
        configurable: true
    });
    AvlAboutDialogComponent.prototype.closeDialog = function () {
        this.open = false;
    };
    /** @hidden */
    AvlAboutDialogComponent.prototype.openChanged = function (value) {
        this.open = value;
    };
    __decorate$5([
        Input(),
        __metadata$5("design:type", String)
    ], AvlAboutDialogComponent.prototype, "productLogo", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", String)
    ], AvlAboutDialogComponent.prototype, "productName", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", String)
    ], AvlAboutDialogComponent.prototype, "brandPromise", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", Array)
    ], AvlAboutDialogComponent.prototype, "versionInfo", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", String)
    ], AvlAboutDialogComponent.prototype, "legalText", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", String)
    ], AvlAboutDialogComponent.prototype, "additionalInfoLabel", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", String)
    ], AvlAboutDialogComponent.prototype, "additionalInfoUrl", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", String)
    ], AvlAboutDialogComponent.prototype, "copyright", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", Object)
    ], AvlAboutDialogComponent.prototype, "okButtonLabel", void 0);
    __decorate$5([
        Input(),
        __metadata$5("design:type", Boolean),
        __metadata$5("design:paramtypes", [Boolean])
    ], AvlAboutDialogComponent.prototype, "open", null);
    __decorate$5([
        Output(),
        __metadata$5("design:type", Object)
    ], AvlAboutDialogComponent.prototype, "openChange", void 0);
    AvlAboutDialogComponent = __decorate$5([
        Component({
            selector: 'avl-about-dialog',
            template: "<ng-template #aboutContent>\r\n  <div class=\"about-content\">\r\n    <div class=\"images-holder\">\r\n      <div class=\"images-flex-container\">\r\n        <img src=\"{{productLogo}}\" class=\"logo-img\" alt=\"logo\">\r\n        <img src=\"assets/images/avl_logo_112x48.png\" alt=\"Avl logo\" id=\"avl-logo\">\r\n      </div>\r\n    </div>\r\n    <div class=\"product-name\">{{productName}}</div>\r\n    <div class=\"brand-promise\">{{brandPromise}}</div>\r\n    <div class=\"version-info\">\r\n      <div  class=\"version-info-item\" *ngFor=\"let infoLabel of versionInfo\">\r\n        {{infoLabel.label}}: {{infoLabel.value}}\r\n      </div>\r\n    </div>\r\n    <div class=\"legal-text\">{{legalText}}</div>\r\n    <div class=\"additional-info\">\r\n      <a href=\"{{additionalInfoUrl}}\" target=\"_blank\" rel=\"noopener noreferrer\">{{additionalInfoLabel}}</a>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"bottom-group\">\r\n      <div class=\"bottom-group-flex-container\">\r\n        <div class=\"copyright\">{{copyright}}</div>\r\n        <avl-button (click)=\"closeDialog()\" contained>{{ okButtonLabel }}</avl-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </ng-template> \r\n\r\n<avl-dialog [(open)]=\"open\" (openChange)=\"openChanged($event)\">\r\n  <ng-template #content>\r\n    <avl-dialog-content>\r\n      <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n\r\n<div *ngIf=\"open\" class=\"full-screen-about\">\r\n  <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n</div>\r\n",
            styles: [":host(){font-family:var(--avl-font-family);--avl-about-dialog-foreground-color:var(--avl-corporate-foreground-color);--avl-about-dialog-foreground-medium-color:var(--avl-corporate-foreground-medium-color);--avl-about-dialog-link-color:var(--avl-corporate-link-color);--avl-about-dialog-link-hover-color:var(--avl-corporate-link-hover-color);--avl-about-dialog-on-button-background-color:var(--avl-corporate-on-button-background-color);--avl-about-dialog-button-background-color:var(--avl-corporate-button-background-color);--avl-about-dialog-button-background-hover-color:var(--avl-corporate-button-background-hover-color);--avl-about-dialog-button-background-focus-color:var(--avl-corporate-button-background-focus-color);--avl-about-dialog-button-background-pressed-color:var(--avl-corporate-button-background-pressed-color);--dialog-padding:48px;--product-logo-size:148px;--product-name-font-size:34px;--margin-above-button-and-copyright:16px;--margin-above-additional-info:8px;--distance-between-version-info-items:8px}@media (max-width:960px) and (min-width:400px){:host(){--dialog-padding:24px;--margin-above-button-and-copyright:24px}}@media (max-width:400px){:host(){--dialog-padding:16px;--product-logo-size:64px;--product-name-font-size:24px;--distance-to-link-for-additional-info:24px;--margin-above-additional-info:4px;--distance-between-version-info-items:4px}}.full-screen-about{display:none;position:fixed;top:0;left:0;bottom:0;right:0;overflow:auto;z-index:3000}@media (max-width:864px){avl-dialog{display:none}.full-screen-about{display:block}}avl-dialog{--avl-dialog-width:768px;--avl-dialog-text-color:var(--avl-about-dialog-foreground-medium-color);--avl-dialog-background-color:rgba(46, 46, 46, 1)}.about-content{display:flex;flex-direction:column;justify-content:flex-start;padding:var(--dialog-padding);box-sizing:border-box;width:100%;height:100%;font-size:14px;line-height:19px;background-color:#2e2e2e;overflow:auto}avl-dialog-content{padding:0}.logo-img{height:var(--product-logo-size);width:auto}.product-name{font-size:var(--product-name-font-size);line-height:1;margin-top:24px;color:var(--avl-about-dialog-foreground-color)}.brand-promise{font-size:16px;line-height:1;margin-top:8px;color:var(--avl-about-dialog-foreground-color)}.version-info{margin-top:24px;color:rgba(255,255,255,.7)}.version-info-item{margin-bottom:var(--distance-between-version-info-items)}.version-info-item:last-child{margin-bottom:0}.legal-text{margin-top:24px;color:var(--avl-about-dialog-foreground-color)}.additional-info{margin-top:var(--margin-above-additional-info);color:var(--avl-corporate-link)}.additional-info:hover{color:var(--avl-corporate-link-hover)}.copyright{color:var(--avl-about-dialog-foreground-color);display:inline-block}avl-button{--avl-button-label-color:var(--avl-about-dialog-on-button-background-color);--avl-button-background-default-color:var(--avl-about-dialog-button-background-color);--avl-button-background-hover-color:var(--avl-about-dialog-button-background-hover-color);--avl-button-background-focus-color:var(--avl-about-dialog-button-background-focus-color);--avl-button-background-pressed-color:var(--avl-about-dialog-button-background-pressed-color);font-size:14px;margin:-8px;margin-left:calc(48px - 8px)}#avl-logo{margin-right:calc(-1 * var(--dialog-padding));height:48px;width:112px;align-self:flex-start}.images-flex-container{display:flex;justify-content:space-between}.spacer{flex-grow:1}.bottom-group{margin-top:var(--margin-above-button-and-copyright)}.bottom-group-flex-container{display:flex;justify-content:space-between;align-items:flex-end}"]
        }),
        __metadata$5("design:paramtypes", [])
    ], AvlAboutDialogComponent);
    return AvlAboutDialogComponent;
}());

var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var componentsAndDirectives = [
    AvlDialogComponent,
    AvlDialogHeaderComponent,
    AvlDialogFooterComponent,
    AvlDialogContentComponent,
    AvlAboutDialogComponent,
];
var providers = [];
var AvlDialogModule = /** @class */ (function () {
    function AvlDialogModule() {
    }
    AvlDialogModule = __decorate$6([
        NgModule({
            imports: [
                CommonModule,
                AvlNgBindersModule,
                AvlNavigationModule,
                A11yModule,
                FormsModule,
                ReactiveFormsModule
            ],
            declarations: componentsAndDirectives,
            providers: providers,
            schemas: [
                CUSTOM_ELEMENTS_SCHEMA
            ],
            exports: componentsAndDirectives
        })
    ], AvlDialogModule);
    return AvlDialogModule;
}());

/**
 * Can't put .ts file as index in package.json.
 * Hello, this is proxy.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AvlAboutDialogComponent, AvlDialogComponent, AvlDialogContentComponent, AvlDialogFooterComponent, AvlDialogHeaderComponent, AvlDialogModule, AvlBaseDialogSection as ɵa };
//# sourceMappingURL=avl-ng-controls-dialog.js.map
