import { EventEmitter, ContentChild, TemplateRef, ViewChild, ElementRef, Input, HostBinding, Output, HostListener, Component, ViewEncapsulation, Directive, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ConfigurableFocusTrapFactory, A11yModule } from '@angular/cdk/a11y';
import { NgForm, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AvlNgBindersModule } from '@avl-controls/ng-binders';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import '@avl-controls/core/dist/avl-button/avl-button';
import { AvlNavigationModule } from '@avl-ng-controls/navigation';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@avl-controls/ng-binders';

const _c0 = ["element"];
const _c1 = ["optionForm"];
function AvlDialogComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div");
} }
function AvlDialogComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5, 2);
    ɵngcc0.ɵɵelementStart(2, "avl-dialog-header");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "avl-dialog-content", 6);
    ɵngcc0.ɵɵelementStart(5, "section", 7);
    ɵngcc0.ɵɵelementStart(6, "div", 8);
    ɵngcc0.ɵɵelement(7, "avl-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 8);
    ɵngcc0.ɵɵelementStart(9, "h3");
    ɵngcc0.ɵɵtext(10, "All changes will be lost if you proceed without saving.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "p", 10);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "section", 11);
    ɵngcc0.ɵɵelementStart(14, "avl-button", 12);
    ɵngcc0.ɵɵlistener("click", function AvlDialogComponent_div_4_Template_avl_button_click_14_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.closeAllDialogs(); });
    ɵngcc0.ɵɵtext(15, "Proceed");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "avl-button", 13);
    ɵngcc0.ɵɵlistener("click", function AvlDialogComponent_div_4_Template_avl_button_click_16_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.closeWarningDialog(); });
    ɵngcc0.ɵɵtext(17, "Cancel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("complex", ctx_r2.complex);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.warningHeaderText || "Warning Header", " ");
    ɵngcc0.ɵɵadvance(9);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.warningDialogText);
} }
const _c2 = ["extendedSlot"];
const _c3 = ["*", [["", "slot", "extended"]]];
const _c4 = ["*", "[slot=extended]"];
const _c5 = ["*"];
function AvlAboutDialogComponent_ng_template_0_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const infoLabel_r6 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", infoLabel_r6.label, ": ", infoLabel_r6.value, " ");
} }
function AvlAboutDialogComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "div", 6);
    ɵngcc0.ɵɵelement(3, "img", 7);
    ɵngcc0.ɵɵelement(4, "img", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 9);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 10);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 11);
    ɵngcc0.ɵɵtemplate(10, AvlAboutDialogComponent_ng_template_0_div_10_Template, 2, 2, "div", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 13);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "div", 14);
    ɵngcc0.ɵɵelementStart(14, "a", 15);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(16, "div", 16);
    ɵngcc0.ɵɵelementStart(17, "div", 17);
    ɵngcc0.ɵɵelementStart(18, "div", 18);
    ɵngcc0.ɵɵelementStart(19, "div", 19);
    ɵngcc0.ɵɵtext(20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "avl-button", 20);
    ɵngcc0.ɵɵlistener("click", function AvlAboutDialogComponent_ng_template_0_Template_avl_button_click_21_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.closeDialog(); });
    ɵngcc0.ɵɵtext(22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("src", ctx_r1.productLogo, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.productName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.brandPromise);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.versionInfo);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.legalText);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("href", ctx_r1.additionalInfoUrl, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.additionalInfoLabel);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.copyright);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.okButtonLabel);
} }
function AvlAboutDialogComponent_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function AvlAboutDialogComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "avl-dialog-content");
    ɵngcc0.ɵɵtemplate(1, AvlAboutDialogComponent_ng_template_3_ng_container_1_Template, 1, 0, "ng-container", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
function AvlAboutDialogComponent_div_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function AvlAboutDialogComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵtemplate(1, AvlAboutDialogComponent_div_5_ng_container_1_Template, 1, 0, "ng-container", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let AvlDialogComponent = class AvlDialogComponent {
    constructor(focusTrap) {
        this.focusTrap = focusTrap;
        this._open = false;
        this._dirty = false;
        this._warningOnClose = false;
        this._warningHeaderText = '';
        this._warningDialogText = '';
        this.openWarning = false;
        /**
         * If true, the dialog can be closed by clicking on scrim
         */
        this.closeOnScrimClick = true;
        /**
         * If true, new dialog can open inside a dialog
         */
        this.complex = false;
        /**
         * When checked, dialog opens in fullscreen mode
         */
        this.fullscreen = false;
        this.openChange = new EventEmitter();
    }
    /**
     * Sets the text for warning dialog header.
     */
    get warningHeaderText() {
        return this._warningHeaderText;
    }
    set warningHeaderText(value) {
        if (this._warningHeaderText !== value) {
            this._warningHeaderText = value;
        }
    }
    /**
     * Sets the main warning dialog text.
     */
    get warningDialogText() {
        return this._warningDialogText;
    }
    set warningDialogText(value) {
        if (this._warningDialogText !== value) {
            this._warningDialogText = value;
        }
    }
    /**
     * Can be set to open or close the dialog.
     * Returns the current state of the dialog.
     */
    get open() {
        return this._open;
    }
    set open(value) {
        if (this._open !== value) {
            this._open = !!value;
            this.openChange.emit(this._open);
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /**
     * Indicates if the form has been touched.
     * Returns the current value of the attribute.
     */
    get dirty() {
        return !!this._dirty;
    }
    set dirty(value) {
        if (this._dirty !== value) {
            this._dirty = !!value;
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /**
     * Can be set to indicate if the warning dialog should be opened.
     * Returns the current value of the attribute.
     */
    get warningOnClose() {
        return !!this._warningOnClose;
    }
    set warningOnClose(value) {
        if (this._warningOnClose !== value) {
            this._warningOnClose = !!value;
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /** @hidden */
    close(event) {
        const target = event.target;
        if (this.closeOnScrimClick && target.classList.contains('scrim')) {
            if (this.warningOnClose) {
                if (this.openWarning === false) {
                    this.openWarning = true;
                }
            }
            else {
                if (this.dirty === true) {
                    this.openWarning = true;
                }
                else {
                    this.open = false;
                }
            }
        }
    }
    /**
     * Opens a dialog.
     */
    openDialog() {
        this.open = true;
    }
    /**
     * Closes a dialog.
     */
    closeDialog() {
        if (this.warningOnClose || this.dirty) {
            this.openWarning = !this.openWarning;
        }
        else {
            this.open = false;
        }
    }
    /**
     * Closes all dialogs.
     */
    closeAllDialogs() {
        this.openWarning = false;
        this.open = false;
        this.dirty = false;
    }
    /**
     * Opens a warning dialog.
     */
    openWarningDialog() {
        this.openWarning = true;
    }
    /**
     * Closes a warning dialog.
     */
    closeWarningDialog() {
        this.openWarning = false;
    }
    /** @hidden */
    keyEvent(event) {
        if (event.key === 'Esc' || event.key === 'Escape') {
            this.closeDialog();
        }
    }
    /** @hidden */
    get openedClosed() {
        return this._open;
    }
    /** @hidden */
    ngOnInit() {
        if (this.complex != null && this.complex !== false) {
            this.complex = true;
        }
    }
};
AvlDialogComponent.ɵfac = function AvlDialogComponent_Factory(t) { return new (t || AvlDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ConfigurableFocusTrapFactory)); };
AvlDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlDialogComponent, selectors: [["avl-dialog"]], contentQueries: function AvlDialogComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, viewQuery: function AvlDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true, NgForm);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.element = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionForm = _t.first);
    } }, hostVars: 4, hostBindings: function AvlDialogComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function AvlDialogComponent_keydown_HostBindingHandler($event) { return ctx.keyEvent($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("fullscreen", ctx.fullscreen)("opened", ctx.openedClosed);
    } }, inputs: { closeOnScrimClick: "closeOnScrimClick", complex: "complex", fullscreen: "fullscreen", warningHeaderText: "warningHeaderText", warningDialogText: "warningDialogText", open: "open", dirty: "dirty", warningOnClose: "warningOnClose" }, outputs: { openChange: "openChange" }, decls: 5, vars: 5, consts: [[1, "scrim", 3, "click"], ["tabindex", "0", 1, "dialog"], ["element", ""], [4, "ngIf", "ngIfThen"], ["class", "dialog warning-dialog", "tabindex", "0", 3, "complex", 4, "ngIf"], ["tabindex", "0", 1, "dialog", "warning-dialog"], [1, "warning"], [1, "supporting-text"], [1, "column"], ["icon", "icons:warning"], ["id", "customText"], [1, "warning-buttons"], ["contained", "", 3, "click"], [3, "click"]], template: function AvlDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function AvlDialogComponent_Template_div_click_0_listener($event) { return ctx.close($event); });
        ɵngcc0.ɵɵelementStart(1, "div", 1, 2);
        ɵngcc0.ɵɵtemplate(3, AvlDialogComponent_div_3_Template, 1, 0, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, AvlDialogComponent_div_4_Template, 18, 4, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("complex", ctx.complex);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.open)("ngIfThen", ctx.content);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.openWarning);
    } }, directives: function () { return [ɵngcc2.NgIf, AvlDialogHeaderComponent,
        AvlDialogContentComponent, ɵngcc3.AvlInteractionControlDirective]; }, styles: ["[_nghost-%COMP%]{font-family:var(--avl-font-family);--avl-dialog-background-color:var(--avl-background-color);--avl-dialog-header-title-color:var(--avl-foreground-color);--avl-dialog-text-color:var(--avl-emphasis-medium-color);--avl-dialog-close-icon-color:var(--avl-icon-default-color);--avl-dialog-separator-color:var(--avl-divider-color);--avl-dialog-close-icon-ink-pressed-color:var(--avl-ink-default-pressed-color);--avl-dialog-close-icon-ink-focus-color:var(--avl-ink-default-focus-color);--avl-dialog-close-icon-ink-hover-color:var(--avl-ink-default-hover-color);display:none}.supporting-text[_ngcontent-%COMP%]{display:flex}.column[_ngcontent-%COMP%]{display:flex;flex-direction:column;flex-wrap:nowrap;align-items:flex-start}.supporting-text[_ngcontent-%COMP%]   p#customText[_ngcontent-%COMP%]{margin-top:-6px;margin-bottom:11px}.supporting-text[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:16px;margin-top:7px;font-weight:700}form[_ngcontent-%COMP%]{margin-bottom:24px;margin-left:24px}.supporting-text[_ngcontent-%COMP%]   avl-icon[_ngcontent-%COMP%]{width:40px;height:40px;margin-right:15px;margin-top:6px;flex-shrink:0;--avl-icon-custom-color:var(--avl-warning-color)}.warning-buttons[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;margin-bottom:16px}.warning-buttons[_ngcontent-%COMP%] > avl-button[_ngcontent-%COMP%]{margin-top:4px}.warning-buttons[_ngcontent-%COMP%] > avl-button[_ngcontent-%COMP%]:last-child{margin-left:-7px}.opened[_nghost-%COMP%]{display:block}.scrim[_ngcontent-%COMP%]{position:fixed;z-index:50;left:0;top:0;width:100%;height:100%;background-color:var(--avl-scrim-color);display:flex;flex-flow:column nowrap;justify-content:center;align-items:center}.dialog[_ngcontent-%COMP%]{box-sizing:border-box;height:calc(var(--avl-dialog-height) - 2px);outline:0;display:flex;flex-direction:column;position:absolute;width:var(--avl-dialog-width);min-width:280px;min-height:230px;max-width:calc(100vw - 96px);max-height:calc(100vh - 96px);background-color:var(--avl-dialog-background-color);color:var(--avl-dialog-text-color);box-shadow:var(--avl-box-shadow-24dp);min-width:444px}.warning-dialog[_ngcontent-%COMP%]{min-height:211px!important}.fullscreen[_nghost-%COMP%] > div[_ngcontent-%COMP%] > .dialog[_ngcontent-%COMP%]{width:100%;height:100%;max-width:100%;max-height:100%}"] });
AvlDialogComponent.ctorParameters = () => [
    { type: ConfigurableFocusTrapFactory }
];
__decorate([
    ContentChild(TemplateRef),
    __metadata("design:type", TemplateRef)
], AvlDialogComponent.prototype, "content", void 0);
__decorate([
    ViewChild('element', { static: true }),
    __metadata("design:type", ElementRef)
], AvlDialogComponent.prototype, "element", void 0);
__decorate([
    ViewChild('optionForm', { read: NgForm }),
    __metadata("design:type", Object)
], AvlDialogComponent.prototype, "optionForm", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AvlDialogComponent.prototype, "closeOnScrimClick", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AvlDialogComponent.prototype, "complex", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], AvlDialogComponent.prototype, "warningHeaderText", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], AvlDialogComponent.prototype, "warningDialogText", null);
__decorate([
    HostBinding('class.fullscreen'),
    Input(),
    __metadata("design:type", Object)
], AvlDialogComponent.prototype, "fullscreen", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AvlDialogComponent.prototype, "open", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AvlDialogComponent.prototype, "dirty", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AvlDialogComponent.prototype, "warningOnClose", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlDialogComponent.prototype, "openChange", void 0);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], AvlDialogComponent.prototype, "keyEvent", null);
__decorate([
    HostBinding('class.opened'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], AvlDialogComponent.prototype, "openedClosed", null);
AvlDialogComponent = __decorate([ __metadata("design:paramtypes", [ConfigurableFocusTrapFactory])
], AvlDialogComponent);

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let AvlBaseDialogSection = class AvlBaseDialogSection {
    constructor(dialog) {
        this.dialog = dialog;
        this.isComplex = false;
    }
    /** @hidden */
    closeDialog() {
        this.dialog.closeDialog();
    }
    ngOnInit() {
        this.isComplex = this.dialog.complex;
    }
};
AvlBaseDialogSection.ɵfac = function AvlBaseDialogSection_Factory(t) { return new (t || AvlBaseDialogSection)(ɵngcc0.ɵɵdirectiveInject(AvlDialogComponent)); };
AvlBaseDialogSection.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlBaseDialogSection, hostVars: 2, hostBindings: function AvlBaseDialogSection_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("complex", ctx.isComplex);
    } } });
AvlBaseDialogSection.ctorParameters = () => [
    { type: AvlDialogComponent }
];
__decorate$1([
    HostBinding('class.complex'),
    __metadata$1("design:type", Boolean)
], AvlBaseDialogSection.prototype, "isComplex", void 0);
AvlBaseDialogSection = __decorate$1([ __metadata$1("design:paramtypes", [AvlDialogComponent])
], AvlBaseDialogSection);

var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let AvlDialogHeaderComponent = class AvlDialogHeaderComponent extends AvlBaseDialogSection {
    constructor(dialog) {
        super(dialog);
        this.dialog = dialog;
        this.extended = false;
    }
    ngAfterViewInit() {
        Promise.resolve().then(() => this.extended = !!this.extendedSlot.nativeElement.childElementCount);
    }
};
AvlDialogHeaderComponent.ɵfac = function AvlDialogHeaderComponent_Factory(t) { return new (t || AvlDialogHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(AvlDialogComponent)); };
AvlDialogHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlDialogHeaderComponent, selectors: [["avl-dialog-header"]], viewQuery: function AvlDialogHeaderComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.extendedSlot = _t.first);
    } }, hostVars: 2, hostBindings: function AvlDialogHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("extended", ctx.extended);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 9, vars: 0, consts: [[1, "title-and-close"], ["id", "headerText"], ["icon", "icons:close", "id", "closeIcon", 3, "click"], ["for", "closeIcon"], [1, "extended-slot"], ["extendedSlot", ""]], template: function AvlDialogHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c3);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "avl-icon-button", 2);
        ɵngcc0.ɵɵlistener("click", function AvlDialogHeaderComponent_Template_avl_icon_button_click_3_listener() { return ctx.closeDialog(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "avl-tooltip", 3);
        ɵngcc0.ɵɵtext(5, "close");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4, 5);
        ɵngcc0.ɵɵprojection(8, 1);
        ɵngcc0.ɵɵelementEnd();
    } }, directives: [ɵngcc3.AvlInteractionControlDirective, ɵngcc3.AvlIconButtonDirective], styles: ["[_nghost-%COMP%]{display:block;font-family:var(--avl-font-family);font-size:20px;line-height:22px;box-sizing:border-box;color:var(--avl-dialog-header-title-color)}.complex[_nghost-%COMP%]{border-bottom:1px solid var(--avl-dialog-separator-color)}.title-and-close[_ngcontent-%COMP%]{display:flex;height:64px;padding:6px 8px 0 24px;box-sizing:border-box;flex-grow:0;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:space-between}.complex[_nghost-%COMP%]   .title-and-close[_ngcontent-%COMP%]{height:63px;padding-right:6px;padding-top:7px}.extended[_nghost-%COMP%]   .title-and-close[_ngcontent-%COMP%]{height:48px;padding-top:0}.extended-slot[_ngcontent-%COMP%]{display:none}.extended[_nghost-%COMP%]   .extended-slot[_ngcontent-%COMP%]{display:block}#headerText[_ngcontent-%COMP%]{width:calc(100% - 60px);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}#closeIcon[_ngcontent-%COMP%]{margin-top:1px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-dialog-close-icon-color);--avl-icon-ink-hover-color:transparent;--avl-icon-ink-focus-color:transparent;--avl-icon-ink-pressed-color:transparent;--avl-icon-button-ink-pressed-color:var(--avl-dialog-close-icon-ink-pressed-color);--avl-icon-button-ink-focus-color:var(--avl-dialog-close-icon-ink-focus-color);--avl-icon-button-ink-hover-color:var(--avl-dialog-close-icon-ink-hover-color)}.extended[_nghost-%COMP%]   #closeIcon[_ngcontent-%COMP%]{margin-top:0}avl-dialog.fullscreen   [_nghost-%COMP%]{border:none;box-shadow:var(--avl-box-shadow-4dp)}avl-dialog.fullscreen   [_nghost-%COMP%]   .title-and-close[_ngcontent-%COMP%]{padding:0 6px}avl-dialog.fullscreen   [_nghost-%COMP%]   #closeIcon[_ngcontent-%COMP%]{order:-1;margin-left:0}"] });
AvlDialogHeaderComponent.ctorParameters = () => [
    { type: AvlDialogComponent }
];
__decorate$2([
    HostBinding('class.extended'),
    __metadata$2("design:type", Object)
], AvlDialogHeaderComponent.prototype, "extended", void 0);
__decorate$2([
    ViewChild('extendedSlot'),
    __metadata$2("design:type", ElementRef)
], AvlDialogHeaderComponent.prototype, "extendedSlot", void 0);
AvlDialogHeaderComponent = __decorate$2([ __metadata$2("design:paramtypes", [AvlDialogComponent])
], AvlDialogHeaderComponent);

var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let AvlDialogFooterComponent = class AvlDialogFooterComponent extends AvlBaseDialogSection {
    constructor(dialog) {
        super(dialog);
        this.dialog = dialog;
    }
};
AvlDialogFooterComponent.ɵfac = function AvlDialogFooterComponent_Factory(t) { return new (t || AvlDialogFooterComponent)(ɵngcc0.ɵɵdirectiveInject(AvlDialogComponent)); };
AvlDialogFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlDialogFooterComponent, selectors: [["avl-dialog-footer"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 1, vars: 0, template: function AvlDialogFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{display:flex;flex-grow:0;flex-shrink:0;color:var(--avl-primary-text-color);padding:6px 16px 16px 8px;flex-wrap:wrap;align-items:center;justify-content:flex-end;overflow:auto}.complex[_nghost-%COMP%]{border-top:1px solid var(--avl-dialog-separator-color);padding:2px 16px}avl-dialog.fullscreen   [_nghost-%COMP%]{justify-content:flex-start}"] });
AvlDialogFooterComponent.ctorParameters = () => [
    { type: AvlDialogComponent }
];
AvlDialogFooterComponent = __decorate$3([ __metadata$3("design:paramtypes", [AvlDialogComponent])
], AvlDialogFooterComponent);

var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let AvlDialogContentComponent = class AvlDialogContentComponent extends AvlBaseDialogSection {
    constructor(dialog) {
        super(dialog);
        this.dialog = dialog;
    }
};
AvlDialogContentComponent.ɵfac = function AvlDialogContentComponent_Factory(t) { return new (t || AvlDialogContentComponent)(ɵngcc0.ɵɵdirectiveInject(AvlDialogComponent)); };
AvlDialogContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlDialogContentComponent, selectors: [["avl-dialog-content"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 1, vars: 0, template: function AvlDialogContentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{flex-grow:1;flex-direction:column;font-size:16px;line-height:21px;color:var(--avl-dialog-text-color);padding-top:0;padding-right:var(--padding-right,24px);padding-bottom:var(--padding-bottom,28px);padding-left:var(--padding-left,24px);overflow:auto}.complex[_nghost-%COMP%]{padding-top:var(--padding-top,8px)}.warning[_nghost-%COMP%]{padding:13px 16px 0 23px}"] });
AvlDialogContentComponent.ctorParameters = () => [
    { type: AvlDialogComponent }
];
AvlDialogContentComponent = __decorate$4([ __metadata$4("design:paramtypes", [AvlDialogComponent])
], AvlDialogContentComponent);

var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let AvlAboutDialogComponent = class AvlAboutDialogComponent {
    constructor() {
        this.okButtonLabel = 'OK';
        this._open = false;
        this.openChange = new EventEmitter();
    }
    set open(value) {
        this._open = value;
        this.openChange.emit(this._open);
    }
    get open() {
        return this._open;
    }
    closeDialog() {
        this.open = false;
    }
    /** @hidden */
    openChanged(value) {
        this.open = value;
    }
};
AvlAboutDialogComponent.ɵfac = function AvlAboutDialogComponent_Factory(t) { return new (t || AvlAboutDialogComponent)(); };
AvlAboutDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlAboutDialogComponent, selectors: [["avl-about-dialog"]], inputs: { okButtonLabel: "okButtonLabel", open: "open", productLogo: "productLogo", productName: "productName", brandPromise: "brandPromise", versionInfo: "versionInfo", legalText: "legalText", additionalInfoLabel: "additionalInfoLabel", additionalInfoUrl: "additionalInfoUrl", copyright: "copyright" }, outputs: { openChange: "openChange" }, decls: 6, vars: 2, consts: [["aboutContent", ""], [3, "open", "openChange"], ["content", ""], ["class", "full-screen-about", 4, "ngIf"], [1, "about-content"], [1, "images-holder"], [1, "images-flex-container"], ["alt", "logo", 1, "logo-img", 3, "src"], ["src", "assets/images/avl_logo_112x48.png", "alt", "Avl logo", "id", "avl-logo"], [1, "product-name"], [1, "brand-promise"], [1, "version-info"], ["class", "version-info-item", 4, "ngFor", "ngForOf"], [1, "legal-text"], [1, "additional-info"], ["target", "_blank", "rel", "noopener noreferrer", 3, "href"], [1, "spacer"], [1, "bottom-group"], [1, "bottom-group-flex-container"], [1, "copyright"], ["contained", "", 3, "click"], [1, "version-info-item"], [4, "ngTemplateOutlet"], [1, "full-screen-about"]], template: function AvlAboutDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AvlAboutDialogComponent_ng_template_0_Template, 23, 9, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "avl-dialog", 1);
        ɵngcc0.ɵɵlistener("openChange", function AvlAboutDialogComponent_Template_avl_dialog_openChange_2_listener($event) { return ctx.open = $event; })("openChange", function AvlAboutDialogComponent_Template_avl_dialog_openChange_2_listener($event) { return ctx.openChanged($event); });
        ɵngcc0.ɵɵtemplate(3, AvlAboutDialogComponent_ng_template_3_Template, 2, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, AvlAboutDialogComponent_div_5_Template, 2, 1, "div", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("open", ctx.open);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.open);
    } }, directives: [AvlDialogComponent, ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.AvlInteractionControlDirective, AvlDialogContentComponent, ɵngcc2.NgTemplateOutlet], styles: ["[_nghost-%COMP%]{font-family:var(--avl-font-family);--avl-about-dialog-foreground-color:var(--avl-corporate-foreground-color);--avl-about-dialog-foreground-medium-color:var(--avl-corporate-foreground-medium-color);--avl-about-dialog-link-color:var(--avl-corporate-link-color);--avl-about-dialog-link-hover-color:var(--avl-corporate-link-hover-color);--avl-about-dialog-on-button-background-color:var(--avl-corporate-on-button-background-color);--avl-about-dialog-button-background-color:var(--avl-corporate-button-background-color);--avl-about-dialog-button-background-hover-color:var(--avl-corporate-button-background-hover-color);--avl-about-dialog-button-background-focus-color:var(--avl-corporate-button-background-focus-color);--avl-about-dialog-button-background-pressed-color:var(--avl-corporate-button-background-pressed-color);--dialog-padding:48px;--product-logo-size:148px;--product-name-font-size:34px;--margin-above-button-and-copyright:16px;--margin-above-additional-info:8px;--distance-between-version-info-items:8px}@media (max-width:960px) and (min-width:400px){[_nghost-%COMP%]{--dialog-padding:24px;--margin-above-button-and-copyright:24px}}@media (max-width:400px){[_nghost-%COMP%]{--dialog-padding:16px;--product-logo-size:64px;--product-name-font-size:24px;--distance-to-link-for-additional-info:24px;--margin-above-additional-info:4px;--distance-between-version-info-items:4px}}.full-screen-about[_ngcontent-%COMP%]{display:none;position:fixed;top:0;left:0;bottom:0;right:0;overflow:auto;z-index:3000}@media (max-width:864px){avl-dialog[_ngcontent-%COMP%]{display:none}.full-screen-about[_ngcontent-%COMP%]{display:block}}avl-dialog[_ngcontent-%COMP%]{--avl-dialog-width:768px;--avl-dialog-text-color:var(--avl-about-dialog-foreground-medium-color);--avl-dialog-background-color:rgba(46, 46, 46, 1)}.about-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:flex-start;padding:var(--dialog-padding);box-sizing:border-box;width:100%;height:100%;font-size:14px;line-height:19px;background-color:#2e2e2e;overflow:auto}avl-dialog-content[_ngcontent-%COMP%]{padding:0}.logo-img[_ngcontent-%COMP%]{height:var(--product-logo-size);width:auto}.product-name[_ngcontent-%COMP%]{font-size:var(--product-name-font-size);line-height:1;margin-top:24px;color:var(--avl-about-dialog-foreground-color)}.brand-promise[_ngcontent-%COMP%]{font-size:16px;line-height:1;margin-top:8px;color:var(--avl-about-dialog-foreground-color)}.version-info[_ngcontent-%COMP%]{margin-top:24px;color:rgba(255,255,255,.7)}.version-info-item[_ngcontent-%COMP%]{margin-bottom:var(--distance-between-version-info-items)}.version-info-item[_ngcontent-%COMP%]:last-child{margin-bottom:0}.legal-text[_ngcontent-%COMP%]{margin-top:24px;color:var(--avl-about-dialog-foreground-color)}.additional-info[_ngcontent-%COMP%]{margin-top:var(--margin-above-additional-info);color:var(--avl-corporate-link)}.additional-info[_ngcontent-%COMP%]:hover{color:var(--avl-corporate-link-hover)}.copyright[_ngcontent-%COMP%]{color:var(--avl-about-dialog-foreground-color);display:inline-block}avl-button[_ngcontent-%COMP%]{--avl-button-label-color:var(--avl-about-dialog-on-button-background-color);--avl-button-background-default-color:var(--avl-about-dialog-button-background-color);--avl-button-background-hover-color:var(--avl-about-dialog-button-background-hover-color);--avl-button-background-focus-color:var(--avl-about-dialog-button-background-focus-color);--avl-button-background-pressed-color:var(--avl-about-dialog-button-background-pressed-color);font-size:14px;margin:-8px;margin-left:calc(48px - 8px)}#avl-logo[_ngcontent-%COMP%]{margin-right:calc(-1 * var(--dialog-padding));height:48px;width:112px;align-self:flex-start}.images-flex-container[_ngcontent-%COMP%]{display:flex;justify-content:space-between}.spacer[_ngcontent-%COMP%]{flex-grow:1}.bottom-group[_ngcontent-%COMP%]{margin-top:var(--margin-above-button-and-copyright)}.bottom-group-flex-container[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:flex-end}"] });
__decorate$5([
    Input(),
    __metadata$5("design:type", String)
], AvlAboutDialogComponent.prototype, "productLogo", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", String)
], AvlAboutDialogComponent.prototype, "productName", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", String)
], AvlAboutDialogComponent.prototype, "brandPromise", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", Array)
], AvlAboutDialogComponent.prototype, "versionInfo", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", String)
], AvlAboutDialogComponent.prototype, "legalText", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", String)
], AvlAboutDialogComponent.prototype, "additionalInfoLabel", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", String)
], AvlAboutDialogComponent.prototype, "additionalInfoUrl", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", String)
], AvlAboutDialogComponent.prototype, "copyright", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", Object)
], AvlAboutDialogComponent.prototype, "okButtonLabel", void 0);
__decorate$5([
    Input(),
    __metadata$5("design:type", Boolean),
    __metadata$5("design:paramtypes", [Boolean])
], AvlAboutDialogComponent.prototype, "open", null);
__decorate$5([
    Output(),
    __metadata$5("design:type", Object)
], AvlAboutDialogComponent.prototype, "openChange", void 0);
AvlAboutDialogComponent = __decorate$5([ __metadata$5("design:paramtypes", [])
], AvlAboutDialogComponent);

var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const componentsAndDirectives = [
    AvlDialogComponent,
    AvlDialogHeaderComponent,
    AvlDialogFooterComponent,
    AvlDialogContentComponent,
    AvlAboutDialogComponent,
];
const providers = [];
let AvlDialogModule = class AvlDialogModule {
};
AvlDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AvlDialogModule });
AvlDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AvlDialogModule_Factory(t) { return new (t || AvlDialogModule)(); }, providers: providers, imports: [[
            CommonModule,
            AvlNgBindersModule,
            AvlNavigationModule,
            A11yModule,
            FormsModule,
            ReactiveFormsModule
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlDialogComponent, [{
        type: Component,
        args: [{
                selector: 'avl-dialog',
                template: "<div class=\"scrim\" (click)=\"close($event)\">\r\n  <div #element class=\"dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <div *ngIf=\"open; then content\"></div>\r\n  </div>\r\n\r\n  <div *ngIf=\"openWarning\" #element class=\"dialog warning-dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <avl-dialog-header>\r\n      {{ warningHeaderText || 'Warning Header' }}\r\n    </avl-dialog-header>\r\n    <avl-dialog-content class=\"warning\">\r\n      <section class=\"supporting-text\">\r\n        <div class=\"column\">\r\n          <avl-icon icon=\"icons:warning\"></avl-icon>\r\n        </div>\r\n        <div class=\"column\">\r\n          <h3>All changes will be lost if you proceed without saving.</h3>\r\n          <p id=\"customText\">{{ warningDialogText }}</p>\r\n        </div>\r\n      </section>\r\n      <section class=\"warning-buttons\">\r\n        <avl-button contained (click)=\"closeAllDialogs()\">Proceed</avl-button>\r\n        <avl-button (click)=\"closeWarningDialog()\">Cancel</avl-button>\r\n      </section>\r\n    </avl-dialog-content>\r\n  </div>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.Emulated,
                styles: [":host(){font-family:var(--avl-font-family);--avl-dialog-background-color:var(--avl-background-color);--avl-dialog-header-title-color:var(--avl-foreground-color);--avl-dialog-text-color:var(--avl-emphasis-medium-color);--avl-dialog-close-icon-color:var(--avl-icon-default-color);--avl-dialog-separator-color:var(--avl-divider-color);--avl-dialog-close-icon-ink-pressed-color:var(--avl-ink-default-pressed-color);--avl-dialog-close-icon-ink-focus-color:var(--avl-ink-default-focus-color);--avl-dialog-close-icon-ink-hover-color:var(--avl-ink-default-hover-color);display:none}.supporting-text{display:flex}.column{display:flex;flex-direction:column;flex-wrap:nowrap;align-items:flex-start}.supporting-text p#customText{margin-top:-6px;margin-bottom:11px}.supporting-text h3{font-size:16px;margin-top:7px;font-weight:700}form{margin-bottom:24px;margin-left:24px}.supporting-text avl-icon{width:40px;height:40px;margin-right:15px;margin-top:6px;flex-shrink:0;--avl-icon-custom-color:var(--avl-warning-color)}.warning-buttons{display:flex;justify-content:flex-end;margin-bottom:16px}.warning-buttons>avl-button{margin-top:4px}.warning-buttons>avl-button:last-child{margin-left:-7px}:host(.opened){display:block}.scrim{position:fixed;z-index:50;left:0;top:0;width:100%;height:100%;background-color:var(--avl-scrim-color);display:flex;flex-flow:column nowrap;justify-content:center;align-items:center}.dialog{box-sizing:border-box;height:calc(var(--avl-dialog-height) - 2px);outline:0;display:flex;flex-direction:column;position:absolute;width:var(--avl-dialog-width);min-width:280px;min-height:230px;max-width:calc(100vw - 96px);max-height:calc(100vh - 96px);background-color:var(--avl-dialog-background-color);color:var(--avl-dialog-text-color);box-shadow:var(--avl-box-shadow-24dp);min-width:444px}.warning-dialog{min-height:211px!important}:host(.fullscreen)>div>.dialog{width:100%;height:100%;max-width:100%;max-height:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.ConfigurableFocusTrapFactory }]; }, { closeOnScrimClick: [{
            type: Input
        }], complex: [{
            type: Input
        }], fullscreen: [{
            type: HostBinding,
            args: ['class.fullscreen']
        }, {
            type: Input
        }], openChange: [{
            type: Output
        }], warningHeaderText: [{
            type: Input
        }], warningDialogText: [{
            type: Input
        }], open: [{
            type: Input
        }], dirty: [{
            type: Input
        }], warningOnClose: [{
            type: Input
        }], keyEvent: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], openedClosed: [{
            type: HostBinding,
            args: ['class.opened']
        }], content: [{
            type: ContentChild,
            args: [TemplateRef]
        }], element: [{
            type: ViewChild,
            args: ['element', { static: true }]
        }], optionForm: [{
            type: ViewChild,
            args: ['optionForm', { read: NgForm }]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlBaseDialogSection, [{
        type: Directive
    }], function () { return [{ type: AvlDialogComponent }]; }, { isComplex: [{
            type: HostBinding,
            args: ['class.complex']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlDialogHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'avl-dialog-header',
                template: "<div class=\"title-and-close\">\r\n  <div id=\"headerText\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n  <avl-icon-button icon=\"icons:close\" id=\"closeIcon\" (click)=\"closeDialog()\"></avl-icon-button>\r\n</div>\r\n<avl-tooltip for=\"closeIcon\">close</avl-tooltip>\r\n<div class=\"extended-slot\" #extendedSlot>\r\n  <ng-content select=\"[slot=extended]\"></ng-content>\r\n</div>\r\n",
                styles: [":host{display:block;font-family:var(--avl-font-family);font-size:20px;line-height:22px;box-sizing:border-box;color:var(--avl-dialog-header-title-color)}:host(.complex){border-bottom:1px solid var(--avl-dialog-separator-color)}.title-and-close{display:flex;height:64px;padding:6px 8px 0 24px;box-sizing:border-box;flex-grow:0;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:space-between}:host(.complex) .title-and-close{height:63px;padding-right:6px;padding-top:7px}:host(.extended) .title-and-close{height:48px;padding-top:0}.extended-slot{display:none}:host(.extended) .extended-slot{display:block}#headerText{width:calc(100% - 60px);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}#closeIcon{margin-top:1px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-dialog-close-icon-color);--avl-icon-ink-hover-color:transparent;--avl-icon-ink-focus-color:transparent;--avl-icon-ink-pressed-color:transparent;--avl-icon-button-ink-pressed-color:var(--avl-dialog-close-icon-ink-pressed-color);--avl-icon-button-ink-focus-color:var(--avl-dialog-close-icon-ink-focus-color);--avl-icon-button-ink-hover-color:var(--avl-dialog-close-icon-ink-hover-color)}:host(.extended) #closeIcon{margin-top:0}avl-dialog.fullscreen :host{border:none;box-shadow:var(--avl-box-shadow-4dp)}avl-dialog.fullscreen :host .title-and-close{padding:0 6px}avl-dialog.fullscreen :host #closeIcon{order:-1;margin-left:0}"]
            }]
    }], function () { return [{ type: AvlDialogComponent }]; }, { extended: [{
            type: HostBinding,
            args: ['class.extended']
        }], extendedSlot: [{
            type: ViewChild,
            args: ['extendedSlot']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlDialogFooterComponent, [{
        type: Component,
        args: [{
                selector: 'avl-dialog-footer',
                template: "<ng-content></ng-content>",
                styles: [":host(){display:flex;flex-grow:0;flex-shrink:0;color:var(--avl-primary-text-color);padding:6px 16px 16px 8px;flex-wrap:wrap;align-items:center;justify-content:flex-end;overflow:auto}:host(.complex){border-top:1px solid var(--avl-dialog-separator-color);padding:2px 16px}avl-dialog.fullscreen :host{justify-content:flex-start}"]
            }]
    }], function () { return [{ type: AvlDialogComponent }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlDialogContentComponent, [{
        type: Component,
        args: [{
                selector: 'avl-dialog-content',
                template: "<ng-content></ng-content>",
                styles: [":host(){flex-grow:1;flex-direction:column;font-size:16px;line-height:21px;color:var(--avl-dialog-text-color);padding-top:0;padding-right:var(--padding-right,24px);padding-bottom:var(--padding-bottom,28px);padding-left:var(--padding-left,24px);overflow:auto}:host(.complex){padding-top:var(--padding-top,8px)}:host(.warning){padding:13px 16px 0 23px}"]
            }]
    }], function () { return [{ type: AvlDialogComponent }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlAboutDialogComponent, [{
        type: Component,
        args: [{
                selector: 'avl-about-dialog',
                template: "<ng-template #aboutContent>\r\n  <div class=\"about-content\">\r\n    <div class=\"images-holder\">\r\n      <div class=\"images-flex-container\">\r\n        <img src=\"{{productLogo}}\" class=\"logo-img\" alt=\"logo\">\r\n        <img src=\"assets/images/avl_logo_112x48.png\" alt=\"Avl logo\" id=\"avl-logo\">\r\n      </div>\r\n    </div>\r\n    <div class=\"product-name\">{{productName}}</div>\r\n    <div class=\"brand-promise\">{{brandPromise}}</div>\r\n    <div class=\"version-info\">\r\n      <div  class=\"version-info-item\" *ngFor=\"let infoLabel of versionInfo\">\r\n        {{infoLabel.label}}: {{infoLabel.value}}\r\n      </div>\r\n    </div>\r\n    <div class=\"legal-text\">{{legalText}}</div>\r\n    <div class=\"additional-info\">\r\n      <a href=\"{{additionalInfoUrl}}\" target=\"_blank\" rel=\"noopener noreferrer\">{{additionalInfoLabel}}</a>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"bottom-group\">\r\n      <div class=\"bottom-group-flex-container\">\r\n        <div class=\"copyright\">{{copyright}}</div>\r\n        <avl-button (click)=\"closeDialog()\" contained>{{ okButtonLabel }}</avl-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </ng-template> \r\n\r\n<avl-dialog [(open)]=\"open\" (openChange)=\"openChanged($event)\">\r\n  <ng-template #content>\r\n    <avl-dialog-content>\r\n      <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n\r\n<div *ngIf=\"open\" class=\"full-screen-about\">\r\n  <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n</div>\r\n",
                styles: [":host(){font-family:var(--avl-font-family);--avl-about-dialog-foreground-color:var(--avl-corporate-foreground-color);--avl-about-dialog-foreground-medium-color:var(--avl-corporate-foreground-medium-color);--avl-about-dialog-link-color:var(--avl-corporate-link-color);--avl-about-dialog-link-hover-color:var(--avl-corporate-link-hover-color);--avl-about-dialog-on-button-background-color:var(--avl-corporate-on-button-background-color);--avl-about-dialog-button-background-color:var(--avl-corporate-button-background-color);--avl-about-dialog-button-background-hover-color:var(--avl-corporate-button-background-hover-color);--avl-about-dialog-button-background-focus-color:var(--avl-corporate-button-background-focus-color);--avl-about-dialog-button-background-pressed-color:var(--avl-corporate-button-background-pressed-color);--dialog-padding:48px;--product-logo-size:148px;--product-name-font-size:34px;--margin-above-button-and-copyright:16px;--margin-above-additional-info:8px;--distance-between-version-info-items:8px}@media (max-width:960px) and (min-width:400px){:host(){--dialog-padding:24px;--margin-above-button-and-copyright:24px}}@media (max-width:400px){:host(){--dialog-padding:16px;--product-logo-size:64px;--product-name-font-size:24px;--distance-to-link-for-additional-info:24px;--margin-above-additional-info:4px;--distance-between-version-info-items:4px}}.full-screen-about{display:none;position:fixed;top:0;left:0;bottom:0;right:0;overflow:auto;z-index:3000}@media (max-width:864px){avl-dialog{display:none}.full-screen-about{display:block}}avl-dialog{--avl-dialog-width:768px;--avl-dialog-text-color:var(--avl-about-dialog-foreground-medium-color);--avl-dialog-background-color:rgba(46, 46, 46, 1)}.about-content{display:flex;flex-direction:column;justify-content:flex-start;padding:var(--dialog-padding);box-sizing:border-box;width:100%;height:100%;font-size:14px;line-height:19px;background-color:#2e2e2e;overflow:auto}avl-dialog-content{padding:0}.logo-img{height:var(--product-logo-size);width:auto}.product-name{font-size:var(--product-name-font-size);line-height:1;margin-top:24px;color:var(--avl-about-dialog-foreground-color)}.brand-promise{font-size:16px;line-height:1;margin-top:8px;color:var(--avl-about-dialog-foreground-color)}.version-info{margin-top:24px;color:rgba(255,255,255,.7)}.version-info-item{margin-bottom:var(--distance-between-version-info-items)}.version-info-item:last-child{margin-bottom:0}.legal-text{margin-top:24px;color:var(--avl-about-dialog-foreground-color)}.additional-info{margin-top:var(--margin-above-additional-info);color:var(--avl-corporate-link)}.additional-info:hover{color:var(--avl-corporate-link-hover)}.copyright{color:var(--avl-about-dialog-foreground-color);display:inline-block}avl-button{--avl-button-label-color:var(--avl-about-dialog-on-button-background-color);--avl-button-background-default-color:var(--avl-about-dialog-button-background-color);--avl-button-background-hover-color:var(--avl-about-dialog-button-background-hover-color);--avl-button-background-focus-color:var(--avl-about-dialog-button-background-focus-color);--avl-button-background-pressed-color:var(--avl-about-dialog-button-background-pressed-color);font-size:14px;margin:-8px;margin-left:calc(48px - 8px)}#avl-logo{margin-right:calc(-1 * var(--dialog-padding));height:48px;width:112px;align-self:flex-start}.images-flex-container{display:flex;justify-content:space-between}.spacer{flex-grow:1}.bottom-group{margin-top:var(--margin-above-button-and-copyright)}.bottom-group-flex-container{display:flex;justify-content:space-between;align-items:flex-end}"]
            }]
    }], function () { return []; }, { okButtonLabel: [{
            type: Input
        }], openChange: [{
            type: Output
        }], open: [{
            type: Input
        }], productLogo: [{
            type: Input
        }], productName: [{
            type: Input
        }], brandPromise: [{
            type: Input
        }], versionInfo: [{
            type: Input
        }], legalText: [{
            type: Input
        }], additionalInfoLabel: [{
            type: Input
        }], additionalInfoUrl: [{
            type: Input
        }], copyright: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AvlDialogModule, { declarations: function () { return [AvlDialogComponent,
        AvlDialogHeaderComponent,
        AvlDialogFooterComponent,
        AvlDialogContentComponent,
        AvlAboutDialogComponent]; }, imports: function () { return [CommonModule,
        AvlNgBindersModule,
        AvlNavigationModule,
        A11yModule,
        FormsModule,
        ReactiveFormsModule]; }, exports: function () { return [AvlDialogComponent,
        AvlDialogHeaderComponent,
        AvlDialogFooterComponent,
        AvlDialogContentComponent,
        AvlAboutDialogComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlDialogModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    AvlNgBindersModule,
                    AvlNavigationModule,
                    A11yModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                declarations: componentsAndDirectives,
                providers: providers,
                schemas: [
                    CUSTOM_ELEMENTS_SCHEMA
                ],
                exports: componentsAndDirectives
            }]
    }], null, null); })();

/**
 * Can't put .ts file as index in package.json.
 * Hello, this is proxy.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AvlAboutDialogComponent, AvlDialogComponent, AvlDialogContentComponent, AvlDialogFooterComponent, AvlDialogHeaderComponent, AvlDialogModule, AvlBaseDialogSection as ɵa };

//# sourceMappingURL=avl-ng-controls-dialog.js.map