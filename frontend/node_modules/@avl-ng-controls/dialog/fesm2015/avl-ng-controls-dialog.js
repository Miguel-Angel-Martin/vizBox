import * as i0 from '@angular/core';
import { Component, HostBinding, ViewChild, EventEmitter, TemplateRef, ViewEncapsulation, ContentChild, Input, Output, HostListener, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import * as i4$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@angular/cdk/a11y';
import { A11yModule } from '@angular/cdk/a11y';
import * as i5 from '@angular/forms';
import { NgForm, FormsModule, ReactiveFormsModule } from '@angular/forms';
import '@avl-controls/core/dist/avl-icon-button/avl-icon-button';
import '@avl-controls/core/dist/avl-tooltip/avl-tooltip';
import * as i4 from '@avl-controls/ng-binders';
import { AvlNgBindersModule } from '@avl-controls/ng-binders';
import '@avl-controls/core/dist/avl-textfield/avl-textfield';
import '@avl-controls/core/dist/avl-button/avl-button';
import * as i3 from '@avl-ng-controls/common';
import { AvlCommonModule } from '@avl-ng-controls/common';
import '@avl-services/vanilla-js-services/avl-localization-service/avl-localization-service.api';
import { AvlNavigationModule } from '@avl-ng-controls/navigation';

class AvlDialogHeaderComponent {
    constructor() {
        this.extended = false;
        this.closeDialog = (event) => {
            event.target
                .closest('avl-dialog')
                .dispatchEvent(new CustomEvent('headerCloseClicked'));
        };
    }
    ngAfterViewInit() {
        Promise.resolve().then(() => (this.extended = !!this.extendedSlot.nativeElement.childElementCount));
    }
}
AvlDialogHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlDialogHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlDialogHeaderComponent, selector: "avl-dialog-header", host: { properties: { "class.extended": "this.extended" } }, viewQueries: [{ propertyName: "extendedSlot", first: true, predicate: ["extendedSlot"], descendants: true }], ngImport: i0, template: "<div class=\"title-and-close\">\r\n  <div id=\"headerText\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n  <avl-icon-button icon=\"icons:close\" id=\"closeIcon\" (click)=\"closeDialog($event)\"></avl-icon-button>\r\n</div>\r\n<avl-tooltip for=\"closeIcon\">close</avl-tooltip>\r\n<div class=\"extended-slot\" #extendedSlot>\r\n  <ng-content select=\"[slot=extended]\"></ng-content>\r\n</div>\r\n", styles: [":host{display:block;font-family:var(--avl-font-family);font-size:20px;line-height:22px;box-sizing:border-box;color:var(--avl-dialog-header-title-color)}:host(.complex){border-bottom:1px solid var(--avl-dialog-separator-color)}.title-and-close{display:flex;height:64px;padding:6px 8px 0 24px;box-sizing:border-box;flex-grow:0;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:space-between}:host(.complex) .title-and-close{height:63px;padding-right:6px;padding-top:7px}:host(.extended) .title-and-close{height:48px;padding-top:0}.extended-slot{display:none}:host(.extended) .extended-slot{display:block}#headerText{width:calc(100% - 60px);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}#closeIcon{margin-top:1px;margin-left:12px;cursor:pointer;--avl-icon-button-color:var(--avl-dialog-close-icon-color);--avl-icon-ink-hover-color:transparent;--avl-icon-ink-focus-color:transparent;--avl-icon-ink-pressed-color:transparent;--avl-icon-button-ink-pressed-color:var(--avl-dialog-close-icon-ink-pressed-color);--avl-icon-button-ink-focus-color:var(--avl-dialog-close-icon-ink-focus-color);--avl-icon-button-ink-hover-color:var(--avl-dialog-close-icon-ink-hover-color)}:host(.extended) #closeIcon{margin-top:0}avl-dialog.fullscreen :host{border:none;box-shadow:var(--avl-box-shadow-4dp)}avl-dialog.fullscreen :host .title-and-close{padding:0 6px}avl-dialog.fullscreen :host #closeIcon{order:-1;margin-left:0}"], directives: [{ type: i4.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i4.AvlIconButtonDirective, selector: "avl-icon-button", outputs: ["badgeChange", "badgeValueChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-dialog-header',
                    templateUrl: './avl-dialog-header.component.html',
                    styleUrls: ['./avl-dialog-header.component.css']
                }]
        }], propDecorators: { extended: [{
                type: HostBinding,
                args: ['class.extended']
            }], extendedSlot: [{
                type: ViewChild,
                args: ['extendedSlot']
            }] } });

class AvlDialogContentComponent {
}
AvlDialogContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlDialogContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlDialogContentComponent, selector: "avl-dialog-content", ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{flex-grow:1;flex-direction:column;font-size:16px;line-height:21px;color:var(--avl-dialog-text-color);padding-top:0;padding-right:24px;padding-right:var(--padding-right,24px);padding-bottom:28px;padding-bottom:var(--padding-bottom,28px);padding-left:24px;padding-left:var(--padding-left,24px);overflow:auto}:host(.complex){padding-top:8px;padding-top:var(--padding-top,8px)}:host(.warning){padding:13px 16px 0 23px}"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-dialog-content',
                    templateUrl: './avl-dialog-content.component.html',
                    styleUrls: ['./avl-dialog-content.component.css']
                }]
        }] });

class AvlDialogComponent {
    constructor(focusTrap) {
        this.focusTrap = focusTrap;
        this._open = false;
        this._dirty = false;
        this._warningOnClose = false;
        this._warningHeaderText = '';
        this._warningDialogText = '';
        this.openWarning = false;
        /**
         * If true, the dialog can be closed by clicking on scrim
         */
        this.closeOnScrimClick = true;
        /**
         * If true, new dialog can open inside a dialog
         */
        this.complex = false;
        /**
         * When checked, dialog opens in fullscreen mode
         */
        this.fullscreen = false;
        this.openChange = new EventEmitter();
    }
    /**
     * Sets the text for warning dialog header.
     */
    get warningHeaderText() {
        return this._warningHeaderText;
    }
    set warningHeaderText(value) {
        if (this._warningHeaderText !== value) {
            this._warningHeaderText = value;
        }
    }
    /**
     * Sets the main warning dialog text.
     */
    get warningDialogText() {
        return this._warningDialogText;
    }
    set warningDialogText(value) {
        if (this._warningDialogText !== value) {
            this._warningDialogText = value;
        }
    }
    /**
     * Can be set to open or close the dialog.
     * Returns the current state of the dialog.
     */
    get open() {
        return this._open;
    }
    set open(value) {
        if (this._open !== value) {
            this._open = !!value;
            this.openChange.emit(this._open);
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /**
     * Indicates if the form has been touched.
     * Returns the current value of the attribute.
     */
    get dirty() {
        return !!this._dirty;
    }
    set dirty(value) {
        if (this._dirty !== value) {
            this._dirty = !!value;
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /**
     * Can be set to indicate if the warning dialog should be opened.
     * Returns the current value of the attribute.
     */
    get warningOnClose() {
        return !!this._warningOnClose;
    }
    set warningOnClose(value) {
        if (this._warningOnClose !== value) {
            this._warningOnClose = !!value;
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /** @hidden */
    close(event) {
        const target = event.target;
        if (this.closeOnScrimClick && target.classList.contains('scrim')) {
            if (this.warningOnClose) {
                if (this.openWarning === false) {
                    this.openWarning = true;
                }
            }
            else {
                if (this.dirty === true) {
                    this.openWarning = true;
                }
                else {
                    this.open = false;
                }
            }
        }
    }
    /**
     * Opens a dialog.
     */
    openDialog() {
        this.open = true;
    }
    /**
     * Closes a dialog.
     */
    closeDialog() {
        if (this.warningOnClose || this.dirty) {
            this.openWarning = !this.openWarning;
        }
        else {
            this.open = false;
        }
    }
    /**
     * Closes all dialogs.
     */
    closeAllDialogs() {
        this.openWarning = false;
        this.open = false;
        this.dirty = false;
    }
    /**
     * Opens a warning dialog.
     */
    openWarningDialog() {
        this.openWarning = true;
    }
    /**
     * Closes a warning dialog.
     */
    closeWarningDialog() {
        this.openWarning = false;
    }
    /** @hidden */
    keyEvent(event) {
        if (event.key === 'Esc' || event.key === 'Escape') {
            this.closeDialog();
        }
    }
    /** @hidden */
    headerCloseClicked() {
        this.closeDialog();
    }
    /** @hidden */
    get openedClosed() {
        return this._open;
    }
    /** @hidden */
    ngOnInit() {
        if (this.complex != null && this.complex !== false) {
            this.complex = true;
        }
    }
}
AvlDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogComponent, deps: [{ token: i1.ConfigurableFocusTrapFactory }], target: i0.ɵɵFactoryTarget.Component });
AvlDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlDialogComponent, selector: "avl-dialog", inputs: { closeOnScrimClick: "closeOnScrimClick", complex: "complex", warningHeaderText: "warningHeaderText", warningDialogText: "warningDialogText", fullscreen: "fullscreen", open: "open", dirty: "dirty", warningOnClose: "warningOnClose" }, outputs: { openChange: "openChange" }, host: { listeners: { "keydown": "keyEvent($event)", "headerCloseClicked": "headerCloseClicked($event)" }, properties: { "class.fullscreen": "this.fullscreen", "class.opened": "this.openedClosed" } }, queries: [{ propertyName: "content", first: true, predicate: TemplateRef, descendants: true }], viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true, static: true }, { propertyName: "optionForm", first: true, predicate: ["optionForm"], descendants: true, read: NgForm }], ngImport: i0, template: "<div class=\"scrim\" (click)=\"close($event)\">\r\n  <div #element class=\"dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <div *ngIf=\"open; then content\"></div>\r\n  </div>\r\n\r\n  <div *ngIf=\"openWarning\" #element class=\"dialog warning-dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <avl-dialog-header>\r\n      {{ warningHeaderText || 'Warning Header' }}\r\n    </avl-dialog-header>\r\n    <avl-dialog-content class=\"warning\">\r\n      <section class=\"supporting-text\">\r\n        <div class=\"column\">\r\n          <avl-icon icon=\"icons:warning\"></avl-icon>\r\n        </div>\r\n        <div class=\"column\">\r\n          <h3>All changes will be lost if you proceed without saving.</h3>\r\n          <p id=\"customText\">{{ warningDialogText }}</p>\r\n        </div>\r\n      </section>\r\n      <section class=\"warning-buttons\">\r\n        <avl-button contained (click)=\"closeAllDialogs()\">Proceed</avl-button>\r\n        <avl-button (click)=\"closeWarningDialog()\">Cancel</avl-button>\r\n      </section>\r\n    </avl-dialog-content>\r\n  </div>\r\n</div>\r\n", styles: [":host{font-family:var(--avl-font-family);--avl-dialog-background-color:var(--avl-background-color);--avl-dialog-header-title-color:var(--avl-foreground-color);--avl-dialog-text-color:var(--avl-foreground-medium-color);--avl-dialog-close-icon-color:var(--avl-icon-default-color);--avl-dialog-separator-color:var(--avl-divider-color);--avl-dialog-close-icon-ink-pressed-color:var(--avl-ink-default-pressed-color);--avl-dialog-close-icon-ink-focus-color:var(--avl-ink-default-focus-color);--avl-dialog-close-icon-ink-hover-color:var(--avl-ink-default-hover-color);display:none}.supporting-text{display:flex;flex-direction:column}.supporting-text p{margin:0 0 16px}.column{display:flex;flex-direction:column;flex-wrap:nowrap;align-items:flex-start}#customText{margin-top:-6px;margin-bottom:11px}.supporting-text h3{font-size:16px;margin-top:7px;font-weight:700}form{margin-bottom:24px;margin-left:24px}.supporting-text avl-icon{width:40px;height:40px;margin-right:15px;margin-top:6px;flex-shrink:0;--avl-icon-custom-color:var(--avl-warning-color)}.warning-buttons{display:flex;justify-content:flex-end;margin-bottom:16px}.warning-buttons>avl-button{margin-top:4px}.warning-buttons>avl-button:last-child{margin-left:-7px}:host(.opened){display:block}.scrim{position:fixed;z-index:50;left:0;top:0;width:100%;height:100%;background-color:var(--avl-scrim-color);display:flex;flex-flow:column nowrap;justify-content:center;align-items:center}.dialog{box-sizing:border-box;height:calc(var(--avl-dialog-height) - 2px);outline:none;display:flex;flex-direction:column;position:absolute;width:var(--avl-dialog-width);min-width:280px;min-height:230px;max-width:calc(100vw - 96px);max-height:calc(100vh - 96px);background-color:var(--avl-dialog-background-color);color:var(--avl-dialog-text-color);box-shadow:var(--avl-box-shadow-24dp);min-width:444px}.warning-dialog{min-height:211px!important}:host(.fullscreen)>div>.dialog{width:100%;height:100%;max-width:100%;max-height:100%}"], components: [{ type: AvlDialogHeaderComponent, selector: "avl-dialog-header" }, { type: AvlDialogContentComponent, selector: "avl-dialog-content" }], directives: [{ type: i4$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-dialog',
                    templateUrl: './avl-dialog.component.html',
                    styleUrls: ['./avl-dialog.component.css'],
                    encapsulation: ViewEncapsulation.Emulated
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurableFocusTrapFactory }]; }, propDecorators: { content: [{
                type: ContentChild,
                args: [TemplateRef]
            }], element: [{
                type: ViewChild,
                args: ['element', { static: true }]
            }], optionForm: [{
                type: ViewChild,
                args: ['optionForm', { read: NgForm }]
            }], closeOnScrimClick: [{
                type: Input
            }], complex: [{
                type: Input
            }], warningHeaderText: [{
                type: Input
            }], warningDialogText: [{
                type: Input
            }], fullscreen: [{
                type: HostBinding,
                args: ['class.fullscreen']
            }, {
                type: Input
            }], open: [{
                type: Input
            }], dirty: [{
                type: Input
            }], warningOnClose: [{
                type: Input
            }], openChange: [{
                type: Output
            }], keyEvent: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], headerCloseClicked: [{
                type: HostListener,
                args: ['headerCloseClicked', ['$event']]
            }], openedClosed: [{
                type: HostBinding,
                args: ['class.opened']
            }] } });

class AvlLoginComponent {
    constructor() {
        this.username = undefined;
        this.usernameChange = new EventEmitter();
        this.password = undefined;
        this.passwordChange = new EventEmitter();
        this.errorMessage = undefined;
        this.login = new EventEmitter();
        this.currentYear = '2021';
        this._open = false;
        this.openChange = new EventEmitter();
    }
    set open(value) {
        this._open = value;
        this.openChange.emit(this._open);
    }
    get open() {
        return this._open;
    }
    loginHandler() {
        this.login.emit({
            username: this.username,
            password: this.password
        });
    }
    handleUsernameChange(username) {
        this.usernameChange.emit(username);
    }
    handlePasswordChange(password) {
        this.passwordChange.emit(password);
    }
    closeDialog() {
        this.open = false;
    }
    /** @hidden */
    openChanged(value) {
        this.open = value;
    }
}
AvlLoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlLoginComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlLoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlLoginComponent, selector: "avl-login", inputs: { username: "username", password: "password", errorMessage: "errorMessage", currentYear: "currentYear", productLogo: "productLogo", productName: "productName", brandPromise: "brandPromise", open: "open" }, outputs: { usernameChange: "usernameChange", passwordChange: "passwordChange", login: "login", openChange: "openChange" }, ngImport: i0, template: "<ng-template #loginContent (keyup.enter)=\"loginHandler()\">\r\n  <div class=\"login-content\">\r\n    <div class=\"product-title-holder\">\r\n      <div class=\"product-icon\">\r\n        <img src=\"{{ productLogo }}\" class=\"logo-img\" alt=\"logo\" />\r\n      </div>\r\n      <div class=\"product-title\">\r\n        <div class=\"product-name\">{{ productName }}</div>\r\n        <div class=\"brand-promise\">{{ brandPromise }}</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <avl-textfield label=\"User Name\" \r\n                  class=\"avl-dark-theme\" \r\n                  [(ngModel)]=\"username\" \r\n                  required \r\n                  validate-on-leave\r\n                  error-message=\"Enter your user name.\"\r\n                  (valueChange)=\"handleUsernameChange($event)\"\r\n                  #usernameField=\"ngModel\"></avl-textfield>\r\n\r\n    <avl-textfield label=\"Password\" \r\n                  type=\"password\" \r\n                  class=\"password-textfield avl-dark-theme\" \r\n                  [(ngModel)]=\"password\" \r\n                  required\r\n                  validate-on-leave\r\n                  error-message=\"Enter your password.\"\r\n                  (valueChange)=\"handlePasswordChange($event)\"\r\n                  #passwordField=\"ngModel\"></avl-textfield>\r\n\r\n    <div class=\"button-container\">\r\n      <div class=\"error-message\">\r\n        <span>\r\n          {{ errorMessage }}\r\n        </span>\r\n      </div>\r\n      <avl-button contained (click)=\"loginHandler()\" [disabled]=\"!usernameField.valid || !passwordField.valid\">LOG IN</avl-button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<avl-dialog id=\"dialog\" [(open)]=\"open\" (openChange)=\"openChanged($event)\">\r\n  <ng-template #content>\r\n    <avl-dialog-content>\r\n      <ng-container *ngTemplateOutlet=\"loginContent\"></ng-container>\r\n      <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n\r\n<div *ngIf=\"open\" class=\"full-screen-login\">\r\n  <ng-container *ngTemplateOutlet=\"loginContent\"></ng-container>\r\n  <div class=\"spacer\"></div>\r\n  <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n</div>\r\n", styles: [":host{font-family:var(--avl-font-family);display:flex;justify-content:center;align-items:center;width:100%;height:100%;--dialog-padding:48px;--product-logo-size:146px;--product-name-font-size:34px;--margin-above-username-field:49px}@media (max-width:960px) and (min-width:400px){:host{--margin-above-username-field:17px;--dialog-padding:24px 24px 40px}.product-title-holder{flex-wrap:wrap}}@media (max-width:400px){:host{--product-logo-size:48px;--product-name-font-size:24px;--margin-above-username-field:17px;--dialog-padding:16px 16px 32px}.product-icon{width:100%}.product-title-holder{flex-wrap:wrap}}.full-screen-login{display:none}@media (max-width:864px){#dialog{display:none}.spacer{flex:1 1 100%;background-color:var(--avl-corporate-menu-background-color)}.full-screen-login{display:flex;flex-direction:column}.full-screen-login avl-footer{flex:1 0 48px}.full-screen-login .login-content{flex:1 0 auto}}avl-dialog{--avl-dialog-width:768px;--avl-dialog-background-color:var(--avl-corporate-menu-background-color)}avl-dialog-footer{padding:0}.login-content,avl-footer{background-color:var(--avl-corporate-menu-background-color);width:100%}.login-content{display:flex;flex-direction:column;justify-content:flex-start;padding:var(--dialog-padding);box-sizing:border-box;font-size:14px;line-height:19px;overflow:auto}.full-screen-login{position:fixed;top:0;left:0;bottom:0;right:0;overflow:auto;z-index:302}avl-dialog-content{padding:0}.dialog-content{padding:var(--dialog-padding)}.headerText{font-size:30px}avl-textfield{--avl-textfield-value-color:var(--avl-corporate-foreground-color);--avl-textfield-line-label-color:var(--avl-corporate-foreground-medium-color);--avl-textfield-floating-label-color:var(--avl-corporate-foreground-medium-color);--avl-textfield-floating-label-focus-color:var(--avl-corporate-foreground-focus-color);--avl-textfield-floating-label-disabled-color:var(--avl-corporate-foreground-disabled-color);--avl-textfield-line-color:var(--avl-corporate-border-color);--avl-textfield-line-hover-color:var(--avl-corporate-border-hover-color);--avl-textfield-line-focus-color:var(--avl-corporate-border-focus-color);--avl-textfield-line-disabled-color:var(--avl-corporate-border-disabled-color)}.button-container{display:flex;justify-content:space-between;margin-top:25px}avl-button{--avl-button-background-default-color:var(--avl-corporate-button-background-color);--avl-button-label-color:var(--avl-corporate-on-button-background-color);--avl-button-background-hover-color:var(--avl-corporate-button-background-hover-color);--avl-button-background-focus-color:var(--avl-corporate-button-background-focus-color);--avl-button-background-pressed-color:var(--avl-corporate-button-background-pressed-color);--avl-button-background-disabled-color:var(--avl-corporate-button-background-disabled-color);--avl-button-label-disabled-color:var(--avl-corporate-on-button-background-disabled-color)}.error-message{color:var(--avl-corporate-error-color)}.error-message>span{display:inline-block;vertical-align:middle;line-height:normal}.product-title-holder{color:var(--avl-corporate-foreground-color);display:flex;align-items:center;margin-bottom:var(--margin-above-username-field)}.product-title{flex:1 1 100%}.product-icon{height:var(--product-logo-size);width:auto;margin-right:24px}.product-icon img{height:100%}.product-name{font-size:var(--product-name-font-size);margin-top:25px}.brand-promise,.product-name{line-height:1;color:var(--avl-corporate-foreground-color)}.brand-promise{font-size:16px;margin-top:8px}"], components: [{ type: AvlDialogComponent, selector: "avl-dialog", inputs: ["closeOnScrimClick", "complex", "warningHeaderText", "warningDialogText", "fullscreen", "open", "dirty", "warningOnClose"], outputs: ["openChange"] }, { type: AvlDialogContentComponent, selector: "avl-dialog-content" }, { type: i3.AvlFooterComponent, selector: "avl-footer", inputs: ["companyLogo", "currentYear"] }], directives: [{ type: i4.AvlTextfieldDirective, selector: "avl-textfield", outputs: ["valueChange"] }, { type: i4.AvlFormControlDirective, selector: "avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input", inputs: ["readonly"], outputs: ["invalidChange"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i4$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlLoginComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-login',
                    templateUrl: './avl-login.component.html',
                    styleUrls: ['./avl-login.component.css']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { username: [{
                type: Input
            }], usernameChange: [{
                type: Output
            }], password: [{
                type: Input
            }], passwordChange: [{
                type: Output
            }], errorMessage: [{
                type: Input
            }], login: [{
                type: Output
            }], currentYear: [{
                type: Input
            }], productLogo: [{
                type: Input
            }], productName: [{
                type: Input
            }], brandPromise: [{
                type: Input
            }], open: [{
                type: Input
            }], openChange: [{
                type: Output
            }] } });

class AvlDialogFooterComponent {
}
AvlDialogFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlDialogFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlDialogFooterComponent, selector: "avl-dialog-footer", ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{display:flex;flex-grow:0;flex-shrink:0;color:var(--avl-primary-text-color);padding:6px 16px 16px 8px;flex-wrap:wrap;align-items:center;justify-content:flex-end;overflow:auto}:host(.complex){border-top:1px solid var(--avl-dialog-separator-color);padding:2px 16px}avl-dialog.fullscreen :host{justify-content:flex-start}"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogFooterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-dialog-footer',
                    templateUrl: './avl-dialog-footer.component.html',
                    styleUrls: ['./avl-dialog-footer.component.css']
                }]
        }] });

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class AvlAboutDialogComponent {
    constructor() {
        this._open = false;
        this.openChange = new EventEmitter();
    }
    set open(value) {
        this._open = value;
        this.openChange.emit(this._open);
    }
    get open() {
        return this._open;
    }
    ngOnInit() {
        this.translateLabels();
    }
    translateLabels() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AvlLocalizationService || !AvlLocalizationService.translationService) {
                return;
            }
            const translationService = AvlLocalizationService.translationService;
            this.avlAboutDialogInfo.productName = yield this.validateAndTranslate(this.avlAboutDialogInfo.productName);
            this.avlAboutDialogInfo.brandPromise = yield this.validateAndTranslate(this.avlAboutDialogInfo.brandPromise);
            this.avlAboutDialogInfo.versionInfo = yield this.translateVersionInfo(this.avlAboutDialogInfo.versionInfo);
            this.avlAboutDialogInfo.legalText = yield this.validateAndTranslate(this.avlAboutDialogInfo.legalText);
            this.avlAboutDialogInfo.additionalInfoLabel = yield this.validateAndTranslate(this.avlAboutDialogInfo.additionalInfoLabel);
            this.avlAboutDialogInfo.okButtonLabel = this.avlAboutDialogInfo.okButtonLabel
                ? yield translationService.translate(this.avlAboutDialogInfo.okButtonLabel)
                : 'OK';
        });
    }
    validateAndTranslate(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const translateService = AvlLocalizationService.translationService;
            return key ? yield translateService.translate(key) : key;
        });
    }
    translateVersionInfo(versionInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            return versionInfo
                ? yield Promise.all(versionInfo.map((item) => __awaiter(this, void 0, void 0, function* () { return yield this.translateVersionInfoItem(item); })))
                : versionInfo;
        });
    }
    translateVersionInfoItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const translateService = AvlLocalizationService.translationService;
            return Object.assign(Object.assign({}, item), { label: yield translateService.translate(item.label) });
        });
    }
    closeDialog() {
        this.open = false;
    }
    /** @hidden */
    openChanged(value) {
        this.open = value;
    }
}
AvlAboutDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlAboutDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlAboutDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlAboutDialogComponent, selector: "avl-about-dialog", inputs: { avlAboutDialogInfo: "avlAboutDialogInfo", open: "open" }, outputs: { openChange: "openChange" }, ngImport: i0, template: "<ng-template #aboutContent>\r\n  <div class=\"about-content\">\r\n    <div class=\"product-title-holder\">\r\n      <div class=\"product-icon\">\r\n        <img src=\"{{ avlAboutDialogInfo.productLogo }}\" class=\"logo-img\" alt=\"logo\" />\r\n      </div>\r\n      <div class=\"product-title\">\r\n        <div class=\"product-name\">{{ avlAboutDialogInfo.productName }}</div>\r\n        <div class=\"brand-promise\">{{ avlAboutDialogInfo.brandPromise }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"version-info\">\r\n      <div class=\"version-info-item\" *ngFor=\"let infoLabel of avlAboutDialogInfo.versionInfo\">\r\n        {{ infoLabel.label }}: {{ infoLabel.value }}\r\n      </div>\r\n    </div>\r\n    <div class=\"legal-text\">{{ avlAboutDialogInfo.legalText }}</div>\r\n    <div class=\"additional-info\">\r\n      <a href=\"{{ avlAboutDialogInfo.additionalInfoUrl }}\" target=\"_blank\" rel=\"noopener noreferrer\">{{\r\n        avlAboutDialogInfo.additionalInfoLabel\r\n      }}</a>\r\n    </div>\r\n    <div class=\"ok-button\">\r\n      <avl-button (click)=\"closeDialog()\" contained>{{ avlAboutDialogInfo.okButtonLabel }}</avl-button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<avl-dialog id=\"dialog\" [(open)]=\"open\" (openChange)=\"openChanged($event)\">\r\n  <ng-template #content>\r\n    <avl-dialog-content>\r\n      <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n      <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n\r\n<div *ngIf=\"open\" class=\"full-screen-about\">\r\n  <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n  <div class=\"spacer\"></div>\r\n  <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n</div>\r\n\r\n", styles: [":host{font-family:var(--avl-font-family);--avl-about-dialog-foreground-color:var(--avl-corporate-foreground-color);--avl-about-dialog-foreground-medium-color:var(--avl-corporate-foreground-medium-color);--avl-about-dialog-link-color:var(--avl-corporate-link-color);--avl-about-dialog-link-hover-color:var(--avl-corporate-link-hover-color);--avl-about-dialog-on-button-background-color:var(--avl-corporate-on-button-background-color);--avl-about-dialog-button-background-color:var(--avl-corporate-button-background-color);--avl-about-dialog-button-background-hover-color:var(\r\n    --avl-corporate-button-background-hover-color\r\n  );--avl-about-dialog-button-background-focus-color:var(\r\n    --avl-corporate-button-background-focus-color\r\n  );--avl-about-dialog-button-background-pressed-color:var(\r\n    --avl-corporate-button-background-pressed-color\r\n  );--dialog-padding:48px;--product-logo-size:146px;--product-name-font-size:34px;--margin-above-ok-button:24px;--margin-above-additional-info:8px;--distance-between-version-info-items:8px;--margin-above-version-info:56px}@media (max-width:960px) and (min-width:400px){:host{--dialog-padding:24px 24px 40px 24px;--margin-above-version-info:24px}.product-icon{margin-bottom:24px}.product-title-holder{flex-wrap:wrap}}@media (max-width:400px){:host{--dialog-padding:16px 16px 32px 16px;--product-logo-size:48px;--product-name-font-size:24px;--distance-to-link-for-additional-info:24px;--distance-between-version-info-items:4px;--margin-above-version-info:24px}.product-icon{width:100%;margin-bottom:24px}.product-title-holder{flex-wrap:wrap}}.full-screen-about{display:none}@media (max-width:864px){#dialog{display:none}.spacer{flex:1 1 100%;background-color:var(--avl-corporate-menu-background-color)}.full-screen-about{display:flex;flex-direction:column}.full-screen-about avl-footer{flex:1 0 48px}.full-screen-about .about-content{flex:1 0 auto}}avl-dialog{--avl-dialog-width:768px;--avl-dialog-text-color:var(--avl-about-dialog-foreground-medium-color);--avl-dialog-background-color:var(--avl-corporate-menu-background-color)}avl-dialog-footer{padding:0}.about-content,avl-footer{background-color:var(--avl-corporate-menu-background-color);width:100%}.about-content{display:flex;flex-direction:column;justify-content:flex-start;padding:var(--dialog-padding);box-sizing:border-box;font-size:14px;line-height:19px;overflow:auto}.full-screen-about{position:fixed;top:0;left:0;bottom:0;right:0;overflow:auto;z-index:302}avl-dialog-content{padding:0}.product-title-holder{display:flex;align-items:center}.product-title{flex:1 1 100%}.product-icon{height:var(--product-logo-size);width:auto;margin-right:24px}.product-icon img{height:100%}.product-name{font-size:var(--product-name-font-size)}.brand-promise,.product-name{line-height:1;color:var(--avl-about-dialog-foreground-color)}.brand-promise{font-size:16px;margin-top:8px}.version-info{margin-top:var(--margin-above-version-info);color:hsla(0,0%,100%,.7)}.version-info-item{margin-bottom:var(--distance-between-version-info-items)}.version-info-item:last-child{margin-bottom:0}.legal-text{margin-top:24px;color:var(--avl-about-dialog-foreground-color)}.additional-info{margin-top:var(--margin-above-additional-info);color:var(--avl-corporate-link)}.additional-info:hover{color:var(--avl-corporate-link-hover)}.ok-button{margin-top:var(--margin-above-ok-button)}.ok-button avl-button{float:right}avl-button{--avl-button-label-color:var(--avl-about-dialog-on-button-background-color);--avl-button-background-default-color:var(--avl-about-dialog-button-background-color);--avl-button-background-hover-color:var(--avl-about-dialog-button-background-hover-color);--avl-button-background-focus-color:var(--avl-about-dialog-button-background-focus-color);--avl-button-background-pressed-color:var(--avl-about-dialog-button-background-pressed-color);font-size:14px}"], components: [{ type: AvlDialogComponent, selector: "avl-dialog", inputs: ["closeOnScrimClick", "complex", "warningHeaderText", "warningDialogText", "fullscreen", "open", "dirty", "warningOnClose"], outputs: ["openChange"] }, { type: AvlDialogContentComponent, selector: "avl-dialog-content" }, { type: i3.AvlFooterComponent, selector: "avl-footer", inputs: ["companyLogo", "currentYear"] }], directives: [{ type: i4$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i4$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlAboutDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-about-dialog',
                    templateUrl: './avl-about-dialog.component.html',
                    styleUrls: ['./avl-about-dialog.component.css']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { avlAboutDialogInfo: [{
                type: Input
            }], open: [{
                type: Input
            }], openChange: [{
                type: Output
            }] } });

class AvlUnsavedChangesDialogComponent {
    ngOnInit() {
        this.unsavedChanges = this.unsavedChangesService;
    }
    /**
     * Event handler for closing the unsaved changes dialog
     */
    onOpenChange(open) {
        if (!open) {
            this.unsavedChanges.closeDialog();
        }
    }
}
AvlUnsavedChangesDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlUnsavedChangesDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvlUnsavedChangesDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlUnsavedChangesDialogComponent, selector: "avl-unsaved-changes-dialog", inputs: { unsavedChangesService: "unsavedChangesService" }, ngImport: i0, template: "<avl-dialog\r\n  *ngIf=\"unsavedChangesService.isDialogOpen\"\r\n  id=\"unsavedChangesDialog\"\r\n  [open]=\"true\"\r\n  (openChange)=\"onOpenChange($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"false\"\r\n  [complex]=\"false\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>You have unsaved changes! Do you want to continue?</avl-dialog-header>\r\n    <avl-dialog-content> If you proceed, all changes will be lost. </avl-dialog-content>\r\n    <avl-dialog-footer>\r\n      <avl-button (click)=\"unsavedChangesService.onProceed()\">Leave</avl-button>\r\n      <avl-button (click)=\"unsavedChangesService.onAbort()\">Stay</avl-button>\r\n    </avl-dialog-footer>\r\n  </ng-template>\r\n</avl-dialog>\r\n", styles: [""], components: [{ type: AvlDialogComponent, selector: "avl-dialog", inputs: ["closeOnScrimClick", "complex", "warningHeaderText", "warningDialogText", "fullscreen", "open", "dirty", "warningOnClose"], outputs: ["openChange"] }, { type: AvlDialogHeaderComponent, selector: "avl-dialog-header" }, { type: AvlDialogContentComponent, selector: "avl-dialog-content" }, { type: AvlDialogFooterComponent, selector: "avl-dialog-footer" }], directives: [{ type: i4$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlUnsavedChangesDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-unsaved-changes-dialog',
                    templateUrl: './avl-unsaved-changes-dialog.component.html',
                    styleUrls: ['./avl-unsaved-changes-dialog.component.css']
                }]
        }], propDecorators: { unsavedChangesService: [{
                type: Input
            }] } });

const componentsAndDirectives = [
    AvlDialogComponent,
    AvlLoginComponent,
    AvlDialogHeaderComponent,
    AvlDialogFooterComponent,
    AvlDialogContentComponent,
    AvlAboutDialogComponent,
    AvlUnsavedChangesDialogComponent
];
const providers = [];
class AvlDialogModule {
}
AvlDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AvlDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogModule, declarations: [AvlDialogComponent,
        AvlLoginComponent,
        AvlDialogHeaderComponent,
        AvlDialogFooterComponent,
        AvlDialogContentComponent,
        AvlAboutDialogComponent,
        AvlUnsavedChangesDialogComponent], imports: [CommonModule,
        AvlNgBindersModule,
        AvlNavigationModule,
        AvlCommonModule,
        A11yModule,
        FormsModule,
        ReactiveFormsModule], exports: [AvlDialogComponent,
        AvlLoginComponent,
        AvlDialogHeaderComponent,
        AvlDialogFooterComponent,
        AvlDialogContentComponent,
        AvlAboutDialogComponent,
        AvlUnsavedChangesDialogComponent] });
AvlDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogModule, providers: providers, imports: [[
            CommonModule,
            AvlNgBindersModule,
            AvlNavigationModule,
            AvlCommonModule,
            A11yModule,
            FormsModule,
            ReactiveFormsModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        AvlNgBindersModule,
                        AvlNavigationModule,
                        AvlCommonModule,
                        A11yModule,
                        FormsModule,
                        ReactiveFormsModule
                    ],
                    declarations: componentsAndDirectives,
                    providers: providers,
                    schemas: [CUSTOM_ELEMENTS_SCHEMA],
                    exports: componentsAndDirectives
                }]
        }] });

/**
 * Can't put .ts file as index in package.json.
 * Hello, this is proxy.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AvlAboutDialogComponent, AvlDialogComponent, AvlDialogContentComponent, AvlDialogFooterComponent, AvlDialogHeaderComponent, AvlDialogModule, AvlLoginComponent, AvlUnsavedChangesDialogComponent };
//# sourceMappingURL=avl-ng-controls-dialog.js.map
