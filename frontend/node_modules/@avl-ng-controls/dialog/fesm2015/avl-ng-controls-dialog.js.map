{"version":3,"file":"avl-ng-controls-dialog.js","sources":["../../../projects/dialog/src/lib/avl-dialog/avl-dialog-header/avl-dialog-header.component.ts","../../../projects/dialog/src/lib/avl-dialog/avl-dialog-header/avl-dialog-header.component.html","../../../projects/dialog/src/lib/avl-dialog/avl-dialog-content/avl-dialog-content.component.ts","../../../projects/dialog/src/lib/avl-dialog/avl-dialog-content/avl-dialog-content.component.html","../../../projects/dialog/src/lib/avl-dialog/avl-dialog.component.ts","../../../projects/dialog/src/lib/avl-dialog/avl-dialog.component.html","../../../projects/dialog/src/lib/avl-login/avl-login.component.ts","../../../projects/dialog/src/lib/avl-login/avl-login.component.html","../../../projects/dialog/src/lib/avl-dialog/avl-dialog-footer/avl-dialog-footer.component.ts","../../../projects/dialog/src/lib/avl-dialog/avl-dialog-footer/avl-dialog-footer.component.html","../../../projects/dialog/src/lib/avl-about-dialog/avl-about-dialog.component.ts","../../../projects/dialog/src/lib/avl-about-dialog/avl-about-dialog.component.html","../../../projects/dialog/src/lib/avl-unsaved-changes-dialog/avl-unsaved-changes-dialog.component.ts","../../../projects/dialog/src/lib/avl-unsaved-changes-dialog/avl-unsaved-changes-dialog.component.html","../../../projects/dialog/src/lib/dialog.module.ts","../../../projects/dialog/src/public-api.ts","../../../projects/dialog/src/avl-ng-controls-dialog.ts"],"sourcesContent":["import { Component, ViewChild, AfterViewInit, HostBinding } from '@angular/core';\r\n\r\nimport '@avl-controls/core/dist/avl-icon-button/avl-icon-button';\r\nimport '@avl-controls/core/dist/avl-tooltip/avl-tooltip';\r\n\r\nimport type { ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'avl-dialog-header',\r\n  templateUrl: './avl-dialog-header.component.html',\r\n  styleUrls: ['./avl-dialog-header.component.css']\r\n})\r\nexport class AvlDialogHeaderComponent implements AfterViewInit {\r\n  @HostBinding('class.extended')\r\n  extended = false;\r\n\r\n  @ViewChild('extendedSlot')\r\n  private extendedSlot: ElementRef<HTMLSlotElement>;\r\n\r\n  ngAfterViewInit() {\r\n    Promise.resolve().then(\r\n      () => (this.extended = !!this.extendedSlot.nativeElement.childElementCount)\r\n    );\r\n  }\r\n  public closeDialog = (event: MouseEvent) => {\r\n    (event.target as HTMLElement)\r\n      .closest('avl-dialog')\r\n      .dispatchEvent(new CustomEvent('headerCloseClicked'));\r\n  };\r\n}\r\n","<div class=\"title-and-close\">\r\n  <div id=\"headerText\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n  <avl-icon-button icon=\"icons:close\" id=\"closeIcon\" (click)=\"closeDialog($event)\"></avl-icon-button>\r\n</div>\r\n<avl-tooltip for=\"closeIcon\">close</avl-tooltip>\r\n<div class=\"extended-slot\" #extendedSlot>\r\n  <ng-content select=\"[slot=extended]\"></ng-content>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'avl-dialog-content',\r\n  templateUrl: './avl-dialog-content.component.html',\r\n  styleUrls: ['./avl-dialog-content.component.css']\r\n})\r\nexport class AvlDialogContentComponent {\r\n  \r\n}\r\n","<ng-content></ng-content>","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ContentChild,\r\n  TemplateRef,\r\n  HostBinding,\r\n  HostListener,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport type { ElementRef } from '@angular/core';\r\n@Component({\r\n  selector: 'avl-dialog',\r\n  templateUrl: './avl-dialog.component.html',\r\n  styleUrls: ['./avl-dialog.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class AvlDialogComponent implements OnInit {\r\n  private _open = false;\r\n  private _dirty = false;\r\n  private _warningOnClose = false;\r\n  private _warningHeaderText = '';\r\n  private _warningDialogText = '';\r\n  public openWarning = false;\r\n\r\n  /**\r\n   * Dialog content\r\n   */\r\n  @ContentChild(TemplateRef) content: TemplateRef<any>;\r\n\r\n  /** @hidden */\r\n  @ViewChild('element', { static: true }) element: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('optionForm', { read: NgForm }) optionForm: any;\r\n\r\n  /**\r\n   * If true, the dialog can be closed by clicking on scrim\r\n   */\r\n  @Input() closeOnScrimClick: boolean = true;\r\n\r\n  /**\r\n   * If true, new dialog can open inside a dialog\r\n   */\r\n  @Input() complex: boolean = false;\r\n\r\n  /**\r\n   * Sets the text for warning dialog header.\r\n   */\r\n  @Input()\r\n  get warningHeaderText(): string {\r\n    return this._warningHeaderText;\r\n  }\r\n  set warningHeaderText(value: string) {\r\n    if (this._warningHeaderText !== value) {\r\n      this._warningHeaderText = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the main warning dialog text.\r\n   */\r\n  @Input()\r\n  get warningDialogText(): string {\r\n    return this._warningDialogText;\r\n  }\r\n  set warningDialogText(value: string) {\r\n    if (this._warningDialogText !== value) {\r\n      this._warningDialogText = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When checked, dialog opens in fullscreen mode\r\n   */\r\n  @HostBinding('class.fullscreen')\r\n  @Input()\r\n  fullscreen = false;\r\n\r\n  /**\r\n   * Can be set to open or close the dialog.\r\n   * Returns the current state of the dialog.\r\n   */\r\n  @Input()\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n  set open(value: boolean) {\r\n    if (this._open !== value) {\r\n      this._open = !!value;\r\n      this.openChange.emit(this._open);\r\n      this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates if the form has been touched.\r\n   * Returns the current value of the attribute.\r\n   */\r\n  @Input()\r\n  get dirty(): boolean {\r\n    return !!this._dirty;\r\n  }\r\n  set dirty(value: boolean) {\r\n    if (this._dirty !== value) {\r\n      this._dirty = !!value;\r\n      this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Can be set to indicate if the warning dialog should be opened.\r\n   * Returns the current value of the attribute.\r\n   */\r\n  @Input()\r\n  get warningOnClose(): boolean {\r\n    return !!this._warningOnClose;\r\n  }\r\n  set warningOnClose(value: boolean) {\r\n    if (this._warningOnClose !== value) {\r\n      this._warningOnClose = !!value;\r\n      this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();\r\n    }\r\n  }\r\n\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  /** @hidden */\r\n  close(event: MouseEvent) {\r\n    const target = event.target as HTMLElement;\r\n    if (this.closeOnScrimClick && target.classList.contains('scrim')) {\r\n      if (this.warningOnClose) {\r\n        if (this.openWarning === false) {\r\n          this.openWarning = true;\r\n        }\r\n      } else {\r\n        if (this.dirty === true) {\r\n          this.openWarning = true;\r\n        } else {\r\n          this.open = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens a dialog.\r\n   */\r\n  openDialog() {\r\n    this.open = true;\r\n  }\r\n\r\n  /**\r\n   * Closes a dialog.\r\n   */\r\n  closeDialog() {\r\n    if (this.warningOnClose || this.dirty) {\r\n      this.openWarning = !this.openWarning;\r\n    } else {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes all dialogs.\r\n   */\r\n  closeAllDialogs() {\r\n    this.openWarning = false;\r\n    this.open = false;\r\n    this.dirty = false;\r\n  }\r\n\r\n  /**\r\n   * Opens a warning dialog.\r\n   */\r\n  openWarningDialog() {\r\n    this.openWarning = true;\r\n  }\r\n\r\n  /**\r\n   * Closes a warning dialog.\r\n   */\r\n  closeWarningDialog() {\r\n    this.openWarning = false;\r\n  }\r\n\r\n  /** @hidden */\r\n  @HostListener('keydown', ['$event'])\r\n  keyEvent(event: KeyboardEvent) {\r\n    if (event.key === 'Esc' || event.key === 'Escape') {\r\n      this.closeDialog();\r\n    }\r\n  }\r\n\r\n  /** @hidden */\r\n  @HostListener('headerCloseClicked', ['$event'])\r\n  headerCloseClicked() {\r\n    this.closeDialog();\r\n  }\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.opened')\r\n  get openedClosed() {\r\n    return this._open;\r\n  }\r\n\r\n  constructor(private focusTrap: ConfigurableFocusTrapFactory) {}\r\n\r\n  /** @hidden */\r\n  ngOnInit() {\r\n    if (this.complex != null && this.complex !== false) {\r\n      this.complex = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                     | Description                       | Default\r\n   * :------------------------------------------|:--------------------------------------|:----------------------\r\n   * `--avl-dialog-background-color`     | Background color of dialog        | `--avl-background-color`\r\n   * `--avl-dialog-text-color`           | Color of text in content          | `--avl-foreground-medium-color`\r\n   * `--avl-dialog-header-title-color`   | Color of text in header           | `--avl-foreground-color`\r\n   * `--avl-dialog-close-icon-color`     | Color of close icon in header     | `--avl-icon-default-color`\r\n   * `--avl-dialog-width`                | Dialog width                      | `280 px`\r\n   * `--avl-dialog-height`               | Dialog height                     | `100% - 96px`\r\n   * `--avl-dialog-separator-color`      | Color of separator of dialog parts| `--avl-divider-color`\r\n   * `--avl-dialog-close-icon-ink-pressed-color`| Color of pressed close icon in header | `--avl-ink-default-pressed-color`\r\n   * `--avl-dialog-close-icon-ink-focus-color`  | Color of focused close icon in header | `--avl-ink-default-focus-color`\r\n   * `--avl-dialog-close-icon-ink-hover-color`  | Color of hovered close icon in header | `--avl-ink-default-hover-color`\r\n   *\r\n   */\r\n  _styling: any;\r\n}\r\n","<div class=\"scrim\" (click)=\"close($event)\">\r\n  <div #element class=\"dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <div *ngIf=\"open; then content\"></div>\r\n  </div>\r\n\r\n  <div *ngIf=\"openWarning\" #element class=\"dialog warning-dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <avl-dialog-header>\r\n      {{ warningHeaderText || 'Warning Header' }}\r\n    </avl-dialog-header>\r\n    <avl-dialog-content class=\"warning\">\r\n      <section class=\"supporting-text\">\r\n        <div class=\"column\">\r\n          <avl-icon icon=\"icons:warning\"></avl-icon>\r\n        </div>\r\n        <div class=\"column\">\r\n          <h3>All changes will be lost if you proceed without saving.</h3>\r\n          <p id=\"customText\">{{ warningDialogText }}</p>\r\n        </div>\r\n      </section>\r\n      <section class=\"warning-buttons\">\r\n        <avl-button contained (click)=\"closeAllDialogs()\">Proceed</avl-button>\r\n        <avl-button (click)=\"closeWarningDialog()\">Cancel</avl-button>\r\n      </section>\r\n    </avl-dialog-content>\r\n  </div>\r\n</div>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport '@avl-controls/core/dist/avl-textfield/avl-textfield';\r\nimport '@avl-controls/core/dist/avl-button/avl-button';\r\n\r\n@Component({\r\n  selector: 'avl-login',\r\n  templateUrl: './avl-login.component.html',\r\n  styleUrls: ['./avl-login.component.css']\r\n})\r\nexport class AvlLoginComponent {\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                          | Description                      | Default\r\n   * :----------------------------------------|:---------------------------------|:-------------------------\r\n   * `--avl-login-background-color`           | Background color of avl login    | `#2F2F2F`\r\n   * `--avl-tab-bar-background-color`         | Background color of tab bar      | `transparent`\r\n   *\r\n   */\r\n  _styling: any;\r\n\r\n  @Input() username: string | undefined = undefined;\r\n  @Output() usernameChange = new EventEmitter<string>();\r\n  @Input() password: string | undefined = undefined;\r\n  @Output() passwordChange = new EventEmitter<string>();\r\n  @Input() errorMessage: string | undefined = undefined;\r\n  @Output() login = new EventEmitter<{ username: string, password: string }>();\r\n  @Input() currentYear = '2021';\r\n  @Input() productLogo: string;\r\n  @Input() productName: string;\r\n  @Input() brandPromise: string;\r\n\r\n  private _open = false;\r\n  @Input()\r\n  set open(value: boolean) {\r\n    this._open = value;\r\n    this.openChange.emit(this._open);\r\n  }\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  constructor() {}\r\n\r\n  loginHandler() {\r\n    this.login.emit({\r\n      username: this.username,\r\n      password: this.password\r\n    });\r\n  }\r\n\r\n  handleUsernameChange(username) {\r\n    this.usernameChange.emit(username);\r\n  }\r\n\r\n  handlePasswordChange(password) {\r\n    this.passwordChange.emit(password);\r\n  }\r\n\r\n  closeDialog() {\r\n    this.open = false;\r\n  }\r\n\r\n  /** @hidden */\r\n  openChanged(value: boolean) {\r\n    this.open = value;\r\n  }\r\n}\r\n","<ng-template #loginContent (keyup.enter)=\"loginHandler()\">\r\n  <div class=\"login-content\">\r\n    <div class=\"product-title-holder\">\r\n      <div class=\"product-icon\">\r\n        <img src=\"{{ productLogo }}\" class=\"logo-img\" alt=\"logo\" />\r\n      </div>\r\n      <div class=\"product-title\">\r\n        <div class=\"product-name\">{{ productName }}</div>\r\n        <div class=\"brand-promise\">{{ brandPromise }}</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <avl-textfield label=\"User Name\" \r\n                  class=\"avl-dark-theme\" \r\n                  [(ngModel)]=\"username\" \r\n                  required \r\n                  validate-on-leave\r\n                  error-message=\"Enter your user name.\"\r\n                  (valueChange)=\"handleUsernameChange($event)\"\r\n                  #usernameField=\"ngModel\"></avl-textfield>\r\n\r\n    <avl-textfield label=\"Password\" \r\n                  type=\"password\" \r\n                  class=\"password-textfield avl-dark-theme\" \r\n                  [(ngModel)]=\"password\" \r\n                  required\r\n                  validate-on-leave\r\n                  error-message=\"Enter your password.\"\r\n                  (valueChange)=\"handlePasswordChange($event)\"\r\n                  #passwordField=\"ngModel\"></avl-textfield>\r\n\r\n    <div class=\"button-container\">\r\n      <div class=\"error-message\">\r\n        <span>\r\n          {{ errorMessage }}\r\n        </span>\r\n      </div>\r\n      <avl-button contained (click)=\"loginHandler()\" [disabled]=\"!usernameField.valid || !passwordField.valid\">LOG IN</avl-button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<avl-dialog id=\"dialog\" [(open)]=\"open\" (openChange)=\"openChanged($event)\">\r\n  <ng-template #content>\r\n    <avl-dialog-content>\r\n      <ng-container *ngTemplateOutlet=\"loginContent\"></ng-container>\r\n      <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n\r\n<div *ngIf=\"open\" class=\"full-screen-login\">\r\n  <ng-container *ngTemplateOutlet=\"loginContent\"></ng-container>\r\n  <div class=\"spacer\"></div>\r\n  <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'avl-dialog-footer',\r\n  templateUrl: './avl-dialog-footer.component.html',\r\n  styleUrls: ['./avl-dialog-footer.component.css']\r\n})\r\nexport class AvlDialogFooterComponent {\r\n}\r\n","<ng-content></ng-content>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\n\r\nimport '@avl-services/vanilla-js-services/avl-localization-service/avl-localization-service.api';\r\nimport '@avl-controls/core/dist/avl-button/avl-button';\r\nimport { AvlAboutDialogInfo, VersionInfo } from './avl-about-dialog.model';\r\n\r\n@Component({\r\n  selector: 'avl-about-dialog',\r\n  templateUrl: './avl-about-dialog.component.html',\r\n  styleUrls: ['./avl-about-dialog.component.css']\r\n})\r\nexport class AvlAboutDialogComponent implements OnInit {\r\n  @Input() avlAboutDialogInfo: AvlAboutDialogInfo;\r\n\r\n  private _open = false;\r\n  @Input()\r\n  set open(value: boolean) {\r\n    this._open = value;\r\n    this.openChange.emit(this._open);\r\n  }\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                                      | Description                             | Default\r\n   * :----------------------------------------------------|:----------------------------------------|:----------------------\r\n   * `--avl-about-dialog-foreground-color`                | Main foreground color                   | `--avl-corporate-foreground-color`\r\n   * `--avl-about-dialog-foreground-medium-color`         | Forground color for version information | `--avl-corporate-foreground-medium-color`\r\n   * `--avl-about-dialog-link-color`                      | Link color                              | `--avl-corporate-link-color`\r\n   * `--avl-about-dialog-link-hover-color`                | Link hover color                        | `--avl-corporate-link-hover-color`\r\n   * `--avl-about-dialog-on-button-background-color`      | Button text color                       | `--avl-corporate-on-button-background-color`\r\n   * `--avl-about-dialog-button-background-color`         | Button background color                 | `--avl-corporate-button-background-color`\r\n   * `--avl-about-dialog-button-background-hover-color`   | Button hover color                      | `--avl-corporate-button-background-hover-color`\r\n   * `--avl-about-dialog-button-background-focus-color`   | Button focus color                      | `--avl-corporate-button-background-focus-color`\r\n   * `--avl-about-dialog-button-background-pressed-color` | Button pressed color                    | `--avl-corporate-button-background-pressed-color` *\r\n   */\r\n  _styling: any;\r\n\r\n  constructor() {}\r\n\r\n  public ngOnInit(): void {\r\n    this.translateLabels();\r\n  }\r\n\r\n  private async translateLabels() {\r\n    if (!AvlLocalizationService || !AvlLocalizationService.translationService) {\r\n      return;\r\n    }\r\n\r\n    const translationService = AvlLocalizationService.translationService;\r\n\r\n    this.avlAboutDialogInfo.productName = await this.validateAndTranslate(\r\n      this.avlAboutDialogInfo.productName\r\n    );\r\n    this.avlAboutDialogInfo.brandPromise = await this.validateAndTranslate(\r\n      this.avlAboutDialogInfo.brandPromise\r\n    );\r\n    this.avlAboutDialogInfo.versionInfo = await this.translateVersionInfo(\r\n      this.avlAboutDialogInfo.versionInfo\r\n    );\r\n    this.avlAboutDialogInfo.legalText = await this.validateAndTranslate(\r\n      this.avlAboutDialogInfo.legalText\r\n    );\r\n    this.avlAboutDialogInfo.additionalInfoLabel = await this.validateAndTranslate(\r\n      this.avlAboutDialogInfo.additionalInfoLabel\r\n    );\r\n    this.avlAboutDialogInfo.okButtonLabel = this.avlAboutDialogInfo.okButtonLabel\r\n      ? await translationService.translate(this.avlAboutDialogInfo.okButtonLabel)\r\n      : 'OK';\r\n  }\r\n\r\n  private async validateAndTranslate(key: string) {\r\n    const translateService = AvlLocalizationService.translationService;\r\n    return key ? await translateService.translate(key) : key;\r\n  }\r\n\r\n  private async translateVersionInfo(versionInfo: VersionInfo[]): Promise<VersionInfo[]> {\r\n    return versionInfo\r\n      ? await Promise.all(versionInfo.map(async item => await this.translateVersionInfoItem(item)))\r\n      : versionInfo;\r\n  }\r\n\r\n  private async translateVersionInfoItem(item: VersionInfo): Promise<VersionInfo> {\r\n    const translateService = AvlLocalizationService.translationService;\r\n    return {\r\n      ...item,\r\n      label: await translateService.translate(item.label)\r\n    };\r\n  }\r\n\r\n  closeDialog() {\r\n    this.open = false;\r\n  }\r\n\r\n  /** @hidden */\r\n  openChanged(value: boolean) {\r\n    this.open = value;\r\n  }\r\n}\r\n","<ng-template #aboutContent>\r\n  <div class=\"about-content\">\r\n    <div class=\"product-title-holder\">\r\n      <div class=\"product-icon\">\r\n        <img src=\"{{ avlAboutDialogInfo.productLogo }}\" class=\"logo-img\" alt=\"logo\" />\r\n      </div>\r\n      <div class=\"product-title\">\r\n        <div class=\"product-name\">{{ avlAboutDialogInfo.productName }}</div>\r\n        <div class=\"brand-promise\">{{ avlAboutDialogInfo.brandPromise }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"version-info\">\r\n      <div class=\"version-info-item\" *ngFor=\"let infoLabel of avlAboutDialogInfo.versionInfo\">\r\n        {{ infoLabel.label }}: {{ infoLabel.value }}\r\n      </div>\r\n    </div>\r\n    <div class=\"legal-text\">{{ avlAboutDialogInfo.legalText }}</div>\r\n    <div class=\"additional-info\">\r\n      <a href=\"{{ avlAboutDialogInfo.additionalInfoUrl }}\" target=\"_blank\" rel=\"noopener noreferrer\">{{\r\n        avlAboutDialogInfo.additionalInfoLabel\r\n      }}</a>\r\n    </div>\r\n    <div class=\"ok-button\">\r\n      <avl-button (click)=\"closeDialog()\" contained>{{ avlAboutDialogInfo.okButtonLabel }}</avl-button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<avl-dialog id=\"dialog\" [(open)]=\"open\" (openChange)=\"openChanged($event)\">\r\n  <ng-template #content>\r\n    <avl-dialog-content>\r\n      <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n      <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n    </avl-dialog-content>\r\n  </ng-template>\r\n</avl-dialog>\r\n\r\n<div *ngIf=\"open\" class=\"full-screen-about\">\r\n  <ng-container *ngTemplateOutlet=\"aboutContent\"></ng-container>\r\n  <div class=\"spacer\"></div>\r\n  <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n</div>\r\n\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { UnsavedChangesService, UnsavedChangesShellService } from '@avl-services/ng-services';\r\n\r\n@Component({\r\n  selector: 'avl-unsaved-changes-dialog',\r\n  templateUrl: './avl-unsaved-changes-dialog.component.html',\r\n  styleUrls: ['./avl-unsaved-changes-dialog.component.css']\r\n})\r\nexport class AvlUnsavedChangesDialogComponent implements OnInit {\r\n  private unsavedChanges: UnsavedChangesService | UnsavedChangesShellService;\r\n\r\n  @Input() unsavedChangesService: UnsavedChangesService | UnsavedChangesShellService;\r\n\r\n  ngOnInit(): void {\r\n    this.unsavedChanges = this.unsavedChangesService;\r\n  }\r\n\r\n  /**\r\n   * Event handler for closing the unsaved changes dialog\r\n   */\r\n  public onOpenChange(open: boolean): void {\r\n    if (!open) {\r\n      this.unsavedChanges.closeDialog();\r\n    }\r\n  }\r\n}\r\n","<avl-dialog\r\n  *ngIf=\"unsavedChangesService.isDialogOpen\"\r\n  id=\"unsavedChangesDialog\"\r\n  [open]=\"true\"\r\n  (openChange)=\"onOpenChange($event)\"\r\n  [closeOnScrimClick]=\"false\"\r\n  [fullscreen]=\"false\"\r\n  [complex]=\"false\"\r\n>\r\n  <ng-template #content>\r\n    <avl-dialog-header>You have unsaved changes! Do you want to continue?</avl-dialog-header>\r\n    <avl-dialog-content> If you proceed, all changes will be lost. </avl-dialog-content>\r\n    <avl-dialog-footer>\r\n      <avl-button (click)=\"unsavedChangesService.onProceed()\">Leave</avl-button>\r\n      <avl-button (click)=\"unsavedChangesService.onAbort()\">Stay</avl-button>\r\n    </avl-dialog-footer>\r\n  </ng-template>\r\n</avl-dialog>\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n// components\r\nimport { AvlDialogComponent } from './avl-dialog/avl-dialog.component';\r\nimport { AvlLoginComponent } from './avl-login/avl-login.component';\r\nimport { AvlNgBindersModule } from '@avl-controls/ng-binders';\r\nimport { AvlDialogHeaderComponent } from './avl-dialog/avl-dialog-header/avl-dialog-header.component';\r\nimport { AvlDialogFooterComponent } from './avl-dialog/avl-dialog-footer/avl-dialog-footer.component';\r\nimport { AvlDialogContentComponent } from './avl-dialog/avl-dialog-content/avl-dialog-content.component';\r\nimport { AvlAboutDialogComponent } from './avl-about-dialog/avl-about-dialog.component';\r\n\r\nimport { AvlNavigationModule } from '@avl-ng-controls/navigation';\r\nimport { AvlCommonModule } from '@avl-ng-controls/common';\r\nimport { AvlUnsavedChangesDialogComponent } from './avl-unsaved-changes-dialog/avl-unsaved-changes-dialog.component';\r\n\r\nconst componentsAndDirectives = [\r\n  AvlDialogComponent,\r\n  AvlLoginComponent,\r\n  AvlDialogHeaderComponent,\r\n  AvlDialogFooterComponent,\r\n  AvlDialogContentComponent,\r\n  AvlAboutDialogComponent,\r\n  AvlUnsavedChangesDialogComponent\r\n];\r\n\r\nconst providers = [];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AvlNgBindersModule,\r\n    AvlNavigationModule,\r\n    AvlCommonModule,\r\n    A11yModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: componentsAndDirectives,\r\n  providers: providers,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  exports: componentsAndDirectives\r\n})\r\nexport class AvlDialogModule {}\r\n","/**\r\n * Can't put .ts file as index in package.json.\r\n * Hello, this is proxy.\r\n */\r\nexport { AvlDialogModule } from './lib/dialog.module';\r\nexport { AvlDialogComponent } from './lib/avl-dialog/avl-dialog.component';\r\nexport { AvlLoginComponent } from './lib/avl-login/avl-login.component';\r\nexport { AvlAboutDialogComponent } from './lib/avl-about-dialog/avl-about-dialog.component';\r\nexport { VersionInfo, AvlAboutDialogInfo } from './lib/avl-about-dialog/avl-about-dialog.model';\r\nexport { AvlDialogHeaderComponent } from './lib/avl-dialog/avl-dialog-header/avl-dialog-header.component';\r\nexport { AvlDialogFooterComponent } from './lib/avl-dialog/avl-dialog-footer/avl-dialog-footer.component';\r\nexport { AvlDialogContentComponent } from './lib/avl-dialog/avl-dialog-content/avl-dialog-content.component';\r\nexport { AvlUnsavedChangesDialogComponent } from './lib/avl-unsaved-changes-dialog/avl-unsaved-changes-dialog.component';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}