var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { HostBinding, Directive } from '@angular/core';
import { AvlDialogComponent } from './avl-dialog.component';
var AvlBaseDialogSection = /** @class */ (function () {
    function AvlBaseDialogSection(dialog) {
        this.dialog = dialog;
        this.isComplex = false;
    }
    /** @hidden */
    AvlBaseDialogSection.prototype.closeDialog = function () {
        this.dialog.closeDialog();
    };
    AvlBaseDialogSection.prototype.ngOnInit = function () {
        this.isComplex = this.dialog.complex;
    };
    AvlBaseDialogSection.ctorParameters = function () { return [
        { type: AvlDialogComponent }
    ]; };
    __decorate([
        HostBinding('class.complex'),
        __metadata("design:type", Boolean)
    ], AvlBaseDialogSection.prototype, "isComplex", void 0);
    AvlBaseDialogSection = __decorate([
        Directive(),
        __metadata("design:paramtypes", [AvlDialogComponent])
    ], AvlBaseDialogSection);
    return AvlBaseDialogSection;
}());
export { AvlBaseDialogSection };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWRpYWxvZy1zZWN0aW9uLmJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLW5nLWNvbnRyb2xzL2RpYWxvZy8iLCJzb3VyY2VzIjpbImxpYi9hdmwtZGlhbG9nL2F2bC1kaWFsb2ctc2VjdGlvbi5iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBVSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRzVEO0lBRUUsOEJBQXNCLE1BQTBCO1FBQTFCLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBR2hELGNBQVMsR0FBWSxLQUFLLENBQUM7SUFIeUIsQ0FBQztJQUtyRCxjQUFjO0lBQ2QsMENBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELHVDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ3ZDLENBQUM7O2dCQVo2QixrQkFBa0I7O0lBR2hEO1FBREMsV0FBVyxDQUFDLGVBQWUsQ0FBQzs7MkRBQ0Y7SUFMUCxvQkFBb0I7UUFEekMsU0FBUyxFQUFFO3lDQUdvQixrQkFBa0I7T0FGNUIsb0JBQW9CLENBZ0J6QztJQUFELDJCQUFDO0NBQUEsQUFoQkQsSUFnQkM7U0FoQnFCLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgSG9zdEJpbmRpbmcsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBdmxEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2F2bC1kaWFsb2cuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXZsQmFzZURpYWxvZ1NlY3Rpb24gaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGlhbG9nOiBBdmxEaWFsb2dDb21wb25lbnQpIHsgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbXBsZXgnKVxyXG4gIGlzQ29tcGxleDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIGNsb3NlRGlhbG9nKCkge1xyXG4gICAgdGhpcy5kaWFsb2cuY2xvc2VEaWFsb2coKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5pc0NvbXBsZXggPSB0aGlzLmRpYWxvZy5jb21wbGV4O1xyXG4gIH1cclxuXHJcbn1cclxuIl19