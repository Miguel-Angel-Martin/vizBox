{"version":3,"sources":["ng://@avl-ng-controls/dialog/lib/avl-dialog/avl-dialog.component.ts","ng://@avl-ng-controls/dialog/lib/avl-dialog/avl-dialog-section.base.ts","ng://@avl-ng-controls/dialog/lib/avl-dialog/avl-dialog-header/avl-dialog-header.component.ts","ng://@avl-ng-controls/dialog/lib/avl-dialog/avl-dialog-footer/avl-dialog-footer.component.ts","ng://@avl-ng-controls/dialog/lib/avl-dialog/avl-dialog-content/avl-dialog-content.component.ts","ng://@avl-ng-controls/dialog/lib/avl-about-dialog/avl-about-dialog.component.ts","ng://@avl-ng-controls/dialog/lib/dialog.module.ts"],"names":["AvlDialogComponent","focusTrap","this","_open","_dirty","_warningOnClose","_warningHeaderText","_warningDialogText","openWarning","closeOnScrimClick","complex","fullscreen","openChange","EventEmitter","Object","defineProperty","prototype","value","emit","create","element","nativeElement","focusFirstTabbableElementWhenReady","close","event","target","classList","contains","warningOnClose","dirty","open","openDialog","closeDialog","closeAllDialogs","openWarningDialog","closeWarningDialog","keyEvent","key","ngOnInit","ConfigurableFocusTrapFactory","__decorate","ContentChild","TemplateRef","ViewChild","static","ElementRef","read","NgForm","Input","HostBinding","Output","HostListener","KeyboardEvent","Component","selector","template","encapsulation","ViewEncapsulation","Emulated","AvlBaseDialogSection","dialog","isComplex","__decorate$1","Directive","AvlDialogHeaderComponent","_this","_super","call","extended","__extends","ngAfterViewInit","Promise","resolve","then","extendedSlot","childElementCount","__decorate$2","AvlDialogFooterComponent","__decorate$3","AvlDialogContentComponent","__decorate$4","AvlAboutDialogComponent","okButtonLabel","openChanged","__decorate$5","componentsAndDirectives","providers","AvlDialogModule","__decorate$6","NgModule","imports","CommonModule","AvlNgBindersModule","AvlNavigationModule","A11yModule","FormsModule","ReactiveFormsModule","declarations","schemas","CUSTOM_ELEMENTS_SCHEMA","exports"],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ContentChild,\r\n  TemplateRef,\r\n  HostBinding,\r\n  HostListener,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'avl-dialog',\r\n  templateUrl: './avl-dialog.component.html',\r\n  styleUrls: ['./avl-dialog.component.css'],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class AvlDialogComponent implements OnInit {\r\n  private _open = false;\r\n  private _dirty: boolean = false;\r\n  private _warningOnClose = false;\r\n  private _warningHeaderText = '';\r\n  private _warningDialogText = '';\r\n  public openWarning = false;\r\n\r\n  /**\r\n   * Dialog content\r\n   */\r\n  @ContentChild(TemplateRef) content: TemplateRef<any>;\r\n\r\n  /** @hidden */\r\n  @ViewChild('element', { static: true }) element: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('optionForm', { read: NgForm }) optionForm: any;\r\n\r\n  /**\r\n   * If true, the dialog can be closed by clicking on scrim\r\n   */\r\n  @Input() closeOnScrimClick: boolean = true;\r\n\r\n  /**\r\n   * If true, new dialog can open inside a dialog\r\n   */\r\n  @Input() complex: boolean = false;\r\n\r\n  /**\r\n   * Sets the text for warning dialog header.\r\n   */\r\n  @Input()\r\n  get warningHeaderText(): string {\r\n    return this._warningHeaderText;\r\n  }\r\n  set warningHeaderText(value: string) {\r\n    if (this._warningHeaderText !== value) {\r\n      this._warningHeaderText = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the main warning dialog text.\r\n   */\r\n  @Input()\r\n  get warningDialogText(): string {\r\n    return this._warningDialogText;\r\n  }\r\n  set warningDialogText(value: string) {\r\n    if (this._warningDialogText !== value) {\r\n      this._warningDialogText = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When checked, dialog opens in fullscreen mode\r\n   */\r\n  @HostBinding('class.fullscreen')\r\n  @Input()\r\n  fullscreen = false;\r\n\r\n  /**\r\n   * Can be set to open or close the dialog.\r\n   * Returns the current state of the dialog.\r\n   */\r\n  @Input()\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n  set open(value: boolean) {\r\n    if (this._open !== value) {\r\n      this._open = !!value;\r\n      this.openChange.emit(this._open);\r\n      this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates if the form has been touched.\r\n   * Returns the current value of the attribute.\r\n   */\r\n  @Input()\r\n  get dirty(): boolean {\r\n    return !!this._dirty;\r\n  }\r\n  set dirty(value: boolean) {\r\n    if (this._dirty !== value) {\r\n      this._dirty = !!value;\r\n      this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Can be set to indicate if the warning dialog should be opened.\r\n   * Returns the current value of the attribute.\r\n   */\r\n  @Input()\r\n  get warningOnClose(): boolean {\r\n    return !!this._warningOnClose;\r\n  }\r\n  set warningOnClose(value: boolean) {\r\n    if (this._warningOnClose !== value) {\r\n      this._warningOnClose = !!value;\r\n      this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();\r\n    }\r\n  }\r\n\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  /** @hidden */\r\n  close(event: MouseEvent) {\r\n    const target = event.target as HTMLElement;\r\n    if (this.closeOnScrimClick && target.classList.contains('scrim')) {\r\n      if (this.warningOnClose) {\r\n        if (this.openWarning === false) {\r\n          this.openWarning = true;\r\n        }\r\n      } else {\r\n        if (this.dirty === true) {\r\n          this.openWarning = true;\r\n        } else {\r\n          this.open = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens a dialog.\r\n   */\r\n  openDialog() {\r\n    this.open = true;\r\n  }\r\n\r\n  /**\r\n   * Closes a dialog.\r\n   */\r\n  closeDialog() {\r\n    if (this.warningOnClose || this.dirty) {\r\n      this.openWarning = !this.openWarning;\r\n    } else {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes all dialogs.\r\n   */\r\n  closeAllDialogs() {\r\n    this.openWarning = false;\r\n    this.open = false;\r\n    this.dirty = false;\r\n  }\r\n\r\n  /**\r\n   * Opens a warning dialog.\r\n   */\r\n  openWarningDialog() {\r\n    this.openWarning = true;\r\n  }\r\n\r\n  /**\r\n   * Closes a warning dialog.\r\n   */\r\n  closeWarningDialog() {\r\n    this.openWarning = false;\r\n  }\r\n\r\n  /** @hidden */\r\n  @HostListener('keydown', ['$event'])\r\n  keyEvent(event: KeyboardEvent) {\r\n    if (event.key === 'Esc' || event.key === 'Escape') {\r\n        this.closeDialog();\r\n    }\r\n  }\r\n\r\n  /** @hidden */\r\n  @HostBinding('class.opened')\r\n  get openedClosed() {\r\n    return this._open;\r\n  }\r\n\r\n  constructor(private focusTrap: ConfigurableFocusTrapFactory) {}\r\n\r\n  /** @hidden */\r\n  ngOnInit() {\r\n    if (this.complex != null && this.complex !== false) {\r\n      this.complex = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                     | Description                       | Default\r\n   * :------------------------------------------|:--------------------------------------|:----------------------\r\n   * `--avl-dialog-background-color`     | Background color of dialog        | `--avl-background-color`\r\n   * `--avl-dialog-text-color`           | Color of text in content          | `--avl-emphasis-medium-color`\r\n   * `--avl-dialog-header-title-color`   | Color of text in header           | `--avl-foreground-color`\r\n   * `--avl-dialog-close-icon-color`     | Color of close icon in header     | `--avl-icon-default-color`\r\n   * `--avl-dialog-width`                | Dialog width                      | `280 px`\r\n   * `--avl-dialog-height`               | Dialog height                     | `100% - 96px`\r\n   * `--avl-dialog-separator-color`      | Color of separator of dialog parts| `--avl-divider-color`\r\n   * `--avl-dialog-close-icon-ink-pressed-color`| Color of pressed close icon in header | `--avl-ink-default-pressed-color`\r\n   * `--avl-dialog-close-icon-ink-focus-color`  | Color of focused close icon in header | `--avl-ink-default-focus-color`\r\n   * `--avl-dialog-close-icon-ink-hover-color`  | Color of hovered close icon in header | `--avl-ink-default-hover-color`\r\n   *\r\n   */\r\n  _styling: any;\r\n}\r\n","import { OnInit, HostBinding, Directive } from '@angular/core';\r\nimport { AvlDialogComponent } from './avl-dialog.component';\r\n\r\n@Directive()\r\nexport abstract class AvlBaseDialogSection implements OnInit {\r\n\r\n  constructor(protected dialog: AvlDialogComponent) { }\r\n\r\n  @HostBinding('class.complex')\r\n  isComplex: boolean = false;\r\n\r\n  /** @hidden */\r\n  closeDialog() {\r\n    this.dialog.closeDialog();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isComplex = this.dialog.complex;\r\n  }\r\n\r\n}\r\n","import { Component, ViewChild, ElementRef, AfterViewInit, HostBinding } from '@angular/core';\r\nimport { AvlDialogComponent } from '../avl-dialog.component';\r\nimport { AvlBaseDialogSection } from '../avl-dialog-section.base';\r\n\r\nimport '@avl-controls/core/dist/avl-icon-button/avl-icon-button';\r\nimport '@avl-controls/core/dist/avl-tooltip/avl-tooltip';\r\n\r\n@Component({\r\n  selector: 'avl-dialog-header',\r\n  templateUrl: './avl-dialog-header.component.html',\r\n  styleUrls: ['./avl-dialog-header.component.css']\r\n})\r\nexport class AvlDialogHeaderComponent extends AvlBaseDialogSection implements AfterViewInit {\r\n  @HostBinding('class.extended')\r\n  extended = false;\r\n\r\n  @ViewChild('extendedSlot')\r\n  private extendedSlot: ElementRef<HTMLSlotElement>;\r\n\r\n  constructor(protected dialog: AvlDialogComponent) {\r\n    super(dialog);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    Promise.resolve().then(() => this.extended = !!this.extendedSlot.nativeElement.childElementCount);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { AvlDialogComponent } from '../avl-dialog.component';\r\nimport { AvlBaseDialogSection } from '../avl-dialog-section.base';\r\n\r\n@Component({\r\n  selector: 'avl-dialog-footer',\r\n  templateUrl: './avl-dialog-footer.component.html',\r\n  styleUrls: ['./avl-dialog-footer.component.css']\r\n})\r\nexport class AvlDialogFooterComponent extends AvlBaseDialogSection {\r\n  constructor(protected dialog: AvlDialogComponent) {\r\n    super(dialog);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { AvlDialogComponent } from '../avl-dialog.component';\r\nimport { AvlBaseDialogSection } from '../avl-dialog-section.base';\r\n\r\n@Component({\r\n  selector: 'avl-dialog-content',\r\n  templateUrl: './avl-dialog-content.component.html',\r\n  styleUrls: ['./avl-dialog-content.component.css']\r\n})\r\nexport class AvlDialogContentComponent extends AvlBaseDialogSection {\r\n  constructor(protected dialog: AvlDialogComponent) {\r\n    super(dialog);\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport '@avl-controls/core/dist/avl-button/avl-button';\r\n\r\n@Component({\r\n  selector: 'avl-about-dialog',\r\n  templateUrl: './avl-about-dialog.component.html',\r\n  styleUrls: [\r\n    './avl-about-dialog.component.css'\r\n  ],\r\n\r\n})\r\nexport class AvlAboutDialogComponent {\r\n\r\n  @Input() productLogo: string;\r\n  @Input() productName: string;\r\n  @Input() brandPromise: string;\r\n  @Input() versionInfo: VersionInfo[];\r\n  @Input() legalText: string;\r\n  @Input() additionalInfoLabel: string;\r\n  @Input() additionalInfoUrl: string;\r\n  @Input() copyright: string;\r\n  @Input() okButtonLabel = 'OK';\r\n\r\n  private _open = false;\r\n  @Input()\r\n  set open(value: boolean) {\r\n    this._open = value;\r\n    this.openChange.emit(this._open);\r\n  }\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                                      | Description                             | Default\r\n   * :----------------------------------------------------|:----------------------------------------|:----------------------\r\n   * `--avl-about-dialog-foreground-color`                | Main foreground color                   | `--avl-corporate-foreground-color`\r\n   * `--avl-about-dialog-foreground-medium-color`         | Forground color for version information | `--avl-corporate-foreground-medium-color`\r\n   * `--avl-about-dialog-link-color`                      | Link color                              | `--avl-corporate-link-color`\r\n   * `--avl-about-dialog-link-hover-color`                | Link hover color                        | `--avl-corporate-link-hover-color`\r\n   * `--avl-about-dialog-on-button-background-color`      | Button text color                       | `--avl-corporate-on-button-background-color`\r\n   * `--avl-about-dialog-button-background-color`         | Button background color                 | `--avl-corporate-button-background-color`\r\n   * `--avl-about-dialog-button-background-hover-color`   | Button hover color                      | `--avl-corporate-button-background-hover-color`\r\n   * `--avl-about-dialog-button-background-focus-color`   | Button focus color                      | `--avl-corporate-button-background-focus-color`\r\n   * `--avl-about-dialog-button-background-pressed-color` | Button pressed color                    | `--avl-corporate-button-background-pressed-color` *\r\n   */\r\n  _styling: any;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  closeDialog() {\r\n    this.open = false;\r\n  }\r\n\r\n  /** @hidden */\r\n  openChanged(value: boolean) {\r\n    this.open = value;\r\n  }\r\n}\r\n\r\nexport interface VersionInfo {\r\n  label: string;\r\n  value: string;\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { A11yModule} from '@angular/cdk/a11y';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n// components\r\nimport { AvlDialogComponent } from './avl-dialog/avl-dialog.component';\r\nimport { AvlNgBindersModule } from '@avl-controls/ng-binders';\r\nimport { AvlDialogHeaderComponent } from './avl-dialog/avl-dialog-header/avl-dialog-header.component';\r\nimport { AvlDialogFooterComponent } from './avl-dialog/avl-dialog-footer/avl-dialog-footer.component';\r\nimport { AvlDialogContentComponent } from './avl-dialog/avl-dialog-content/avl-dialog-content.component';\r\nimport { AvlAboutDialogComponent } from './avl-about-dialog/avl-about-dialog.component';\r\n\r\nimport {\r\n  AvlNavigationModule,\r\n} from '@avl-ng-controls/navigation';\r\n\r\nconst componentsAndDirectives = [\r\n  AvlDialogComponent,\r\n  AvlDialogHeaderComponent,\r\n  AvlDialogFooterComponent,\r\n  AvlDialogContentComponent,\r\n  AvlAboutDialogComponent,\r\n];\r\n\r\nconst providers = [\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AvlNgBindersModule,\r\n    AvlNavigationModule,\r\n    A11yModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: componentsAndDirectives,\r\n  providers: providers,\r\n  schemas: [\r\n    CUSTOM_ELEMENTS_SCHEMA\r\n  ],\r\n  exports: componentsAndDirectives\r\n})\r\nexport class AvlDialogModule { }\r\n"]}