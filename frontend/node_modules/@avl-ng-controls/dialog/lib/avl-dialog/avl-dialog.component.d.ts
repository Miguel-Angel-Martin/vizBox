import { ElementRef, EventEmitter, TemplateRef, OnInit } from '@angular/core';
import { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
import * as ɵngcc0 from '@angular/core';
export declare class AvlDialogComponent implements OnInit {
    private focusTrap;
    private _open;
    private _dirty;
    private _warningOnClose;
    private _warningHeaderText;
    private _warningDialogText;
    openWarning: boolean;
    /**
     * Dialog content
     */
    content: TemplateRef<any>;
    /** @hidden */
    element: ElementRef;
    /** @hidden */
    optionForm: any;
    /**
     * If true, the dialog can be closed by clicking on scrim
     */
    closeOnScrimClick: boolean;
    /**
     * If true, new dialog can open inside a dialog
     */
    complex: boolean;
    /**
     * Sets the text for warning dialog header.
     */
    get warningHeaderText(): string;
    set warningHeaderText(value: string);
    /**
     * Sets the main warning dialog text.
     */
    get warningDialogText(): string;
    set warningDialogText(value: string);
    /**
     * When checked, dialog opens in fullscreen mode
     */
    fullscreen: boolean;
    /**
     * Can be set to open or close the dialog.
     * Returns the current state of the dialog.
     */
    get open(): boolean;
    set open(value: boolean);
    /**
     * Indicates if the form has been touched.
     * Returns the current value of the attribute.
     */
    get dirty(): boolean;
    set dirty(value: boolean);
    /**
     * Can be set to indicate if the warning dialog should be opened.
     * Returns the current value of the attribute.
     */
    get warningOnClose(): boolean;
    set warningOnClose(value: boolean);
    openChange: EventEmitter<boolean>;
    /** @hidden */
    close(event: MouseEvent): void;
    /**
     * Opens a dialog.
     */
    openDialog(): void;
    /**
     * Closes a dialog.
     */
    closeDialog(): void;
    /**
     * Closes all dialogs.
     */
    closeAllDialogs(): void;
    /**
     * Opens a warning dialog.
     */
    openWarningDialog(): void;
    /**
     * Closes a warning dialog.
     */
    closeWarningDialog(): void;
    /** @hidden */
    keyEvent(event: KeyboardEvent): void;
    /** @hidden */
    get openedClosed(): boolean;
    constructor(focusTrap: ConfigurableFocusTrapFactory);
    /** @hidden */
    ngOnInit(): void;
    /**
     *
     * ### Styling
     * The following custom properties are available for styling:
     *
     * Custom property                     | Description                       | Default
     * :------------------------------------------|:--------------------------------------|:----------------------
     * `--avl-dialog-background-color`     | Background color of dialog        | `--avl-background-color`
     * `--avl-dialog-text-color`           | Color of text in content          | `--avl-emphasis-medium-color`
     * `--avl-dialog-header-title-color`   | Color of text in header           | `--avl-foreground-color`
     * `--avl-dialog-close-icon-color`     | Color of close icon in header     | `--avl-icon-default-color`
     * `--avl-dialog-width`                | Dialog width                      | `280 px`
     * `--avl-dialog-height`               | Dialog height                     | `100% - 96px`
     * `--avl-dialog-separator-color`      | Color of separator of dialog parts| `--avl-divider-color`
     * `--avl-dialog-close-icon-ink-pressed-color`| Color of pressed close icon in header | `--avl-ink-default-pressed-color`
     * `--avl-dialog-close-icon-ink-focus-color`  | Color of focused close icon in header | `--avl-ink-default-focus-color`
     * `--avl-dialog-close-icon-ink-hover-color`  | Color of hovered close icon in header | `--avl-ink-default-hover-color`
     *
     */
    _styling: any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlDialogComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlDialogComponent, "avl-dialog", never, { "closeOnScrimClick": "closeOnScrimClick"; "complex": "complex"; "fullscreen": "fullscreen"; "warningHeaderText": "warningHeaderText"; "warningDialogText": "warningDialogText"; "open": "open"; "dirty": "dirty"; "warningOnClose": "warningOnClose"; }, { "openChange": "openChange"; }, ["content"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWRpYWxvZy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYXZsLWRpYWxvZy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb25maWd1cmFibGVGb2N1c1RyYXBGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdmxEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgcHJpdmF0ZSBmb2N1c1RyYXA7XHJcbiAgICBwcml2YXRlIF9vcGVuO1xyXG4gICAgcHJpdmF0ZSBfZGlydHk7XHJcbiAgICBwcml2YXRlIF93YXJuaW5nT25DbG9zZTtcclxuICAgIHByaXZhdGUgX3dhcm5pbmdIZWFkZXJUZXh0O1xyXG4gICAgcHJpdmF0ZSBfd2FybmluZ0RpYWxvZ1RleHQ7XHJcbiAgICBvcGVuV2FybmluZzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogRGlhbG9nIGNvbnRlbnRcclxuICAgICAqL1xyXG4gICAgY29udGVudDogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgLyoqIEBoaWRkZW4gKi9cclxuICAgIG9wdGlvbkZvcm06IGFueTtcclxuICAgIC8qKlxyXG4gICAgICogSWYgdHJ1ZSwgdGhlIGRpYWxvZyBjYW4gYmUgY2xvc2VkIGJ5IGNsaWNraW5nIG9uIHNjcmltXHJcbiAgICAgKi9cclxuICAgIGNsb3NlT25TY3JpbUNsaWNrOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0cnVlLCBuZXcgZGlhbG9nIGNhbiBvcGVuIGluc2lkZSBhIGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICBjb21wbGV4OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IGZvciB3YXJuaW5nIGRpYWxvZyBoZWFkZXIuXHJcbiAgICAgKi9cclxuICAgIGdldCB3YXJuaW5nSGVhZGVyVGV4dCgpOiBzdHJpbmc7XHJcbiAgICBzZXQgd2FybmluZ0hlYWRlclRleHQodmFsdWU6IHN0cmluZyk7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIG1haW4gd2FybmluZyBkaWFsb2cgdGV4dC5cclxuICAgICAqL1xyXG4gICAgZ2V0IHdhcm5pbmdEaWFsb2dUZXh0KCk6IHN0cmluZztcclxuICAgIHNldCB3YXJuaW5nRGlhbG9nVGV4dCh2YWx1ZTogc3RyaW5nKTtcclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBjaGVja2VkLCBkaWFsb2cgb3BlbnMgaW4gZnVsbHNjcmVlbiBtb2RlXHJcbiAgICAgKi9cclxuICAgIGZ1bGxzY3JlZW46IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIENhbiBiZSBzZXQgdG8gb3BlbiBvciBjbG9zZSB0aGUgZGlhbG9nLlxyXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZGlhbG9nLlxyXG4gICAgICovXHJcbiAgICBnZXQgb3BlbigpOiBib29sZWFuO1xyXG4gICAgc2V0IG9wZW4odmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGZvcm0gaGFzIGJlZW4gdG91Y2hlZC5cclxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IGRpcnR5KCk6IGJvb2xlYW47XHJcbiAgICBzZXQgZGlydHkodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYW4gYmUgc2V0IHRvIGluZGljYXRlIGlmIHRoZSB3YXJuaW5nIGRpYWxvZyBzaG91bGQgYmUgb3BlbmVkLlxyXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxyXG4gICAgICovXHJcbiAgICBnZXQgd2FybmluZ09uQ2xvc2UoKTogYm9vbGVhbjtcclxuICAgIHNldCB3YXJuaW5nT25DbG9zZSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBvcGVuQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgY2xvc2UoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVucyBhIGRpYWxvZy5cclxuICAgICAqL1xyXG4gICAgb3BlbkRpYWxvZygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZXMgYSBkaWFsb2cuXHJcbiAgICAgKi9cclxuICAgIGNsb3NlRGlhbG9nKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlcyBhbGwgZGlhbG9ncy5cclxuICAgICAqL1xyXG4gICAgY2xvc2VBbGxEaWFsb2dzKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIE9wZW5zIGEgd2FybmluZyBkaWFsb2cuXHJcbiAgICAgKi9cclxuICAgIG9wZW5XYXJuaW5nRGlhbG9nKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlcyBhIHdhcm5pbmcgZGlhbG9nLlxyXG4gICAgICovXHJcbiAgICBjbG9zZVdhcm5pbmdEaWFsb2coKTogdm9pZDtcclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBrZXlFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgZ2V0IG9wZW5lZENsb3NlZCgpOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3IoZm9jdXNUcmFwOiBDb25maWd1cmFibGVGb2N1c1RyYXBGYWN0b3J5KTtcclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogIyMjIFN0eWxpbmdcclxuICAgICAqIFRoZSBmb2xsb3dpbmcgY3VzdG9tIHByb3BlcnRpZXMgYXJlIGF2YWlsYWJsZSBmb3Igc3R5bGluZzpcclxuICAgICAqXHJcbiAgICAgKiBDdXN0b20gcHJvcGVydHkgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICB8IERlZmF1bHRcclxuICAgICAqIDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBgLS1hdmwtZGlhbG9nLWJhY2tncm91bmQtY29sb3JgICAgICB8IEJhY2tncm91bmQgY29sb3Igb2YgZGlhbG9nICAgICAgICB8IGAtLWF2bC1iYWNrZ3JvdW5kLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWRpYWxvZy10ZXh0LWNvbG9yYCAgICAgICAgICAgfCBDb2xvciBvZiB0ZXh0IGluIGNvbnRlbnQgICAgICAgICAgfCBgLS1hdmwtZW1waGFzaXMtbWVkaXVtLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWRpYWxvZy1oZWFkZXItdGl0bGUtY29sb3JgICAgfCBDb2xvciBvZiB0ZXh0IGluIGhlYWRlciAgICAgICAgICAgfCBgLS1hdmwtZm9yZWdyb3VuZC1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1kaWFsb2ctY2xvc2UtaWNvbi1jb2xvcmAgICAgIHwgQ29sb3Igb2YgY2xvc2UgaWNvbiBpbiBoZWFkZXIgICAgIHwgYC0tYXZsLWljb24tZGVmYXVsdC1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1kaWFsb2ctd2lkdGhgICAgICAgICAgICAgICAgIHwgRGlhbG9nIHdpZHRoICAgICAgICAgICAgICAgICAgICAgIHwgYDI4MCBweGBcclxuICAgICAqIGAtLWF2bC1kaWFsb2ctaGVpZ2h0YCAgICAgICAgICAgICAgIHwgRGlhbG9nIGhlaWdodCAgICAgICAgICAgICAgICAgICAgIHwgYDEwMCUgLSA5NnB4YFxyXG4gICAgICogYC0tYXZsLWRpYWxvZy1zZXBhcmF0b3ItY29sb3JgICAgICAgfCBDb2xvciBvZiBzZXBhcmF0b3Igb2YgZGlhbG9nIHBhcnRzfCBgLS1hdmwtZGl2aWRlci1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1kaWFsb2ctY2xvc2UtaWNvbi1pbmstcHJlc3NlZC1jb2xvcmB8IENvbG9yIG9mIHByZXNzZWQgY2xvc2UgaWNvbiBpbiBoZWFkZXIgfCBgLS1hdmwtaW5rLWRlZmF1bHQtcHJlc3NlZC1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1kaWFsb2ctY2xvc2UtaWNvbi1pbmstZm9jdXMtY29sb3JgICB8IENvbG9yIG9mIGZvY3VzZWQgY2xvc2UgaWNvbiBpbiBoZWFkZXIgfCBgLS1hdmwtaW5rLWRlZmF1bHQtZm9jdXMtY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtZGlhbG9nLWNsb3NlLWljb24taW5rLWhvdmVyLWNvbG9yYCAgfCBDb2xvciBvZiBob3ZlcmVkIGNsb3NlIGljb24gaW4gaGVhZGVyIHwgYC0tYXZsLWluay1kZWZhdWx0LWhvdmVyLWNvbG9yYFxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgX3N0eWxpbmc6IGFueTtcclxufVxyXG4iXX0=