import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { HostBinding, Directive } from '@angular/core';
import { AvlDialogComponent } from './avl-dialog.component';
let AvlBaseDialogSection = class AvlBaseDialogSection {
    constructor(dialog) {
        this.dialog = dialog;
        this.isComplex = false;
    }
    /** @hidden */
    closeDialog() {
        this.dialog.closeDialog();
    }
    ngOnInit() {
        this.isComplex = this.dialog.complex;
    }
};
AvlBaseDialogSection.ɵfac = function AvlBaseDialogSection_Factory(t) { return new (t || AvlBaseDialogSection)(ɵngcc0.ɵɵdirectiveInject(AvlDialogComponent)); };
AvlBaseDialogSection.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlBaseDialogSection, hostVars: 2, hostBindings: function AvlBaseDialogSection_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("complex", ctx.isComplex);
    } } });
AvlBaseDialogSection.ctorParameters = () => [
    { type: AvlDialogComponent }
];
__decorate([
    HostBinding('class.complex'),
    __metadata("design:type", Boolean)
], AvlBaseDialogSection.prototype, "isComplex", void 0);
AvlBaseDialogSection = __decorate([ __metadata("design:paramtypes", [AvlDialogComponent])
], AvlBaseDialogSection);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlBaseDialogSection, [{
        type: Directive
    }], function () { return [{ type: AvlDialogComponent }]; }, { isComplex: [{
            type: HostBinding,
            args: ['class.complex']
        }] }); })();
export { AvlBaseDialogSection };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWRpYWxvZy1zZWN0aW9uLmJhc2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLW5nLWNvbnRyb2xzL2RpYWxvZy9saWIvYXZsLWRpYWxvZy9hdmwtZGlhbG9nLXNlY3Rpb24uYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHNUQsSUFBc0Isb0JBQW9CLEdBQTFDLE1BQXNCLG9CQUFvQjtBQUFHLElBRTNDLFlBQXNCLE1BQTBCO0FBQUksUUFBOUIsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7QUFBQyxRQUdqRCxjQUFTLEdBQVksS0FBSyxDQUFDO0FBQzdCLElBSnNELENBQUM7QUFDdkQsSUFJRSxjQUFjO0FBQ2hCLElBQUUsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM5QixJQUFFLENBQUM7QUFDSCxJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDekMsSUFBRSxDQUFDO0FBQ0gsQ0FDQzs7OztXQUFBO0FBQ0Q7QUFBOEMsWUFmZCxrQkFBa0I7QUFBRztBQUduRDtBQUFhLElBRFosV0FBVyxDQUFDLGVBQWUsQ0FBQztBQUM5QjtBQUVRLHVEQUZvQjtBQUxQLG9CQUFvQixvQkFEekMsU0FBUyxFQUFFLGhCQUNSLGtDQUU0QixrQkFBa0I7QUFBRyxHQUYvQixvQkFBb0IsQ0FnQnpDOzs7Ozs7b0JBQ0Q7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFBQSxBQUtBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBZEEsQUFBQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTEEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFGQSxBQUFBLEFBZ0JBLEFBaEJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEhvc3RCaW5kaW5nLCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXZsRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9hdmwtZGlhbG9nLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEF2bEJhc2VEaWFsb2dTZWN0aW9uIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRpYWxvZzogQXZsRGlhbG9nQ29tcG9uZW50KSB7IH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb21wbGV4JylcclxuICBpc0NvbXBsZXg6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBjbG9zZURpYWxvZygpIHtcclxuICAgIHRoaXMuZGlhbG9nLmNsb3NlRGlhbG9nKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuaXNDb21wbGV4ID0gdGhpcy5kaWFsb2cuY29tcGxleDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==