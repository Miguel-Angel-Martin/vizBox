import { Component, Input, Output, EventEmitter, ViewChild, ViewEncapsulation, ContentChild, TemplateRef, HostBinding, HostListener } from '@angular/core';
import { NgForm } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "./avl-dialog-header/avl-dialog-header.component";
import * as i3 from "./avl-dialog-content/avl-dialog-content.component";
import * as i4 from "@angular/common";
import * as i5 from "@avl-controls/ng-binders";
export class AvlDialogComponent {
    constructor(focusTrap) {
        this.focusTrap = focusTrap;
        this._open = false;
        this._dirty = false;
        this._warningOnClose = false;
        this._warningHeaderText = '';
        this._warningDialogText = '';
        this.openWarning = false;
        /**
         * If true, the dialog can be closed by clicking on scrim
         */
        this.closeOnScrimClick = true;
        /**
         * If true, new dialog can open inside a dialog
         */
        this.complex = false;
        /**
         * When checked, dialog opens in fullscreen mode
         */
        this.fullscreen = false;
        this.openChange = new EventEmitter();
    }
    /**
     * Sets the text for warning dialog header.
     */
    get warningHeaderText() {
        return this._warningHeaderText;
    }
    set warningHeaderText(value) {
        if (this._warningHeaderText !== value) {
            this._warningHeaderText = value;
        }
    }
    /**
     * Sets the main warning dialog text.
     */
    get warningDialogText() {
        return this._warningDialogText;
    }
    set warningDialogText(value) {
        if (this._warningDialogText !== value) {
            this._warningDialogText = value;
        }
    }
    /**
     * Can be set to open or close the dialog.
     * Returns the current state of the dialog.
     */
    get open() {
        return this._open;
    }
    set open(value) {
        if (this._open !== value) {
            this._open = !!value;
            this.openChange.emit(this._open);
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /**
     * Indicates if the form has been touched.
     * Returns the current value of the attribute.
     */
    get dirty() {
        return !!this._dirty;
    }
    set dirty(value) {
        if (this._dirty !== value) {
            this._dirty = !!value;
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /**
     * Can be set to indicate if the warning dialog should be opened.
     * Returns the current value of the attribute.
     */
    get warningOnClose() {
        return !!this._warningOnClose;
    }
    set warningOnClose(value) {
        if (this._warningOnClose !== value) {
            this._warningOnClose = !!value;
            this.focusTrap.create(this.element.nativeElement).focusFirstTabbableElementWhenReady();
        }
    }
    /** @hidden */
    close(event) {
        const target = event.target;
        if (this.closeOnScrimClick && target.classList.contains('scrim')) {
            if (this.warningOnClose) {
                if (this.openWarning === false) {
                    this.openWarning = true;
                }
            }
            else {
                if (this.dirty === true) {
                    this.openWarning = true;
                }
                else {
                    this.open = false;
                }
            }
        }
    }
    /**
     * Opens a dialog.
     */
    openDialog() {
        this.open = true;
    }
    /**
     * Closes a dialog.
     */
    closeDialog() {
        if (this.warningOnClose || this.dirty) {
            this.openWarning = !this.openWarning;
        }
        else {
            this.open = false;
        }
    }
    /**
     * Closes all dialogs.
     */
    closeAllDialogs() {
        this.openWarning = false;
        this.open = false;
        this.dirty = false;
    }
    /**
     * Opens a warning dialog.
     */
    openWarningDialog() {
        this.openWarning = true;
    }
    /**
     * Closes a warning dialog.
     */
    closeWarningDialog() {
        this.openWarning = false;
    }
    /** @hidden */
    keyEvent(event) {
        if (event.key === 'Esc' || event.key === 'Escape') {
            this.closeDialog();
        }
    }
    /** @hidden */
    headerCloseClicked() {
        this.closeDialog();
    }
    /** @hidden */
    get openedClosed() {
        return this._open;
    }
    /** @hidden */
    ngOnInit() {
        if (this.complex != null && this.complex !== false) {
            this.complex = true;
        }
    }
}
AvlDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogComponent, deps: [{ token: i1.ConfigurableFocusTrapFactory }], target: i0.ɵɵFactoryTarget.Component });
AvlDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlDialogComponent, selector: "avl-dialog", inputs: { closeOnScrimClick: "closeOnScrimClick", complex: "complex", warningHeaderText: "warningHeaderText", warningDialogText: "warningDialogText", fullscreen: "fullscreen", open: "open", dirty: "dirty", warningOnClose: "warningOnClose" }, outputs: { openChange: "openChange" }, host: { listeners: { "keydown": "keyEvent($event)", "headerCloseClicked": "headerCloseClicked($event)" }, properties: { "class.fullscreen": "this.fullscreen", "class.opened": "this.openedClosed" } }, queries: [{ propertyName: "content", first: true, predicate: TemplateRef, descendants: true }], viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true, static: true }, { propertyName: "optionForm", first: true, predicate: ["optionForm"], descendants: true, read: NgForm }], ngImport: i0, template: "<div class=\"scrim\" (click)=\"close($event)\">\r\n  <div #element class=\"dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <div *ngIf=\"open; then content\"></div>\r\n  </div>\r\n\r\n  <div *ngIf=\"openWarning\" #element class=\"dialog warning-dialog\" [class.complex]=\"complex\" tabindex=\"0\">\r\n    <avl-dialog-header>\r\n      {{ warningHeaderText || 'Warning Header' }}\r\n    </avl-dialog-header>\r\n    <avl-dialog-content class=\"warning\">\r\n      <section class=\"supporting-text\">\r\n        <div class=\"column\">\r\n          <avl-icon icon=\"icons:warning\"></avl-icon>\r\n        </div>\r\n        <div class=\"column\">\r\n          <h3>All changes will be lost if you proceed without saving.</h3>\r\n          <p id=\"customText\">{{ warningDialogText }}</p>\r\n        </div>\r\n      </section>\r\n      <section class=\"warning-buttons\">\r\n        <avl-button contained (click)=\"closeAllDialogs()\">Proceed</avl-button>\r\n        <avl-button (click)=\"closeWarningDialog()\">Cancel</avl-button>\r\n      </section>\r\n    </avl-dialog-content>\r\n  </div>\r\n</div>\r\n", styles: [":host{font-family:var(--avl-font-family);--avl-dialog-background-color:var(--avl-background-color);--avl-dialog-header-title-color:var(--avl-foreground-color);--avl-dialog-text-color:var(--avl-foreground-medium-color);--avl-dialog-close-icon-color:var(--avl-icon-default-color);--avl-dialog-separator-color:var(--avl-divider-color);--avl-dialog-close-icon-ink-pressed-color:var(--avl-ink-default-pressed-color);--avl-dialog-close-icon-ink-focus-color:var(--avl-ink-default-focus-color);--avl-dialog-close-icon-ink-hover-color:var(--avl-ink-default-hover-color);display:none}.supporting-text{display:flex;flex-direction:column}.supporting-text p{margin:0 0 16px}.column{display:flex;flex-direction:column;flex-wrap:nowrap;align-items:flex-start}#customText{margin-top:-6px;margin-bottom:11px}.supporting-text h3{font-size:16px;margin-top:7px;font-weight:700}form{margin-bottom:24px;margin-left:24px}.supporting-text avl-icon{width:40px;height:40px;margin-right:15px;margin-top:6px;flex-shrink:0;--avl-icon-custom-color:var(--avl-warning-color)}.warning-buttons{display:flex;justify-content:flex-end;margin-bottom:16px}.warning-buttons>avl-button{margin-top:4px}.warning-buttons>avl-button:last-child{margin-left:-7px}:host(.opened){display:block}.scrim{position:fixed;z-index:50;left:0;top:0;width:100%;height:100%;background-color:var(--avl-scrim-color);display:flex;flex-flow:column nowrap;justify-content:center;align-items:center}.dialog{box-sizing:border-box;height:calc(var(--avl-dialog-height) - 2px);outline:none;display:flex;flex-direction:column;position:absolute;width:var(--avl-dialog-width);min-width:280px;min-height:230px;max-width:calc(100vw - 96px);max-height:calc(100vh - 96px);background-color:var(--avl-dialog-background-color);color:var(--avl-dialog-text-color);box-shadow:var(--avl-box-shadow-24dp);min-width:444px}.warning-dialog{min-height:211px!important}:host(.fullscreen)>div>.dialog{width:100%;height:100%;max-width:100%;max-height:100%}"], components: [{ type: i2.AvlDialogHeaderComponent, selector: "avl-dialog-header" }, { type: i3.AvlDialogContentComponent, selector: "avl-dialog-content" }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-dialog',
                    templateUrl: './avl-dialog.component.html',
                    styleUrls: ['./avl-dialog.component.css'],
                    encapsulation: ViewEncapsulation.Emulated
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurableFocusTrapFactory }]; }, propDecorators: { content: [{
                type: ContentChild,
                args: [TemplateRef]
            }], element: [{
                type: ViewChild,
                args: ['element', { static: true }]
            }], optionForm: [{
                type: ViewChild,
                args: ['optionForm', { read: NgForm }]
            }], closeOnScrimClick: [{
                type: Input
            }], complex: [{
                type: Input
            }], warningHeaderText: [{
                type: Input
            }], warningDialogText: [{
                type: Input
            }], fullscreen: [{
                type: HostBinding,
                args: ['class.fullscreen']
            }, {
                type: Input
            }], open: [{
                type: Input
            }], dirty: [{
                type: Input
            }], warningOnClose: [{
                type: Input
            }], openChange: [{
                type: Output
            }], keyEvent: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], headerCloseClicked: [{
                type: HostListener,
                args: ['headerCloseClicked', ['$event']]
            }], openedClosed: [{
                type: HostBinding,
                args: ['class.opened']
            }] } });
//# sourceMappingURL=data:application/json;base64,