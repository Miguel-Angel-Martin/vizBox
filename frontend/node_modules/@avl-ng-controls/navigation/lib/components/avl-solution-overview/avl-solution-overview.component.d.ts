import { ElementRef, EventEmitter, AfterViewInit, OnInit, OnChanges, SimpleChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { Observable } from 'rxjs';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-search-bar/avl-search-bar';
import type { QueryList } from '@angular/core';
import * as i0 from "@angular/core";
export interface AvlSolutionOverviewItem {
    /**
     * Label of the item.
     */
    label: string;
    /**
     * Router which to navigate to when the item is clicked.
     * Shouldn't be used together with link.
     */
    route?: string;
    /**
     * URL which to navigate to when the item is clicked.
     * Shouldn't be used together with route.
     */
    link?: string;
    /**
     * Specifies where to open the linked document (_blank | _self | _parent | _top | framename).
     * Used only when link is set.
     */
    target?: string;
    /**
     * Description of the item.
     */
    description?: string;
    /**
     * Icon of the item.
     * Only one of icon and iconUrl can be used. The other should be undefined.
     */
    icon?: string;
    /**
     * URL of the icon image of the item.
     * Only one of icon and iconUrl can be used. The other should be undefined.
     */
    iconUrl?: string;
    /**
     * Don't show circle around icon. Different color will be applied to icon if enabled
     * Circle is visible by default
     */
    noIconCircle?: boolean;
}
export interface AvlSolutionOverviewGroup {
    /**
     * If true, additional space for description text will be provided.
     * It is disabled by default
     */
    description?: boolean;
    /**
     * Title for the group
     */
    title?: string;
    /**
     * Text above group
     */
    header?: string;
    footer?: string;
    /**
     * Group items
     */
    items: AvlSolutionOverviewItem[];
}
export declare class AvlSolutionOverviewComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy {
    private cdr;
    constructor(cdr: ChangeDetectorRef);
    /**
     *
     * ### Styling
     * The following custom properties are available for styling:
     *
     * Custom property                                   | Description                        | Default
     * :-------------------------------------------------|:-----------------------------------|:----------------------
     * `--avl-solution-overview-background-color`        | Background color of the overview   | `--avl-background-1-color`
     * `--avl-solution-overview-text-color`              | Text color                         | `--avl-foreground-color`
     * `--avl-solution-overview-item-background-color`   | Item background color              | `--avl-container-background-color`
     * `--avl-solution-overview-background-image`        | Background image of the overview   |  auto
     * `--avl-solution-overview-item-hover-color`        | Item background color when hovered | `--avl-container-background-product-hover-color`
     * `--avl-solution-overview-item-focus-color`        | Item background color when focused | `--avl-container-background-product-focus-color`
     * `--avl-solution-overview-item-pressed-color`      | Item background color when pressed | `--avl-container-background-product-pressed-color`
     * `--avl-solution-overview-title-color`             | Title color                        | `--avl-foreground-color``
     * `--avl-solution-overview-subtitle-color`          | Subtitle color                     | `--avl-foreground-medium-color``
     * `--avl-solution-overview-item-icon-color`         | Item icon color                    | `--avl-on-primary-color`
     * `--avl-solution-overview-item-icon-color-no-circle` | Item icon color if noIconCircle is set | `--avl-hint-color`
     * `--avl-solution-overview-item-icon-circle-color`  | Color for icon circle              | `--avl-product-color`
     * `--avl-solution-overview-item-icon-pressed-color` | Item icon color when pressed       | `--avl-solution-overview-item-icon-color`
     * `--avl-solution-overview-item-description-color`  | Item description text color        | `--avl-foreground-medium-color`
     */
    _styling: any;
    /**
     * Groups defining sections with buttons
     */
    groups: AvlSolutionOverviewGroup[];
    /**
     * Solution overview title.
     */
    solutionName: string;
    /**
     * URL of the icon image of the solution overview title.
     */
    solutionIconUrl: string;
    /**
     * Solution overview subtitle.
     */
    solutionSubtitle?: string;
    /**
     * Flag for the optional search bar.
     * If true, search bar is shown.
     */
    showSearchBar: boolean;
    /**
     * Emits search query string on change
     */
    searchQueryChange: EventEmitter<string>;
    /**
     * Emits value of the search query when search triggered
     */
    search: EventEmitter<string>;
    /** @hidden */
    buttonRefs: QueryList<ElementRef>;
    /** @hidden */
    groupElementRefs: QueryList<ElementRef>;
    /** @hidden */
    container: ElementRef<HTMLElement>;
    /** @hidden */
    searchbarRef: ElementRef;
    /** @hidden */
    iconButtonsContainer: ElementRef;
    /** @hidden */
    searchbarContainer: ElementRef;
    /** @hidden */
    groupsContainer: ElementRef;
    gridWidthClass$: Observable<string>;
    /** @hidden */
    contentHasScroll: boolean;
    /** @hidden */
    topMarginNeeded: boolean;
    /** @hidden */
    displayIllustration: boolean;
    private gridWidth$;
    private lastFocusedEl;
    private maxColumns;
    private largestItemsIndex;
    private maxItems;
    private screenWidth;
    private iconButtonElementsCache?;
    private groupElementRefsChangesSubscription;
    private get groupsOfItems();
    private get iconButtonElements();
    /**
     * @hidden
     */
    private readonly showIllustration;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** @hidden */
    ngAfterViewInit(): void;
    /** @hidden */
    getMaxColumnsClass(): string;
    /** @hidden **/
    onResize(): void;
    /** @hidden */
    onKeydownHandler(event: KeyboardEvent): void;
    /** @hidden */
    onQueryChange(event: any): void;
    /** @hidden */
    onSearch(event: any): void;
    private setupReferenceVars;
    private setMarginAndIllustration;
    private getGridWidth;
    private setupFocusOrdering;
    static ɵfac: i0.ɵɵFactoryDeclaration<AvlSolutionOverviewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AvlSolutionOverviewComponent, "avl-solution-overview", never, { "groups": "groups"; "solutionName": "solutionName"; "solutionIconUrl": "solutionIconUrl"; "solutionSubtitle": "solutionSubtitle"; "showSearchBar": "showSearchBar"; }, { "searchQueryChange": "searchQueryChange"; "search": "search"; }, never, ["*"]>;
}
