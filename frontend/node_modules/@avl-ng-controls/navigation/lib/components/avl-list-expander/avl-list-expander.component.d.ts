import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class AvlListExpanderComponent {
    /**
     *
     * ### Styling
     * The following custom properties are available for styling:
     *
     * Custom property                                | Description                           | Default
     * :----------------------------------------------|:--------------------------------------|:----------------------
     * `--avl-list-expander-header-hover-color`       | Header background color when hovered  | `--avl-ink-default-hover-color`
     * `--avl-list-expander-header-focus-color`       | Header background color when focused  | `--avl-ink-default-focus-color`
     * `--avl-list-expander-header-pressed-color`     | Header background color when pressed  | `--avl-ink-default-pressed-color`
     * `--avl-list-expander-divider-color`            | Divider color                         | `--avl-divider-color`
     * `--avl-list-expander-title-color`              | Title color                           | `--avl-ink-default-pressed-color`
     * `--avl-list-expander-icon-color`               | Arrow icon color                      | `--avl-divider-color`
     */
    _styling: any;
    /**
     * Boolean that changes modes between wide and narrow, false by default.
     */
    narrow: boolean;
    private _open;
    /**
     * Boolean that tells whether the expander is open or closed, expander is closed by default.
     */
    set open(value: boolean);
    get open(): boolean;
    /**
     * Event that emits when the expander is opened or closed.
     * Sends boolean value of new open state.
     */
    openChange: EventEmitter<boolean>;
    constructor();
    toggleClick(): void;
    /** @hidden */
    keyEvent(event: KeyboardEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlListExpanderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlListExpanderComponent, "avl-list-expander", never, { "narrow": "narrow"; "open": "open"; }, { "openChange": "openChange"; }, never, ["div[role=header]", "div[role=content]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWxpc3QtZXhwYW5kZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImF2bC1saXN0LWV4cGFuZGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2bExpc3RFeHBhbmRlckNvbXBvbmVudCB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiAjIyMgU3R5bGluZ1xyXG4gICAgICogVGhlIGZvbGxvd2luZyBjdXN0b20gcHJvcGVydGllcyBhcmUgYXZhaWxhYmxlIGZvciBzdHlsaW5nOlxyXG4gICAgICpcclxuICAgICAqIEN1c3RvbSBwcm9wZXJ0eSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVmYXVsdFxyXG4gICAgICogOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBgLS1hdmwtbGlzdC1leHBhbmRlci1oZWFkZXItaG92ZXItY29sb3JgICAgICAgIHwgSGVhZGVyIGJhY2tncm91bmQgY29sb3Igd2hlbiBob3ZlcmVkICB8IGAtLWF2bC1pbmstZGVmYXVsdC1ob3Zlci1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1saXN0LWV4cGFuZGVyLWhlYWRlci1mb2N1cy1jb2xvcmAgICAgICAgfCBIZWFkZXIgYmFja2dyb3VuZCBjb2xvciB3aGVuIGZvY3VzZWQgIHwgYC0tYXZsLWluay1kZWZhdWx0LWZvY3VzLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWxpc3QtZXhwYW5kZXItaGVhZGVyLXByZXNzZWQtY29sb3JgICAgICB8IEhlYWRlciBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gcHJlc3NlZCAgfCBgLS1hdmwtaW5rLWRlZmF1bHQtcHJlc3NlZC1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1saXN0LWV4cGFuZGVyLWRpdmlkZXItY29sb3JgICAgICAgICAgICAgfCBEaXZpZGVyIGNvbG9yICAgICAgICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLWRpdmlkZXItY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtbGlzdC1leHBhbmRlci10aXRsZS1jb2xvcmAgICAgICAgICAgICAgIHwgVGl0bGUgY29sb3IgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1pbmstZGVmYXVsdC1wcmVzc2VkLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWxpc3QtZXhwYW5kZXItaWNvbi1jb2xvcmAgICAgICAgICAgICAgICB8IEFycm93IGljb24gY29sb3IgICAgICAgICAgICAgICAgICAgICAgfCBgLS1hdmwtZGl2aWRlci1jb2xvcmBcclxuICAgICAqL1xyXG4gICAgX3N0eWxpbmc6IGFueTtcclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB0aGF0IGNoYW5nZXMgbW9kZXMgYmV0d2VlbiB3aWRlIGFuZCBuYXJyb3csIGZhbHNlIGJ5IGRlZmF1bHQuXHJcbiAgICAgKi9cclxuICAgIG5hcnJvdzogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX29wZW47XHJcbiAgICAvKipcclxuICAgICAqIEJvb2xlYW4gdGhhdCB0ZWxscyB3aGV0aGVyIHRoZSBleHBhbmRlciBpcyBvcGVuIG9yIGNsb3NlZCwgZXhwYW5kZXIgaXMgY2xvc2VkIGJ5IGRlZmF1bHQuXHJcbiAgICAgKi9cclxuICAgIHNldCBvcGVuKHZhbHVlOiBib29sZWFuKTtcclxuICAgIGdldCBvcGVuKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IHRoYXQgZW1pdHMgd2hlbiB0aGUgZXhwYW5kZXIgaXMgb3BlbmVkIG9yIGNsb3NlZC5cclxuICAgICAqIFNlbmRzIGJvb2xlYW4gdmFsdWUgb2YgbmV3IG9wZW4gc3RhdGUuXHJcbiAgICAgKi9cclxuICAgIG9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIGNvbnN0cnVjdG9yKCk7XHJcbiAgICB0b2dnbGVDbGljaygpOiB2b2lkO1xyXG4gICAgLyoqIEBoaWRkZW4gKi9cclxuICAgIGtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcclxufVxyXG4iXX0=