import { AfterViewInit, OnDestroy, Renderer2 } from '@angular/core';
import { Router } from '@angular/router';
/**
* avl-long-page should only be used inside avl-app-layout. The only scrollable container should
* be avl-app-layout (already set by default) and avl-long-page and components that are using it must
* not scroll in order for avl-long-page to work properly.
*/
import * as ɵngcc0 from '@angular/core';
export declare class AvlLongPageComponent implements AfterViewInit, OnDestroy {
    private router;
    private renderer;
    private platformId;
    /**
   *
   * ### Styling
   * The following custom properties are available for styling:
   *
   * Custom property                          | Description                         | Default
   * :----------------------------------------|:------------------------------------|:-----------
   *
   */
    _styling: any;
    private paragraphs;
    private currentFragment;
    private scrollContainer;
    private routerSubscription;
    private paragraphsSubscription;
    private scrollSubscription;
    /**
    * @hidden
    */
    constructor(router: Router, renderer: Renderer2, platformId: Object);
    private handleRouteChange;
    private scrollListener;
    /**
    * @hidden
    */
    ngAfterViewInit(): void;
    /**
    * @hidden
    */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlLongPageComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlLongPageComponent, "avl-long-page", never, {}, {}, ["paragraphs"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWxvbmctcGFnZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYXZsLWxvbmctcGFnZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG4vKipcclxuKiBhdmwtbG9uZy1wYWdlIHNob3VsZCBvbmx5IGJlIHVzZWQgaW5zaWRlIGF2bC1hcHAtbGF5b3V0LiBUaGUgb25seSBzY3JvbGxhYmxlIGNvbnRhaW5lciBzaG91bGRcclxuKiBiZSBhdmwtYXBwLWxheW91dCAoYWxyZWFkeSBzZXQgYnkgZGVmYXVsdCkgYW5kIGF2bC1sb25nLXBhZ2UgYW5kIGNvbXBvbmVudHMgdGhhdCBhcmUgdXNpbmcgaXQgbXVzdFxyXG4qIG5vdCBzY3JvbGwgaW4gb3JkZXIgZm9yIGF2bC1sb25nLXBhZ2UgdG8gd29yayBwcm9wZXJseS5cclxuKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXZsTG9uZ1BhZ2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSByb3V0ZXI7XHJcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xyXG4gICAgLyoqXHJcbiAgICpcclxuICAgKiAjIyMgU3R5bGluZ1xyXG4gICAqIFRoZSBmb2xsb3dpbmcgY3VzdG9tIHByb3BlcnRpZXMgYXJlIGF2YWlsYWJsZSBmb3Igc3R5bGluZzpcclxuICAgKlxyXG4gICAqIEN1c3RvbSBwcm9wZXJ0eSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICB8IERlZmF1bHRcclxuICAgKiA6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLVxyXG4gICAqXHJcbiAgICovXHJcbiAgICBfc3R5bGluZzogYW55O1xyXG4gICAgcHJpdmF0ZSBwYXJhZ3JhcGhzO1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50RnJhZ21lbnQ7XHJcbiAgICBwcml2YXRlIHNjcm9sbENvbnRhaW5lcjtcclxuICAgIHByaXZhdGUgcm91dGVyU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBwYXJhZ3JhcGhzU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBzY3JvbGxTdWJzY3JpcHRpb247XHJcbiAgICAvKipcclxuICAgICogQGhpZGRlblxyXG4gICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyLCByZW5kZXJlcjogUmVuZGVyZXIyLCBwbGF0Zm9ybUlkOiBPYmplY3QpO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVSb3V0ZUNoYW5nZTtcclxuICAgIHByaXZhdGUgc2Nyb2xsTGlzdGVuZXI7XHJcbiAgICAvKipcclxuICAgICogQGhpZGRlblxyXG4gICAgKi9cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAqIEBoaWRkZW5cclxuICAgICovXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==