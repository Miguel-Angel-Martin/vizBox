import { EventEmitter, OnInit } from '@angular/core';
import '@avl-controls/core/dist/avl-app-switcher/avl-app-switcher';
import '@avl-controls/core/dist/avl-icon/avl-icon.js';
import * as ɵngcc0 from '@angular/core';
export declare class MenuButtonItems {
    readonly headerText: string;
    readonly headerIconName: string;
    readonly items: Array<{
        itemText: string;
        iconName: string;
    }>;
    readonly footerItems?: Array<{
        itemText: string;
        iconName: string;
    }>;
    constructor(headerText: string, headerIconName: string, items: Array<{
        itemText: string;
        iconName: string;
    }>, footerItems?: Array<{
        itemText: string;
        iconName: string;
    }>);
}
/**
 * Object representing sub-application that is added to app-bar drop-down
 */
export declare class ApplicationReference {
    name: string;
    icon?: string;
    image?: string;
    [key: string]: any;
}
export declare class AvlAppBarComponent implements OnInit {
    /**
     *
     * ### Styling
     * The following custom properties are available for styling:
     *
     * Custom property                          | Description                                   | Default
     * :----------------------------------------|:----------------------------------------------|:-------------------------
     * `--avl-app-bar-background-color`         | Background color of app-bar                   | `--avl-primary-color`
     * `--avl-app-bar-height`                   | Height of app-bar (minus 3px bottom line)     | `53px`
     * `--avl-app-bar-item-color`               | Text color of app-bar items                   | `--avl-on-primary-color`
     * `--avl-app-bar-underline-color`          | Underline color                               | `--avl-product-color`
     */
    _styling: any;
    /**
     * Tells which is the currently selected application
     */
    currentApplication: ApplicationReference;
    /**
     * Boolean to toggle responsive features
     * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout
     */
    responsive: boolean;
    /**
     * Boolean to set only mobile features on
     * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout
     */
    mobile: boolean;
    /**
     * URL to application home/ landing page
     */
    homePageUrl: string;
    /**
     * URL to application icon / logo
     */
    appLogo: string;
    /**
     * List of sub-applications used
     */
    applications: ApplicationReference[];
    /**
     * Event emitted when new application is added.
     */
    applicationListChange: EventEmitter<ApplicationReference[]>;
    /**
     * Flag indicating app-bar has fixed positioning or no
     */
    fixed: boolean;
    /**
     * Event emitted when application is changed in app-bar drop-down
     */
    currentApplicationChange: EventEmitter<ApplicationReference>;
    /**
     * Event emmited when Burger menu is clicked.
     * Toggles side-nav visibility if app-bar is part of app-layout in responsive mode
     */
    burgerClicked: EventEmitter<void>;
    /** @hidden */
    appLogoSet: boolean;
    private appLogoPreset;
    /** @hidden */
    _appsLength: number;
    /**
     * True if only one element added to applications array
     */
    get isSingleApp(): boolean;
    /**
     * @hidden
     */
    get showAppLogo(): boolean;
    /**
     * @hidden
     */
    burgerIconClicked(): void;
    /**
     * @hidden
     */
    onApplicationChanged(app: ApplicationReference): void;
    /**
     * @hidden
     */
    onApplicationListChanged(apps: ApplicationReference[]): void;
    /** @hidden */
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlAppBarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlAppBarComponent, "avl-app-bar", never, { "applications": "applications"; "fixed": "fixed"; "currentApplication": "currentApplication"; "appLogo": "appLogo"; "responsive": "responsive"; "mobile": "mobile"; "homePageUrl": "homePageUrl"; }, { "applicationListChange": "applicationListChange"; "currentApplicationChange": "currentApplicationChange"; "burgerClicked": "burgerClicked"; }, never, ["*", "avl-overflow-menu[slot=menu]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWFwcC1iYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImF2bC1hcHAtYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgJ0BhdmwtY29udHJvbHMvY29yZS9kaXN0L2F2bC1hcHAtc3dpdGNoZXIvYXZsLWFwcC1zd2l0Y2hlcic7XHJcbmltcG9ydCAnQGF2bC1jb250cm9scy9jb3JlL2Rpc3QvYXZsLWljb24vYXZsLWljb24uanMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNZW51QnV0dG9uSXRlbXMge1xyXG4gICAgcmVhZG9ubHkgaGVhZGVyVGV4dDogc3RyaW5nO1xyXG4gICAgcmVhZG9ubHkgaGVhZGVySWNvbk5hbWU6IHN0cmluZztcclxuICAgIHJlYWRvbmx5IGl0ZW1zOiBBcnJheTx7XHJcbiAgICAgICAgaXRlbVRleHQ6IHN0cmluZztcclxuICAgICAgICBpY29uTmFtZTogc3RyaW5nO1xyXG4gICAgfT47XHJcbiAgICByZWFkb25seSBmb290ZXJJdGVtcz86IEFycmF5PHtcclxuICAgICAgICBpdGVtVGV4dDogc3RyaW5nO1xyXG4gICAgICAgIGljb25OYW1lOiBzdHJpbmc7XHJcbiAgICB9PjtcclxuICAgIGNvbnN0cnVjdG9yKGhlYWRlclRleHQ6IHN0cmluZywgaGVhZGVySWNvbk5hbWU6IHN0cmluZywgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICBpdGVtVGV4dDogc3RyaW5nO1xyXG4gICAgICAgIGljb25OYW1lOiBzdHJpbmc7XHJcbiAgICB9PiwgZm9vdGVySXRlbXM/OiBBcnJheTx7XHJcbiAgICAgICAgaXRlbVRleHQ6IHN0cmluZztcclxuICAgICAgICBpY29uTmFtZTogc3RyaW5nO1xyXG4gICAgfT4pO1xyXG59XHJcbi8qKlxyXG4gKiBPYmplY3QgcmVwcmVzZW50aW5nIHN1Yi1hcHBsaWNhdGlvbiB0aGF0IGlzIGFkZGVkIHRvIGFwcC1iYXIgZHJvcC1kb3duXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBcHBsaWNhdGlvblJlZmVyZW5jZSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBpY29uPzogc3RyaW5nO1xyXG4gICAgaW1hZ2U/OiBzdHJpbmc7XHJcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXZsQXBwQmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqICMjIyBTdHlsaW5nXHJcbiAgICAgKiBUaGUgZm9sbG93aW5nIGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XHJcbiAgICAgKlxyXG4gICAgICogQ3VzdG9tIHByb3BlcnR5ICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlZmF1bHRcclxuICAgICAqIDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBgLS1hdmwtYXBwLWJhci1iYWNrZ3JvdW5kLWNvbG9yYCAgICAgICAgIHwgQmFja2dyb3VuZCBjb2xvciBvZiBhcHAtYmFyICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLXByaW1hcnktY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtYXBwLWJhci1oZWlnaHRgICAgICAgICAgICAgICAgICAgIHwgSGVpZ2h0IG9mIGFwcC1iYXIgKG1pbnVzIDNweCBib3R0b20gbGluZSkgICAgIHwgYDUzcHhgXHJcbiAgICAgKiBgLS1hdmwtYXBwLWJhci1pdGVtLWNvbG9yYCAgICAgICAgICAgICAgIHwgVGV4dCBjb2xvciBvZiBhcHAtYmFyIGl0ZW1zICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLW9uLXByaW1hcnktY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtYXBwLWJhci11bmRlcmxpbmUtY29sb3JgICAgICAgICAgIHwgVW5kZXJsaW5lIGNvbG9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLXByb2R1Y3QtY29sb3JgXHJcbiAgICAgKi9cclxuICAgIF9zdHlsaW5nOiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIFRlbGxzIHdoaWNoIGlzIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgYXBwbGljYXRpb25cclxuICAgICAqL1xyXG4gICAgY3VycmVudEFwcGxpY2F0aW9uOiBBcHBsaWNhdGlvblJlZmVyZW5jZTtcclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB0byB0b2dnbGUgcmVzcG9uc2l2ZSBmZWF0dXJlc1xyXG4gICAgICogT24gbW9iaWxlIHNjcmVlbnMgc2lkZW5hdiB0b2dnbGluZyBpcyB0cmlnZ2VyZWQgYnkgYnVyZ2VyIGljb24gaW4gYXBwLWJhciBhcyBwYXJ0IG9mIGFwcC1sYXlvdXRcclxuICAgICAqL1xyXG4gICAgcmVzcG9uc2l2ZTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB0byBzZXQgb25seSBtb2JpbGUgZmVhdHVyZXMgb25cclxuICAgICAqIE9uIG1vYmlsZSBzY3JlZW5zIHNpZGVuYXYgdG9nZ2xpbmcgaXMgdHJpZ2dlcmVkIGJ5IGJ1cmdlciBpY29uIGluIGFwcC1iYXIgYXMgcGFydCBvZiBhcHAtbGF5b3V0XHJcbiAgICAgKi9cclxuICAgIG1vYmlsZTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVVJMIHRvIGFwcGxpY2F0aW9uIGhvbWUvIGxhbmRpbmcgcGFnZVxyXG4gICAgICovXHJcbiAgICBob21lUGFnZVVybDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVUkwgdG8gYXBwbGljYXRpb24gaWNvbiAvIGxvZ29cclxuICAgICAqL1xyXG4gICAgYXBwTG9nbzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0IG9mIHN1Yi1hcHBsaWNhdGlvbnMgdXNlZFxyXG4gICAgICovXHJcbiAgICBhcHBsaWNhdGlvbnM6IEFwcGxpY2F0aW9uUmVmZXJlbmNlW107XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBuZXcgYXBwbGljYXRpb24gaXMgYWRkZWQuXHJcbiAgICAgKi9cclxuICAgIGFwcGxpY2F0aW9uTGlzdENoYW5nZTogRXZlbnRFbWl0dGVyPEFwcGxpY2F0aW9uUmVmZXJlbmNlW10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGbGFnIGluZGljYXRpbmcgYXBwLWJhciBoYXMgZml4ZWQgcG9zaXRpb25pbmcgb3Igbm9cclxuICAgICAqL1xyXG4gICAgZml4ZWQ6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhcHBsaWNhdGlvbiBpcyBjaGFuZ2VkIGluIGFwcC1iYXIgZHJvcC1kb3duXHJcbiAgICAgKi9cclxuICAgIGN1cnJlbnRBcHBsaWNhdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPEFwcGxpY2F0aW9uUmVmZXJlbmNlPjtcclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgZW1taXRlZCB3aGVuIEJ1cmdlciBtZW51IGlzIGNsaWNrZWQuXHJcbiAgICAgKiBUb2dnbGVzIHNpZGUtbmF2IHZpc2liaWxpdHkgaWYgYXBwLWJhciBpcyBwYXJ0IG9mIGFwcC1sYXlvdXQgaW4gcmVzcG9uc2l2ZSBtb2RlXHJcbiAgICAgKi9cclxuICAgIGJ1cmdlckNsaWNrZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBhcHBMb2dvU2V0OiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBhcHBMb2dvUHJlc2V0O1xyXG4gICAgLyoqIEBoaWRkZW4gKi9cclxuICAgIF9hcHBzTGVuZ3RoOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRydWUgaWYgb25seSBvbmUgZWxlbWVudCBhZGRlZCB0byBhcHBsaWNhdGlvbnMgYXJyYXlcclxuICAgICAqL1xyXG4gICAgZ2V0IGlzU2luZ2xlQXBwKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgZ2V0IHNob3dBcHBMb2dvKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgYnVyZ2VySWNvbkNsaWNrZWQoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBvbkFwcGxpY2F0aW9uQ2hhbmdlZChhcHA6IEFwcGxpY2F0aW9uUmVmZXJlbmNlKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBvbkFwcGxpY2F0aW9uTGlzdENoYW5nZWQoYXBwczogQXBwbGljYXRpb25SZWZlcmVuY2VbXSk6IHZvaWQ7XHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxufVxyXG4iXX0=