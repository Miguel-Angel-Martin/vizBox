import { EventEmitter, OnInit } from '@angular/core';
import '@avl-controls/core/dist/avl-app-switcher/avl-app-switcher';
import '@avl-controls/core/dist/avl-icon/avl-icon.js';
import * as ɵngcc0 from '@angular/core';
export declare class MenuButtonItems {
    readonly headerText: string;
    readonly headerIconName: string;
    readonly items: Array<{
        itemText: string;
        iconName: string;
    }>;
    readonly footerItems?: Array<{
        itemText: string;
        iconName: string;
    }>;
    constructor(headerText: string, headerIconName: string, items: Array<{
        itemText: string;
        iconName: string;
    }>, footerItems?: Array<{
        itemText: string;
        iconName: string;
    }>);
}
/**
 * Object representing sub-application that is added to app-bar drop-down
 */
export interface ApplicationReference {
    name: string;
    icon?: string;
    image?: string;
    [key: string]: any;
}
export declare class AvlAppBarComponent implements OnInit {
    /**
     *
     * ### Styling
     * The following custom properties are available for styling:
     *
     * Custom property                          | Description                                   | Default
     * :----------------------------------------|:----------------------------------------------|:-------------------------
     * `--avl-app-bar-background-color`         | Background color of app-bar                   | `--avl-primary-color`
     * `--avl-app-bar-height`                   | Height of app-bar (minus 3px bottom line)     | `53px`
     * `--avl-app-bar-item-color`               | Text color of app-bar items                   | `--avl-on-primary-color`
     * `--avl-app-bar-underline-color`          | Underline color                               | `--avl-product-color`
     */
    _styling: any;
    /**
     * Tells which is the currently selected application
     */
    currentApplication: ApplicationReference;
    /**
     * Boolean to toggle responsive features
     * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout
     */
    responsive: boolean;
    /**
     * Boolean to set only mobile features on
     * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout
     */
    mobile: boolean;
    /**
     * URL to application home/ landing page
     */
    homePageUrl: string;
    /**
     * URL to application icon / logo
     */
    appLogo: string;
    /**
     * List of sub-applications used
     */
    applications: ApplicationReference[];
    /**
     * Flag indicating app-bar has fixed positioning or no
     */
    fixed: boolean;
    /**
     * Event emitted when application is changed in app-bar drop-down
     */
    currentApplicationChange: EventEmitter<ApplicationReference>;
    /**
     * Event emmited when Burger menu is clicked.
     * Toggles side-nav visibility if app-bar is part of app-layout in responsive mode
     */
    burgerClicked: EventEmitter<void>;
    /** @hidden */
    appLogoSet: boolean;
    private appLogoPreset;
    /** @hidden */
    _appsLength: number;
    /**
     * True if only one element added to applications array
     */
    get isSingleApp(): boolean;
    /**
     * @hidden
     */
    get showAppLogo(): boolean;
    /**
     * @hidden
     */
    burgerIconClicked(): void;
    /**
     * @hidden
     */
    onApplicationChanged(app: ApplicationReference): void;
    /** @hidden */
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlAppBarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlAppBarComponent, "avl-app-bar", never, { "applications": "applications"; "fixed": "fixed"; "currentApplication": "currentApplication"; "appLogo": "appLogo"; "responsive": "responsive"; "mobile": "mobile"; "homePageUrl": "homePageUrl"; }, { "currentApplicationChange": "currentApplicationChange"; "burgerClicked": "burgerClicked"; }, never, ["*", "avl-overflow-menu[slot=menu]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWFwcC1iYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImF2bC1hcHAtYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAnQGF2bC1jb250cm9scy9jb3JlL2Rpc3QvYXZsLWFwcC1zd2l0Y2hlci9hdmwtYXBwLXN3aXRjaGVyJztcclxuaW1wb3J0ICdAYXZsLWNvbnRyb2xzL2NvcmUvZGlzdC9hdmwtaWNvbi9hdmwtaWNvbi5qcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1lbnVCdXR0b25JdGVtcyB7XHJcbiAgICByZWFkb25seSBoZWFkZXJUZXh0OiBzdHJpbmc7XHJcbiAgICByZWFkb25seSBoZWFkZXJJY29uTmFtZTogc3RyaW5nO1xyXG4gICAgcmVhZG9ubHkgaXRlbXM6IEFycmF5PHtcclxuICAgICAgICBpdGVtVGV4dDogc3RyaW5nO1xyXG4gICAgICAgIGljb25OYW1lOiBzdHJpbmc7XHJcbiAgICB9PjtcclxuICAgIHJlYWRvbmx5IGZvb3Rlckl0ZW1zPzogQXJyYXk8e1xyXG4gICAgICAgIGl0ZW1UZXh0OiBzdHJpbmc7XHJcbiAgICAgICAgaWNvbk5hbWU6IHN0cmluZztcclxuICAgIH0+O1xyXG4gICAgY29uc3RydWN0b3IoaGVhZGVyVGV4dDogc3RyaW5nLCBoZWFkZXJJY29uTmFtZTogc3RyaW5nLCBpdGVtczogQXJyYXk8e1xyXG4gICAgICAgIGl0ZW1UZXh0OiBzdHJpbmc7XHJcbiAgICAgICAgaWNvbk5hbWU6IHN0cmluZztcclxuICAgIH0+LCBmb290ZXJJdGVtcz86IEFycmF5PHtcclxuICAgICAgICBpdGVtVGV4dDogc3RyaW5nO1xyXG4gICAgICAgIGljb25OYW1lOiBzdHJpbmc7XHJcbiAgICB9Pik7XHJcbn1cclxuLyoqXHJcbiAqIE9iamVjdCByZXByZXNlbnRpbmcgc3ViLWFwcGxpY2F0aW9uIHRoYXQgaXMgYWRkZWQgdG8gYXBwLWJhciBkcm9wLWRvd25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGljYXRpb25SZWZlcmVuY2Uge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgaWNvbj86IHN0cmluZztcclxuICAgIGltYWdlPzogc3RyaW5nO1xyXG4gICAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2bEFwcEJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiAjIyMgU3R5bGluZ1xyXG4gICAgICogVGhlIGZvbGxvd2luZyBjdXN0b20gcHJvcGVydGllcyBhcmUgYXZhaWxhYmxlIGZvciBzdHlsaW5nOlxyXG4gICAgICpcclxuICAgICAqIEN1c3RvbSBwcm9wZXJ0eSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZWZhdWx0XHJcbiAgICAgKiA6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICogYC0tYXZsLWFwcC1iYXItYmFja2dyb3VuZC1jb2xvcmAgICAgICAgICB8IEJhY2tncm91bmQgY29sb3Igb2YgYXBwLWJhciAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1wcmltYXJ5LWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWFwcC1iYXItaGVpZ2h0YCAgICAgICAgICAgICAgICAgICB8IEhlaWdodCBvZiBhcHAtYmFyIChtaW51cyAzcHggYm90dG9tIGxpbmUpICAgICB8IGA1M3B4YFxyXG4gICAgICogYC0tYXZsLWFwcC1iYXItaXRlbS1jb2xvcmAgICAgICAgICAgICAgICB8IFRleHQgY29sb3Igb2YgYXBwLWJhciBpdGVtcyAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1vbi1wcmltYXJ5LWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWFwcC1iYXItdW5kZXJsaW5lLWNvbG9yYCAgICAgICAgICB8IFVuZGVybGluZSBjb2xvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1wcm9kdWN0LWNvbG9yYFxyXG4gICAgICovXHJcbiAgICBfc3R5bGluZzogYW55O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUZWxscyB3aGljaCBpcyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGFwcGxpY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIGN1cnJlbnRBcHBsaWNhdGlvbjogQXBwbGljYXRpb25SZWZlcmVuY2U7XHJcbiAgICAvKipcclxuICAgICAqIEJvb2xlYW4gdG8gdG9nZ2xlIHJlc3BvbnNpdmUgZmVhdHVyZXNcclxuICAgICAqIE9uIG1vYmlsZSBzY3JlZW5zIHNpZGVuYXYgdG9nZ2xpbmcgaXMgdHJpZ2dlcmVkIGJ5IGJ1cmdlciBpY29uIGluIGFwcC1iYXIgYXMgcGFydCBvZiBhcHAtbGF5b3V0XHJcbiAgICAgKi9cclxuICAgIHJlc3BvbnNpdmU6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEJvb2xlYW4gdG8gc2V0IG9ubHkgbW9iaWxlIGZlYXR1cmVzIG9uXHJcbiAgICAgKiBPbiBtb2JpbGUgc2NyZWVucyBzaWRlbmF2IHRvZ2dsaW5nIGlzIHRyaWdnZXJlZCBieSBidXJnZXIgaWNvbiBpbiBhcHAtYmFyIGFzIHBhcnQgb2YgYXBwLWxheW91dFxyXG4gICAgICovXHJcbiAgICBtb2JpbGU6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFVSTCB0byBhcHBsaWNhdGlvbiBob21lLyBsYW5kaW5nIHBhZ2VcclxuICAgICAqL1xyXG4gICAgaG9tZVBhZ2VVcmw6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVVJMIHRvIGFwcGxpY2F0aW9uIGljb24gLyBsb2dvXHJcbiAgICAgKi9cclxuICAgIGFwcExvZ286IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogTGlzdCBvZiBzdWItYXBwbGljYXRpb25zIHVzZWRcclxuICAgICAqL1xyXG4gICAgYXBwbGljYXRpb25zOiBBcHBsaWNhdGlvblJlZmVyZW5jZVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGbGFnIGluZGljYXRpbmcgYXBwLWJhciBoYXMgZml4ZWQgcG9zaXRpb25pbmcgb3Igbm9cclxuICAgICAqL1xyXG4gICAgZml4ZWQ6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhcHBsaWNhdGlvbiBpcyBjaGFuZ2VkIGluIGFwcC1iYXIgZHJvcC1kb3duXHJcbiAgICAgKi9cclxuICAgIGN1cnJlbnRBcHBsaWNhdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPEFwcGxpY2F0aW9uUmVmZXJlbmNlPjtcclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgZW1taXRlZCB3aGVuIEJ1cmdlciBtZW51IGlzIGNsaWNrZWQuXHJcbiAgICAgKiBUb2dnbGVzIHNpZGUtbmF2IHZpc2liaWxpdHkgaWYgYXBwLWJhciBpcyBwYXJ0IG9mIGFwcC1sYXlvdXQgaW4gcmVzcG9uc2l2ZSBtb2RlXHJcbiAgICAgKi9cclxuICAgIGJ1cmdlckNsaWNrZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBhcHBMb2dvU2V0OiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBhcHBMb2dvUHJlc2V0O1xyXG4gICAgLyoqIEBoaWRkZW4gKi9cclxuICAgIF9hcHBzTGVuZ3RoOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRydWUgaWYgb25seSBvbmUgZWxlbWVudCBhZGRlZCB0byBhcHBsaWNhdGlvbnMgYXJyYXlcclxuICAgICAqL1xyXG4gICAgZ2V0IGlzU2luZ2xlQXBwKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgZ2V0IHNob3dBcHBMb2dvKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgYnVyZ2VySWNvbkNsaWNrZWQoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBvbkFwcGxpY2F0aW9uQ2hhbmdlZChhcHA6IEFwcGxpY2F0aW9uUmVmZXJlbmNlKTogdm9pZDtcclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG59XHJcbiJdfQ==