import { EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';
import { TopLevelPage, Group, Page, Params } from './menu-items';
import { Router, ActivatedRoute } from '@angular/router';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import * as ɵngcc0 from '@angular/core';
export declare class AvlSideNavComponent implements OnDestroy, OnChanges {
    private router;
    activeRoute: ActivatedRoute;
    /**
     *
     * ### Styling
     * The following custom properties are available for styling:
     *
     * Custom property                          | Description                                                                                           | Default
     * :----------------------------------------|:------------------------------------------------------------------------------------------------------|:---------
     * `--avl-app-bar-height`                   | Height of the toolbar. Needed so that the avl-side-nav can be correctly positioned below the toolbar. | `56px`
     * `--avl-side-nav-product-color`           | Used for selected color                                                                               | `--avl-product-selected`
     * `--avl-side-nav-product-color-hover`     | Used for hover color.                                                                                 | `--avl-product-hover`
     * `--avl-side-nav-text-color`              | Color of the text                                                                                     | `--avl-emphasis-high-color`
     * `--avl-side-nav-icons-color`             | Color of icons                                                                                        | `--avl-emphasis-medium-color`
     * `--avl-side-nav-background-color`        | Background color of the avl-side-nav                                                                  | `--avl-side-nav-color`
     * `--avl-side-nav-open-width`              | Width of the avl-side-nav in the open state.                                                          | `256px`
     *
     */
    _styling: any;
    private openValue;
    /**
     * Can be set to open or close the side nav.
     * Returns the current state of the side nav.
     */
    get open(): boolean;
    /**
     * Items that are shown in the side nav.
     */
    menuItems: Array<TopLevelPage | Group>;
    /**
     * Boolean to toggle responsive features
     * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout
     */
    responsive: boolean;
    /**
     * Boolean to set only mobile features on
     * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout
     */
    mobile: boolean;
    /**
     * Emitted when the open property changes.
     */
    openChange: EventEmitter<boolean>;
    set open(val: boolean);
    private subscription;
    /**
     * @hidden
     */
    selectedGroup: Group;
    /**
     * @hidden
     */
    selectedPage: Page;
    /**
     * @hidden
     */
    selectedParagraph: string;
    private selectedParagraphIndex;
    private params;
    constructor(router: Router, activeRoute: ActivatedRoute);
    /**
     * @hidden
     */
    toggleOpen(): void;
    private manuallyOpened;
    /**
     * @hidden
     */
    arrowToggleOpen(): void;
    /**
     * @hidden
     */
    mobileClose(): void;
    /**
     * @hidden
     */
    groupClicked(item: any): void;
    /**
     * @hidden
     */
    getScrubberStyle(): {
        height: string;
        top: string;
    };
    /**
    * @hidden
    */
    trimSlash(str: string): string;
    private selectItems;
    /**
    * @hidden
    */
    ngOnChanges(changes: SimpleChanges): void;
    /**
    * @hidden
    */
    ngOnDestroy(): void;
    /**
    * @hidden
    */
    getParams(params: Params[]): {};
    /**
    * @hidden
    */
    getUrlParams(params: Params[]): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlSideNavComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvlSideNavComponent, "avl-side-nav", never, { "open": "open"; "menuItems": "menuItems"; "responsive": "responsive"; "mobile": "mobile"; }, { "openChange": "openChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNpZGUtbmF2LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdmwtc2lkZS1uYXYuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUb3BMZXZlbFBhZ2UsIEdyb3VwLCBQYWdlLCBQYXJhbXMgfSBmcm9tICcuL21lbnUtaXRlbXMnO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0ICdAYXZsLWNvbnRyb2xzL2NvcmUvZGlzdC9hdmwtaWNvbi9hdmwtaWNvbic7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2bFNpZGVOYXZDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XHJcbiAgICBwcml2YXRlIHJvdXRlcjtcclxuICAgIGFjdGl2ZVJvdXRlOiBBY3RpdmF0ZWRSb3V0ZTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqICMjIyBTdHlsaW5nXHJcbiAgICAgKiBUaGUgZm9sbG93aW5nIGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XHJcbiAgICAgKlxyXG4gICAgICogQ3VzdG9tIHByb3BlcnR5ICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVmYXVsdFxyXG4gICAgICogOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tXHJcbiAgICAgKiBgLS1hdmwtYXBwLWJhci1oZWlnaHRgICAgICAgICAgICAgICAgICAgIHwgSGVpZ2h0IG9mIHRoZSB0b29sYmFyLiBOZWVkZWQgc28gdGhhdCB0aGUgYXZsLXNpZGUtbmF2IGNhbiBiZSBjb3JyZWN0bHkgcG9zaXRpb25lZCBiZWxvdyB0aGUgdG9vbGJhci4gfCBgNTZweGBcclxuICAgICAqIGAtLWF2bC1zaWRlLW5hdi1wcm9kdWN0LWNvbG9yYCAgICAgICAgICAgfCBVc2VkIGZvciBzZWxlY3RlZCBjb2xvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1wcm9kdWN0LXNlbGVjdGVkYFxyXG4gICAgICogYC0tYXZsLXNpZGUtbmF2LXByb2R1Y3QtY29sb3ItaG92ZXJgICAgICB8IFVzZWQgZm9yIGhvdmVyIGNvbG9yLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLXByb2R1Y3QtaG92ZXJgXHJcbiAgICAgKiBgLS1hdmwtc2lkZS1uYXYtdGV4dC1jb2xvcmAgICAgICAgICAgICAgIHwgQ29sb3Igb2YgdGhlIHRleHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgLS1hdmwtZW1waGFzaXMtaGlnaC1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1zaWRlLW5hdi1pY29ucy1jb2xvcmAgICAgICAgICAgICAgfCBDb2xvciBvZiBpY29ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1lbXBoYXNpcy1tZWRpdW0tY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtc2lkZS1uYXYtYmFja2dyb3VuZC1jb2xvcmAgICAgICAgIHwgQmFja2dyb3VuZCBjb2xvciBvZiB0aGUgYXZsLXNpZGUtbmF2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgLS1hdmwtc2lkZS1uYXYtY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtc2lkZS1uYXYtb3Blbi13aWR0aGAgICAgICAgICAgICAgIHwgV2lkdGggb2YgdGhlIGF2bC1zaWRlLW5hdiBpbiB0aGUgb3BlbiBzdGF0ZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgMjU2cHhgXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBfc3R5bGluZzogYW55O1xyXG4gICAgcHJpdmF0ZSBvcGVuVmFsdWU7XHJcbiAgICAvKipcclxuICAgICAqIENhbiBiZSBzZXQgdG8gb3BlbiBvciBjbG9zZSB0aGUgc2lkZSBuYXYuXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzaWRlIG5hdi5cclxuICAgICAqL1xyXG4gICAgZ2V0IG9wZW4oKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogSXRlbXMgdGhhdCBhcmUgc2hvd24gaW4gdGhlIHNpZGUgbmF2LlxyXG4gICAgICovXHJcbiAgICBtZW51SXRlbXM6IEFycmF5PFRvcExldmVsUGFnZSB8IEdyb3VwPjtcclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB0byB0b2dnbGUgcmVzcG9uc2l2ZSBmZWF0dXJlc1xyXG4gICAgICogT24gbW9iaWxlIHNjcmVlbnMgc2lkZW5hdiB0b2dnbGluZyBpcyB0cmlnZ2VyZWQgYnkgYnVyZ2VyIGljb24gaW4gYXBwLWJhciBhcyBwYXJ0IG9mIGFwcC1sYXlvdXRcclxuICAgICAqL1xyXG4gICAgcmVzcG9uc2l2ZTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB0byBzZXQgb25seSBtb2JpbGUgZmVhdHVyZXMgb25cclxuICAgICAqIE9uIG1vYmlsZSBzY3JlZW5zIHNpZGVuYXYgdG9nZ2xpbmcgaXMgdHJpZ2dlcmVkIGJ5IGJ1cmdlciBpY29uIGluIGFwcC1iYXIgYXMgcGFydCBvZiBhcHAtbGF5b3V0XHJcbiAgICAgKi9cclxuICAgIG1vYmlsZTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBvcGVuIHByb3BlcnR5IGNoYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIG9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIHNldCBvcGVuKHZhbDogYm9vbGVhbik7XHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBzZWxlY3RlZEdyb3VwOiBHcm91cDtcclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBzZWxlY3RlZFBhZ2U6IFBhZ2U7XHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgc2VsZWN0ZWRQYXJhZ3JhcGg6IHN0cmluZztcclxuICAgIHByaXZhdGUgc2VsZWN0ZWRQYXJhZ3JhcGhJbmRleDtcclxuICAgIHByaXZhdGUgcGFyYW1zO1xyXG4gICAgY29uc3RydWN0b3Iocm91dGVyOiBSb3V0ZXIsIGFjdGl2ZVJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSk7XHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgdG9nZ2xlT3BlbigpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBtYW51YWxseU9wZW5lZDtcclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBhcnJvd1RvZ2dsZU9wZW4oKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBtb2JpbGVDbG9zZSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaGlkZGVuXHJcbiAgICAgKi9cclxuICAgIGdyb3VwQ2xpY2tlZChpdGVtOiBhbnkpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaGlkZGVuXHJcbiAgICAgKi9cclxuICAgIGdldFNjcnViYmVyU3R5bGUoKToge1xyXG4gICAgICAgIGhlaWdodDogc3RyaW5nO1xyXG4gICAgICAgIHRvcDogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgKiBAaGlkZGVuXHJcbiAgICAqL1xyXG4gICAgdHJpbVNsYXNoKHN0cjogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RJdGVtcztcclxuICAgIC8qKlxyXG4gICAgKiBAaGlkZGVuXHJcbiAgICAqL1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICogQGhpZGRlblxyXG4gICAgKi9cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICogQGhpZGRlblxyXG4gICAgKi9cclxuICAgIGdldFBhcmFtcyhwYXJhbXM6IFBhcmFtc1tdKToge307XHJcbiAgICAvKipcclxuICAgICogQGhpZGRlblxyXG4gICAgKi9cclxuICAgIGdldFVybFBhcmFtcyhwYXJhbXM6IFBhcmFtc1tdKTogc3RyaW5nO1xyXG59XHJcbiJdfQ==