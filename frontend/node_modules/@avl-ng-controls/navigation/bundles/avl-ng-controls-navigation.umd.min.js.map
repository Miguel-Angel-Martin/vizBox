{"version":3,"sources":["ng://@avl-ng-controls/navigation/lib/components/avl-app-bar/avl-app-bar.component.ts","ng://@avl-ng-controls/navigation/lib/components/avl-app-bar/avl-app-bar-item.component.ts","ng://@avl-ng-controls/navigation/lib/components/avl-side-nav/avl-side-nav.component.ts","ng://@avl-ng-controls/navigation/lib/components/avl-app-layout/avl-app-layout.component.ts","ng://@avl-ng-controls/navigation/lib/components/avl-app-layout/avl-no-padding.directive.ts","ng://@avl-ng-controls/navigation/lib/components/avl-long-page/avl-paragraph.directive.ts","ng://@avl-ng-controls/navigation/lib/components/avl-long-page/avl-long-page.component.ts","ng://@avl-ng-controls/navigation/lib/components/avl-solution-overview/keyboard-navigator.ts","ng://@avl-ng-controls/navigation/lib/components/avl-solution-overview/avl-solution-overview.component.ts","ng://@avl-ng-controls/navigation/lib/components/avl-list-expander/avl-list-expander.component.ts","ng://@avl-ng-controls/navigation/lib/avl-navigation.module.ts","ng://@avl-ng-controls/navigation/lib/components/avl-side-nav/menu-items.ts"],"names":["headerText","headerIconName","items","footerItems","this","AvlAppBarComponent","applications","fixed","currentApplicationChange","EventEmitter","burgerClicked","appLogoSet","appLogoPreset","Object","defineProperty","prototype","_appsLength","currentApplication","image","burgerIconClicked","emit","onApplicationChanged","app","_this","setTimeout","appLogo","ngOnInit","length","__decorate","Input","HostBinding","Output","Component","selector","template","encapsulation","ViewEncapsulation","Emulated","AvlAppBarItemComponent","elementRef","nativeElement","classList","add","ElementRef","__decorate$1","AvlSideNavComponent","router","activeRoute","openValue","openChange","queryParams","subscribe","p","params","subscription","events","pipe","filter","event","ActivationEnd","selectItems","val","next","toggleOpen","manuallyOpened","open","arrowToggleOpen","mobileClose","Math","max","document","documentElement","clientWidth","window","innerWidth","groupClicked","item","expanded","getScrubberStyle","height","selectedParagraph","top","selectedParagraphIndex","trimSlash","str","substring","menuItems","currentGroup","fallbackSelectedPage","fragment","parseUrl","url","split","queue","slice","selectedGroup","undefined","selectedPage","pop","isGroup","subItems","map","subitem","push","this_1","startsWith","route","endsWith","getUrlParams","object_1","forEach","i","name","value","JSON","stringify","icon","iconUrl","isTopLevelPage","paragraphs","paragraphIndex","findIndex","id","ngOnChanges","changes","ngOnDestroy","unsubscribe","getParams","object_2","param","url_1","Router","ActivatedRoute","Array","__decorate$2","animations","trigger","transition","style","max-height","animate","transform","AvlAppLayoutComponent","ngAfterContentInit","sideNav","appBar","ContentChild","__decorate$3","AvlNoPaddingDirective","appLayout","findAppLayout","setAttribute","removeAttribute","element","tagName","toLowerCase","parentElement","__decorate$4","Directive","AvlParagraphDirective","__decorate$5","AvlLongPageComponent","renderer","platformId","scrollListener","newParagraph","scrollContainer","scrollHeight","round","scrollTop","getBoundingClientRect","last","paragraph","innerHeight","currentFragment","paragraphName","navigate","queryParamsHandling","handleRouteChange","find","scrollIntoView","behavior","block","inline","ngAfterViewInit","isPlatformBrowser","querySelector","scrollSubscription","listen","routerSubscription","newRoute","NavigationEnd","paragraphsSubscription","_","Renderer2","decorators","type","Inject","args","PLATFORM_ID","ContentChildren","QueryList","__decorate$6","None","__param","KeyboardNavigator","numberOfItems","gridWidth","currentItemIndex","keyPressed","nextGroupSize","prevGroupSize","nextIndex","currentItemColumn","currentItemRow","floor","maxRows","ceil","lastColumn","indexExists","AvlSolutionOverviewComponent","cdr","searchQueryChange","search","gridWidth$","BehaviorSubject","largestItemsIndex","maxItems","v","_b","__values","groupElementRefs","_c","done","gEl","call","querySelectorAll","__spread","iconButtonElementsCache","iconButtonsContainer","setupReferenceVars","gridWidthClass$","asObservable","throttleTime","asyncScheduler","trailing","groupElementRefsChangesSubscription","groups","isFirstChange","getGridWidth","setTopMargin","setupFocusOrdering","getMaxColumnsClass","maxColumns","outerWidth","screenWidth","onResize","onKeydownHandler","gOfItems","groupsOfItems","numGroups","gNum","iIdx","activeEl","activeElement","isDown","includes","key","isUp","isRight","isLeft","isTab","searchbar","showSearchBar","searchbarRef","gOfItems_1","gOfItems_1_1","indexOf","click","iconButtonElements","numIconButtons","idx","focus","g","preventDefault","itemElements","iconButtons","nextGroup","prevGroup","nGLen","pGLen","itemIndexToMoveTo","onQueryChange","detail","onSearch","itemSz","contentHasScroll","detectChanges","content","groupsContainer","clientHeight","firstItemOffsetTop","offsetTop","items_1","items_1_1","buttonElements","buttonRefs","elRef","focusableElements","el","addEventListener","target","lastFocusedEl","ChangeDetectorRef","ViewChildren","ViewChild","HostListener","KeyboardEvent","__decorate$7","AvlListExpanderComponent","narrow","_open","toggleClick","keyEvent","__decorate$8","componentsAndDirectives","AvlNavigationModule","__decorate$9","NgModule","imports","CommonModule","RouterModule","AvlNgBindersModule","declarations","schemas","CUSTOM_ELEMENTS_SCHEMA","exports","label","TopLevelPage","_super","__extends","Page","Group"],"mappings":"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","sourcesContent":["import {\r\n  Component, Input, Output,\r\n  ViewEncapsulation, EventEmitter, OnInit, HostBinding\r\n} from '@angular/core';\r\n\r\nimport '@avl-controls/core/dist/avl-app-switcher/avl-app-switcher';\r\nimport '@avl-controls/core/dist/avl-icon/avl-icon.js';\r\n\r\nexport class MenuButtonItems {\r\n  constructor(readonly headerText: string,\r\n    readonly headerIconName: string,\r\n    readonly items: Array<{ itemText: string, iconName: string }>,\r\n    readonly footerItems?: Array<{ itemText: string, iconName: string }>) { };\r\n}\r\n\r\n/**\r\n * Object representing sub-application that is added to app-bar drop-down\r\n */\r\nexport interface ApplicationReference {\r\n  name: string;\r\n  icon?: string;\r\n  image?: string;\r\n  [key: string]: any;\r\n};\r\n\r\n@Component({\r\n  selector: 'avl-app-bar',\r\n  templateUrl: './avl-app-bar.component.html',\r\n  styleUrls: [\r\n    './avl-app-bar.component.css'\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class AvlAppBarComponent implements OnInit {\r\n\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                          | Description                                   | Default\r\n   * :----------------------------------------|:----------------------------------------------|:-------------------------\r\n   * `--avl-app-bar-background-color`         | Background color of app-bar                   | `--avl-primary-color`\r\n   * `--avl-app-bar-height`                   | Height of app-bar (minus 3px bottom line)     | `53px`\r\n   * `--avl-app-bar-item-color`               | Text color of app-bar items                   | `--avl-on-primary-color`\r\n   * `--avl-app-bar-underline-color`          | Underline color                               | `--avl-product-color`\r\n   */\r\n  _styling: any;\r\n\r\n  /**\r\n   * Tells which is the currently selected application\r\n   */\r\n  @Input()\r\n  public currentApplication: ApplicationReference;\r\n\r\n  /**\r\n   * Boolean to toggle responsive features\r\n   * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout\r\n   */\r\n  @Input()\r\n  @HostBinding('class.responsive')\r\n  public responsive: boolean;\r\n\r\n  /**\r\n   * Boolean to set only mobile features on\r\n   * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout\r\n   */\r\n  @Input()\r\n  @HostBinding('class.mobile')\r\n  public mobile: boolean;\r\n\r\n  /**\r\n   * URL to application home/ landing page\r\n   */\r\n  @Input()\r\n  public homePageUrl: string;\r\n\r\n  /**\r\n   * URL to application icon / logo\r\n   */\r\n  @Input()\r\n  public appLogo: string;\r\n\r\n  /**\r\n   * List of sub-applications used\r\n   */\r\n  @Input() applications: ApplicationReference[] = [];\r\n\r\n  /**\r\n   * Flag indicating app-bar has fixed positioning or no\r\n   */\r\n  @Input() fixed: boolean = true;\r\n\r\n\r\n  /**\r\n   * Event emitted when application is changed in app-bar drop-down\r\n   */\r\n  @Output() currentApplicationChange: EventEmitter<ApplicationReference> = new EventEmitter<ApplicationReference>();\r\n\r\n  /**\r\n   * Event emmited when Burger menu is clicked.\r\n   * Toggles side-nav visibility if app-bar is part of app-layout in responsive mode\r\n   */\r\n  @Output() burgerClicked: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** @hidden */\r\n  public appLogoSet: boolean = false;\r\n\r\n  private appLogoPreset: boolean = false;\r\n\r\n  /** @hidden */\r\n  _appsLength: number;\r\n\r\n  /**\r\n   * True if only one element added to applications array\r\n   */\r\n  get isSingleApp(): boolean {\r\n    return !this.applications || this._appsLength < 2;\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  get showAppLogo(): boolean {\r\n    if (this.currentApplication == null) return false;\r\n    const image = this.currentApplication.image;\r\n    return !(image == null || image === '');\r\n  }\r\n  /**\r\n   * @hidden\r\n   */\r\n  burgerIconClicked() {\r\n    this.burgerClicked.emit();\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  onApplicationChanged(app: ApplicationReference) {\r\n    this.currentApplication = app;\r\n    if (!this.appLogoPreset) {\r\n      setTimeout(() => {\r\n        this.appLogoSet = true;\r\n        this.appLogo = this.currentApplication.image;\r\n      });\r\n    }\r\n    this.currentApplicationChange.emit(this.currentApplication);\r\n  }\r\n\r\n  /** @hidden */\r\n  ngOnInit() {\r\n    if (this.appLogo) {\r\n      this.appLogoSet = true;\r\n      this.appLogoPreset = true;\r\n    } else {\r\n      this.appLogo = this.currentApplication ? this.currentApplication.image : \"\";\r\n      this.appLogoSet = true;\r\n    }\r\n    this._appsLength = this.applications ? this.applications.length : 0;\r\n  }\r\n\r\n}","import { Component, OnInit, ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'avl-app-bar-item',\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: []\r\n})\r\nexport class AvlAppBarItemComponent implements OnInit {\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  ngOnInit() {\r\n    (this.elementRef.nativeElement as HTMLElement).classList.add('mdc-toolbar__icon');\r\n  }\r\n\r\n}\r\n","import {\r\n  Component, Output, EventEmitter, Input, OnDestroy, OnChanges, SimpleChanges, HostBinding\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition} from '@angular/animations';\r\nimport { TopLevelPage, Group, Page, Params } from './menu-items';\r\n\r\nimport { Router, ActivationEnd, ActivatedRoute } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport '@avl-controls/core/dist/avl-icon/avl-icon';\r\n\r\nconst rowHeightPx = 48;\r\n\r\n@Component({\r\n  selector: 'avl-side-nav',\r\n  templateUrl: './avl-side-nav.component.html',\r\n  styleUrls: ['./avl-side-nav.component.css'],\r\n  animations: [\r\n    trigger('expandCollapse', [\r\n      transition(':enter', [\r\n        style({ 'max-height': '0px' }),\r\n        animate('225ms ease-in', style({ transform: 'translateY(0%)', 'max-height': '200px' }))\r\n      ]),\r\n      transition(':leave', [\r\n        style({ 'max-height': '200px' }),\r\n        animate('180ms ease-in', style({ 'max-height': '0px' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class AvlSideNavComponent implements OnDestroy, OnChanges {\r\n\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                          | Description                                                                                           | Default\r\n   * :----------------------------------------|:------------------------------------------------------------------------------------------------------|:---------\r\n   * `--avl-app-bar-height`                   | Height of the toolbar. Needed so that the avl-side-nav can be correctly positioned below the toolbar. | `56px`\r\n   * `--avl-side-nav-product-color`           | Used for selected color                                                                               | `--avl-product-selected`\r\n   * `--avl-side-nav-product-color-hover`     | Used for hover color.                                                                                 | `--avl-product-hover`\r\n   * `--avl-side-nav-text-color`              | Color of the text                                                                                     | `--avl-emphasis-high-color`\r\n   * `--avl-side-nav-icons-color`             | Color of icons                                                                                        | `--avl-emphasis-medium-color`\r\n   * `--avl-side-nav-background-color`        | Background color of the avl-side-nav                                                                  | `--avl-side-nav-color`\r\n   * `--avl-side-nav-open-width`              | Width of the avl-side-nav in the open state.                                                          | `256px`\r\n   *\r\n   */\r\n  _styling: any;\r\n\r\n  private openValue = false;\r\n\r\n  /**\r\n   * Can be set to open or close the side nav.\r\n   * Returns the current state of the side nav.\r\n   */\r\n  @Input()\r\n  @HostBinding('class.open')\r\n  public get open(): boolean {\r\n    return this.openValue;\r\n  }\r\n\r\n  /**\r\n   * Items that are shown in the side nav.\r\n   */\r\n  @Input()\r\n  public menuItems: Array<TopLevelPage | Group>;\r\n\r\n  /**\r\n   * Boolean to toggle responsive features\r\n   * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout\r\n   */\r\n  @Input()\r\n  @HostBinding('class.responsive')\r\n  public responsive: boolean;\r\n\r\n  /**\r\n   * Boolean to set only mobile features on\r\n   * On mobile screens sidenav toggling is triggered by burger icon in app-bar as part of app-layout\r\n   */\r\n  @Input()\r\n  @HostBinding('class.mobile')\r\n  public mobile: boolean;\r\n\r\n  /**\r\n   * Emitted when the open property changes.\r\n   */\r\n  @Output()\r\n  public openChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  public set open(val: boolean) {\r\n    this.openValue = val;\r\n    this.openChange.next(val);\r\n  }\r\n\r\n  private subscription: Subscription;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public selectedGroup: Group;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public selectedPage: Page;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public selectedParagraph: string;\r\n  private selectedParagraphIndex: number;\r\n  private params: any;\r\n\r\n  constructor(\r\n    private router: Router,\r\n\r\n    public activeRoute: ActivatedRoute\r\n    ) {\r\n    activeRoute.queryParams.subscribe(p => {\r\n      this.params = p;\r\n    });\r\n    this.subscription = this.router.events\r\n      .pipe(filter(event => event instanceof ActivationEnd))\r\n      .subscribe((event: ActivationEnd) => {\r\n        this.selectItems();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public toggleOpen() {\r\n    if(!this.manuallyOpened) {\r\n      this.open = !this.open;\r\n    }\r\n  }\r\n\r\n  private manuallyOpened: boolean;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public arrowToggleOpen() {\r\n      this.manuallyOpened = !this.open;\r\n      this.open = !this.open;\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public mobileClose() {\r\n    if(Math.max(document.documentElement.clientWidth, window.innerWidth) < 960) {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public groupClicked(item) {\r\n    if (!this.open) {\r\n      this.open = true;\r\n      if (!item.expanded) {\r\n        item.expanded = true;\r\n      }\r\n    } else {\r\n      item.expanded = !item.expanded;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  public getScrubberStyle() {\r\n    return {\r\n      height: this.selectedParagraph ? '14px' : '0px',\r\n      top: `${this.selectedParagraphIndex * rowHeightPx}px`\r\n    };\r\n  }\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n  public trimSlash(str: string) {\r\n    if (str[0] === '/') {\r\n      str = str.substring(1, str.length);\r\n    }\r\n    if (str[str.length - 1] === '/') {\r\n      str = str.substring(0, str.length - 1);\r\n    }\r\n    return str;\r\n  }\r\n\r\n  private selectItems() {\r\n    if (!this.menuItems) {\r\n      return;\r\n    }\r\n    const fragment = this.router.parseUrl(this.router.url).fragment;\r\n    const url = this.router.url.split('#')[0];\r\n    const queue: Array<Page | Group> = this.menuItems.slice();\r\n    let currentGroup: Group;\r\n    this.selectedGroup = undefined;\r\n    this.selectedPage = undefined;\r\n    this.selectedParagraph = undefined;\r\n    let fallbackSelectedPage: any;\r\n    while (queue.length) {\r\n      const item = queue.pop();\r\n      if (isGroup(item)) {\r\n        currentGroup = item;\r\n        item.subItems.map(subitem => { queue.push(subitem); });\r\n      } else {\r\n        if (fallbackSelectedPage == null && this.trimSlash(url).startsWith(this.trimSlash(item.route))) {\r\n          fallbackSelectedPage = item;\r\n        }\r\n        if (item.route && this.trimSlash(url).endsWith(this.trimSlash(item.route + this.getUrlParams(item.params)))) {\r\n          if (this.selectedPage && this.selectedPage.route && this.selectedPage.route.length > item.route.length) {\r\n            continue;\r\n          }\r\n          if (item.params && item.params.length > 0) {\r\n            const object = new Object();\r\n            item.params.forEach(i => {\r\n              object[i.name] = i.value;\r\n            });\r\n            if (JSON.stringify(this.params) === JSON.stringify(object)) {\r\n              this.selectedPage = item;\r\n            }\r\n          } else {\r\n            this.selectedPage = item;\r\n          }\r\n          if (isTopLevelPage(item)) {\r\n            this.selectedGroup = undefined;\r\n          } else {\r\n            this.selectedGroup = currentGroup;\r\n          }\r\n\r\n          if (item.paragraphs && item.paragraphs.length > 0) {\r\n            const paragraphIndex = item.paragraphs.findIndex((p) => p.id === fragment);\r\n            if (fragment && item.paragraphs && paragraphIndex !== -1) {\r\n              this.selectedParagraph = fragment;\r\n              this.selectedParagraphIndex = paragraphIndex;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (this.selectedPage == null) {\r\n      this.selectedPage = fallbackSelectedPage;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['menuItems']) {\r\n      this.selectItems();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n  getParams(params: Params[]) {\r\n    if (params && params.length > 0) {\r\n      const object = {};\r\n      params.forEach(param => {\r\n        object[param.name] = param.value;\r\n      });\r\n      return object;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n getUrlParams(params: Params[]) {\r\n  if (params && params.length > 0) {\r\n    let url = '?';\r\n    params.forEach(param => {\r\n      url += param.name + '=' + param.value + '&';\r\n    });\r\n    return url.slice(0, -1);\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n}\r\n\r\n/**\r\n* @hidden\r\n*/\r\nfunction isGroup(item: Page | Group): item is Group {\r\n  return (item as Group).subItems !== undefined && (item as Group).subItems.length > 0;\r\n}\r\n\r\n/**\r\n* @hidden\r\n*/\r\nfunction isTopLevelPage(item: Page | Group): item is TopLevelPage {\r\n  return !isGroup(item) && ((item as TopLevelPage).icon !== undefined || (item as TopLevelPage).iconUrl !== undefined);\r\n}\r\n\r\n","import { Component, ViewEncapsulation, ContentChild, AfterContentInit } from '@angular/core';\r\nimport { AvlSideNavComponent } from '../avl-side-nav/avl-side-nav.component';\r\nimport { AvlAppBarComponent } from '../avl-app-bar/avl-app-bar.component';\r\n\r\n@Component({\r\n  selector: 'avl-app-layout',\r\n  templateUrl: './avl-app-layout.component.html',\r\n  styleUrls: [\r\n    './avl-app-layout.component.css'\r\n  ],\r\n  encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class AvlAppLayoutComponent implements AfterContentInit {\r\n    /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                          | Description                         | Default\r\n   * :----------------------------------------|:------------------------------------|:-----------\r\n   * `--avl-app-layout-content-padding`       | Padding around main slotted content | `24px`\r\n   * `--avl-primary-text-color`               | Text color of main slotted content  | ``\r\n   *\r\n   */\r\n  _styling: any;\r\n\r\n  @ContentChild(AvlSideNavComponent) sideNav: AvlSideNavComponent;\r\n  @ContentChild(AvlAppBarComponent) appBar: AvlAppBarComponent;\r\n\r\n  constructor() {}\r\n\r\n  ngAfterContentInit() {\r\n    if(this.sideNav && this.appBar) {\r\n      this.appBar.burgerClicked.subscribe( () => this.sideNav.open = !this.sideNav.open );\r\n    }\r\n  }\r\n}\r\n","import { OnInit, Directive, OnDestroy, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[avl-no-padding]'\r\n})\r\nexport class AvlNoPaddingDirective implements OnInit, OnDestroy {\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  /** @hidden */\r\n  ngOnInit() {\r\n    const appLayout = this.findAppLayout();\r\n    if (appLayout) {\r\n      appLayout.setAttribute('noPadding', '');\r\n    }\r\n  }\r\n  \r\n  /** @hidden */\r\n  ngOnDestroy() {\r\n    const appLayout = this.findAppLayout();\r\n    if (appLayout) {\r\n      appLayout.removeAttribute('noPadding');\r\n    }\r\n  }\r\n  \r\n  private findAppLayout() {\r\n    let element = this.elementRef.nativeElement as HTMLElement;\r\n    while (element) {\r\n      if (element.tagName.toLowerCase() == 'avl-app-layout') {\r\n        return element;\r\n      }\r\n      element = element.parentElement;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[avl-paragraph]'\r\n})\r\nexport class AvlParagraphDirective {\r\n\r\n  @Input('avl-paragraph') public paragraphName: string;\r\n\r\n  constructor(public elementRef: ElementRef) { }\r\n\r\n}\r\n","import { Component, ViewEncapsulation, ContentChildren, QueryList, AfterViewInit, OnDestroy, Renderer2, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { AvlParagraphDirective } from './avl-paragraph.directive';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n/**\r\n* avl-long-page should only be used inside avl-app-layout. The only scrollable container should\r\n* be avl-app-layout (already set by default) and avl-long-page and components that are using it must\r\n* not scroll in order for avl-long-page to work properly.\r\n*/\r\n@Component({\r\n  selector: 'avl-long-page',\r\n  templateUrl: './avl-long-page.component.html',\r\n  styleUrls: [\r\n    './avl-long-page.component.css'\r\n  ],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AvlLongPageComponent implements AfterViewInit, OnDestroy {\r\n  /**\r\n *\r\n * ### Styling\r\n * The following custom properties are available for styling:\r\n *\r\n * Custom property                          | Description                         | Default\r\n * :----------------------------------------|:------------------------------------|:-----------\r\n *\r\n */\r\n  _styling: any;\r\n\r\n  @ContentChildren(AvlParagraphDirective) private paragraphs: QueryList<AvlParagraphDirective>;\r\n  private currentFragment: string;\r\n  private scrollContainer: HTMLElement;\r\n  private routerSubscription: Subscription;\r\n  private paragraphsSubscription: Subscription;\r\n  private scrollSubscription: () => void;\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n  constructor(private router: Router, private renderer: Renderer2, @Inject(PLATFORM_ID) private platformId: Object) {\r\n  }\r\n\r\n  private handleRouteChange() {\r\n    const paragraphName = this.router.parseUrl(this.router.url).fragment;\r\n    const paragraph = this.paragraphs.find(p => p.paragraphName === paragraphName);\r\n    if (this.currentFragment === paragraphName) {\r\n      return;\r\n    }\r\n    if (paragraph) {\r\n      setTimeout(() =>\r\n        paragraph.elementRef.nativeElement.scrollIntoView({ behavior: 'instant', block: 'start', inline: 'nearest' })\r\n        , 0);\r\n    }\r\n  }\r\n\r\n  private scrollListener = (event: UIEvent) => {\r\n    let newParagraph: AvlParagraphDirective;\r\n    if (this.scrollContainer.scrollHeight < Math.round(this.scrollContainer.scrollTop + this.scrollContainer.getBoundingClientRect().height)) {\r\n      newParagraph = this.paragraphs.last;\r\n    } else {\r\n      this.paragraphs.forEach(paragraph => {\r\n        const p = paragraph.elementRef.nativeElement as HTMLElement;\r\n        const rect = p.getBoundingClientRect();\r\n        if (rect.top < window.innerHeight * 0.1) {\r\n          newParagraph = paragraph;\r\n        }\r\n      });\r\n    }\r\n    if (newParagraph) {\r\n      this.currentFragment = newParagraph.paragraphName;\r\n      this.router.navigate([], { queryParamsHandling: 'preserve', fragment: newParagraph.paragraphName });\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n  ngAfterViewInit() {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.scrollContainer = document.querySelector('avl-app-layout main') as HTMLElement;\r\n      this.scrollSubscription = this.renderer.listen(this.scrollContainer, 'scroll', this.scrollListener);\r\n    }\r\n    this.handleRouteChange();\r\n    this.routerSubscription = this.router.events.subscribe(newRoute => {\r\n      if (newRoute instanceof NavigationEnd) {\r\n        this.handleRouteChange();\r\n      }\r\n    });\r\n    this.paragraphsSubscription = this.paragraphs.changes.subscribe(_ => {\r\n      /* if scrollIntoView has not occured yet try it with new paragraphs\r\n         this is needed for components which render content (paragraphs)\r\n         after view has been initialized\r\n      */\r\n      if (!this.currentFragment) {\r\n        this.handleRouteChange();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * @hidden\r\n  */\r\n  ngOnDestroy() {\r\n    if (this.routerSubscription) {\r\n      this.routerSubscription.unsubscribe();\r\n    }\r\n    if (this.paragraphsSubscription) {\r\n      this.paragraphsSubscription.unsubscribe();\r\n    }\r\n    if (this.scrollSubscription) {\r\n      this.scrollSubscription();\r\n    }\r\n  }\r\n}\r\n","/** @hidden */\r\nexport class KeyboardNavigator {\r\n  constructor(private numberOfItems: number, private gridWidth: number) { }\r\n\r\n  /** @returns to which item to navigate to from the current item and undefined to not move. */\r\n  public navigate(\r\n    currentItemIndex: number,\r\n    keyPressed: string,\r\n    nextGroupSize: number | undefined = 0,\r\n    prevGroupSize: number | undefined = 0\r\n  ): number {\r\n    nextGroupSize = nextGroupSize || 0;\r\n    prevGroupSize = prevGroupSize || 0;\r\n    const currentItemColumn = currentItemIndex % this.gridWidth;\r\n    const currentItemRow = Math.floor(currentItemIndex / this.gridWidth);\r\n    const maxRows = Math.ceil(this.numberOfItems / this.gridWidth);\r\n\r\n    let nextIndex: number;\r\n\r\n    switch (keyPressed) {\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n        nextIndex = currentItemIndex - this.gridWidth;\r\n        if (currentItemRow === 0) {\r\n          if (prevGroupSize === 0) {\r\n            return undefined;\r\n          }\r\n          if (nextIndex < 0) {\r\n            const prevLastIndex = prevGroupSize - 1;\r\n            // columns of last element and targeted element of previous group\r\n            // - 0 based index\r\n            const lastColumn = prevLastIndex % this.gridWidth;\r\n\r\n            return currentItemColumn <= lastColumn\r\n              ? currentItemColumn - lastColumn - 1 // negative indexes -> -1 is last element\r\n              : prevGroupSize <= this.gridWidth\r\n              // focus last element of previous group if focus should go on 2 groups before current\r\n              ? -1\r\n              : -this.gridWidth - currentItemColumn;\r\n          }\r\n        }\r\n        return nextIndex;\r\n      case 'ArrowDown':\r\n      case 'Down': {\r\n        nextIndex = currentItemIndex + this.gridWidth;\r\n        const indexExists = nextIndex < this.numberOfItems;\r\n        if (currentItemRow === maxRows - 1) {\r\n          if (nextGroupSize === 0) {\r\n            return undefined;\r\n          }\r\n          if (!indexExists) {\r\n            const nextLastIndex = nextGroupSize - 1;\r\n            const lastColumn = nextLastIndex % this.gridWidth;\r\n            return lastColumn >= currentItemColumn\r\n              ? currentItemColumn\r\n              : nextGroupSize <= this.gridWidth\r\n              ? 0\r\n              : this.gridWidth + currentItemColumn;\r\n          }\r\n        } else if (!indexExists) {\r\n          return this.numberOfItems - 1;\r\n        }\r\n        return nextIndex;\r\n      }\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n        if (currentItemIndex === 0) {\r\n          return prevGroupSize === 0 ? undefined : -1;\r\n        }\r\n        return currentItemIndex - 1;\r\n      case 'ArrowRight':\r\n      case 'Right': {\r\n        if (currentItemIndex === this.numberOfItems - 1) {\r\n          return nextGroupSize === 0 ? undefined : 0;\r\n        }\r\n        nextIndex = currentItemIndex + 1;\r\n        return nextIndex;\r\n      }\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  HostListener,\r\n  ElementRef,\r\n  ViewChildren,\r\n  QueryList,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { BehaviorSubject, Observable, asyncScheduler, Subscription } from 'rxjs';\r\nimport { throttleTime, map } from 'rxjs/operators';\r\nimport { KeyboardNavigator } from './keyboard-navigator';\r\n\r\nimport '@avl-controls/core/dist/avl-icon/avl-icon';\r\nimport '@avl-controls/core/dist/avl-search-bar/avl-search-bar';\r\n\r\nexport interface AvlSolutionOverviewItem {\r\n  /**\r\n   * Label of the item.\r\n   */\r\n  label: string;\r\n\r\n  /**\r\n   * Router which to navigate to when the item is clicked.\r\n   * Shouldn't be used together with link.\r\n   */\r\n  route?: string;\r\n\r\n  /**\r\n   * URL which to navigate to when the item is clicked.\r\n   * Shouldn't be used together with route.\r\n   */\r\n  link?: string;\r\n\r\n  /**\r\n   * Specifies where to open the linked document (_blank | _self | _parent | _top | framename).\r\n   * Used only when link is set.\r\n   */\r\n  target?: string;\r\n\r\n  /**\r\n   * Description of the item.\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * Icon of the item.\r\n   * Only one of icon and iconUrl can be used. The other should be undefined.\r\n   */\r\n  icon?: string;\r\n\r\n  /**\r\n   * URL of the icon image of the item.\r\n   * Only one of icon and iconUrl can be used. The other should be undefined.\r\n   */\r\n  iconUrl?: string;\r\n\r\n  /**\r\n   * Don't show circle around icon. Different color will be applied to icon if enabled\r\n   * Circle is visible by default\r\n   */\r\n  noIconCircle?: boolean;\r\n}\r\n\r\nexport interface AvlSolutionOverviewGroup {\r\n  /**\r\n   * If true, additional space for description text will be provided.\r\n   * It is disabled by default\r\n   */\r\n  description?: boolean;\r\n\r\n  /**\r\n   * Title for the group\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * Text above group\r\n   */\r\n  header?: string;\r\n\r\n  /*\r\n   * Text below group\r\n   */\r\n  footer?: string;\r\n\r\n  /**\r\n   * Group items\r\n   */\r\n  items: AvlSolutionOverviewItem[];\r\n}\r\n\r\n@Component({\r\n  selector: 'avl-solution-overview',\r\n  templateUrl: './avl-solution-overview.component.html',\r\n  styleUrls: ['./avl-solution-overview.component.css'],\r\n})\r\nexport class AvlSolutionOverviewComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy {\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  /**\r\n   *\r\n   * ### Styling\r\n   * The following custom properties are available for styling:\r\n   *\r\n   * Custom property                                   | Description                        | Default\r\n   * :-------------------------------------------------|:-----------------------------------|:----------------------\r\n   * `--avl-solution-overview-background-color`        | Background color of the overview   | `--avl-background-1-color`\r\n   * `--avl-solution-overview-text-color`              | Text color                         | `--avl-foreground-color`\r\n   * `--avl-solution-overview-item-background-color`   | Item background color              | `--avl-container-background-color`\r\n   * `--avl-solution-overview-background-image`        | Background image of the overview   |  auto\r\n   * `--avl-solution-overview-item-hover-color`        | Item background color when hovered | `--avl-container-background-product-hover-color`\r\n   * `--avl-solution-overview-item-focus-color`        | Item background color when focused | `--avl-container-background-product-focus-color`\r\n   * `--avl-solution-overview-item-pressed-color`      | Item background color when pressed | `--avl-container-background-product-pressed-color`\r\n   * `--avl-solution-overview-title-color`             | Title color                        | `--avl-foreground-color``\r\n   * `--avl-solution-overview-subtitle-color`          | Subtitle color                     | `--avl-foreground-medium-color``\r\n   * `--avl-solution-overview-item-icon-color`         | Item icon color                    | `--avl-on-primary-color`\r\n   * `--avl-solution-overview-item-icon-color-no-circle` | Item icon color if noIconCircle is set | `--avl-hint-color`\r\n   * `--avl-solution-overview-item-icon-circle-color`  | Color for icon circle              | `--avl-product-color`\r\n   * `--avl-solution-overview-item-icon-pressed-color` | Item icon color when pressed       | `--avl-solution-overview-item-icon-color`\r\n   * `--avl-solution-overview-item-description-color`  | Item description text color        | `--avl-foreground-medium-color`\r\n   */\r\n  _styling: any;\r\n\r\n  /**\r\n   * Groups defining sections with buttons\r\n   */\r\n  @Input()\r\n  groups: AvlSolutionOverviewGroup[];\r\n\r\n  /**\r\n   * Solution overview title.\r\n   */\r\n  @Input()\r\n  public solutionName: string;\r\n\r\n  /**\r\n   * URL of the icon image of the solution overview title.\r\n   */\r\n  @Input()\r\n  public solutionIconUrl: string;\r\n\r\n  /**\r\n   * Solution overview subtitle.\r\n   */\r\n  @Input()\r\n  public solutionSubtitle?: string;\r\n\r\n  /**\r\n   * Flag for the optional search bar.\r\n   * If true, search bar is shown.\r\n   */\r\n  @Input()\r\n  public showSearchBar: boolean;\r\n\r\n  /**\r\n   * Emits search query string on change\r\n   */\r\n  @Output()\r\n  public searchQueryChange = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Emits value of the search query when search triggered\r\n   */\r\n  @Output()\r\n  public search = new EventEmitter<string>();\r\n\r\n  gridWidthClass$: Observable<string>;\r\n\r\n  /** @hidden */\r\n  @ViewChildren('itemElement') buttonRefs: QueryList<ElementRef>;\r\n\r\n  /** @hidden */\r\n  @ViewChildren('group') groupElementRefs: QueryList<ElementRef>;\r\n\r\n  /** @hidden */\r\n  @ViewChild('searchbar') searchbarRef: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('iconButtons') iconButtonsContainer: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('searchbarContainer') searchbarContainer: ElementRef;\r\n\r\n  /** @hidden */\r\n  @ViewChild('groupsContainer') groupsContainer: ElementRef;\r\n\r\n  /** @hidden */\r\n  contentHasScroll: boolean;\r\n\r\n  private gridWidth$ = new BehaviorSubject<number>(-1);\r\n\r\n  private lastFocusedEl: HTMLElement;\r\n\r\n  private maxColumns: number;\r\n\r\n  private largestItemsIndex = -1;\r\n  private maxItems = 0;\r\n\r\n  // cache screenWidth for maxColumns calculation\r\n  private screenWidth: number;\r\n\r\n  // cache icon buttons since they can hardly be changed dynamically\r\n  private iconButtonElementsCache?: HTMLElement[];\r\n\r\n  private groupElementRefsChangesSubscription: Subscription;\r\n\r\n  private get groupsOfItems(): HTMLElement[][] {\r\n    let v = [];\r\n    for (const gRef of this.groupElementRefs) {\r\n      const gEl = gRef.nativeElement;\r\n      const items = Array.prototype.slice.call(gEl.querySelectorAll('a.item'));\r\n\r\n      v = [...v, items];\r\n    }\r\n    return v;\r\n  }\r\n\r\n  private get iconButtonElements(): HTMLElement[] {\r\n    if (this.iconButtonElementsCache == null) {\r\n      this.iconButtonElementsCache = Array.prototype.slice.call(\r\n        (this.iconButtonsContainer\r\n          .nativeElement as HTMLElement).querySelectorAll('avl-icon-button'));\r\n    }\r\n    return this.iconButtonElementsCache;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setupReferenceVars();\r\n    this.gridWidthClass$ = this.gridWidth$.asObservable().pipe(\r\n      throttleTime(50, asyncScheduler, {trailing: true}),\r\n      map(gridWidth => {\r\n        return `grid-width-${gridWidth}`;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.groupElementRefsChangesSubscription) {\r\n      this.groupElementRefsChangesSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!changes.groups.isFirstChange()) {\r\n      this.setupReferenceVars();\r\n      this.gridWidth$.next(this.getGridWidth());\r\n      this.setTopMargin();\r\n    }\r\n  }\r\n\r\n  /** @hidden */\r\n  ngAfterViewInit() {\r\n    this.setTopMargin();\r\n    this.setupFocusOrdering();\r\n    this.gridWidth$.next(this.getGridWidth());\r\n  }\r\n\r\n  /** @hidden */\r\n  getMaxColumnsClass(): string {\r\n    if (this.maxColumns && window.outerWidth === this.screenWidth) {\r\n      return `max-columns-${this.maxColumns}`;\r\n    }\r\n    if (this.maxItems === 0) {\r\n      return;\r\n    }\r\n    let maxColumns: number;\r\n    switch (this.maxItems) {\r\n      case 1:\r\n        maxColumns = 1;\r\n        break;\r\n      case 2:\r\n      case 4:\r\n        maxColumns = 2;\r\n        break;\r\n      case 3:\r\n      case 5:\r\n      case 6:\r\n      case 9:\r\n        maxColumns = 3;\r\n        break;\r\n      case 7:\r\n      case 8:\r\n      case 11:\r\n      case 12:\r\n        maxColumns = 4;\r\n        break;\r\n      default:\r\n        maxColumns = 5;\r\n    }\r\n    this.maxColumns = maxColumns;\r\n    return `max-columns-${maxColumns}`;\r\n  }\r\n\r\n  /** @hidden **/\r\n  @HostListener('window:resize')\r\n  onResize() {\r\n    this.gridWidth$.next(this.getGridWidth());\r\n  }\r\n\r\n  /** @hidden */\r\n  @HostListener('keydown', ['$event'])\r\n  onKeydownHandler(event: KeyboardEvent) {\r\n    const gOfItems = this.groupsOfItems;\r\n    const numGroups = gOfItems.length;\r\n    if (numGroups === 0) {\r\n      return;\r\n    }\r\n\r\n    const activeEl = document.activeElement as HTMLElement;\r\n    const isDown = ['Down', 'ArrowDown'].includes(event.key);\r\n    const isUp = ['Up', 'ArrowUp'].includes(event.key);\r\n    const isRight = ['Right', 'ArrowRight'].includes(event.key);\r\n    const isLeft = ['Left', 'ArrowLeft'].includes(event.key);\r\n    const isTab = event.key === 'Tab';\r\n\r\n    const searchbar = this.showSearchBar\r\n      ? (this.searchbarRef.nativeElement as HTMLElement)\r\n      : undefined;\r\n\r\n    let gNum: number;\r\n    let iIdx: number;\r\n\r\n    for (const items of gOfItems) {\r\n      if (items.indexOf(activeEl) !== -1) {\r\n        iIdx = items.indexOf(activeEl);\r\n        gNum = gOfItems.indexOf(items);\r\n        // Go to route on 'Space'. 'Enter' already works on <a>.\r\n        if (event.key === ' ') {\r\n          items[iIdx].click();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.iconButtonElements.includes(activeEl)) {\r\n      const numIconButtons = this.iconButtonElements.length;\r\n      const idx = this.iconButtonElements.indexOf(activeEl);\r\n      if ((isRight || isTab) && idx === numIconButtons - 1) {\r\n        if (searchbar != null) {\r\n          searchbar.focus();\r\n        } else {\r\n          gOfItems[0][0].focus();\r\n        }\r\n      } else if (isLeft && idx === 0) {\r\n        const g = gOfItems[numGroups - 1];\r\n        const gLen = g.length;\r\n        g[gLen - 1].focus();\r\n      } else if (isLeft) {\r\n        this.iconButtonElements[idx - 1].focus();\r\n      } else if (isRight) {\r\n        this.iconButtonElements[idx + 1].focus();\r\n      }\r\n      event.preventDefault();\r\n    }\r\n\r\n    const itemElements = gOfItems[gNum];\r\n    const gridWidth = this.gridWidth$.value;\r\n\r\n    if (searchbar != null && iIdx < gridWidth && gNum === 0 && isUp) {\r\n      searchbar.focus();\r\n      event.preventDefault();\r\n    } else if (\r\n      (isRight || isTab) &&\r\n      gNum === gOfItems.length - 1 &&\r\n      iIdx === itemElements.length - 1\r\n    ) {\r\n      const iconButtons = this.iconButtonElements;\r\n      if (iconButtons != null && iconButtons.length > 0) {\r\n        iconButtons[0].focus();\r\n        event.preventDefault();\r\n      }\r\n    } else if (searchbar != null && searchbar === activeEl && isDown) {\r\n      gOfItems[0][0].focus();\r\n      event.preventDefault();\r\n    } else if (gNum != null) {\r\n      const nextGroup = gNum === gOfItems.length - 1 ? undefined : gOfItems[gNum + 1];\r\n      const prevGroup = gNum === 0 ? undefined : gOfItems[gNum - 1];\r\n\r\n      const nGLen = nextGroup == null ? 0 : nextGroup.length;\r\n      const pGLen = prevGroup == null ? 0 : prevGroup.length;\r\n\r\n      const keyboardNavigator = new KeyboardNavigator(\r\n        itemElements.length,\r\n        gridWidth\r\n      );\r\n      const itemIndexToMoveTo = keyboardNavigator.navigate(\r\n        iIdx,\r\n        event.key,\r\n        nGLen,\r\n        pGLen\r\n      );\r\n      if (itemIndexToMoveTo != null) {\r\n        if ((isUp || isLeft) && itemIndexToMoveTo < 0) {\r\n          prevGroup[itemIndexToMoveTo + pGLen].focus();\r\n        } else if ((isDown || isRight) && iIdx + 1 > itemIndexToMoveTo) {\r\n          nextGroup[itemIndexToMoveTo].focus();\r\n        } else {\r\n          gOfItems[gNum][itemIndexToMoveTo].focus();\r\n        }\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @hidden */\r\n  onQueryChange(event: any) {\r\n    this.searchQueryChange.emit(event.detail.value);\r\n  }\r\n\r\n  /** @hidden */\r\n  onSearch(event: any) {\r\n    this.search.emit(event.detail.value);\r\n  }\r\n\r\n  private setupReferenceVars(): void {\r\n    let max = 0;\r\n    for (const g of this.groups) {\r\n      const itemSz = g.items.length;\r\n      if (max < itemSz) {\r\n        max = itemSz;\r\n        this.largestItemsIndex = this.groups.indexOf(g);\r\n      }\r\n    }\r\n    this.maxItems = max;\r\n  }\r\n\r\n  private setTopMargin() {\r\n    this.contentHasScroll = false;\r\n    this.cdr.detectChanges();\r\n    const content = this.groupsContainer.nativeElement;\r\n    this.contentHasScroll = content.scrollHeight > content.clientHeight;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  private getGridWidth(): number {\r\n    if (this.largestItemsIndex < 0) {\r\n      this.setupReferenceVars();\r\n    }\r\n    const items = this.groupsOfItems[this.largestItemsIndex];\r\n    const firstItemOffsetTop = items[0].offsetTop;\r\n\r\n    let i = 0;\r\n    for (const item of items) {\r\n      if (item.offsetTop > firstItemOffsetTop) {\r\n        return i;\r\n      }\r\n      i++;\r\n    }\r\n    return items.length;\r\n  }\r\n\r\n  private setupFocusOrdering() {\r\n    const buttonElements: HTMLElement[] = this.buttonRefs.map(elRef => elRef.nativeElement);\r\n    let focusableElements: HTMLElement[] = [];\r\n\r\n    if (this.showSearchBar) {\r\n      focusableElements.push(this.searchbarRef.nativeElement);\r\n    }\r\n    focusableElements = [\r\n      ...focusableElements,\r\n      ...buttonElements,\r\n      ...this.iconButtonElements\r\n    ];\r\n\r\n    focusableElements.forEach((el) => {\r\n      el.addEventListener('focus', (event: FocusEvent) => {\r\n        const t = event.target as HTMLElement;\r\n        if (t.tagName.toLowerCase() === 'avl-icon-button') {\r\n          if (this.showSearchBar && (\r\n            ['body', 'html'].includes(\r\n              document.activeElement.tagName.toLowerCase()\r\n            ) ||\r\n              this.lastFocusedEl == null ||\r\n              (this.lastFocusedEl.tagName.toLowerCase() !== 'avl-icon-button' &&\r\n               this.lastFocusedEl !== buttonElements[buttonElements.length - 1])\r\n          )) {\r\n            this.searchbarRef.nativeElement.focus();\r\n            event.preventDefault();\r\n          }\r\n        }\r\n        this.lastFocusedEl = event.target as HTMLElement;\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, HostListener, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'avl-list-expander',\r\n    templateUrl: './avl-list-expander.component.html',\r\n    styleUrls: ['./avl-list-expander.component.css']\r\n})\r\nexport class AvlListExpanderComponent {\r\n\r\n    /**\r\n     *\r\n     * ### Styling\r\n     * The following custom properties are available for styling:\r\n     *\r\n     * Custom property                                | Description                           | Default\r\n     * :----------------------------------------------|:--------------------------------------|:----------------------\r\n     * `--avl-list-expander-header-hover-color`       | Header background color when hovered  | `--avl-ink-default-hover-color`\r\n     * `--avl-list-expander-header-focus-color`       | Header background color when focused  | `--avl-ink-default-focus-color`\r\n     * `--avl-list-expander-header-pressed-color`     | Header background color when pressed  | `--avl-ink-default-pressed-color`\r\n     * `--avl-list-expander-divider-color`            | Divider color                         | `--avl-divider-color`\r\n     * `--avl-list-expander-title-color`              | Title color                           | `--avl-ink-default-pressed-color`\r\n     * `--avl-list-expander-icon-color`               | Arrow icon color                      | `--avl-divider-color`\r\n     */\r\n    _styling: any;\r\n\r\n    /**\r\n     * Boolean that changes modes between wide and narrow, false by default.\r\n     */\r\n    @Input()\r\n    narrow: boolean = false;\r\n\r\n\r\n    private _open = false;\r\n    /**\r\n     * Boolean that tells whether the expander is open or closed, expander is closed by default.\r\n     */\r\n    @Input()\r\n    set open(value: boolean) {\r\n        this._open = value;\r\n        this.openChange.emit(this._open);\r\n    }\r\n\r\n    get open(): boolean {\r\n        return this._open;\r\n    }\r\n\r\n    /**\r\n     * Event that emits when the expander is opened or closed.\r\n     * Sends boolean value of new open state.\r\n     */\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    constructor() {}\r\n\r\n    toggleClick() {\r\n        this.open = !this.open;\r\n    }\r\n\r\n    /** @hidden */\r\n    @HostListener('keydown', ['$event'])\r\n    keyEvent(event: KeyboardEvent) {\r\n        const activeEl = document.activeElement as HTMLElement;\r\n        if (event.key === ' ' || event.key === 'Enter') {\r\n            activeEl.click();\r\n            return;\r\n        }\r\n    }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// toolbar stuff\r\nimport { AvlAppBarComponent } from './components/avl-app-bar/avl-app-bar.component';\r\nimport { AvlAppBarItemComponent } from './components/avl-app-bar/avl-app-bar-item.component';\r\n\r\n// sidenav stuff\r\nimport { AvlSideNavComponent } from './components/avl-side-nav/avl-side-nav.component';\r\n\r\nimport { AvlAppLayoutComponent } from './components/avl-app-layout/avl-app-layout.component';\r\nimport { AvlNoPaddingDirective } from './components/avl-app-layout/avl-no-padding.directive';\r\n\r\nimport { AvlLongPageComponent } from './components/avl-long-page/avl-long-page.component';\r\nimport { AvlParagraphDirective } from './components/avl-long-page/avl-paragraph.directive';\r\n\r\nimport { AvlSolutionOverviewComponent } from './components/avl-solution-overview/avl-solution-overview.component';\r\nimport { AvlNgBindersModule } from '@avl-controls/ng-binders';\r\n\r\nimport { AvlListExpanderComponent } from './components/avl-list-expander/avl-list-expander.component';\r\n\r\nconst componentsAndDirectives = [\r\n  AvlAppBarComponent,\r\n  AvlAppBarItemComponent,\r\n  AvlSideNavComponent,\r\n  AvlAppLayoutComponent,\r\n  AvlNoPaddingDirective,\r\n  AvlLongPageComponent,\r\n  AvlParagraphDirective,\r\n  AvlSolutionOverviewComponent,\r\n  AvlListExpanderComponent,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    AvlNgBindersModule\r\n  ],\r\n  declarations: componentsAndDirectives,\r\n  schemas: [\r\n    CUSTOM_ELEMENTS_SCHEMA\r\n  ],\r\n  exports: componentsAndDirectives\r\n})\r\nexport class AvlNavigationModule { }\r\n","\r\n\r\nexport class Paragraph {\r\n  constructor(\r\n    /**\r\n     * Id/fragment of the paragraph header in the page.\r\n     */\r\n    public readonly id: string,\r\n    /**\r\n     * Label of the paragraph shown in the side nav.\r\n     */\r\n    public readonly label: string\r\n  ) { }\r\n}\r\n\r\nexport class Params {\r\n  constructor(\r\n    /**\r\n     * Name of the query parameter.\r\n     */\r\n    public readonly name: string,\r\n    /**\r\n     * Value of the query parameter.\r\n     */\r\n    public readonly value: string\r\n  ) { }\r\n}\r\n\r\nexport class Page {\r\n  constructor(\r\n    /**\r\n     * Label of the page shown in the side nav.\r\n     */\r\n    public readonly label: string,\r\n    /**\r\n     * Route to the page.\r\n     */\r\n    public readonly route: string,\r\n    /**\r\n     * Paragraphs of the long page.\r\n     * It's a regular page if no paragraphs are defined.\r\n     */\r\n    public readonly paragraphs?: Paragraph[],\r\n    /**\r\n     * Query parameters of the page.\r\n     */\r\n    public readonly params?: Params[],\r\n\r\n    public readonly expanded?: boolean\r\n  ) {\r\n    this.paragraphs = paragraphs ? paragraphs : [];\r\n    this.params = params ? params : [];\r\n  }\r\n}\r\n\r\nexport class TopLevelPage extends Page {\r\n  constructor(\r\n    /**\r\n     * Label of the page shown in the side nav.\r\n     */\r\n    label: string,\r\n    /**\r\n     * Route to the page.\r\n     */\r\n    route: string,\r\n    /**\r\n     * Material icon name for the icon to show next to the label.\r\n     * https://material.io/tools/icons\r\n     * Only one of icon and iconUrl can be used. The other should be undefined.\r\n     */\r\n    public readonly icon?: string,\r\n    /**\r\n     * URL to the icon image to show next to the label.\r\n     * Only one of icon and iconUrl can be used. The other should be undefined.\r\n     */\r\n    public readonly iconUrl?: string,\r\n    /**\r\n     * Paragraphs of the long page.\r\n     * It's a regular page if no paragraphs are defined.\r\n     */\r\n    public readonly paragraphs?: Paragraph[],\r\n    /**\r\n     * Query parameters of the page.\r\n     */\r\n    public readonly params?: Params[],\r\n    /**\r\n     * Sub pages of the top level page.\r\n     */\r\n    public readonly subItems?: Page[],\r\n\r\n    expanded?: boolean\r\n  ) {\r\n    super(label, route, paragraphs, params, expanded);\r\n  }\r\n}\r\n\r\nexport class Group extends Page {\r\n  constructor(\r\n    /**\r\n     * Label of the Group shown in the side nav.\r\n     */\r\n    label: string,\r\n    /**\r\n     * Material icon name for the icon to show next to the label.\r\n     * https://material.io/tools/icons\r\n     * Only one of icon and iconUrl can be used. The other should be undefined.\r\n     */\r\n    public readonly icon?: string,\r\n    /**\r\n     * URL to the icon image to show next to the label.\r\n     * Only one of icon and iconUrl can be used. The other should be undefined.\r\n     */\r\n    public readonly iconUrl?: string,\r\n    /**\r\n     * Sub pages of the group.\r\n     */\r\n    public readonly subItems?: Page[],\r\n    /**\r\n     * Route to the page.\r\n     */\r\n    route?: string,\r\n        /**\r\n     * Paragraphs of the long page.\r\n     * It's a regular page if no paragraphs are defined.\r\n     */\r\n    paragraphs?: Paragraph[],\r\n    params?: Params[],\r\n    expanded?: boolean\r\n  ) {\r\n    super(label, route, paragraphs, params, expanded);\r\n    this.subItems = subItems ? subItems : [];\r\n  }\r\n}\r\n"]}