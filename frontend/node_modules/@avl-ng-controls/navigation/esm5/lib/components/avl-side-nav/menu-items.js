var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Paragraph = /** @class */ (function () {
    function Paragraph(
    /**
     * Id/fragment of the paragraph header in the page.
     */
    id, 
    /**
     * Label of the paragraph shown in the side nav.
     */
    label) {
        this.id = id;
        this.label = label;
    }
    return Paragraph;
}());
export { Paragraph };
var Params = /** @class */ (function () {
    function Params(
    /**
     * Name of the query parameter.
     */
    name, 
    /**
     * Value of the query parameter.
     */
    value) {
        this.name = name;
        this.value = value;
    }
    return Params;
}());
export { Params };
var Page = /** @class */ (function () {
    function Page(
    /**
     * Label of the page shown in the side nav.
     */
    label, 
    /**
     * Route to the page.
     */
    route, 
    /**
     * Paragraphs of the long page.
     * It's a regular page if no paragraphs are defined.
     */
    paragraphs, 
    /**
     * Query parameters of the page.
     */
    params, expanded) {
        this.label = label;
        this.route = route;
        this.paragraphs = paragraphs;
        this.params = params;
        this.expanded = expanded;
        this.paragraphs = paragraphs ? paragraphs : [];
        this.params = params ? params : [];
    }
    return Page;
}());
export { Page };
var TopLevelPage = /** @class */ (function (_super) {
    __extends(TopLevelPage, _super);
    function TopLevelPage(
    /**
     * Label of the page shown in the side nav.
     */
    label, 
    /**
     * Route to the page.
     */
    route, 
    /**
     * Material icon name for the icon to show next to the label.
     * https://material.io/tools/icons
     * Only one of icon and iconUrl can be used. The other should be undefined.
     */
    icon, 
    /**
     * URL to the icon image to show next to the label.
     * Only one of icon and iconUrl can be used. The other should be undefined.
     */
    iconUrl, 
    /**
     * Paragraphs of the long page.
     * It's a regular page if no paragraphs are defined.
     */
    paragraphs, 
    /**
     * Query parameters of the page.
     */
    params, 
    /**
     * Sub pages of the top level page.
     */
    subItems, expanded) {
        var _this = _super.call(this, label, route, paragraphs, params, expanded) || this;
        _this.icon = icon;
        _this.iconUrl = iconUrl;
        _this.paragraphs = paragraphs;
        _this.params = params;
        _this.subItems = subItems;
        return _this;
    }
    return TopLevelPage;
}(Page));
export { TopLevelPage };
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    function Group(
    /**
     * Label of the Group shown in the side nav.
     */
    label, 
    /**
     * Material icon name for the icon to show next to the label.
     * https://material.io/tools/icons
     * Only one of icon and iconUrl can be used. The other should be undefined.
     */
    icon, 
    /**
     * URL to the icon image to show next to the label.
     * Only one of icon and iconUrl can be used. The other should be undefined.
     */
    iconUrl, 
    /**
     * Sub pages of the group.
     */
    subItems, 
    /**
     * Route to the page.
     */
    route, 
    /**
 * Paragraphs of the long page.
 * It's a regular page if no paragraphs are defined.
 */
    paragraphs, params, expanded) {
        var _this = _super.call(this, label, route, paragraphs, params, expanded) || this;
        _this.icon = icon;
        _this.iconUrl = iconUrl;
        _this.subItems = subItems;
        _this.subItems = subItems ? subItems : [];
        return _this;
    }
    return Group;
}(Page));
export { Group };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1pdGVtcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtbmctY29udHJvbHMvbmF2aWdhdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2F2bC1zaWRlLW5hdi9tZW51LWl0ZW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFQTtJQUNFO0lBQ0U7O09BRUc7SUFDYSxFQUFVO0lBQzFCOztPQUVHO0lBQ2EsS0FBYTtRQUpiLE9BQUUsR0FBRixFQUFFLENBQVE7UUFJVixVQUFLLEdBQUwsS0FBSyxDQUFRO0lBQzNCLENBQUM7SUFDUCxnQkFBQztBQUFELENBQUMsQUFYRCxJQVdDOztBQUVEO0lBQ0U7SUFDRTs7T0FFRztJQUNhLElBQVk7SUFDNUI7O09BRUc7SUFDYSxLQUFhO1FBSmIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUlaLFVBQUssR0FBTCxLQUFLLENBQVE7SUFDM0IsQ0FBQztJQUNQLGFBQUM7QUFBRCxDQUFDLEFBWEQsSUFXQzs7QUFFRDtJQUNFO0lBQ0U7O09BRUc7SUFDYSxLQUFhO0lBQzdCOztPQUVHO0lBQ2EsS0FBYTtJQUM3Qjs7O09BR0c7SUFDYSxVQUF3QjtJQUN4Qzs7T0FFRztJQUNhLE1BQWlCLEVBRWpCLFFBQWtCO1FBZmxCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFJYixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBS2IsZUFBVSxHQUFWLFVBQVUsQ0FBYztRQUl4QixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBRWpCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFFbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBQ0gsV0FBQztBQUFELENBQUMsQUF6QkQsSUF5QkM7O0FBRUQ7SUFBa0MsZ0NBQUk7SUFDcEM7SUFDRTs7T0FFRztJQUNILEtBQWE7SUFDYjs7T0FFRztJQUNILEtBQWE7SUFDYjs7OztPQUlHO0lBQ2EsSUFBYTtJQUM3Qjs7O09BR0c7SUFDYSxPQUFnQjtJQUNoQzs7O09BR0c7SUFDYSxVQUF3QjtJQUN4Qzs7T0FFRztJQUNhLE1BQWlCO0lBQ2pDOztPQUVHO0lBQ2EsUUFBaUIsRUFFakMsUUFBa0I7UUFsQ3BCLFlBb0NFLGtCQUFNLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsU0FDbEQ7UUF2QmlCLFVBQUksR0FBSixJQUFJLENBQVM7UUFLYixhQUFPLEdBQVAsT0FBTyxDQUFTO1FBS2hCLGdCQUFVLEdBQVYsVUFBVSxDQUFjO1FBSXhCLFlBQU0sR0FBTixNQUFNLENBQVc7UUFJakIsY0FBUSxHQUFSLFFBQVEsQ0FBUzs7SUFLbkMsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQXZDRCxDQUFrQyxJQUFJLEdBdUNyQzs7QUFFRDtJQUEyQix5QkFBSTtJQUM3QjtJQUNFOztPQUVHO0lBQ0gsS0FBYTtJQUNiOzs7O09BSUc7SUFDYSxJQUFhO0lBQzdCOzs7T0FHRztJQUNhLE9BQWdCO0lBQ2hDOztPQUVHO0lBQ2EsUUFBaUI7SUFDakM7O09BRUc7SUFDSCxLQUFjO0lBQ1Y7OztHQUdEO0lBQ0gsVUFBd0IsRUFDeEIsTUFBaUIsRUFDakIsUUFBa0I7UUE5QnBCLFlBZ0NFLGtCQUFNLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsU0FFbEQ7UUF4QmlCLFVBQUksR0FBSixJQUFJLENBQVM7UUFLYixhQUFPLEdBQVAsT0FBTyxDQUFTO1FBSWhCLGNBQVEsR0FBUixRQUFRLENBQVM7UUFjakMsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDOztJQUMzQyxDQUFDO0lBQ0gsWUFBQztBQUFELENBQUMsQUFwQ0QsQ0FBMkIsSUFBSSxHQW9DOUIiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJhZ3JhcGgge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICAgKiBJZC9mcmFnbWVudCBvZiB0aGUgcGFyYWdyYXBoIGhlYWRlciBpbiB0aGUgcGFnZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIExhYmVsIG9mIHRoZSBwYXJhZ3JhcGggc2hvd24gaW4gdGhlIHNpZGUgbmF2LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGFiZWw6IHN0cmluZ1xyXG4gICkgeyB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJhbXMge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICAgKiBOYW1lIG9mIHRoZSBxdWVyeSBwYXJhbWV0ZXIuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIFZhbHVlIG9mIHRoZSBxdWVyeSBwYXJhbWV0ZXIuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZTogc3RyaW5nXHJcbiAgKSB7IH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYWJlbCBvZiB0aGUgcGFnZSBzaG93biBpbiB0aGUgc2lkZSBuYXYuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBsYWJlbDogc3RyaW5nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3V0ZSB0byB0aGUgcGFnZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHJvdXRlOiBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFncmFwaHMgb2YgdGhlIGxvbmcgcGFnZS5cclxuICAgICAqIEl0J3MgYSByZWd1bGFyIHBhZ2UgaWYgbm8gcGFyYWdyYXBocyBhcmUgZGVmaW5lZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcmFncmFwaHM/OiBQYXJhZ3JhcGhbXSxcclxuICAgIC8qKlxyXG4gICAgICogUXVlcnkgcGFyYW1ldGVycyBvZiB0aGUgcGFnZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcmFtcz86IFBhcmFtc1tdLFxyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBleHBhbmRlZD86IGJvb2xlYW5cclxuICApIHtcclxuICAgIHRoaXMucGFyYWdyYXBocyA9IHBhcmFncmFwaHMgPyBwYXJhZ3JhcGhzIDogW107XHJcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcyA/IHBhcmFtcyA6IFtdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRvcExldmVsUGFnZSBleHRlbmRzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYWJlbCBvZiB0aGUgcGFnZSBzaG93biBpbiB0aGUgc2lkZSBuYXYuXHJcbiAgICAgKi9cclxuICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIFJvdXRlIHRvIHRoZSBwYWdlLlxyXG4gICAgICovXHJcbiAgICByb3V0ZTogc3RyaW5nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRlcmlhbCBpY29uIG5hbWUgZm9yIHRoZSBpY29uIHRvIHNob3cgbmV4dCB0byB0aGUgbGFiZWwuXHJcbiAgICAgKiBodHRwczovL21hdGVyaWFsLmlvL3Rvb2xzL2ljb25zXHJcbiAgICAgKiBPbmx5IG9uZSBvZiBpY29uIGFuZCBpY29uVXJsIGNhbiBiZSB1c2VkLiBUaGUgb3RoZXIgc2hvdWxkIGJlIHVuZGVmaW5lZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGljb24/OiBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIFVSTCB0byB0aGUgaWNvbiBpbWFnZSB0byBzaG93IG5leHQgdG8gdGhlIGxhYmVsLlxyXG4gICAgICogT25seSBvbmUgb2YgaWNvbiBhbmQgaWNvblVybCBjYW4gYmUgdXNlZC4gVGhlIG90aGVyIHNob3VsZCBiZSB1bmRlZmluZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBpY29uVXJsPzogc3RyaW5nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhZ3JhcGhzIG9mIHRoZSBsb25nIHBhZ2UuXHJcbiAgICAgKiBJdCdzIGEgcmVndWxhciBwYWdlIGlmIG5vIHBhcmFncmFwaHMgYXJlIGRlZmluZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBwYXJhZ3JhcGhzPzogUGFyYWdyYXBoW10sXHJcbiAgICAvKipcclxuICAgICAqIFF1ZXJ5IHBhcmFtZXRlcnMgb2YgdGhlIHBhZ2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBwYXJhbXM/OiBQYXJhbXNbXSxcclxuICAgIC8qKlxyXG4gICAgICogU3ViIHBhZ2VzIG9mIHRoZSB0b3AgbGV2ZWwgcGFnZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHN1Ykl0ZW1zPzogUGFnZVtdLFxyXG5cclxuICAgIGV4cGFuZGVkPzogYm9vbGVhblxyXG4gICkge1xyXG4gICAgc3VwZXIobGFiZWwsIHJvdXRlLCBwYXJhZ3JhcGhzLCBwYXJhbXMsIGV4cGFuZGVkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHcm91cCBleHRlbmRzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYWJlbCBvZiB0aGUgR3JvdXAgc2hvd24gaW4gdGhlIHNpZGUgbmF2LlxyXG4gICAgICovXHJcbiAgICBsYWJlbDogc3RyaW5nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRlcmlhbCBpY29uIG5hbWUgZm9yIHRoZSBpY29uIHRvIHNob3cgbmV4dCB0byB0aGUgbGFiZWwuXHJcbiAgICAgKiBodHRwczovL21hdGVyaWFsLmlvL3Rvb2xzL2ljb25zXHJcbiAgICAgKiBPbmx5IG9uZSBvZiBpY29uIGFuZCBpY29uVXJsIGNhbiBiZSB1c2VkLiBUaGUgb3RoZXIgc2hvdWxkIGJlIHVuZGVmaW5lZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGljb24/OiBzdHJpbmcsXHJcbiAgICAvKipcclxuICAgICAqIFVSTCB0byB0aGUgaWNvbiBpbWFnZSB0byBzaG93IG5leHQgdG8gdGhlIGxhYmVsLlxyXG4gICAgICogT25seSBvbmUgb2YgaWNvbiBhbmQgaWNvblVybCBjYW4gYmUgdXNlZC4gVGhlIG90aGVyIHNob3VsZCBiZSB1bmRlZmluZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBpY29uVXJsPzogc3RyaW5nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWIgcGFnZXMgb2YgdGhlIGdyb3VwLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3ViSXRlbXM/OiBQYWdlW10sXHJcbiAgICAvKipcclxuICAgICAqIFJvdXRlIHRvIHRoZSBwYWdlLlxyXG4gICAgICovXHJcbiAgICByb3V0ZT86IHN0cmluZyxcclxuICAgICAgICAvKipcclxuICAgICAqIFBhcmFncmFwaHMgb2YgdGhlIGxvbmcgcGFnZS5cclxuICAgICAqIEl0J3MgYSByZWd1bGFyIHBhZ2UgaWYgbm8gcGFyYWdyYXBocyBhcmUgZGVmaW5lZC5cclxuICAgICAqL1xyXG4gICAgcGFyYWdyYXBocz86IFBhcmFncmFwaFtdLFxyXG4gICAgcGFyYW1zPzogUGFyYW1zW10sXHJcbiAgICBleHBhbmRlZD86IGJvb2xlYW5cclxuICApIHtcclxuICAgIHN1cGVyKGxhYmVsLCByb3V0ZSwgcGFyYWdyYXBocywgcGFyYW1zLCBleHBhbmRlZCk7XHJcbiAgICB0aGlzLnN1Ykl0ZW1zID0gc3ViSXRlbXMgPyBzdWJJdGVtcyA6IFtdO1xyXG4gIH1cclxufVxyXG4iXX0=