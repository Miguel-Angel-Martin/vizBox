import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';

var _c0 = ["*"];
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Component, ViewEncapsulation, ContentChildren, QueryList, AfterViewInit, OnDestroy, Renderer2, Inject, PLATFORM_ID } from '@angular/core';
import { AvlParagraphDirective } from './avl-paragraph.directive';
import { Router, NavigationEnd } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';
/**
* avl-long-page should only be used inside avl-app-layout. The only scrollable container should
* be avl-app-layout (already set by default) and avl-long-page and components that are using it must
* not scroll in order for avl-long-page to work properly.
*/
var AvlLongPageComponent = /** @class */ (function () {
    /**
    * @hidden
    */
    function AvlLongPageComponent(router, renderer, platformId) {
        var _this = this;
        this.router = router;
        this.renderer = renderer;
        this.platformId = platformId;
        this.scrollListener = function (event) {
            var newParagraph;
            if (_this.scrollContainer.scrollHeight < Math.round(_this.scrollContainer.scrollTop + _this.scrollContainer.getBoundingClientRect().height)) {
                newParagraph = _this.paragraphs.last;
            }
            else {
                _this.paragraphs.forEach(function (paragraph) {
                    var p = paragraph.elementRef.nativeElement;
                    var rect = p.getBoundingClientRect();
                    if (rect.top < window.innerHeight * 0.1) {
                        newParagraph = paragraph;
                    }
                });
            }
            if (newParagraph) {
                _this.currentFragment = newParagraph.paragraphName;
                _this.router.navigate([], { queryParamsHandling: 'preserve', fragment: newParagraph.paragraphName });
            }
        };
    }
    AvlLongPageComponent.prototype.handleRouteChange = function () {
        var paragraphName = this.router.parseUrl(this.router.url).fragment;
        var paragraph = this.paragraphs.find(function (p) { return p.paragraphName === paragraphName; });
        if (this.currentFragment === paragraphName) {
            return;
        }
        if (paragraph) {
            setTimeout(function () {
                return paragraph.elementRef.nativeElement.scrollIntoView({ behavior: 'instant', block: 'start', inline: 'nearest' });
            }, 0);
        }
    };
    /**
    * @hidden
    */
    AvlLongPageComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.scrollContainer = document.querySelector('avl-app-layout main');
            this.scrollSubscription = this.renderer.listen(this.scrollContainer, 'scroll', this.scrollListener);
        }
        this.handleRouteChange();
        this.routerSubscription = this.router.events.subscribe(function (newRoute) {
            if (newRoute instanceof NavigationEnd) {
                _this.handleRouteChange();
            }
        });
        this.paragraphsSubscription = this.paragraphs.changes.subscribe(function (_) {
            /* if scrollIntoView has not occured yet try it with new paragraphs
               this is needed for components which render content (paragraphs)
               after view has been initialized
            */
            if (!_this.currentFragment) {
                _this.handleRouteChange();
            }
        });
    };
    /**
    * @hidden
    */
    AvlLongPageComponent.prototype.ngOnDestroy = function () {
        if (this.routerSubscription) {
            this.routerSubscription.unsubscribe();
        }
        if (this.paragraphsSubscription) {
            this.paragraphsSubscription.unsubscribe();
        }
        if (this.scrollSubscription) {
            this.scrollSubscription();
        }
    };
    AvlLongPageComponent.ctorParameters = function () { return [
        { type: Router },
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        ContentChildren(AvlParagraphDirective),
        __metadata("design:type", QueryList)
    ], AvlLongPageComponent.prototype, "paragraphs", void 0);
    AvlLongPageComponent = __decorate([ __param(2, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Router, Renderer2, Object])
    ], AvlLongPageComponent);
AvlLongPageComponent.ɵfac = function AvlLongPageComponent_Factory(t) { return new (t || AvlLongPageComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
AvlLongPageComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AvlLongPageComponent, selectors: [["avl-long-page"]], contentQueries: function AvlLongPageComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, AvlParagraphDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.paragraphs = _t);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AvlLongPageComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [":host{font-family:var(--avl-font-family)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlLongPageComponent, [{
        type: Component,
        args: [{
                selector: 'avl-long-page',
                template: "<ng-content></ng-content>",
                encapsulation: ViewEncapsulation.None,
                styles: [":host{font-family:var(--avl-font-family)}"]
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc0.Renderer2 }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { paragraphs: [{
            type: ContentChildren,
            args: [AvlParagraphDirective]
        }] }); })();
    return AvlLongPageComponent;
}());
export { AvlLongPageComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,