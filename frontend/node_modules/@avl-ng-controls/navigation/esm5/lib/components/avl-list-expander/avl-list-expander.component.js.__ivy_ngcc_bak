var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, HostListener, Output, EventEmitter } from '@angular/core';
var AvlListExpanderComponent = /** @class */ (function () {
    function AvlListExpanderComponent() {
        /**
         * Boolean that changes modes between wide and narrow, false by default.
         */
        this.narrow = false;
        this._open = false;
        /**
         * Event that emits when the expander is opened or closed.
         * Sends boolean value of new open state.
         */
        this.openChange = new EventEmitter();
    }
    Object.defineProperty(AvlListExpanderComponent.prototype, "open", {
        get: function () {
            return this._open;
        },
        /**
         * Boolean that tells whether the expander is open or closed, expander is closed by default.
         */
        set: function (value) {
            this._open = value;
            this.openChange.emit(this._open);
        },
        enumerable: true,
        configurable: true
    });
    AvlListExpanderComponent.prototype.toggleClick = function () {
        this.open = !this.open;
    };
    /** @hidden */
    AvlListExpanderComponent.prototype.keyEvent = function (event) {
        var activeEl = document.activeElement;
        if (event.key === ' ' || event.key === 'Enter') {
            activeEl.click();
            return;
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], AvlListExpanderComponent.prototype, "narrow", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AvlListExpanderComponent.prototype, "open", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AvlListExpanderComponent.prototype, "openChange", void 0);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], AvlListExpanderComponent.prototype, "keyEvent", null);
    AvlListExpanderComponent = __decorate([
        Component({
            selector: 'avl-list-expander',
            template: "<hr/>\r\n<div id=\"expander\">\r\n    <div  [ngClass]=\"narrow ? 'title-container-narrow' : 'title-container'\" tabindex=\"0\" (click)=\"toggleClick()\">\r\n        <div [ngClass]=\"narrow ? 'icon-narrow' : 'icon'\" *ngIf=\"!open\">\r\n            <avl-icon icon=\"hardware:keyboard-arrow-down\" id=\"starsIcon\"></avl-icon>\r\n        </div>\r\n        <div [ngClass]=\"narrow ? 'icon-narrow' : 'icon'\" *ngIf=\"open\">\r\n            <avl-icon icon=\"hardware:keyboard-arrow-up\" id=\"starsIcon\"></avl-icon>\r\n        </div>\r\n        <div [ngClass]=\"narrow ? 'title-narrow' : 'title'\">\r\n            <ng-content select=\"div[role=header]\"></ng-content>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"open\" [ngClass]=\"narrow ? 'content-narrow' : 'content'\">\r\n        <ng-content select=\"div[role=content]\"></ng-content>\r\n    </div>\r\n</div>\r\n\r\n",
            styles: [".title-container:hover{background-color:var(--avl-list-expander-header-hover-color,var(--avl-ink-default-hover-color))}.title-container:focus{background-color:var(--avl-list-expander-header-focus-color,var(--avl-ink-default-focus-color));outline:0}.title-container:active{background-color:var(--avl-list-expander-header-pressed-color,var(--avl-ink-default-pressed-color))}.title-container{height:48px;display:flex;flex-flow:row;align-items:center;cursor:pointer}.title{font-size:17px;color:var(--avl-list-expander-title-color,var(--avl-foreground-color))}.icon{margin:12px 12px 12px 24px;height:24px}.content{margin:4px 24px}hr{display:block;border:0;border-top:1px solid var(--avl-list-expander-divider-color,var(--avl-divider-color));margin:0}avl-icon{--avl-icon-custom-color:var(--avl-list-expander-icon-color, var(--avl-hint-color))}.icon-narrow{margin:16px 24px 16px 16px;position:absolute;right:0;bottom:0;height:24px}.title-container-narrow{position:relative;height:56px;display:flex;flex-flow:row;align-items:center;cursor:pointer}.content-narrow{margin:0 24px 24px}.title-narrow{margin-left:24px;font-size:17px;margin-right:64px;white-space:nowrap;overflow:hidden}.title-container-narrow:hover{background-color:var(--avl-list-expander-header-hover-color,var(--avl-ink-default-hover-color))}.title-container-narrow:focus{background-color:var(--avl-list-expander-header-focus-color,var(--avl-ink-default-focus-color));outline:0}.title-container-narrow:active{background-color:var(--avl-list-expander-header-pressed-color,var(--avl-ink-default-pressed-color))}"]
        }),
        __metadata("design:paramtypes", [])
    ], AvlListExpanderComponent);
    return AvlListExpanderComponent;
}());
export { AvlListExpanderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWxpc3QtZXhwYW5kZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1uZy1jb250cm9scy9uYXZpZ2F0aW9uLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYXZsLWxpc3QtZXhwYW5kZXIvYXZsLWxpc3QtZXhwYW5kZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3JGO0lBNkNJO1FBM0JBOztXQUVHO1FBRUgsV0FBTSxHQUFZLEtBQUssQ0FBQztRQUdoQixVQUFLLEdBQUcsS0FBSyxDQUFDO1FBY3RCOzs7V0FHRztRQUNPLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0lBRXBDLENBQUM7SUFmaEIsc0JBQUksMENBQUk7YUFLUjtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDO1FBWEQ7O1dBRUc7YUFFSCxVQUFTLEtBQWM7WUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBY0QsOENBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCxjQUFjO0lBRWQsMkNBQVEsR0FBUixVQUFTLEtBQW9CO1FBQ3pCLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUE0QixDQUFDO1FBQ3ZELElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7WUFDNUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLE9BQU87U0FDVjtJQUNMLENBQUM7SUFyQ0Q7UUFEQyxLQUFLLEVBQUU7OzREQUNnQjtJQVF4QjtRQURDLEtBQUssRUFBRTs7O3dEQUlQO0lBVVM7UUFBVCxNQUFNLEVBQUU7O2dFQUEwQztJQVVuRDtRQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7eUNBQ3BCLGFBQWE7OzREQU01QjtJQTNEUSx3QkFBd0I7UUFMcEMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG1CQUFtQjtZQUM3Qix3M0JBQWlEOztTQUVwRCxDQUFDOztPQUNXLHdCQUF3QixDQTREcEM7SUFBRCwrQkFBQztDQUFBLEFBNURELElBNERDO1NBNURZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhdmwtbGlzdC1leHBhbmRlcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXZsLWxpc3QtZXhwYW5kZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vYXZsLWxpc3QtZXhwYW5kZXIuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxMaXN0RXhwYW5kZXJDb21wb25lbnQge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqICMjIyBTdHlsaW5nXHJcbiAgICAgKiBUaGUgZm9sbG93aW5nIGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBhdmFpbGFibGUgZm9yIHN0eWxpbmc6XHJcbiAgICAgKlxyXG4gICAgICogQ3VzdG9tIHByb3BlcnR5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZWZhdWx0XHJcbiAgICAgKiA6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXw6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIGAtLWF2bC1saXN0LWV4cGFuZGVyLWhlYWRlci1ob3Zlci1jb2xvcmAgICAgICAgfCBIZWFkZXIgYmFja2dyb3VuZCBjb2xvciB3aGVuIGhvdmVyZWQgIHwgYC0tYXZsLWluay1kZWZhdWx0LWhvdmVyLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWxpc3QtZXhwYW5kZXItaGVhZGVyLWZvY3VzLWNvbG9yYCAgICAgICB8IEhlYWRlciBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gZm9jdXNlZCAgfCBgLS1hdmwtaW5rLWRlZmF1bHQtZm9jdXMtY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtbGlzdC1leHBhbmRlci1oZWFkZXItcHJlc3NlZC1jb2xvcmAgICAgIHwgSGVhZGVyIGJhY2tncm91bmQgY29sb3Igd2hlbiBwcmVzc2VkICB8IGAtLWF2bC1pbmstZGVmYXVsdC1wcmVzc2VkLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWxpc3QtZXhwYW5kZXItZGl2aWRlci1jb2xvcmAgICAgICAgICAgICB8IERpdmlkZXIgY29sb3IgICAgICAgICAgICAgICAgICAgICAgICAgfCBgLS1hdmwtZGl2aWRlci1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1saXN0LWV4cGFuZGVyLXRpdGxlLWNvbG9yYCAgICAgICAgICAgICAgfCBUaXRsZSBjb2xvciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLWluay1kZWZhdWx0LXByZXNzZWQtY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtbGlzdC1leHBhbmRlci1pY29uLWNvbG9yYCAgICAgICAgICAgICAgIHwgQXJyb3cgaWNvbiBjb2xvciAgICAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1kaXZpZGVyLWNvbG9yYFxyXG4gICAgICovXHJcbiAgICBfc3R5bGluZzogYW55O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB0aGF0IGNoYW5nZXMgbW9kZXMgYmV0d2VlbiB3aWRlIGFuZCBuYXJyb3csIGZhbHNlIGJ5IGRlZmF1bHQuXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpXHJcbiAgICBuYXJyb3c6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblxyXG4gICAgcHJpdmF0ZSBfb3BlbiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBCb29sZWFuIHRoYXQgdGVsbHMgd2hldGhlciB0aGUgZXhwYW5kZXIgaXMgb3BlbiBvciBjbG9zZWQsIGV4cGFuZGVyIGlzIGNsb3NlZCBieSBkZWZhdWx0LlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IG9wZW4odmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9vcGVuID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5vcGVuQ2hhbmdlLmVtaXQodGhpcy5fb3Blbik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG9wZW4oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB0aGF0IGVtaXRzIHdoZW4gdGhlIGV4cGFuZGVyIGlzIG9wZW5lZCBvciBjbG9zZWQuXHJcbiAgICAgKiBTZW5kcyBib29sZWFuIHZhbHVlIG9mIG5ldyBvcGVuIHN0YXRlLlxyXG4gICAgICovXHJcbiAgICBAT3V0cHV0KCkgb3BlbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgdG9nZ2xlQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5vcGVuID0gIXRoaXMub3BlbjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGhpZGRlbiAqL1xyXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXHJcbiAgICBrZXlFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcgfHwgZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUVsLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19