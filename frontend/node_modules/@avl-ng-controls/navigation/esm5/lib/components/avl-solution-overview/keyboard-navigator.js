/** @hidden */
var KeyboardNavigator = /** @class */ (function () {
    function KeyboardNavigator(numberOfItems, gridWidth) {
        this.numberOfItems = numberOfItems;
        this.gridWidth = gridWidth;
    }
    /** @returns to which item to navigate to from the current item and undefined to not move. */
    KeyboardNavigator.prototype.navigate = function (currentItemIndex, keyPressed, nextGroupSize, prevGroupSize) {
        if (nextGroupSize === void 0) { nextGroupSize = 0; }
        if (prevGroupSize === void 0) { prevGroupSize = 0; }
        nextGroupSize = nextGroupSize || 0;
        prevGroupSize = prevGroupSize || 0;
        var currentItemColumn = currentItemIndex % this.gridWidth;
        var currentItemRow = Math.floor(currentItemIndex / this.gridWidth);
        var maxRows = Math.ceil(this.numberOfItems / this.gridWidth);
        var nextIndex;
        switch (keyPressed) {
            case 'ArrowUp':
            case 'Up':
                nextIndex = currentItemIndex - this.gridWidth;
                if (currentItemRow === 0) {
                    if (prevGroupSize === 0) {
                        return undefined;
                    }
                    if (nextIndex < 0) {
                        var prevLastIndex = prevGroupSize - 1;
                        // columns of last element and targeted element of previous group
                        // - 0 based index
                        var lastColumn = prevLastIndex % this.gridWidth;
                        return currentItemColumn <= lastColumn
                            ? currentItemColumn - lastColumn - 1 // negative indexes -> -1 is last element
                            : prevGroupSize <= this.gridWidth
                                // focus last element of previous group if focus should go on 2 groups before current
                                ? -1
                                : -this.gridWidth - currentItemColumn;
                    }
                }
                return nextIndex;
            case 'ArrowDown':
            case 'Down': {
                nextIndex = currentItemIndex + this.gridWidth;
                var indexExists = nextIndex < this.numberOfItems;
                if (currentItemRow === maxRows - 1) {
                    if (nextGroupSize === 0) {
                        return undefined;
                    }
                    if (!indexExists) {
                        var nextLastIndex = nextGroupSize - 1;
                        var lastColumn = nextLastIndex % this.gridWidth;
                        return lastColumn >= currentItemColumn
                            ? currentItemColumn
                            : nextGroupSize <= this.gridWidth
                                ? 0
                                : this.gridWidth + currentItemColumn;
                    }
                }
                else if (!indexExists) {
                    return this.numberOfItems - 1;
                }
                return nextIndex;
            }
            case 'ArrowLeft':
            case 'Left':
                if (currentItemIndex === 0) {
                    return prevGroupSize === 0 ? undefined : -1;
                }
                return currentItemIndex - 1;
            case 'ArrowRight':
            case 'Right': {
                if (currentItemIndex === this.numberOfItems - 1) {
                    return nextGroupSize === 0 ? undefined : 0;
                }
                nextIndex = currentItemIndex + 1;
                return nextIndex;
            }
            default:
                return undefined;
        }
    };
    return KeyboardNavigator;
}());
export { KeyboardNavigator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtbmF2aWdhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1uZy1jb250cm9scy9uYXZpZ2F0aW9uLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYXZsLXNvbHV0aW9uLW92ZXJ2aWV3L2tleWJvYXJkLW5hdmlnYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBQ2Q7SUFDRSwyQkFBb0IsYUFBcUIsRUFBVSxTQUFpQjtRQUFoRCxrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQVE7SUFBSSxDQUFDO0lBRXpFLDZGQUE2RjtJQUN0RixvQ0FBUSxHQUFmLFVBQ0UsZ0JBQXdCLEVBQ3hCLFVBQWtCLEVBQ2xCLGFBQXFDLEVBQ3JDLGFBQXFDO1FBRHJDLDhCQUFBLEVBQUEsaUJBQXFDO1FBQ3JDLDhCQUFBLEVBQUEsaUJBQXFDO1FBRXJDLGFBQWEsR0FBRyxhQUFhLElBQUksQ0FBQyxDQUFDO1FBQ25DLGFBQWEsR0FBRyxhQUFhLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQU0saUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUM1RCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyRSxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRS9ELElBQUksU0FBaUIsQ0FBQztRQUV0QixRQUFRLFVBQVUsRUFBRTtZQUNsQixLQUFLLFNBQVMsQ0FBQztZQUNmLEtBQUssSUFBSTtnQkFDUCxTQUFTLEdBQUcsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDOUMsSUFBSSxjQUFjLEtBQUssQ0FBQyxFQUFFO29CQUN4QixJQUFJLGFBQWEsS0FBSyxDQUFDLEVBQUU7d0JBQ3ZCLE9BQU8sU0FBUyxDQUFDO3FCQUNsQjtvQkFDRCxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUU7d0JBQ2pCLElBQU0sYUFBYSxHQUFHLGFBQWEsR0FBRyxDQUFDLENBQUM7d0JBQ3hDLGlFQUFpRTt3QkFDakUsa0JBQWtCO3dCQUNsQixJQUFNLFVBQVUsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQzt3QkFFbEQsT0FBTyxpQkFBaUIsSUFBSSxVQUFVOzRCQUNwQyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxHQUFHLENBQUMsQ0FBQyx5Q0FBeUM7NEJBQzlFLENBQUMsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFNBQVM7Z0NBQ2pDLHFGQUFxRjtnQ0FDckYsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDSixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLGlCQUFpQixDQUFDO3FCQUN6QztpQkFDRjtnQkFDRCxPQUFPLFNBQVMsQ0FBQztZQUNuQixLQUFLLFdBQVcsQ0FBQztZQUNqQixLQUFLLE1BQU0sQ0FBQyxDQUFDO2dCQUNYLFNBQVMsR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUM5QyxJQUFNLFdBQVcsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztnQkFDbkQsSUFBSSxjQUFjLEtBQUssT0FBTyxHQUFHLENBQUMsRUFBRTtvQkFDbEMsSUFBSSxhQUFhLEtBQUssQ0FBQyxFQUFFO3dCQUN2QixPQUFPLFNBQVMsQ0FBQztxQkFDbEI7b0JBQ0QsSUFBSSxDQUFDLFdBQVcsRUFBRTt3QkFDaEIsSUFBTSxhQUFhLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQzt3QkFDeEMsSUFBTSxVQUFVLEdBQUcsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7d0JBQ2xELE9BQU8sVUFBVSxJQUFJLGlCQUFpQjs0QkFDcEMsQ0FBQyxDQUFDLGlCQUFpQjs0QkFDbkIsQ0FBQyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsU0FBUztnQ0FDakMsQ0FBQyxDQUFDLENBQUM7Z0NBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLENBQUM7cUJBQ3hDO2lCQUNGO3FCQUFNLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7aUJBQy9CO2dCQUNELE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBQ0QsS0FBSyxXQUFXLENBQUM7WUFDakIsS0FBSyxNQUFNO2dCQUNULElBQUksZ0JBQWdCLEtBQUssQ0FBQyxFQUFFO29CQUMxQixPQUFPLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzdDO2dCQUNELE9BQU8sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLEtBQUssWUFBWSxDQUFDO1lBQ2xCLEtBQUssT0FBTyxDQUFDLENBQUM7Z0JBQ1osSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRTtvQkFDL0MsT0FBTyxhQUFhLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDNUM7Z0JBQ0QsU0FBUyxHQUFHLGdCQUFnQixHQUFHLENBQUMsQ0FBQztnQkFDakMsT0FBTyxTQUFTLENBQUM7YUFDbEI7WUFDRDtnQkFDRSxPQUFPLFNBQVMsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFqRkQsSUFpRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGhpZGRlbiAqL1xyXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmROYXZpZ2F0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbnVtYmVyT2ZJdGVtczogbnVtYmVyLCBwcml2YXRlIGdyaWRXaWR0aDogbnVtYmVyKSB7IH1cclxuXHJcbiAgLyoqIEByZXR1cm5zIHRvIHdoaWNoIGl0ZW0gdG8gbmF2aWdhdGUgdG8gZnJvbSB0aGUgY3VycmVudCBpdGVtIGFuZCB1bmRlZmluZWQgdG8gbm90IG1vdmUuICovXHJcbiAgcHVibGljIG5hdmlnYXRlKFxyXG4gICAgY3VycmVudEl0ZW1JbmRleDogbnVtYmVyLFxyXG4gICAga2V5UHJlc3NlZDogc3RyaW5nLFxyXG4gICAgbmV4dEdyb3VwU2l6ZTogbnVtYmVyIHwgdW5kZWZpbmVkID0gMCxcclxuICAgIHByZXZHcm91cFNpemU6IG51bWJlciB8IHVuZGVmaW5lZCA9IDBcclxuICApOiBudW1iZXIge1xyXG4gICAgbmV4dEdyb3VwU2l6ZSA9IG5leHRHcm91cFNpemUgfHwgMDtcclxuICAgIHByZXZHcm91cFNpemUgPSBwcmV2R3JvdXBTaXplIHx8IDA7XHJcbiAgICBjb25zdCBjdXJyZW50SXRlbUNvbHVtbiA9IGN1cnJlbnRJdGVtSW5kZXggJSB0aGlzLmdyaWRXaWR0aDtcclxuICAgIGNvbnN0IGN1cnJlbnRJdGVtUm93ID0gTWF0aC5mbG9vcihjdXJyZW50SXRlbUluZGV4IC8gdGhpcy5ncmlkV2lkdGgpO1xyXG4gICAgY29uc3QgbWF4Um93cyA9IE1hdGguY2VpbCh0aGlzLm51bWJlck9mSXRlbXMgLyB0aGlzLmdyaWRXaWR0aCk7XHJcblxyXG4gICAgbGV0IG5leHRJbmRleDogbnVtYmVyO1xyXG5cclxuICAgIHN3aXRjaCAoa2V5UHJlc3NlZCkge1xyXG4gICAgICBjYXNlICdBcnJvd1VwJzpcclxuICAgICAgY2FzZSAnVXAnOlxyXG4gICAgICAgIG5leHRJbmRleCA9IGN1cnJlbnRJdGVtSW5kZXggLSB0aGlzLmdyaWRXaWR0aDtcclxuICAgICAgICBpZiAoY3VycmVudEl0ZW1Sb3cgPT09IDApIHtcclxuICAgICAgICAgIGlmIChwcmV2R3JvdXBTaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAobmV4dEluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICBjb25zdCBwcmV2TGFzdEluZGV4ID0gcHJldkdyb3VwU2l6ZSAtIDE7XHJcbiAgICAgICAgICAgIC8vIGNvbHVtbnMgb2YgbGFzdCBlbGVtZW50IGFuZCB0YXJnZXRlZCBlbGVtZW50IG9mIHByZXZpb3VzIGdyb3VwXHJcbiAgICAgICAgICAgIC8vIC0gMCBiYXNlZCBpbmRleFxyXG4gICAgICAgICAgICBjb25zdCBsYXN0Q29sdW1uID0gcHJldkxhc3RJbmRleCAlIHRoaXMuZ3JpZFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJdGVtQ29sdW1uIDw9IGxhc3RDb2x1bW5cclxuICAgICAgICAgICAgICA/IGN1cnJlbnRJdGVtQ29sdW1uIC0gbGFzdENvbHVtbiAtIDEgLy8gbmVnYXRpdmUgaW5kZXhlcyAtPiAtMSBpcyBsYXN0IGVsZW1lbnRcclxuICAgICAgICAgICAgICA6IHByZXZHcm91cFNpemUgPD0gdGhpcy5ncmlkV2lkdGhcclxuICAgICAgICAgICAgICAvLyBmb2N1cyBsYXN0IGVsZW1lbnQgb2YgcHJldmlvdXMgZ3JvdXAgaWYgZm9jdXMgc2hvdWxkIGdvIG9uIDIgZ3JvdXBzIGJlZm9yZSBjdXJyZW50XHJcbiAgICAgICAgICAgICAgPyAtMVxyXG4gICAgICAgICAgICAgIDogLXRoaXMuZ3JpZFdpZHRoIC0gY3VycmVudEl0ZW1Db2x1bW47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXh0SW5kZXg7XHJcbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XHJcbiAgICAgIGNhc2UgJ0Rvd24nOiB7XHJcbiAgICAgICAgbmV4dEluZGV4ID0gY3VycmVudEl0ZW1JbmRleCArIHRoaXMuZ3JpZFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IGluZGV4RXhpc3RzID0gbmV4dEluZGV4IDwgdGhpcy5udW1iZXJPZkl0ZW1zO1xyXG4gICAgICAgIGlmIChjdXJyZW50SXRlbVJvdyA9PT0gbWF4Um93cyAtIDEpIHtcclxuICAgICAgICAgIGlmIChuZXh0R3JvdXBTaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoIWluZGV4RXhpc3RzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRMYXN0SW5kZXggPSBuZXh0R3JvdXBTaXplIC0gMTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdENvbHVtbiA9IG5leHRMYXN0SW5kZXggJSB0aGlzLmdyaWRXaWR0aDtcclxuICAgICAgICAgICAgcmV0dXJuIGxhc3RDb2x1bW4gPj0gY3VycmVudEl0ZW1Db2x1bW5cclxuICAgICAgICAgICAgICA/IGN1cnJlbnRJdGVtQ29sdW1uXHJcbiAgICAgICAgICAgICAgOiBuZXh0R3JvdXBTaXplIDw9IHRoaXMuZ3JpZFdpZHRoXHJcbiAgICAgICAgICAgICAgPyAwXHJcbiAgICAgICAgICAgICAgOiB0aGlzLmdyaWRXaWR0aCArIGN1cnJlbnRJdGVtQ29sdW1uO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoIWluZGV4RXhpc3RzKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJPZkl0ZW1zIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHRJbmRleDtcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdBcnJvd0xlZnQnOlxyXG4gICAgICBjYXNlICdMZWZ0JzpcclxuICAgICAgICBpZiAoY3VycmVudEl0ZW1JbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuIHByZXZHcm91cFNpemUgPT09IDAgPyB1bmRlZmluZWQgOiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRJdGVtSW5kZXggLSAxO1xyXG4gICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcclxuICAgICAgY2FzZSAnUmlnaHQnOiB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRJdGVtSW5kZXggPT09IHRoaXMubnVtYmVyT2ZJdGVtcyAtIDEpIHtcclxuICAgICAgICAgIHJldHVybiBuZXh0R3JvdXBTaXplID09PSAwID8gdW5kZWZpbmVkIDogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV4dEluZGV4ID0gY3VycmVudEl0ZW1JbmRleCArIDE7XHJcbiAgICAgICAgcmV0dXJuIG5leHRJbmRleDtcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==