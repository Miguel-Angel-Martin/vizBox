var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { Component, HostListener, ElementRef, ViewChildren, QueryList, Input, EventEmitter, Output, ViewChild, AfterViewInit, OnInit, OnChanges, SimpleChanges, OnDestroy, ChangeDetectorRef, } from '@angular/core';
import { BehaviorSubject, asyncScheduler } from 'rxjs';
import { throttleTime, map } from 'rxjs/operators';
import { KeyboardNavigator } from './keyboard-navigator';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-search-bar/avl-search-bar';
var AvlSolutionOverviewComponent = /** @class */ (function () {
    function AvlSolutionOverviewComponent(cdr) {
        this.cdr = cdr;
        /**
         * Emits search query string on change
         */
        this.searchQueryChange = new EventEmitter();
        /**
         * Emits value of the search query when search triggered
         */
        this.search = new EventEmitter();
        this.gridWidth$ = new BehaviorSubject(-1);
        this.largestItemsIndex = -1;
        this.maxItems = 0;
    }
    Object.defineProperty(AvlSolutionOverviewComponent.prototype, "groupsOfItems", {
        get: function () {
            var e_1, _a;
            var v = [];
            try {
                for (var _b = __values(this.groupElementRefs), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var gRef = _c.value;
                    var gEl = gRef.nativeElement;
                    var items = Array.prototype.slice.call(gEl.querySelectorAll('a.item'));
                    v = __spread(v, [items]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlSolutionOverviewComponent.prototype, "iconButtonElements", {
        get: function () {
            if (this.iconButtonElementsCache == null) {
                this.iconButtonElementsCache = Array.prototype.slice.call(this.iconButtonsContainer
                    .nativeElement.querySelectorAll('avl-icon-button'));
            }
            return this.iconButtonElementsCache;
        },
        enumerable: true,
        configurable: true
    });
    AvlSolutionOverviewComponent.prototype.ngOnInit = function () {
        this.setupReferenceVars();
        this.gridWidthClass$ = this.gridWidth$.asObservable().pipe(throttleTime(50, asyncScheduler, { trailing: true }), map(function (gridWidth) {
            return "grid-width-" + gridWidth;
        }));
    };
    AvlSolutionOverviewComponent.prototype.ngOnDestroy = function () {
        if (this.groupElementRefsChangesSubscription) {
            this.groupElementRefsChangesSubscription.unsubscribe();
        }
    };
    AvlSolutionOverviewComponent.prototype.ngOnChanges = function (changes) {
        if (!changes.groups.isFirstChange()) {
            this.setupReferenceVars();
            this.gridWidth$.next(this.getGridWidth());
            this.setTopMargin();
        }
    };
    /** @hidden */
    AvlSolutionOverviewComponent.prototype.ngAfterViewInit = function () {
        this.setTopMargin();
        this.setupFocusOrdering();
        this.gridWidth$.next(this.getGridWidth());
    };
    /** @hidden */
    AvlSolutionOverviewComponent.prototype.getMaxColumnsClass = function () {
        if (this.maxColumns && window.outerWidth === this.screenWidth) {
            return "max-columns-" + this.maxColumns;
        }
        if (this.maxItems === 0) {
            return;
        }
        var maxColumns;
        switch (this.maxItems) {
            case 1:
                maxColumns = 1;
                break;
            case 2:
            case 4:
                maxColumns = 2;
                break;
            case 3:
            case 5:
            case 6:
            case 9:
                maxColumns = 3;
                break;
            case 7:
            case 8:
            case 11:
            case 12:
                maxColumns = 4;
                break;
            default:
                maxColumns = 5;
        }
        this.maxColumns = maxColumns;
        return "max-columns-" + maxColumns;
    };
    /** @hidden **/
    AvlSolutionOverviewComponent.prototype.onResize = function () {
        this.gridWidth$.next(this.getGridWidth());
    };
    /** @hidden */
    AvlSolutionOverviewComponent.prototype.onKeydownHandler = function (event) {
        var e_2, _a;
        var gOfItems = this.groupsOfItems;
        var numGroups = gOfItems.length;
        if (numGroups === 0) {
            return;
        }
        var activeEl = document.activeElement;
        var isDown = ['Down', 'ArrowDown'].includes(event.key);
        var isUp = ['Up', 'ArrowUp'].includes(event.key);
        var isRight = ['Right', 'ArrowRight'].includes(event.key);
        var isLeft = ['Left', 'ArrowLeft'].includes(event.key);
        var isTab = event.key === 'Tab';
        var searchbar = this.showSearchBar
            ? this.searchbarRef.nativeElement
            : undefined;
        var gNum;
        var iIdx;
        try {
            for (var gOfItems_1 = __values(gOfItems), gOfItems_1_1 = gOfItems_1.next(); !gOfItems_1_1.done; gOfItems_1_1 = gOfItems_1.next()) {
                var items = gOfItems_1_1.value;
                if (items.indexOf(activeEl) !== -1) {
                    iIdx = items.indexOf(activeEl);
                    gNum = gOfItems.indexOf(items);
                    // Go to route on 'Space'. 'Enter' already works on <a>.
                    if (event.key === ' ') {
                        items[iIdx].click();
                        return;
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (gOfItems_1_1 && !gOfItems_1_1.done && (_a = gOfItems_1.return)) _a.call(gOfItems_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (this.iconButtonElements.includes(activeEl)) {
            var numIconButtons = this.iconButtonElements.length;
            var idx = this.iconButtonElements.indexOf(activeEl);
            if ((isRight || isTab) && idx === numIconButtons - 1) {
                if (searchbar != null) {
                    searchbar.focus();
                }
                else {
                    gOfItems[0][0].focus();
                }
            }
            else if (isLeft && idx === 0) {
                var g = gOfItems[numGroups - 1];
                var gLen = g.length;
                g[gLen - 1].focus();
            }
            else if (isLeft) {
                this.iconButtonElements[idx - 1].focus();
            }
            else if (isRight) {
                this.iconButtonElements[idx + 1].focus();
            }
            event.preventDefault();
        }
        var itemElements = gOfItems[gNum];
        var gridWidth = this.gridWidth$.value;
        if (searchbar != null && iIdx < gridWidth && gNum === 0 && isUp) {
            searchbar.focus();
            event.preventDefault();
        }
        else if ((isRight || isTab) &&
            gNum === gOfItems.length - 1 &&
            iIdx === itemElements.length - 1) {
            var iconButtons = this.iconButtonElements;
            if (iconButtons != null && iconButtons.length > 0) {
                iconButtons[0].focus();
                event.preventDefault();
            }
        }
        else if (searchbar != null && searchbar === activeEl && isDown) {
            gOfItems[0][0].focus();
            event.preventDefault();
        }
        else if (gNum != null) {
            var nextGroup = gNum === gOfItems.length - 1 ? undefined : gOfItems[gNum + 1];
            var prevGroup = gNum === 0 ? undefined : gOfItems[gNum - 1];
            var nGLen = nextGroup == null ? 0 : nextGroup.length;
            var pGLen = prevGroup == null ? 0 : prevGroup.length;
            var keyboardNavigator = new KeyboardNavigator(itemElements.length, gridWidth);
            var itemIndexToMoveTo = keyboardNavigator.navigate(iIdx, event.key, nGLen, pGLen);
            if (itemIndexToMoveTo != null) {
                if ((isUp || isLeft) && itemIndexToMoveTo < 0) {
                    prevGroup[itemIndexToMoveTo + pGLen].focus();
                }
                else if ((isDown || isRight) && iIdx + 1 > itemIndexToMoveTo) {
                    nextGroup[itemIndexToMoveTo].focus();
                }
                else {
                    gOfItems[gNum][itemIndexToMoveTo].focus();
                }
                event.preventDefault();
            }
        }
    };
    /** @hidden */
    AvlSolutionOverviewComponent.prototype.onQueryChange = function (event) {
        this.searchQueryChange.emit(event.detail.value);
    };
    /** @hidden */
    AvlSolutionOverviewComponent.prototype.onSearch = function (event) {
        this.search.emit(event.detail.value);
    };
    AvlSolutionOverviewComponent.prototype.setupReferenceVars = function () {
        var e_3, _a;
        var max = 0;
        try {
            for (var _b = __values(this.groups), _c = _b.next(); !_c.done; _c = _b.next()) {
                var g = _c.value;
                var itemSz = g.items.length;
                if (max < itemSz) {
                    max = itemSz;
                    this.largestItemsIndex = this.groups.indexOf(g);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.maxItems = max;
    };
    AvlSolutionOverviewComponent.prototype.setTopMargin = function () {
        this.contentHasScroll = false;
        this.cdr.detectChanges();
        var content = this.groupsContainer.nativeElement;
        this.contentHasScroll = content.scrollHeight > content.clientHeight;
        this.cdr.detectChanges();
    };
    AvlSolutionOverviewComponent.prototype.getGridWidth = function () {
        var e_4, _a;
        if (this.largestItemsIndex < 0) {
            this.setupReferenceVars();
        }
        var items = this.groupsOfItems[this.largestItemsIndex];
        var firstItemOffsetTop = items[0].offsetTop;
        var i = 0;
        try {
            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                if (item.offsetTop > firstItemOffsetTop) {
                    return i;
                }
                i++;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return items.length;
    };
    AvlSolutionOverviewComponent.prototype.setupFocusOrdering = function () {
        var _this = this;
        var buttonElements = this.buttonRefs.map(function (elRef) { return elRef.nativeElement; });
        var focusableElements = [];
        if (this.showSearchBar) {
            focusableElements.push(this.searchbarRef.nativeElement);
        }
        focusableElements = __spread(focusableElements, buttonElements, this.iconButtonElements);
        focusableElements.forEach(function (el) {
            el.addEventListener('focus', function (event) {
                var t = event.target;
                if (t.tagName.toLowerCase() === 'avl-icon-button') {
                    if (_this.showSearchBar && (['body', 'html'].includes(document.activeElement.tagName.toLowerCase()) ||
                        _this.lastFocusedEl == null ||
                        (_this.lastFocusedEl.tagName.toLowerCase() !== 'avl-icon-button' &&
                            _this.lastFocusedEl !== buttonElements[buttonElements.length - 1]))) {
                        _this.searchbarRef.nativeElement.focus();
                        event.preventDefault();
                    }
                }
                _this.lastFocusedEl = event.target;
            });
        });
    };
    AvlSolutionOverviewComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], AvlSolutionOverviewComponent.prototype, "groups", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AvlSolutionOverviewComponent.prototype, "solutionName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AvlSolutionOverviewComponent.prototype, "solutionIconUrl", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AvlSolutionOverviewComponent.prototype, "solutionSubtitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], AvlSolutionOverviewComponent.prototype, "showSearchBar", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AvlSolutionOverviewComponent.prototype, "searchQueryChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AvlSolutionOverviewComponent.prototype, "search", void 0);
    __decorate([
        ViewChildren('itemElement'),
        __metadata("design:type", QueryList)
    ], AvlSolutionOverviewComponent.prototype, "buttonRefs", void 0);
    __decorate([
        ViewChildren('group'),
        __metadata("design:type", QueryList)
    ], AvlSolutionOverviewComponent.prototype, "groupElementRefs", void 0);
    __decorate([
        ViewChild('searchbar'),
        __metadata("design:type", ElementRef)
    ], AvlSolutionOverviewComponent.prototype, "searchbarRef", void 0);
    __decorate([
        ViewChild('iconButtons'),
        __metadata("design:type", ElementRef)
    ], AvlSolutionOverviewComponent.prototype, "iconButtonsContainer", void 0);
    __decorate([
        ViewChild('searchbarContainer'),
        __metadata("design:type", ElementRef)
    ], AvlSolutionOverviewComponent.prototype, "searchbarContainer", void 0);
    __decorate([
        ViewChild('groupsContainer'),
        __metadata("design:type", ElementRef)
    ], AvlSolutionOverviewComponent.prototype, "groupsContainer", void 0);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], AvlSolutionOverviewComponent.prototype, "onResize", null);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], AvlSolutionOverviewComponent.prototype, "onKeydownHandler", null);
    AvlSolutionOverviewComponent = __decorate([
        Component({
            selector: 'avl-solution-overview',
            template: "<div class=\"container\">\r\n  <div class=\"top-bar\">\r\n    <div class=\"row\">\r\n      <img class=\"solution-logo\" src=\"{{solutionIconUrl}}\" />\r\n      <h1 class=\"solution-name\">{{solutionName}}</h1>\r\n      <div class=\"action-buttons\" #iconButtons>\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"solutionSubtitle\">\r\n      <h2 class=\"solution-subtitle\">{{solutionSubtitle}}</h2>\r\n    </div>\r\n  </div>\r\n  <div class=\"outer-container\" [ngClass]=\"{'top-margin': contentHasScroll === false}\">\r\n    <div class=\"searchbar-container\" [ngClass]=\"gridWidthClass$ | async\" #searchbarContainer>\r\n      <avl-search-bar class=\"search-bar\" *ngIf=\"showSearchBar\"\r\n        #searchbar\r\n        always-open\r\n        (query-changed)=\"onQueryChange($event)\"\r\n        (search)=\"onSearch($event)\">\r\n      </avl-search-bar>\r\n    </div>\r\n    <div class=\"groups\" #groupsContainer>\r\n      <ng-container *ngFor=\"let group of groups\">\r\n        <div class=\"group-container\">\r\n          <div class=\"item-container\" #group [ngClass]=\"getMaxColumnsClass()\">\r\n            <ng-container *ngTemplateOutlet=\"groupTpl; context: { group: group }\"></ng-container>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #groupTpl let-group=\"group\">\r\n  <h2 class=\"group-name\" *ngIf=\"group.title\">{{group.title}}</h2>\r\n  <div class=\"text-container\" *ngIf=\"group.header\">{{group.header}}</div>\r\n  <ng-container *ngFor=\"let item of group.items\">\r\n    <ng-container *ngIf=\"item.route\">\r\n      <a class=\"item\"\r\n         #itemElement\r\n         [routerLink]=\"item.route\"\r\n         [ngClass]=\"{'with-description': group.description}\"\r\n         tabindex=\"0\">\r\n        <ng-container *ngTemplateOutlet=\"buttonContent; context: { item: item }\">\r\n        </ng-container>\r\n      </a>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"item.link\">\r\n      <a class=\"item\"\r\n         #itemElement\r\n         [attr.href]=\"item.link\"\r\n         [attr.target]=\"item.target\"\r\n         [attr.rel]=\"item.target == '_blank' ? 'noopener' : null\"\r\n         [ngClass]=\"{'with-description': group.description}\"\r\n         tabindex=\"0\">\r\n        <ng-container *ngTemplateOutlet=\"buttonContent; context: { item: item }\">\r\n        </ng-container>\r\n      </a>\r\n    </ng-container>\r\n  </ng-container>\r\n  <div class=\"text-container\" *ngIf=\"group.footer\">{{group.footer}}</div>\r\n</ng-template>\r\n\r\n<ng-template #buttonContent let-item=\"item\">\r\n  <div class=\"icon-container\" [ngClass]=\"{'no-icon-circle': item.noIconCircle}\">\r\n    <avl-icon\r\n      *ngIf=\"item.icon\"\r\n      class=\"item-icon\"\r\n      [icon]=\"item.icon\">\r\n    </avl-icon>\r\n    <img *ngIf=\"item.iconUrl\" class=\"item-icon\" src=\"{{item.iconUrl}}\" />\r\n  </div>\r\n  <div class=\"icon-label\"><span class=\"label\">{{item.label}}</span></div>\r\n  <div class=\"description\">\r\n    <span class=\"text\">\r\n      {{item.description}}\r\n    </span>\r\n  </div>\r\n</ng-template>\r\n",
            styles: [":host{--avl-solution-overview-background-color:var(--avl-background-1-color);--avl-solution-overview-background-image:auto;--avl-solution-overview-text-color:var(--avl-foreground-color);--avl-solution-overview-title-color:var(--avl-foreground-color);--avl-solution-overview-subtitle-color:var(--avl-foreground-medium-color);--avl-solution-overview-item-background-color:var(\r\n    --avl-container-background-color\r\n  );--avl-solution-overview-item-hover-color:var(\r\n    --avl-container-background-product-hover-color,\r\n  );--avl-solution-overview-item-focus-color:var(\r\n    --avl-container-background-product-focus-color\r\n  );--avl-solution-overview-item-pressed-color:var(\r\n    --avl-container-background-product-pressed-color\r\n  );--avl-solution-overview-item-icon-circle-color:var(--avl-product-color);--avl-solution-overview-item-icon-color:var(--avl-on-primary-color);--avl-solution-overview-item-icon-color-no-circle:var(--avl-hint-color);--avl-solution-overview-item-description-color:var(\r\n    --avl-foreground-medium-color\r\n  );--avl-solution-overview-item-icon-pressed-color:var(\r\n    --avl-solution-overview-item-icon-color\r\n  );display:block;width:100%;--item-width:184px;--item-margin:24px;--total-width:calc(var(--item-width) + var(--item-margin));--total-height:100vh;height:var(--total-height);font-family:var(--avl-font-family)}.container{background-image:var(--avl-solution-overview-background-image);background-size:cover;background-color:var(--avl-solution-overview-background-color);height:100%;display:flex;flex-direction:column}.groups{margin-bottom:24px;width:99%;overflow-y:auto}.group-container{display:flex;width:100%;justify-content:center;position:relative}.outer-container{display:flex;align-items:center;flex-direction:column;justify-content:center;overflow:hidden;height:100%}.outer-container.top-margin{margin-top:-50px}.searchbar-container{display:flex;justify-content:space-between}.search-bar{padding-right:20px}.external-link-container,.item-container{display:grid;width:100%;margin:0 12px 2px;padding-top:24px;grid-template-columns:repeat(auto-fill,var(--item-width)) [end];grid-gap:var(--item-margin);justify-content:center}.text-container{color:var(--avl-solution-overview-text-color);grid-column:1/end}.max-columns-1{max-width:calc(var(--total-width) * 1)}.max-columns-2{max-width:calc(var(--total-width) * 2)}.max-columns-3{max-width:calc(var(--total-width) * 3)}.max-columns-4{max-width:calc(var(--total-width) * 4)}.max-columns-5{max-width:calc(var(--total-width) * 5)}.grid-width-1{width:calc(var(--total-width) * 1)}.grid-width-2{width:calc(var(--total-width) * 2)}.grid-width-3{width:calc(var(--total-width) * 3)}.grid-width-4{width:calc(var(--total-width) * 4)}.grid-width-5{width:calc(var(--total-width) * 5)}.item{position:relative;display:flex;flex-direction:column;align-items:center;padding:12px;width:var(--item-width);height:112px;box-sizing:border-box;background-color:var(--avl-solution-overview-item-background-color);outline:0;box-shadow:var(--avl-box-shadow-1dp);transition:box-shadow .15s cubic-bezier(.4,0,.2,1)}.item.with-description{height:204px}.description{display:none}.item.with-description .description{overflow:hidden;display:block;font-weight:400;text-align:center;font-size:14px;line-height:16px;color:var(--avl-foreground-medium-color)}.item:active,.item:focus,.item:hover{box-shadow:var(--avl-box-shadow-8dp)}.item:focus{background-color:var(--avl-solution-overview-item-focus-color)}.item:hover{background-color:var(--avl-solution-overview-item-hover-color)}.item:active{background-color:var(--avl-solution-overview-item-pressed-color)}.icon-container{background:var(--avl-solution-overview-item-icon-circle-color);display:flex;align-items:center;justify-content:center;width:48px;height:48px;min-height:48px;border-radius:50%}.icon-container.no-icon-circle{background:0 0}.no-icon-circle .item-icon{--avl-icon-custom-color:var(--avl-solution-overview-item-icon-color-no-circle)}.item-icon{width:24px;height:24px;--avl-icon-custom-color:var(--avl-solution-overview-item-icon-color)}.item:active .item-icon{--avl-icon-custom-color:var(--avl-solution-overview-item-icon-pressed-color)}.icon-label{display:flex;justify-content:center;flex-flow:column;width:100%;font-size:14px;line-height:16px;margin:8px 0;font-weight:500;text-align:center;height:32px;color:var(--avl-solution-overview-text-color)}.group-name{margin:0 0 -8px;font-weight:400;font-size:24px;color:var(--avl-solution-overview-text-color);grid-column:1/end}.solution-name{font-weight:400;font-size:24px;margin:0 0 0 32px;height:32px;line-height:32px;flex:auto;color:var(--avl-solution-overview-title-color)}.solution-subtitle{font-weight:400;font-size:20px;margin:0 0 0 64px;color:var(--avl-solution-overview-subtitle-color)}.top-bar{display:flex;flex-direction:column;padding:32px 32px 0}.top-bar .row{display:flex;flex-direction:row;justify-content:space-between;align-items:flex-start;height:32px}.top-bar .row:last-child{margin-top:12px;height:24px}.action-buttons{margin-top:-8px;justify-self:flex-end;height:32px}.solution-logo{top:32px;left:32px;width:32px;height:32px}avl-search-bar{padding-top:20px}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], AvlSolutionOverviewComponent);
    return AvlSolutionOverviewComponent;
}());
export { AvlSolutionOverviewComponent };
//# sourceMappingURL=data:application/json;base64,