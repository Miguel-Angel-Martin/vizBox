var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, OnInit, ElementRef } from '@angular/core';
var AvlAppBarItemComponent = /** @class */ (function () {
    function AvlAppBarItemComponent(elementRef) {
        this.elementRef = elementRef;
    }
    /**
     * @hidden
     */
    AvlAppBarItemComponent.prototype.ngOnInit = function () {
        this.elementRef.nativeElement.classList.add('mdc-toolbar__icon');
    };
    AvlAppBarItemComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AvlAppBarItemComponent = __decorate([
        Component({
            selector: 'avl-app-bar-item',
            template: '<ng-content></ng-content>'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], AvlAppBarItemComponent);
    return AvlAppBarItemComponent;
}());
export { AvlAppBarItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWFwcC1iYXItaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLW5nLWNvbnRyb2xzL25hdmlnYXRpb24vIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hdmwtYXBwLWJhci9hdmwtYXBwLWJhci1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPOUQ7SUFFRSxnQ0FBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFJLENBQUM7SUFFL0M7O09BRUc7SUFDSCx5Q0FBUSxHQUFSO1FBQ0csSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUE2QixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNwRixDQUFDOztnQkFQK0IsVUFBVTs7SUFGL0Isc0JBQXNCO1FBTGxDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsUUFBUSxFQUFFLDJCQUEyQjtTQUV0QyxDQUFDO3lDQUdnQyxVQUFVO09BRi9CLHNCQUFzQixDQVdsQztJQUFELDZCQUFDO0NBQUEsQUFYRCxJQVdDO1NBWFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWFwcC1iYXItaXRlbScsXHJcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcclxuICBzdHlsZVVybHM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxBcHBCYXJJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QuYWRkKCdtZGMtdG9vbGJhcl9faWNvbicpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19