import { Component, Output, EventEmitter, Input, HostBinding } from '@angular/core';
import { trigger, style, animate, transition } from '@angular/animations';
import { ActivationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common";
const rowHeightPx = 48;
export class AvlSideNavComponent {
    constructor(router, activeRoute) {
        this.router = router;
        this.activeRoute = activeRoute;
        this.openValue = false;
        /**
         * Specific for shell usage. When side-nav is used in application inside a shell (iframe)
         * this parameter containing shell url enables opening correct url in new tab/window
         */
        this.shellUrl = '';
        /**
         * Emitted when the open property changes.
         */
        this.openChange = new EventEmitter();
        activeRoute.queryParams.subscribe(p => {
            this.params = p;
        });
        this.subscription = this.router.events
            .pipe(filter(event => event instanceof ActivationEnd))
            .subscribe((event) => {
            this.selectItems();
        });
    }
    /**
     * Can be set to open or close the side nav.
     * Returns the current state of the side nav.
     */
    get open() {
        return this.openValue;
    }
    set open(val) {
        this.openValue = val;
        this.openChange.next(val);
    }
    /**
     * @hidden
     */
    toggleOpen() {
        if (!this.manuallyOpened) {
            this.open = !this.open;
        }
    }
    /**
     * @hidden
     */
    arrowToggleOpen() {
        this.manuallyOpened = !this.open;
        this.open = !this.open;
    }
    /**
     * @hidden
     */
    mobileClose() {
        if (Math.max(document.documentElement.clientWidth, window.innerWidth) < 960) {
            this.open = false;
        }
    }
    navigateLocal(event, route, params, fragment) {
        if (!event.ctrlKey) {
            event.preventDefault();
            let navigationExtras = {
                queryParams: this.getParams(params),
                fragment: fragment
            };
            this.router.navigate([route], navigationExtras);
        }
    }
    /**
     * @hidden
     */
    groupClicked(item) {
        if (!this.open) {
            this.open = true;
            if (!item.expanded) {
                item.expanded = true;
            }
        }
        else {
            item.expanded = !item.expanded;
        }
    }
    /**
     * @hidden
     */
    getScrubberStyle() {
        return {
            height: this.selectedParagraph ? '14px' : '0px',
            top: `${this.selectedParagraphIndex * rowHeightPx}px`
        };
    }
    /**
     * @hidden
     */
    trimSlash(str) {
        if (str[0] === '/') {
            str = str.substring(1, str.length);
        }
        if (str[str.length - 1] === '/') {
            str = str.substring(0, str.length - 1);
        }
        return str;
    }
    selectItems() {
        if (!this.menuItems) {
            return;
        }
        const fragment = this.router.parseUrl(this.router.url).fragment;
        const url = this.router.url.split('#')[0];
        const queue = this.menuItems.slice();
        queue.sort((pageOne, pageTwo) => (pageOne.route < pageTwo.route ? -1 : 1));
        let currentGroup;
        this.selectedGroup = undefined;
        this.selectedPage = undefined;
        this.selectedParagraph = undefined;
        let fallbackSelectedPage;
        while (queue.length) {
            const item = queue.pop();
            if (isGroup(item)) {
                currentGroup = item;
                item.subItems.forEach(subitem => {
                    queue.push(subitem);
                });
            }
            else {
                if (fallbackSelectedPage == null &&
                    this.trimSlash(url).startsWith(this.trimSlash(item.route))) {
                    fallbackSelectedPage = item;
                }
                if (item.route &&
                    this.trimSlash(url).endsWith(this.trimSlash(item.route + this.getUrlParams(item.params)))) {
                    if (this.selectedPage &&
                        this.selectedPage.route &&
                        this.selectedPage.route.length > item.route.length) {
                        continue;
                    }
                    if (item.params && item.params.length > 0) {
                        const object = new Object();
                        item.params.forEach(i => {
                            object[i.name] = i.value;
                        });
                        if (JSON.stringify(this.params) === JSON.stringify(object)) {
                            this.selectedPage = item;
                        }
                    }
                    else {
                        this.selectedPage = item;
                    }
                    if (isTopLevelPage(item)) {
                        this.selectedGroup = undefined;
                    }
                    else {
                        this.selectedGroup = currentGroup;
                    }
                    if (item.paragraphs && item.paragraphs.length > 0) {
                        const paragraphIndex = item.paragraphs.findIndex(p => p.id === fragment);
                        if (fragment && item.paragraphs && paragraphIndex !== -1) {
                            this.selectedParagraph = fragment;
                            this.selectedParagraphIndex = paragraphIndex;
                        }
                    }
                }
            }
        }
        if (this.selectedPage == null) {
            this.selectedPage = fallbackSelectedPage;
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes['menuItems']) {
            this.selectItems();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * @hidden
     */
    getParams(params) {
        if (params && params.length > 0) {
            const object = {};
            params.forEach(param => {
                object[param.name] = param.value;
            });
            return object;
        }
        else {
            return {};
        }
    }
    /**
     * @hidden
     */
    getUrlParams(params) {
        if (params && params.length > 0) {
            let url = '?';
            params.forEach(param => {
                url += param.name + '=' + param.value + '&';
            });
            return url.slice(0, -1);
        }
        else {
            return '';
        }
    }
}
AvlSideNavComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlSideNavComponent, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
AvlSideNavComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlSideNavComponent, selector: "avl-side-nav", inputs: { open: "open", menuItems: "menuItems", responsive: "responsive", mobile: "mobile", shellUrl: "shellUrl" }, outputs: { openChange: "openChange" }, host: { properties: { "class.open": "this.open", "class.responsive": "this.responsive", "class.mobile": "this.mobile" } }, usesOnChanges: true, ngImport: i0, template: "<div #outerContainer [class.closed]=\"!open\" class=\"outer-container toolbar-spacing\">\r\n  <div class=\"item-scroll\">\r\n    <div #innerContainer class=\"inner-container\">\r\n      <ng-template ngFor let-item [ngForOf]=\"menuItems\">\r\n        <!-- Top level page -->\r\n        <a\r\n          *ngIf=\"!item.subItems && !shellUrl\"\r\n          tabindex=\"0\"\r\n          class=\"item top-level-page\"\r\n          routerLink=\"{{ item.route }}\"\r\n          [queryParams]=\"getParams(item.params)\"\r\n          [class.selected]=\"item === selectedPage\"\r\n          (click)=\"mobileClose()\"\r\n        >\r\n          <div class=\"image-div\">\r\n            <avl-icon *ngIf=\"item.icon\" attr.icon=\"{{ item.icon }}\"></avl-icon>\r\n            <img alt=\"[[item.name]]\" *ngIf=\"item.iconUrl\" [src]=\"item.iconUrl\" />\r\n          </div>\r\n          <div class=\"label-div\">{{ item.label }}</div>\r\n          <div class=\"item-overlay\"></div>\r\n        </a>\r\n        <a\r\n          *ngIf=\"!item.subItems && shellUrl\"\r\n          tabindex=\"0\"\r\n          class=\"item top-level-page\"\r\n          href=\"{{ shellUrl + '/' + trimSlash(item.route + getUrlParams(item.params)) }}\"\r\n          [class.selected]=\"item === selectedPage\"\r\n          (click)=\"mobileClose(); navigateLocal($event, item.route, item.params)\"\r\n        >\r\n          <div class=\"image-div\">\r\n            <avl-icon *ngIf=\"item.icon\" attr.icon=\"{{ item.icon }}\"></avl-icon>\r\n            <img alt=\"[[item.name]]\" *ngIf=\"item.iconUrl\" [src]=\"item.iconUrl\" />\r\n          </div>\r\n          <div class=\"label-div\">{{ item.label }}</div>\r\n          <div class=\"item-overlay\"></div>\r\n        </a>\r\n        <!-- Paragraphs of a top level page -->\r\n        <div\r\n          class=\"child-container\"\r\n          *ngIf=\"open && item.paragraphs && item.paragraphs.length > 0 && item === selectedPage\"\r\n          [@expandCollapse]\r\n        >\r\n          <!-- div for preventing reversing of the items by flex-direction: column-reverse -->\r\n          <div *ngIf=\"!shellUrl\">\r\n            <a\r\n              *ngFor=\"let paragraph of item.paragraphs\"\r\n              class=\"item top-level-paragraph\"\r\n              routerLink=\"{{ item.route }}\"\r\n              [queryParams]=\"getParams(item.params)\"\r\n              fragment=\"{{ paragraph.id }}\"\r\n              [class.selected]=\"paragraph.id === selectedParagraph\"\r\n              (click)=\"mobileClose()\"\r\n            >\r\n              <div class=\"label-div\">{{ paragraph.label }}</div>\r\n            </a>\r\n          </div>\r\n          <div *ngIf=\"shellUrl\">\r\n            <a\r\n              *ngFor=\"let paragraph of item.paragraphs\"\r\n              class=\"item top-level-paragraph\"\r\n              href=\"{{\r\n                shellUrl +\r\n                  '/' +\r\n                  trimSlash(item.route + getUrlParams(item.params)) +\r\n                  '#' +\r\n                  paragraph.id\r\n              }}\"\r\n              [class.selected]=\"paragraph.id === selectedParagraph\"\r\n              (click)=\"mobileClose(); navigateLocal($event, item.route, item.params, paragraph.id)\"\r\n            >\r\n              <div class=\"label-div\">{{ paragraph.label }}</div>\r\n            </a>\r\n          </div>\r\n          <div class=\"page-progress-bar\">\r\n            <div class=\"page-progress-bar-background\"></div>\r\n            <div class=\"page-progress-bar-scrubber\" [ngStyle]=\"getScrubberStyle()\"></div>\r\n          </div>\r\n        </div>\r\n        <!-- Group -->\r\n        <div\r\n          *ngIf=\"item.subItems\"\r\n          tabindex=\"0\"\r\n          class=\"item group\"\r\n          [class.expanded]=\"item.expanded\"\r\n          (click)=\"groupClicked(item)\"\r\n          [class.selected]=\"item === selectedGroup\"\r\n        >\r\n          <div class=\"image-div\">\r\n            <avl-icon *ngIf=\"item.icon\" attr.icon=\"{{ item.icon }}\"></avl-icon>\r\n            <img alt=\"[[item.name]]\" *ngIf=\"item.iconUrl\" [src]=\"item.iconUrl\" />\r\n          </div>\r\n          <div class=\"label-div group\">{{ item.label }}</div>\r\n          <avl-icon class=\"group-arrow\" icon=\"arrow-drop-down\"></avl-icon>\r\n          <div class=\"item-overlay\"></div>\r\n        </div>\r\n        <!-- Subpages -->\r\n        <div\r\n          class=\"child-container\"\r\n          *ngIf=\"open && item.subItems && item.subItems.length > 0 && item.expanded\"\r\n          [@expandCollapse]\r\n          (click)=\"toggleOpen()\"\r\n        >\r\n          <!-- div for preventing reversing of the items by flex-direction: column-reverse -->\r\n          <div>\r\n            <ng-template ngFor let-subItem [ngForOf]=\"item.subItems\">\r\n              <a\r\n                *ngIf=\"!shellUrl\"\r\n                class=\"item subpage\"\r\n                routerLink=\"{{ subItem.route }}\"\r\n                [queryParams]=\"getParams(subItem.params)\"\r\n                [class.selected]=\"subItem === selectedPage\"\r\n                (click)=\"mobileClose()\"\r\n              >\r\n                <div class=\"label-div\">{{ subItem.label }}</div>\r\n                <div class=\"item-overlay\"></div>\r\n              </a>\r\n              <a\r\n                *ngIf=\"shellUrl\"\r\n                class=\"item subpage\"\r\n                href=\"{{\r\n                  shellUrl + '/' + trimSlash(subItem.route + getUrlParams(subItem.params))\r\n                }}\"\r\n                [class.selected]=\"subItem === selectedPage\"\r\n                (click)=\"mobileClose(); navigateLocal($event, item.route, item.params)\"\r\n              >\r\n                <div class=\"label-div\">{{ subItem.label }}</div>\r\n                <div class=\"item-overlay\"></div>\r\n              </a>\r\n              <!-- Paragraphs of a subpage -->\r\n              <div\r\n                class=\"child-container\"\r\n                *ngIf=\"\r\n                  subItem.paragraphs && subItem.paragraphs.length > 0 && subItem === selectedPage\r\n                \"\r\n                [@expandCollapse]\r\n              >\r\n                <!-- div for preventing reversing of the items by flex-direction: column-reverse -->\r\n                <div *ngIf=\"!shellUrl\">\r\n                  <a\r\n                    *ngFor=\"let paragraph of subItem.paragraphs\"\r\n                    class=\"item subpage-paragraph\"\r\n                    routerLink=\"{{ subItem.route }}\"\r\n                    [queryParams]=\"getParams(subItem.params)\"\r\n                    fragment=\"{{ paragraph.id }}\"\r\n                    [class.selected]=\"paragraph.id === selectedParagraph\"\r\n                    (click)=\"mobileClose()\"\r\n                  >\r\n                    <div class=\"label-div\">{{ paragraph.label }}</div>\r\n                  </a>\r\n                </div>\r\n                <div *ngIf=\"shellUrl\">\r\n                  <a\r\n                    *ngFor=\"let paragraph of subItem.paragraphs\"\r\n                    class=\"item subpage-paragraph\"\r\n                    href=\"{{\r\n                      shellUrl +\r\n                        '/' +\r\n                        trimSlash(subItem.route + getUrlParams(item.params)) +\r\n                        '#' +\r\n                        paragraph.id\r\n                    }}\"\r\n                    [class.selected]=\"paragraph.id === selectedParagraph\"\r\n                    (click)=\"\r\n                      mobileClose(); navigateLocal($event, subItem.route, item.params, paragraph.id)\r\n                    \"\r\n                  >\r\n                    <div class=\"label-div\">{{ paragraph.label }}</div>\r\n                  </a>\r\n                </div>\r\n                <div class=\"page-progress-bar\">\r\n                  <div class=\"page-progress-bar-background\"></div>\r\n                  <div class=\"page-progress-bar-scrubber\" [ngStyle]=\"getScrubberStyle()\"></div>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n  <div class=\"arrow-spacer\"></div>\r\n\r\n  <svg\r\n    (click)=\"arrowToggleOpen()\"\r\n    [class.closed]=\"!open\"\r\n    class=\"open-close-arrow\"\r\n    id=\"Layer_1\"\r\n    data-name=\"Layer 1\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n  >\r\n    <g transform=\"translate(405 102) rotate(-180)\">\r\n      <path\r\n        d=\"M-972.955,492l6.774-6,1.581,1.4-5.194,4.6,5.194,4.6-1.581,1.4Zm-5.645,0,6.773-6,1.581,1.4-5.193,4.6,5.193,4.6-1.581,1.4Z\"\r\n        transform=\"translate(1364.6 -402)\"\r\n      />\r\n    </g>\r\n  </svg>\r\n</div>\r\n<div class=\"scrim\" (click)=\"open = false\"></div>\r\n", styles: [":host{font-family:var(--avl-font-family);height:100%;display:block;--text-color:var(--avl-side-nav-text-color,var(--avl-foreground-color));--icons-color:var(--avl-side-nav-icons-color,var(--avl-foreground-medium-color));--background-color:var(--avl-side-nav-background-color,var(--avl-sidenav-color));--item-icon-width:72px;--side-nav-mini-width:var(--item-icon-width);--side-nav-open-width:var(--avl-side-nav-open-width,256px);--item-height:48px;box-shadow:var(--avl-box-shadow-12dp);z-index:3}.outer-container{position:relative;box-sizing:content-box;height:calc(100% - 56px);height:calc(100% - var(--avl-app-bar-height, 56px));background-color:var(--background-color);overflow:hidden}.inner-container,.outer-container{width:var(--side-nav-open-width)}.toolbar-spacing{padding-top:56px;padding-top:var(--avl-app-bar-height,56px)}.open-close-arrow{position:absolute;bottom:12px;right:24px;font-size:24px;fill:var(--icons-color);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:24px}.open-close-arrow:not(.closed){transform:scaleX(-1)}.outer-container.closed{width:var(--side-nav-mini-width)}.arrow-spacer{height:48px}.item-scroll{height:calc(100% - 48px);overflow-y:auto;overflow-x:hidden}.item{display:flex;align-items:center;cursor:pointer;height:var(--item-height);position:relative;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;isolation:isolate}.item,.item:active{color:var(--text-color)}.top-level-paragraph{padding-left:88px}.subpage{padding-left:72px}.subpage-paragraph{padding-left:88px}.label-div{z-index:10;font-family:Roboto,sans-serif;max-width:160px;overflow:hidden;text-overflow:ellipsis;max-height:40px;word-break:break-word;-webkit-box-orient:vertical;display:-webkit-box;-webkit-line-clamp:2}.group.expanded>.label-div.group{font-family:Roboto-Medium,sans-serif}.label-div.group{max-width:calc(100% - 112px)}.image-div{color:var(--avl-foreground-medium-color);display:flex;align-items:center;justify-content:center;width:var(--item-icon-width);height:var(--item-height);margin-right:0;z-index:9}img{height:auto;width:auto;max-height:24px;max-width:24px}avl-icon{margin-bottom:0;font-size:24px}.group-arrow{position:absolute;right:24px}.group.expanded>.group-arrow{transform:rotate(180deg)}.item-overlay{box-sizing:border-box;position:absolute;height:100%;width:100%;left:0;z-index:0}.item.selected>.item-overlay{background-color:var(--avl-product-focus-color);background-color:var(--avl-side-nav-product-color,var(--avl-product-focus-color))}.item:hover:not(.selected)>.item-overlay{background-color:var(--avl-product-hover-color);background-color:var(--avl-side-nav-product-color-hover,var(--avl-product-hover-color))}.item{outline:none;white-space:pre-wrap;padding-right:24px}.item.selected{font-weight:500}.child-container{position:relative}.page-progress-bar{position:absolute;left:72px;top:11px;bottom:11px;width:2px;overflow:hidden}.page-progress-bar-background{background-color:var(--text-color);opacity:.2;width:100%;height:100%}.page-progress-bar-scrubber{position:absolute;width:100%;background-color:var(--text-color);opacity:1;transition:height .2s ease,top .2s ease;margin-top:6px;margin-bottom:2px}.child-container{display:flex;overflow:hidden;flex-direction:column-reverse}@-webkit-keyframes closing{0%{width:var(--side-nav-open-width)}to{width:var(--side-nav-mini-width)}}@keyframes closing{0%{width:var(--side-nav-open-width)}to{width:var(--side-nav-mini-width)}}.outer-container.closed{-webkit-animation-name:closing;animation-name:closing;-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1);transition-duration:195ms}@-webkit-keyframes opening{0%{width:var(--side-nav-mini-width)}to{width:var(--side-nav-open-width)}}@keyframes opening{0%{width:var(--side-nav-mini-width)}to{width:var(--side-nav-open-width)}}.outer-container:not(.closed){-webkit-animation-name:opening;animation-name:opening;-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1);transition-duration:225ms}avl-icon{color:var(--avl-foreground-medium-color)}@media (max-width:960px){:host(.responsive){position:absolute;--side-nav-mini-width:0;transition:box-shadow .25s}:host(.responsive[slot=left-side]){left:0}:host(.responsive[slot=right-side]){right:0}:host(.responsive:not(.open)){box-shadow:none}:host(.responsive) .item-scroll{height:100%}:host(.responsive) .open-close-arrow{display:none}:host(.responsive) .arrow-spacer{display:none;visibility:hidden}:host(.responsive) .scrim{transition:all .25s;transition-duration:250px}:host(.responsive[slot=left-side]:not(.open)) .scrim{visibility:hidden;left:0}:host(.responsive.open) .scrim{background-color:var(--avl-scrim-color);position:fixed;visibility:visible;top:0;width:100%;height:100%}:host(.responsive[slot=left-side].open) .scrim{left:var(--side-nav-open-width)}:host(.responsive[slot=right-side].open) .scrim{right:var(--side-nav-open-width)}:host(.responsive[slot=right-side]:not(.open)) .scrim{visibility:hidden;right:0}}:host(.mobile){position:absolute;--side-nav-mini-width:0;transition:box-shadow .25s}:host(.mobile[slot=left-side]){left:0}:host(.mobile[slot=right-side]){right:0}:host(.mobile:not(.open)){box-shadow:none}:host(.mobile) .item-scroll{height:100%}:host(.mobile) .open-close-arrow{display:none}:host(.mobile) .arrow-spacer{display:none;visibility:hidden}:host(.mobile) .scrim{transition:all .25s;transition-duration:250px}:host(.mobile[slot=left-side]:not(.open)) .scrim{visibility:hidden;left:0}:host(.mobile.open) .scrim{background-color:var(--avl-scrim-color);position:fixed;visibility:visible;top:0;width:100%;height:100%}:host(.mobile[slot=left-side].open) .scrim{left:var(--side-nav-open-width)}:host(.mobile[slot=right-side].open) .scrim{right:var(--side-nav-open-width)}:host(.mobile[slot=right-side]:not(.open)) .scrim{visibility:hidden;right:0}"], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], animations: [
        trigger('expandCollapse', [
            transition(':enter', [
                style({ 'max-height': '0px' }),
                animate('225ms ease-in', style({ transform: 'translateY(0%)', 'max-height': '200px' }))
            ]),
            transition(':leave', [
                style({ 'max-height': '200px' }),
                animate('180ms ease-in', style({ 'max-height': '0px' }))
            ])
        ])
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlSideNavComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-side-nav',
                    templateUrl: './avl-side-nav.component.html',
                    styleUrls: ['./avl-side-nav.component.css'],
                    animations: [
                        trigger('expandCollapse', [
                            transition(':enter', [
                                style({ 'max-height': '0px' }),
                                animate('225ms ease-in', style({ transform: 'translateY(0%)', 'max-height': '200px' }))
                            ]),
                            transition(':leave', [
                                style({ 'max-height': '200px' }),
                                animate('180ms ease-in', style({ 'max-height': '0px' }))
                            ])
                        ])
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }]; }, propDecorators: { open: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.open']
            }], menuItems: [{
                type: Input
            }], responsive: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.responsive']
            }], mobile: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.mobile']
            }], shellUrl: [{
                type: Input
            }], openChange: [{
                type: Output
            }] } });
/**
 * @hidden
 */
function isGroup(item) {
    return item.subItems !== undefined && item.subItems.length > 0;
}
/**
 * @hidden
 */
function isTopLevelPage(item) {
    return (!isGroup(item) &&
        (item.icon !== undefined || item.iconUrl !== undefined));
}
//# sourceMappingURL=data:application/json;base64,