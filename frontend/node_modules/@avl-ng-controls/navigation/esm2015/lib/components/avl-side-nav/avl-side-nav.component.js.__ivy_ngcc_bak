var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Output, EventEmitter, Input, HostBinding } from '@angular/core';
import { trigger, style, animate, transition } from '@angular/animations';
import { Router, ActivationEnd, ActivatedRoute } from '@angular/router';
import { filter } from 'rxjs/operators';
import '@avl-controls/core/dist/avl-icon/avl-icon';
const rowHeightPx = 48;
let AvlSideNavComponent = class AvlSideNavComponent {
    constructor(router, activeRoute) {
        this.router = router;
        this.activeRoute = activeRoute;
        this.openValue = false;
        /**
         * Emitted when the open property changes.
         */
        this.openChange = new EventEmitter();
        activeRoute.queryParams.subscribe(p => {
            this.params = p;
        });
        this.subscription = this.router.events
            .pipe(filter(event => event instanceof ActivationEnd))
            .subscribe((event) => {
            this.selectItems();
        });
    }
    /**
     * Can be set to open or close the side nav.
     * Returns the current state of the side nav.
     */
    get open() {
        return this.openValue;
    }
    set open(val) {
        this.openValue = val;
        this.openChange.next(val);
    }
    /**
     * @hidden
     */
    toggleOpen() {
        if (!this.manuallyOpened) {
            this.open = !this.open;
        }
    }
    /**
     * @hidden
     */
    arrowToggleOpen() {
        this.manuallyOpened = !this.open;
        this.open = !this.open;
    }
    /**
     * @hidden
     */
    mobileClose() {
        if (Math.max(document.documentElement.clientWidth, window.innerWidth) < 960) {
            this.open = false;
        }
    }
    /**
     * @hidden
     */
    groupClicked(item) {
        if (!this.open) {
            this.open = true;
            if (!item.expanded) {
                item.expanded = true;
            }
        }
        else {
            item.expanded = !item.expanded;
        }
    }
    /**
     * @hidden
     */
    getScrubberStyle() {
        return {
            height: this.selectedParagraph ? '14px' : '0px',
            top: `${this.selectedParagraphIndex * rowHeightPx}px`
        };
    }
    /**
    * @hidden
    */
    trimSlash(str) {
        if (str[0] === '/') {
            str = str.substring(1, str.length);
        }
        if (str[str.length - 1] === '/') {
            str = str.substring(0, str.length - 1);
        }
        return str;
    }
    selectItems() {
        if (!this.menuItems) {
            return;
        }
        const fragment = this.router.parseUrl(this.router.url).fragment;
        const url = this.router.url.split('#')[0];
        const queue = this.menuItems.slice();
        let currentGroup;
        this.selectedGroup = undefined;
        this.selectedPage = undefined;
        this.selectedParagraph = undefined;
        let fallbackSelectedPage;
        while (queue.length) {
            const item = queue.pop();
            if (isGroup(item)) {
                currentGroup = item;
                item.subItems.map(subitem => { queue.push(subitem); });
            }
            else {
                if (fallbackSelectedPage == null && this.trimSlash(url).startsWith(this.trimSlash(item.route))) {
                    fallbackSelectedPage = item;
                }
                if (item.route && this.trimSlash(url).endsWith(this.trimSlash(item.route + this.getUrlParams(item.params)))) {
                    if (this.selectedPage && this.selectedPage.route && this.selectedPage.route.length > item.route.length) {
                        continue;
                    }
                    if (item.params && item.params.length > 0) {
                        const object = new Object();
                        item.params.forEach(i => {
                            object[i.name] = i.value;
                        });
                        if (JSON.stringify(this.params) === JSON.stringify(object)) {
                            this.selectedPage = item;
                        }
                    }
                    else {
                        this.selectedPage = item;
                    }
                    if (isTopLevelPage(item)) {
                        this.selectedGroup = undefined;
                    }
                    else {
                        this.selectedGroup = currentGroup;
                    }
                    if (item.paragraphs && item.paragraphs.length > 0) {
                        const paragraphIndex = item.paragraphs.findIndex((p) => p.id === fragment);
                        if (fragment && item.paragraphs && paragraphIndex !== -1) {
                            this.selectedParagraph = fragment;
                            this.selectedParagraphIndex = paragraphIndex;
                        }
                    }
                }
            }
        }
        if (this.selectedPage == null) {
            this.selectedPage = fallbackSelectedPage;
        }
    }
    /**
    * @hidden
    */
    ngOnChanges(changes) {
        if (changes['menuItems']) {
            this.selectItems();
        }
    }
    /**
    * @hidden
    */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
    * @hidden
    */
    getParams(params) {
        if (params && params.length > 0) {
            const object = {};
            params.forEach(param => {
                object[param.name] = param.value;
            });
            return object;
        }
        else {
            return null;
        }
    }
    /**
    * @hidden
    */
    getUrlParams(params) {
        if (params && params.length > 0) {
            let url = '?';
            params.forEach(param => {
                url += param.name + '=' + param.value + '&';
            });
            return url.slice(0, -1);
        }
        else {
            return '';
        }
    }
};
AvlSideNavComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute }
];
__decorate([
    Input(),
    HostBinding('class.open'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AvlSideNavComponent.prototype, "open", null);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AvlSideNavComponent.prototype, "menuItems", void 0);
__decorate([
    Input(),
    HostBinding('class.responsive'),
    __metadata("design:type", Boolean)
], AvlSideNavComponent.prototype, "responsive", void 0);
__decorate([
    Input(),
    HostBinding('class.mobile'),
    __metadata("design:type", Boolean)
], AvlSideNavComponent.prototype, "mobile", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlSideNavComponent.prototype, "openChange", void 0);
AvlSideNavComponent = __decorate([
    Component({
        selector: 'avl-side-nav',
        template: "<div #outerContainer [class.closed]=\"!open\" class=\"outer-container toolbar-spacing\">\r\n  <div class=\"item-scroll\">\r\n    <div #innerContainer class=\"inner-container\">\r\n      <ng-template ngFor let-item [ngForOf]=\"menuItems\">\r\n        <!-- Top level page -->\r\n        <a *ngIf=\"!item.subItems\" tabindex=\"0\" class=\"item top-level-page\" routerLink={{item.route}} [queryParams]=\"getParams(item.params)\" [class.selected]=\"item === selectedPage\" (click)=\"mobileClose()\">\r\n          <div class=\"image-div\">\r\n            <avl-icon *ngIf=\"item.icon\" attr.icon=\"{{item.icon}}\"></avl-icon>\r\n            <img *ngIf=\"item.iconUrl\" [src]=\"item.iconUrl\">\r\n          </div>\r\n          <div class=\"label-div\">{{item.label}}</div>\r\n          <div class=\"item-overlay\"></div>\r\n        </a>\r\n        <!-- Paragraphs of a top level page -->\r\n        <div class=\"child-container\" *ngIf=\"open && item.paragraphs && item.paragraphs.length > 0 && item === selectedPage\" [@expandCollapse]>\r\n          <!-- div for preventing reversing of the items by flex-direction: column-reverse -->\r\n          <div>\r\n            <a *ngFor=\"let paragraph of item.paragraphs\" class=\"item top-level-paragraph\"\r\n              href=\"{{trimSlash(item.route + getUrlParams(item.params) + '#' + paragraph.id)}}\" [class.selected]=\"paragraph.id === selectedParagraph\" (click)=\"mobileClose()\">\r\n              <div class=\"label-div\">{{paragraph.label}}</div>\r\n            </a>\r\n          </div>\r\n          <div class=\"page-progress-bar\">\r\n            <div class=\"page-progress-bar-background\"></div>\r\n            <div class=\"page-progress-bar-scrubber\" [ngStyle]=\"getScrubberStyle()\"></div>\r\n          </div>\r\n        </div>\r\n        <!-- Group -->\r\n        <div *ngIf=\"item.subItems\" tabindex=\"0\" class=\"item group\" [class.expanded]=\"item.expanded\" (click)=\"groupClicked(item)\"\r\n          [class.selected]=\"!open && item === selectedGroup\">\r\n          <div class=\"image-div\">\r\n            <avl-icon *ngIf=\"item.icon\" attr.icon=\"{{item.icon}}\"></avl-icon>\r\n            <img *ngIf=\"item.iconUrl\" [src]=\"item.iconUrl\">\r\n          </div>\r\n          <div class=\"label-div group\">{{item.label}}</div>\r\n          <avl-icon class=\"group-arrow\" icon=\"arrow-drop-down\"></avl-icon>\r\n          <div class=\"item-overlay\"></div>\r\n        </div>\r\n        <!-- Subpages -->\r\n        <div class=\"child-container\" *ngIf=\"open && item.subItems && item.subItems.length > 0 && item.expanded\" [@expandCollapse] (click)=\"toggleOpen()\">\r\n          <!-- div for preventing reversing of the items by flex-direction: column-reverse -->\r\n          <div>\r\n            <ng-template ngFor let-subItem [ngForOf]=\"item.subItems\">\r\n              <a class=\"item subpage\" routerLink={{subItem.route}} [queryParams]=\"getParams(subItem.params)\" [class.selected]=\"subItem === selectedPage\" (click)=\"mobileClose()\">\r\n                <div class=\"label-div\">{{subItem.label}}</div>\r\n                <div class=\"item-overlay\"></div>\r\n              </a>\r\n              <!-- Paragraphs of a subpage -->\r\n              <div class=\"child-container\" *ngIf=\"subItem.paragraphs && subItem.paragraphs.length > 0 && subItem === selectedPage\" [@expandCollapse]>\r\n                <!-- div for preventing reversing of the items by flex-direction: column-reverse -->\r\n                <div>\r\n                  <a *ngFor=\"let paragraph of subItem.paragraphs\" class=\"item subpage-paragraph\" href=\"{{subItem.route}}{{getUrlParams(item.params)}}#{{paragraph.id}}\"\r\n                    [class.selected]=\"paragraph.id === selectedParagraph\" (click)=\"mobileClose()\">\r\n                    <div class=\"label-div\">{{paragraph.label}}</div>\r\n                  </a>\r\n                </div>\r\n                <div class=\"page-progress-bar\">\r\n                  <div class=\"page-progress-bar-background\"></div>\r\n                  <div class=\"page-progress-bar-scrubber\" [ngStyle]=\"getScrubberStyle()\"></div>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n  <div class=\"arrow-spacer\"></div>\r\n\r\n  <svg (click)=\"arrowToggleOpen()\" [class.closed]=\"!open\" class=\"open-close-arrow\"  id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <g transform=\"translate(405 102) rotate(-180)\">\r\n      <path d=\"M-972.955,492l6.774-6,1.581,1.4-5.194,4.6,5.194,4.6-1.581,1.4Zm-5.645,0,6.773-6,1.581,1.4-5.193,4.6,5.193,4.6-1.581,1.4Z\" transform=\"translate(1364.6 -402)\"/>\r\n    </g>\r\n  </svg>\r\n\r\n</div>\r\n<div class=\"scrim\" (click)=\"open = false;\"></div>",
        animations: [
            trigger('expandCollapse', [
                transition(':enter', [
                    style({ 'max-height': '0px' }),
                    animate('225ms ease-in', style({ transform: 'translateY(0%)', 'max-height': '200px' }))
                ]),
                transition(':leave', [
                    style({ 'max-height': '200px' }),
                    animate('180ms ease-in', style({ 'max-height': '0px' }))
                ])
            ])
        ],
        styles: [":host{font-family:var(--avl-font-family);height:100%;display:block;--text-color:var(--avl-side-nav-text-color, var(--avl-emphasis-high-color));--icons-color:var(--avl-side-nav-icons-color, var(--avl-emphasis-medium-color));--background-color:var(--avl-side-nav-background-color, var(--avl-side-nav-color));--item-icon-width:72px;--side-nav-mini-width:var(--item-icon-width);--side-nav-open-width:var(--avl-side-nav-open-width, 256px);--item-height:48px;box-shadow:var(--avl-box-shadow-12dp);z-index:3}.outer-container{position:relative;box-sizing:content-box;height:calc(100% - var(--avl-app-bar-height,56px));background-color:var(--background-color);width:var(--side-nav-open-width);overflow:hidden}.inner-container{width:var(--side-nav-open-width)}.toolbar-spacing{padding-top:var(--avl-app-bar-height,56px)}.open-close-arrow{position:absolute;bottom:12px;right:24px;font-size:24px;fill:var(--icons-color);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:24px}.open-close-arrow:not(.closed){transform:scale(-1,1)}.outer-container.closed{width:var(--side-nav-mini-width);-webkit-animation-name:closing;animation-name:closing;-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1);transition-duration:195ms}.arrow-spacer{height:48px}.item-scroll{height:calc(100% - 48px);overflow-y:auto;overflow-x:hidden}.item{display:flex;align-items:center;cursor:pointer;color:var(--text-color);height:var(--item-height);position:relative;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;isolation:isolate;outline:0;white-space:pre-wrap;padding-right:24px}.item:active{color:var(--text-color)}.top-level-paragraph{padding-left:88px}.subpage{padding-left:72px}.subpage-paragraph{padding-left:88px}.label-div{z-index:10;font-family:Roboto;max-width:160px;overflow:hidden;text-overflow:ellipsis;max-height:40px;word-break:break-word;-webkit-box-orient:vertical;display:-webkit-box;-webkit-line-clamp:2}.group.expanded>.label-div.group{font-family:Roboto-Medium}.label-div.group{max-width:calc(100% - 112px)}.image-div{color:var(--avl-emphasis-medium-color);display:flex;align-items:center;justify-content:center;width:var(--item-icon-width);height:var(--item-height);margin-right:0;z-index:9}img{height:auto;width:auto;max-height:24px;max-width:24px}avl-icon{margin-bottom:0;font-size:24px;color:var(--avl-emphasis-medium-color)}.group-arrow{position:absolute;right:24px}.group.expanded>.group-arrow{transform:rotate(180deg)}.item-overlay{box-sizing:border-box;position:absolute;height:100%;width:100%;left:0;z-index:0}.item.selected>.item-overlay{background-color:var(--avl-side-nav-product-color,var(--avl-product-focus-color))}.item:hover:not(.selected)>.item-overlay{background-color:var(--avl-side-nav-product-color-hover,var(--avl-product-hover-color))}.item.selected{font-weight:500}.child-container{position:relative;display:flex;overflow:hidden;flex-direction:column-reverse}.page-progress-bar{position:absolute;left:72px;top:11px;bottom:11px;width:2px;overflow:hidden}.page-progress-bar-background{background-color:var(--text-color);opacity:.2;width:100%;height:100%}.page-progress-bar-scrubber{position:absolute;width:100%;background-color:var(--text-color);opacity:1;transition:height .2s,top .2s;margin-top:6px;margin-bottom:2px}@-webkit-keyframes closing{from{width:var(--side-nav-open-width)}to{width:var(--side-nav-mini-width)}}@keyframes closing{from{width:var(--side-nav-open-width)}to{width:var(--side-nav-mini-width)}}@-webkit-keyframes opening{from{width:var(--side-nav-mini-width)}to{width:var(--side-nav-open-width)}}@keyframes opening{from{width:var(--side-nav-mini-width)}to{width:var(--side-nav-open-width)}}.outer-container:not(.closed){-webkit-animation-name:opening;animation-name:opening;-webkit-animation-timing-function:cubic-bezier(0,0,.2,1);animation-timing-function:cubic-bezier(0,0,.2,1);transition-duration:225ms}@media (max-width:960px){:host(.responsive){position:absolute;--side-nav-mini-width:0;transition:box-shadow 250ms}:host(.responsive[slot=left-side]){left:0}:host(.responsive[slot=right-side]){right:0}:host(.responsive:not(.open)){box-shadow:none}:host(.responsive) .item-scroll{height:100%}:host(.responsive) .open-close-arrow{display:none}:host(.responsive) .arrow-spacer{display:none;visibility:hidden}:host(.responsive) .scrim{transition:250ms;transition-duration:250px}:host(.responsive[slot=left-side]:not(.open)) .scrim{visibility:hidden;left:0}:host(.responsive.open) .scrim{background-color:var(--avl-scrim-color);position:fixed;visibility:visible;top:0;width:100%;height:100%}:host(.responsive[slot=left-side].open) .scrim{left:var(--side-nav-open-width)}:host(.responsive[slot=right-side].open) .scrim{right:var(--side-nav-open-width)}:host(.responsive[slot=right-side]:not(.open)) .scrim{visibility:hidden;right:0}}:host(.mobile){position:absolute;--side-nav-mini-width:0;transition:box-shadow 250ms}:host(.mobile[slot=left-side]){left:0}:host(.mobile[slot=right-side]){right:0}:host(.mobile:not(.open)){box-shadow:none}:host(.mobile) .item-scroll{height:100%}:host(.mobile) .open-close-arrow{display:none}:host(.mobile) .arrow-spacer{display:none;visibility:hidden}:host(.mobile) .scrim{transition:250ms;transition-duration:250px}:host(.mobile[slot=left-side]:not(.open)) .scrim{visibility:hidden;left:0}:host(.mobile.open) .scrim{background-color:var(--avl-scrim-color);position:fixed;visibility:visible;top:0;width:100%;height:100%}:host(.mobile[slot=left-side].open) .scrim{left:var(--side-nav-open-width)}:host(.mobile[slot=right-side].open) .scrim{right:var(--side-nav-open-width)}:host(.mobile[slot=right-side]:not(.open)) .scrim{visibility:hidden;right:0}"]
    }),
    __metadata("design:paramtypes", [Router,
        ActivatedRoute])
], AvlSideNavComponent);
export { AvlSideNavComponent };
/**
* @hidden
*/
function isGroup(item) {
    return item.subItems !== undefined && item.subItems.length > 0;
}
/**
* @hidden
*/
function isTopLevelPage(item) {
    return !isGroup(item) && (item.icon !== undefined || item.iconUrl !== undefined);
}
//# sourceMappingURL=data:application/json;base64,