var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, HostListener, ElementRef, ViewChildren, QueryList, Input, EventEmitter, Output, ViewChild, AfterViewInit, OnInit, OnChanges, SimpleChanges, OnDestroy, ChangeDetectorRef, } from '@angular/core';
import { BehaviorSubject, asyncScheduler } from 'rxjs';
import { throttleTime, map } from 'rxjs/operators';
import { KeyboardNavigator } from './keyboard-navigator';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-search-bar/avl-search-bar';
let AvlSolutionOverviewComponent = class AvlSolutionOverviewComponent {
    constructor(cdr) {
        this.cdr = cdr;
        /**
         * Emits search query string on change
         */
        this.searchQueryChange = new EventEmitter();
        /**
         * Emits value of the search query when search triggered
         */
        this.search = new EventEmitter();
        this.gridWidth$ = new BehaviorSubject(-1);
        this.largestItemsIndex = -1;
        this.maxItems = 0;
    }
    get groupsOfItems() {
        let v = [];
        for (const gRef of this.groupElementRefs) {
            const gEl = gRef.nativeElement;
            const items = Array.prototype.slice.call(gEl.querySelectorAll('a.item'));
            v = [...v, items];
        }
        return v;
    }
    get iconButtonElements() {
        if (this.iconButtonElementsCache == null) {
            this.iconButtonElementsCache = Array.prototype.slice.call(this.iconButtonsContainer
                .nativeElement.querySelectorAll('avl-icon-button'));
        }
        return this.iconButtonElementsCache;
    }
    ngOnInit() {
        this.setupReferenceVars();
        this.gridWidthClass$ = this.gridWidth$.asObservable().pipe(throttleTime(50, asyncScheduler, { trailing: true }), map(gridWidth => {
            return `grid-width-${gridWidth}`;
        }));
    }
    ngOnDestroy() {
        if (this.groupElementRefsChangesSubscription) {
            this.groupElementRefsChangesSubscription.unsubscribe();
        }
    }
    ngOnChanges(changes) {
        if (!changes.groups.isFirstChange()) {
            this.setupReferenceVars();
            this.gridWidth$.next(this.getGridWidth());
            this.setTopMargin();
        }
    }
    /** @hidden */
    ngAfterViewInit() {
        this.setTopMargin();
        this.setupFocusOrdering();
        this.gridWidth$.next(this.getGridWidth());
    }
    /** @hidden */
    getMaxColumnsClass() {
        if (this.maxColumns && window.outerWidth === this.screenWidth) {
            return `max-columns-${this.maxColumns}`;
        }
        if (this.maxItems === 0) {
            return;
        }
        let maxColumns;
        switch (this.maxItems) {
            case 1:
                maxColumns = 1;
                break;
            case 2:
            case 4:
                maxColumns = 2;
                break;
            case 3:
            case 5:
            case 6:
            case 9:
                maxColumns = 3;
                break;
            case 7:
            case 8:
            case 11:
            case 12:
                maxColumns = 4;
                break;
            default:
                maxColumns = 5;
        }
        this.maxColumns = maxColumns;
        return `max-columns-${maxColumns}`;
    }
    /** @hidden **/
    onResize() {
        this.gridWidth$.next(this.getGridWidth());
    }
    /** @hidden */
    onKeydownHandler(event) {
        const gOfItems = this.groupsOfItems;
        const numGroups = gOfItems.length;
        if (numGroups === 0) {
            return;
        }
        const activeEl = document.activeElement;
        const isDown = ['Down', 'ArrowDown'].includes(event.key);
        const isUp = ['Up', 'ArrowUp'].includes(event.key);
        const isRight = ['Right', 'ArrowRight'].includes(event.key);
        const isLeft = ['Left', 'ArrowLeft'].includes(event.key);
        const isTab = event.key === 'Tab';
        const searchbar = this.showSearchBar
            ? this.searchbarRef.nativeElement
            : undefined;
        let gNum;
        let iIdx;
        for (const items of gOfItems) {
            if (items.indexOf(activeEl) !== -1) {
                iIdx = items.indexOf(activeEl);
                gNum = gOfItems.indexOf(items);
                // Go to route on 'Space'. 'Enter' already works on <a>.
                if (event.key === ' ') {
                    items[iIdx].click();
                    return;
                }
            }
        }
        if (this.iconButtonElements.includes(activeEl)) {
            const numIconButtons = this.iconButtonElements.length;
            const idx = this.iconButtonElements.indexOf(activeEl);
            if ((isRight || isTab) && idx === numIconButtons - 1) {
                if (searchbar != null) {
                    searchbar.focus();
                }
                else {
                    gOfItems[0][0].focus();
                }
            }
            else if (isLeft && idx === 0) {
                const g = gOfItems[numGroups - 1];
                const gLen = g.length;
                g[gLen - 1].focus();
            }
            else if (isLeft) {
                this.iconButtonElements[idx - 1].focus();
            }
            else if (isRight) {
                this.iconButtonElements[idx + 1].focus();
            }
            event.preventDefault();
        }
        const itemElements = gOfItems[gNum];
        const gridWidth = this.gridWidth$.value;
        if (searchbar != null && iIdx < gridWidth && gNum === 0 && isUp) {
            searchbar.focus();
            event.preventDefault();
        }
        else if ((isRight || isTab) &&
            gNum === gOfItems.length - 1 &&
            iIdx === itemElements.length - 1) {
            const iconButtons = this.iconButtonElements;
            if (iconButtons != null && iconButtons.length > 0) {
                iconButtons[0].focus();
                event.preventDefault();
            }
        }
        else if (searchbar != null && searchbar === activeEl && isDown) {
            gOfItems[0][0].focus();
            event.preventDefault();
        }
        else if (gNum != null) {
            const nextGroup = gNum === gOfItems.length - 1 ? undefined : gOfItems[gNum + 1];
            const prevGroup = gNum === 0 ? undefined : gOfItems[gNum - 1];
            const nGLen = nextGroup == null ? 0 : nextGroup.length;
            const pGLen = prevGroup == null ? 0 : prevGroup.length;
            const keyboardNavigator = new KeyboardNavigator(itemElements.length, gridWidth);
            const itemIndexToMoveTo = keyboardNavigator.navigate(iIdx, event.key, nGLen, pGLen);
            if (itemIndexToMoveTo != null) {
                if ((isUp || isLeft) && itemIndexToMoveTo < 0) {
                    prevGroup[itemIndexToMoveTo + pGLen].focus();
                }
                else if ((isDown || isRight) && iIdx + 1 > itemIndexToMoveTo) {
                    nextGroup[itemIndexToMoveTo].focus();
                }
                else {
                    gOfItems[gNum][itemIndexToMoveTo].focus();
                }
                event.preventDefault();
            }
        }
    }
    /** @hidden */
    onQueryChange(event) {
        this.searchQueryChange.emit(event.detail.value);
    }
    /** @hidden */
    onSearch(event) {
        this.search.emit(event.detail.value);
    }
    setupReferenceVars() {
        let max = 0;
        for (const g of this.groups) {
            const itemSz = g.items.length;
            if (max < itemSz) {
                max = itemSz;
                this.largestItemsIndex = this.groups.indexOf(g);
            }
        }
        this.maxItems = max;
    }
    setTopMargin() {
        this.contentHasScroll = false;
        this.cdr.detectChanges();
        const content = this.groupsContainer.nativeElement;
        this.contentHasScroll = content.scrollHeight > content.clientHeight;
        this.cdr.detectChanges();
    }
    getGridWidth() {
        if (this.largestItemsIndex < 0) {
            this.setupReferenceVars();
        }
        const items = this.groupsOfItems[this.largestItemsIndex];
        const firstItemOffsetTop = items[0].offsetTop;
        let i = 0;
        for (const item of items) {
            if (item.offsetTop > firstItemOffsetTop) {
                return i;
            }
            i++;
        }
        return items.length;
    }
    setupFocusOrdering() {
        const buttonElements = this.buttonRefs.map(elRef => elRef.nativeElement);
        let focusableElements = [];
        if (this.showSearchBar) {
            focusableElements.push(this.searchbarRef.nativeElement);
        }
        focusableElements = [
            ...focusableElements,
            ...buttonElements,
            ...this.iconButtonElements
        ];
        focusableElements.forEach((el) => {
            el.addEventListener('focus', (event) => {
                const t = event.target;
                if (t.tagName.toLowerCase() === 'avl-icon-button') {
                    if (this.showSearchBar && (['body', 'html'].includes(document.activeElement.tagName.toLowerCase()) ||
                        this.lastFocusedEl == null ||
                        (this.lastFocusedEl.tagName.toLowerCase() !== 'avl-icon-button' &&
                            this.lastFocusedEl !== buttonElements[buttonElements.length - 1]))) {
                        this.searchbarRef.nativeElement.focus();
                        event.preventDefault();
                    }
                }
                this.lastFocusedEl = event.target;
            });
        });
    }
};
AvlSolutionOverviewComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], AvlSolutionOverviewComponent.prototype, "groups", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AvlSolutionOverviewComponent.prototype, "solutionName", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AvlSolutionOverviewComponent.prototype, "solutionIconUrl", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AvlSolutionOverviewComponent.prototype, "solutionSubtitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AvlSolutionOverviewComponent.prototype, "showSearchBar", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlSolutionOverviewComponent.prototype, "searchQueryChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlSolutionOverviewComponent.prototype, "search", void 0);
__decorate([
    ViewChildren('itemElement'),
    __metadata("design:type", QueryList)
], AvlSolutionOverviewComponent.prototype, "buttonRefs", void 0);
__decorate([
    ViewChildren('group'),
    __metadata("design:type", QueryList)
], AvlSolutionOverviewComponent.prototype, "groupElementRefs", void 0);
__decorate([
    ViewChild('searchbar'),
    __metadata("design:type", ElementRef)
], AvlSolutionOverviewComponent.prototype, "searchbarRef", void 0);
__decorate([
    ViewChild('iconButtons'),
    __metadata("design:type", ElementRef)
], AvlSolutionOverviewComponent.prototype, "iconButtonsContainer", void 0);
__decorate([
    ViewChild('searchbarContainer'),
    __metadata("design:type", ElementRef)
], AvlSolutionOverviewComponent.prototype, "searchbarContainer", void 0);
__decorate([
    ViewChild('groupsContainer'),
    __metadata("design:type", ElementRef)
], AvlSolutionOverviewComponent.prototype, "groupsContainer", void 0);
__decorate([
    HostListener('window:resize'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AvlSolutionOverviewComponent.prototype, "onResize", null);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], AvlSolutionOverviewComponent.prototype, "onKeydownHandler", null);
AvlSolutionOverviewComponent = __decorate([
    Component({
        selector: 'avl-solution-overview',
        template: "<div class=\"container\">\r\n  <div class=\"top-bar\">\r\n    <div class=\"row\">\r\n      <img class=\"solution-logo\" src=\"{{solutionIconUrl}}\" />\r\n      <h1 class=\"solution-name\">{{solutionName}}</h1>\r\n      <div class=\"action-buttons\" #iconButtons>\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"solutionSubtitle\">\r\n      <h2 class=\"solution-subtitle\">{{solutionSubtitle}}</h2>\r\n    </div>\r\n  </div>\r\n  <div class=\"outer-container\" [ngClass]=\"{'top-margin': contentHasScroll === false}\">\r\n    <div class=\"searchbar-container\" [ngClass]=\"gridWidthClass$ | async\" #searchbarContainer>\r\n      <avl-search-bar class=\"search-bar\" *ngIf=\"showSearchBar\"\r\n        #searchbar\r\n        always-open\r\n        (query-changed)=\"onQueryChange($event)\"\r\n        (search)=\"onSearch($event)\">\r\n      </avl-search-bar>\r\n    </div>\r\n    <div class=\"groups\" #groupsContainer>\r\n      <ng-container *ngFor=\"let group of groups\">\r\n        <div class=\"group-container\">\r\n          <div class=\"item-container\" #group [ngClass]=\"getMaxColumnsClass()\">\r\n            <ng-container *ngTemplateOutlet=\"groupTpl; context: { group: group }\"></ng-container>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #groupTpl let-group=\"group\">\r\n  <h2 class=\"group-name\" *ngIf=\"group.title\">{{group.title}}</h2>\r\n  <div class=\"text-container\" *ngIf=\"group.header\">{{group.header}}</div>\r\n  <ng-container *ngFor=\"let item of group.items\">\r\n    <ng-container *ngIf=\"item.route\">\r\n      <a class=\"item\"\r\n         #itemElement\r\n         [routerLink]=\"item.route\"\r\n         [ngClass]=\"{'with-description': group.description}\"\r\n         tabindex=\"0\">\r\n        <ng-container *ngTemplateOutlet=\"buttonContent; context: { item: item }\">\r\n        </ng-container>\r\n      </a>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"item.link\">\r\n      <a class=\"item\"\r\n         #itemElement\r\n         [attr.href]=\"item.link\"\r\n         [attr.target]=\"item.target\"\r\n         [attr.rel]=\"item.target == '_blank' ? 'noopener' : null\"\r\n         [ngClass]=\"{'with-description': group.description}\"\r\n         tabindex=\"0\">\r\n        <ng-container *ngTemplateOutlet=\"buttonContent; context: { item: item }\">\r\n        </ng-container>\r\n      </a>\r\n    </ng-container>\r\n  </ng-container>\r\n  <div class=\"text-container\" *ngIf=\"group.footer\">{{group.footer}}</div>\r\n</ng-template>\r\n\r\n<ng-template #buttonContent let-item=\"item\">\r\n  <div class=\"icon-container\" [ngClass]=\"{'no-icon-circle': item.noIconCircle}\">\r\n    <avl-icon\r\n      *ngIf=\"item.icon\"\r\n      class=\"item-icon\"\r\n      [icon]=\"item.icon\">\r\n    </avl-icon>\r\n    <img *ngIf=\"item.iconUrl\" class=\"item-icon\" src=\"{{item.iconUrl}}\" />\r\n  </div>\r\n  <div class=\"icon-label\"><span class=\"label\">{{item.label}}</span></div>\r\n  <div class=\"description\">\r\n    <span class=\"text\">\r\n      {{item.description}}\r\n    </span>\r\n  </div>\r\n</ng-template>\r\n",
        styles: [":host{--avl-solution-overview-background-color:var(--avl-background-1-color);--avl-solution-overview-background-image:auto;--avl-solution-overview-text-color:var(--avl-foreground-color);--avl-solution-overview-title-color:var(--avl-foreground-color);--avl-solution-overview-subtitle-color:var(--avl-foreground-medium-color);--avl-solution-overview-item-background-color:var(\r\n    --avl-container-background-color\r\n  );--avl-solution-overview-item-hover-color:var(\r\n    --avl-container-background-product-hover-color,\r\n  );--avl-solution-overview-item-focus-color:var(\r\n    --avl-container-background-product-focus-color\r\n  );--avl-solution-overview-item-pressed-color:var(\r\n    --avl-container-background-product-pressed-color\r\n  );--avl-solution-overview-item-icon-circle-color:var(--avl-product-color);--avl-solution-overview-item-icon-color:var(--avl-on-primary-color);--avl-solution-overview-item-icon-color-no-circle:var(--avl-hint-color);--avl-solution-overview-item-description-color:var(\r\n    --avl-foreground-medium-color\r\n  );--avl-solution-overview-item-icon-pressed-color:var(\r\n    --avl-solution-overview-item-icon-color\r\n  );display:block;width:100%;--item-width:184px;--item-margin:24px;--total-width:calc(var(--item-width) + var(--item-margin));--total-height:100vh;height:var(--total-height);font-family:var(--avl-font-family)}.container{background-image:var(--avl-solution-overview-background-image);background-size:cover;background-color:var(--avl-solution-overview-background-color);height:100%;display:flex;flex-direction:column}.groups{margin-bottom:24px;width:99%;overflow-y:auto}.group-container{display:flex;width:100%;justify-content:center;position:relative}.outer-container{display:flex;align-items:center;flex-direction:column;justify-content:center;overflow:hidden;height:100%}.outer-container.top-margin{margin-top:-50px}.searchbar-container{display:flex;justify-content:space-between}.search-bar{padding-right:20px}.external-link-container,.item-container{display:grid;width:100%;margin:0 12px 2px;padding-top:24px;grid-template-columns:repeat(auto-fill,var(--item-width)) [end];grid-gap:var(--item-margin);justify-content:center}.text-container{color:var(--avl-solution-overview-text-color);grid-column:1/end}.max-columns-1{max-width:calc(var(--total-width) * 1)}.max-columns-2{max-width:calc(var(--total-width) * 2)}.max-columns-3{max-width:calc(var(--total-width) * 3)}.max-columns-4{max-width:calc(var(--total-width) * 4)}.max-columns-5{max-width:calc(var(--total-width) * 5)}.grid-width-1{width:calc(var(--total-width) * 1)}.grid-width-2{width:calc(var(--total-width) * 2)}.grid-width-3{width:calc(var(--total-width) * 3)}.grid-width-4{width:calc(var(--total-width) * 4)}.grid-width-5{width:calc(var(--total-width) * 5)}.item{position:relative;display:flex;flex-direction:column;align-items:center;padding:12px;width:var(--item-width);height:112px;box-sizing:border-box;background-color:var(--avl-solution-overview-item-background-color);outline:0;box-shadow:var(--avl-box-shadow-1dp);transition:box-shadow .15s cubic-bezier(.4,0,.2,1)}.item.with-description{height:204px}.description{display:none}.item.with-description .description{overflow:hidden;display:block;font-weight:400;text-align:center;font-size:14px;line-height:16px;color:var(--avl-foreground-medium-color)}.item:active,.item:focus,.item:hover{box-shadow:var(--avl-box-shadow-8dp)}.item:focus{background-color:var(--avl-solution-overview-item-focus-color)}.item:hover{background-color:var(--avl-solution-overview-item-hover-color)}.item:active{background-color:var(--avl-solution-overview-item-pressed-color)}.icon-container{background:var(--avl-solution-overview-item-icon-circle-color);display:flex;align-items:center;justify-content:center;width:48px;height:48px;min-height:48px;border-radius:50%}.icon-container.no-icon-circle{background:0 0}.no-icon-circle .item-icon{--avl-icon-custom-color:var(--avl-solution-overview-item-icon-color-no-circle)}.item-icon{width:24px;height:24px;--avl-icon-custom-color:var(--avl-solution-overview-item-icon-color)}.item:active .item-icon{--avl-icon-custom-color:var(--avl-solution-overview-item-icon-pressed-color)}.icon-label{display:flex;justify-content:center;flex-flow:column;width:100%;font-size:14px;line-height:16px;margin:8px 0;font-weight:500;text-align:center;height:32px;color:var(--avl-solution-overview-text-color)}.group-name{margin:0 0 -8px;font-weight:400;font-size:24px;color:var(--avl-solution-overview-text-color);grid-column:1/end}.solution-name{font-weight:400;font-size:24px;margin:0 0 0 32px;height:32px;line-height:32px;flex:auto;color:var(--avl-solution-overview-title-color)}.solution-subtitle{font-weight:400;font-size:20px;margin:0 0 0 64px;color:var(--avl-solution-overview-subtitle-color)}.top-bar{display:flex;flex-direction:column;padding:32px 32px 0}.top-bar .row{display:flex;flex-direction:row;justify-content:space-between;align-items:flex-start;height:32px}.top-bar .row:last-child{margin-top:12px;height:24px}.action-buttons{margin-top:-8px;justify-self:flex-end;height:32px}.solution-logo{top:32px;left:32px;width:32px;height:32px}avl-search-bar{padding-top:20px}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef])
], AvlSolutionOverviewComponent);
export { AvlSolutionOverviewComponent };
//# sourceMappingURL=data:application/json;base64,