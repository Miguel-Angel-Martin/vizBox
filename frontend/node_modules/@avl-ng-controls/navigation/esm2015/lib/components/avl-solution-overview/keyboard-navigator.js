/** @hidden */
export class KeyboardNavigator {
    constructor(numberOfItems, gridWidth) {
        this.numberOfItems = numberOfItems;
        this.gridWidth = gridWidth;
    }
    /** @returns to which item to navigate to from the current item and undefined to not move. */
    navigate(currentItemIndex, keyPressed, nextGroupSize = 0, prevGroupSize = 0) {
        nextGroupSize = nextGroupSize || 0;
        prevGroupSize = prevGroupSize || 0;
        const currentItemColumn = currentItemIndex % this.gridWidth;
        const currentItemRow = Math.floor(currentItemIndex / this.gridWidth);
        const maxRows = Math.ceil(this.numberOfItems / this.gridWidth);
        let nextIndex;
        switch (keyPressed) {
            case 'ArrowUp':
            case 'Up':
                nextIndex = currentItemIndex - this.gridWidth;
                if (currentItemRow === 0) {
                    if (prevGroupSize === 0) {
                        return undefined;
                    }
                    if (nextIndex < 0) {
                        const prevLastIndex = prevGroupSize - 1;
                        // columns of last element and targeted element of previous group
                        // - 0 based index
                        const lastColumn = prevLastIndex % this.gridWidth;
                        return currentItemColumn <= lastColumn
                            ? currentItemColumn - lastColumn - 1 // negative indexes -> -1 is last element
                            : prevGroupSize <= this.gridWidth
                                // focus last element of previous group if focus should go on 2 groups before current
                                ? -1
                                : -this.gridWidth - currentItemColumn;
                    }
                }
                return nextIndex;
            case 'ArrowDown':
            case 'Down': {
                nextIndex = currentItemIndex + this.gridWidth;
                const indexExists = nextIndex < this.numberOfItems;
                if (currentItemRow === maxRows - 1) {
                    if (nextGroupSize === 0) {
                        return undefined;
                    }
                    if (!indexExists) {
                        const nextLastIndex = nextGroupSize - 1;
                        const lastColumn = nextLastIndex % this.gridWidth;
                        return lastColumn >= currentItemColumn
                            ? currentItemColumn
                            : nextGroupSize <= this.gridWidth
                                ? 0
                                : this.gridWidth + currentItemColumn;
                    }
                }
                else if (!indexExists) {
                    return this.numberOfItems - 1;
                }
                return nextIndex;
            }
            case 'ArrowLeft':
            case 'Left':
                if (currentItemIndex === 0) {
                    return prevGroupSize === 0 ? undefined : -1;
                }
                return currentItemIndex - 1;
            case 'ArrowRight':
            case 'Right': {
                if (currentItemIndex === this.numberOfItems - 1) {
                    return nextGroupSize === 0 ? undefined : 0;
                }
                nextIndex = currentItemIndex + 1;
                return nextIndex;
            }
            default:
                return undefined;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtbmF2aWdhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmF2aWdhdGlvbi9zcmMvbGliL2NvbXBvbmVudHMvYXZsLXNvbHV0aW9uLW92ZXJ2aWV3L2tleWJvYXJkLW5hdmlnYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjO0FBQ2QsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUFvQixhQUFxQixFQUFVLFNBQWlCO1FBQWhELGtCQUFhLEdBQWIsYUFBYSxDQUFRO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBUTtJQUFJLENBQUM7SUFFekUsNkZBQTZGO0lBQ3RGLFFBQVEsQ0FDYixnQkFBd0IsRUFDeEIsVUFBa0IsRUFDbEIsZ0JBQW9DLENBQUMsRUFDckMsZ0JBQW9DLENBQUM7UUFFckMsYUFBYSxHQUFHLGFBQWEsSUFBSSxDQUFDLENBQUM7UUFDbkMsYUFBYSxHQUFHLGFBQWEsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzVELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFL0QsSUFBSSxTQUFpQixDQUFDO1FBRXRCLFFBQVEsVUFBVSxFQUFFO1lBQ2xCLEtBQUssU0FBUyxDQUFDO1lBQ2YsS0FBSyxJQUFJO2dCQUNQLFNBQVMsR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUM5QyxJQUFJLGNBQWMsS0FBSyxDQUFDLEVBQUU7b0JBQ3hCLElBQUksYUFBYSxLQUFLLENBQUMsRUFBRTt3QkFDdkIsT0FBTyxTQUFTLENBQUM7cUJBQ2xCO29CQUNELElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTt3QkFDakIsTUFBTSxhQUFhLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQzt3QkFDeEMsaUVBQWlFO3dCQUNqRSxrQkFBa0I7d0JBQ2xCLE1BQU0sVUFBVSxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO3dCQUVsRCxPQUFPLGlCQUFpQixJQUFJLFVBQVU7NEJBQ3BDLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDLHlDQUF5Qzs0QkFDOUUsQ0FBQyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsU0FBUztnQ0FDakMscUZBQXFGO2dDQUNyRixDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNKLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLENBQUM7cUJBQ3pDO2lCQUNGO2dCQUNELE9BQU8sU0FBUyxDQUFDO1lBQ25CLEtBQUssV0FBVyxDQUFDO1lBQ2pCLEtBQUssTUFBTSxDQUFDLENBQUM7Z0JBQ1gsU0FBUyxHQUFHLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQzlDLE1BQU0sV0FBVyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO2dCQUNuRCxJQUFJLGNBQWMsS0FBSyxPQUFPLEdBQUcsQ0FBQyxFQUFFO29CQUNsQyxJQUFJLGFBQWEsS0FBSyxDQUFDLEVBQUU7d0JBQ3ZCLE9BQU8sU0FBUyxDQUFDO3FCQUNsQjtvQkFDRCxJQUFJLENBQUMsV0FBVyxFQUFFO3dCQUNoQixNQUFNLGFBQWEsR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDO3dCQUN4QyxNQUFNLFVBQVUsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQzt3QkFDbEQsT0FBTyxVQUFVLElBQUksaUJBQWlCOzRCQUNwQyxDQUFDLENBQUMsaUJBQWlCOzRCQUNuQixDQUFDLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxTQUFTO2dDQUNqQyxDQUFDLENBQUMsQ0FBQztnQ0FDSCxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQztxQkFDeEM7aUJBQ0Y7cUJBQU0sSUFBSSxDQUFDLFdBQVcsRUFBRTtvQkFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztpQkFDL0I7Z0JBQ0QsT0FBTyxTQUFTLENBQUM7YUFDbEI7WUFDRCxLQUFLLFdBQVcsQ0FBQztZQUNqQixLQUFLLE1BQU07Z0JBQ1QsSUFBSSxnQkFBZ0IsS0FBSyxDQUFDLEVBQUU7b0JBQzFCLE9BQU8sYUFBYSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDN0M7Z0JBQ0QsT0FBTyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7WUFDOUIsS0FBSyxZQUFZLENBQUM7WUFDbEIsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDWixJQUFJLGdCQUFnQixLQUFLLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxFQUFFO29CQUMvQyxPQUFPLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM1QztnQkFDRCxTQUFTLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxPQUFPLFNBQVMsQ0FBQzthQUNsQjtZQUNEO2dCQUNFLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBoaWRkZW4gKi9cclxuZXhwb3J0IGNsYXNzIEtleWJvYXJkTmF2aWdhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG51bWJlck9mSXRlbXM6IG51bWJlciwgcHJpdmF0ZSBncmlkV2lkdGg6IG51bWJlcikgeyB9XHJcblxyXG4gIC8qKiBAcmV0dXJucyB0byB3aGljaCBpdGVtIHRvIG5hdmlnYXRlIHRvIGZyb20gdGhlIGN1cnJlbnQgaXRlbSBhbmQgdW5kZWZpbmVkIHRvIG5vdCBtb3ZlLiAqL1xyXG4gIHB1YmxpYyBuYXZpZ2F0ZShcclxuICAgIGN1cnJlbnRJdGVtSW5kZXg6IG51bWJlcixcclxuICAgIGtleVByZXNzZWQ6IHN0cmluZyxcclxuICAgIG5leHRHcm91cFNpemU6IG51bWJlciB8IHVuZGVmaW5lZCA9IDAsXHJcbiAgICBwcmV2R3JvdXBTaXplOiBudW1iZXIgfCB1bmRlZmluZWQgPSAwXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIG5leHRHcm91cFNpemUgPSBuZXh0R3JvdXBTaXplIHx8IDA7XHJcbiAgICBwcmV2R3JvdXBTaXplID0gcHJldkdyb3VwU2l6ZSB8fCAwO1xyXG4gICAgY29uc3QgY3VycmVudEl0ZW1Db2x1bW4gPSBjdXJyZW50SXRlbUluZGV4ICUgdGhpcy5ncmlkV2lkdGg7XHJcbiAgICBjb25zdCBjdXJyZW50SXRlbVJvdyA9IE1hdGguZmxvb3IoY3VycmVudEl0ZW1JbmRleCAvIHRoaXMuZ3JpZFdpZHRoKTtcclxuICAgIGNvbnN0IG1heFJvd3MgPSBNYXRoLmNlaWwodGhpcy5udW1iZXJPZkl0ZW1zIC8gdGhpcy5ncmlkV2lkdGgpO1xyXG5cclxuICAgIGxldCBuZXh0SW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICBzd2l0Y2ggKGtleVByZXNzZWQpIHtcclxuICAgICAgY2FzZSAnQXJyb3dVcCc6XHJcbiAgICAgIGNhc2UgJ1VwJzpcclxuICAgICAgICBuZXh0SW5kZXggPSBjdXJyZW50SXRlbUluZGV4IC0gdGhpcy5ncmlkV2lkdGg7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRJdGVtUm93ID09PSAwKSB7XHJcbiAgICAgICAgICBpZiAocHJldkdyb3VwU2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKG5leHRJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcHJldkxhc3RJbmRleCA9IHByZXZHcm91cFNpemUgLSAxO1xyXG4gICAgICAgICAgICAvLyBjb2x1bW5zIG9mIGxhc3QgZWxlbWVudCBhbmQgdGFyZ2V0ZWQgZWxlbWVudCBvZiBwcmV2aW91cyBncm91cFxyXG4gICAgICAgICAgICAvLyAtIDAgYmFzZWQgaW5kZXhcclxuICAgICAgICAgICAgY29uc3QgbGFzdENvbHVtbiA9IHByZXZMYXN0SW5kZXggJSB0aGlzLmdyaWRXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50SXRlbUNvbHVtbiA8PSBsYXN0Q29sdW1uXHJcbiAgICAgICAgICAgICAgPyBjdXJyZW50SXRlbUNvbHVtbiAtIGxhc3RDb2x1bW4gLSAxIC8vIG5lZ2F0aXZlIGluZGV4ZXMgLT4gLTEgaXMgbGFzdCBlbGVtZW50XHJcbiAgICAgICAgICAgICAgOiBwcmV2R3JvdXBTaXplIDw9IHRoaXMuZ3JpZFdpZHRoXHJcbiAgICAgICAgICAgICAgLy8gZm9jdXMgbGFzdCBlbGVtZW50IG9mIHByZXZpb3VzIGdyb3VwIGlmIGZvY3VzIHNob3VsZCBnbyBvbiAyIGdyb3VwcyBiZWZvcmUgY3VycmVudFxyXG4gICAgICAgICAgICAgID8gLTFcclxuICAgICAgICAgICAgICA6IC10aGlzLmdyaWRXaWR0aCAtIGN1cnJlbnRJdGVtQ29sdW1uO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dEluZGV4O1xyXG4gICAgICBjYXNlICdBcnJvd0Rvd24nOlxyXG4gICAgICBjYXNlICdEb3duJzoge1xyXG4gICAgICAgIG5leHRJbmRleCA9IGN1cnJlbnRJdGVtSW5kZXggKyB0aGlzLmdyaWRXaWR0aDtcclxuICAgICAgICBjb25zdCBpbmRleEV4aXN0cyA9IG5leHRJbmRleCA8IHRoaXMubnVtYmVyT2ZJdGVtcztcclxuICAgICAgICBpZiAoY3VycmVudEl0ZW1Sb3cgPT09IG1heFJvd3MgLSAxKSB7XHJcbiAgICAgICAgICBpZiAobmV4dEdyb3VwU2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCFpbmRleEV4aXN0cykge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0TGFzdEluZGV4ID0gbmV4dEdyb3VwU2l6ZSAtIDE7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RDb2x1bW4gPSBuZXh0TGFzdEluZGV4ICUgdGhpcy5ncmlkV2lkdGg7XHJcbiAgICAgICAgICAgIHJldHVybiBsYXN0Q29sdW1uID49IGN1cnJlbnRJdGVtQ29sdW1uXHJcbiAgICAgICAgICAgICAgPyBjdXJyZW50SXRlbUNvbHVtblxyXG4gICAgICAgICAgICAgIDogbmV4dEdyb3VwU2l6ZSA8PSB0aGlzLmdyaWRXaWR0aFxyXG4gICAgICAgICAgICAgID8gMFxyXG4gICAgICAgICAgICAgIDogdGhpcy5ncmlkV2lkdGggKyBjdXJyZW50SXRlbUNvbHVtbjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKCFpbmRleEV4aXN0cykge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyT2ZJdGVtcyAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXh0SW5kZXg7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcclxuICAgICAgY2FzZSAnTGVmdCc6XHJcbiAgICAgICAgaWYgKGN1cnJlbnRJdGVtSW5kZXggPT09IDApIHtcclxuICAgICAgICAgIHJldHVybiBwcmV2R3JvdXBTaXplID09PSAwID8gdW5kZWZpbmVkIDogLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50SXRlbUluZGV4IC0gMTtcclxuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XHJcbiAgICAgIGNhc2UgJ1JpZ2h0Jzoge1xyXG4gICAgICAgIGlmIChjdXJyZW50SXRlbUluZGV4ID09PSB0aGlzLm51bWJlck9mSXRlbXMgLSAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV4dEdyb3VwU2l6ZSA9PT0gMCA/IHVuZGVmaW5lZCA6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5leHRJbmRleCA9IGN1cnJlbnRJdGVtSW5kZXggKyAxO1xyXG4gICAgICAgIHJldHVybiBuZXh0SW5kZXg7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=