import { Component, HostListener, ViewChildren, Input, EventEmitter, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, asyncScheduler } from 'rxjs';
import { throttleTime, map, tap } from 'rxjs/operators';
import { KeyboardNavigator } from './keyboard-navigator';
import '@avl-controls/core/dist/avl-icon/avl-icon';
import '@avl-controls/core/dist/avl-search-bar/avl-search-bar';
import * as i0 from "@angular/core";
import * as i1 from "@avl-ng-controls/common";
import * as i2 from "@angular/common";
import * as i3 from "@avl-controls/ng-binders";
import * as i4 from "@angular/router";
export class AvlSolutionOverviewComponent {
    constructor(cdr) {
        this.cdr = cdr;
        /**
         * Emits search query string on change
         */
        this.searchQueryChange = new EventEmitter();
        /**
         * Emits value of the search query when search triggered
         */
        this.search = new EventEmitter();
        this.gridWidth$ = new BehaviorSubject(-1);
        this.largestItemsIndex = -1;
        this.maxItems = 0;
        /**
         * @hidden
         */
        this.showIllustration = () => {
            var _a;
            const containerElement = (_a = this.container) === null || _a === void 0 ? void 0 : _a.nativeElement;
            if (!containerElement) {
                return;
            }
            const background = getComputedStyle(containerElement).getPropertyValue('--avl-solution-overview-background-image');
            const illustration = getComputedStyle(containerElement).getPropertyValue('--avl-solution-overview-illustration');
            this.displayIllustration =
                (!Boolean(background) || background.replace(' ', '') === 'none' || background === 'auto') &&
                    Boolean(illustration);
        };
    }
    get groupsOfItems() {
        let v = [];
        for (const gRef of this.groupElementRefs) {
            const gEl = gRef.nativeElement;
            const items = Array.prototype.slice.call(gEl.querySelectorAll('a.item'));
            v = [...v, items];
        }
        return v;
    }
    get iconButtonElements() {
        if (this.iconButtonElementsCache == null) {
            this.iconButtonElementsCache = Array.prototype.slice.call(this.iconButtonsContainer.nativeElement.querySelectorAll('avl-icon-button'));
        }
        return this.iconButtonElementsCache;
    }
    ngOnInit() {
        this.setupReferenceVars();
        this.gridWidthClass$ = this.gridWidth$.asObservable().pipe(throttleTime(50, asyncScheduler, { trailing: true }), map(gridWidth => {
            return `grid-width-${gridWidth}`;
        }), tap(_ => {
            this.setMarginAndIllustration();
        }));
    }
    ngOnDestroy() {
        if (this.groupElementRefsChangesSubscription) {
            this.groupElementRefsChangesSubscription.unsubscribe();
        }
    }
    ngOnChanges(changes) {
        if (changes.groups && !changes.groups.isFirstChange()) {
            this.setupReferenceVars();
            this.gridWidth$.next(this.getGridWidth());
        }
    }
    /** @hidden */
    ngAfterViewInit() {
        this.setupFocusOrdering();
        this.gridWidth$.next(this.getGridWidth());
    }
    /** @hidden */
    getMaxColumnsClass() {
        if (this.maxColumns && window.outerWidth === this.screenWidth) {
            return `max-columns-${this.maxColumns}`;
        }
        if (this.maxItems === 0) {
            return;
        }
        let maxColumns;
        switch (this.maxItems) {
            case 1:
                maxColumns = 1;
                break;
            case 2:
            case 4:
                maxColumns = 2;
                break;
            case 3:
            case 5:
            case 6:
            case 9:
                maxColumns = 3;
                break;
            case 7:
            case 8:
            case 11:
            case 12:
                maxColumns = 4;
                break;
            default:
                maxColumns = 5;
        }
        this.maxColumns = maxColumns;
        return `max-columns-${maxColumns}`;
    }
    /** @hidden **/
    onResize() {
        this.gridWidth$.next(this.getGridWidth());
    }
    /** @hidden */
    onKeydownHandler(event) {
        const gOfItems = this.groupsOfItems;
        const numGroups = gOfItems.length;
        if (numGroups === 0) {
            return;
        }
        const activeEl = document.activeElement;
        const isDown = ['Down', 'ArrowDown'].includes(event.key);
        const isUp = ['Up', 'ArrowUp'].includes(event.key);
        const isRight = ['Right', 'ArrowRight'].includes(event.key);
        const isLeft = ['Left', 'ArrowLeft'].includes(event.key);
        const isTab = event.key === 'Tab';
        const searchbar = this.showSearchBar
            ? this.searchbarRef.nativeElement
            : undefined;
        let gNum;
        let iIdx;
        for (const items of gOfItems) {
            if (items.indexOf(activeEl) !== -1) {
                iIdx = items.indexOf(activeEl);
                gNum = gOfItems.indexOf(items);
                // Go to route on 'Space'. 'Enter' already works on <a>.
                if (event.key === ' ') {
                    items[iIdx].click();
                    return;
                }
            }
        }
        if (this.iconButtonElements.includes(activeEl)) {
            const numIconButtons = this.iconButtonElements.length;
            const idx = this.iconButtonElements.indexOf(activeEl);
            if ((isRight || isTab) && idx === numIconButtons - 1) {
                if (searchbar != null) {
                    searchbar.focus();
                }
                else {
                    gOfItems[0][0].focus();
                }
            }
            else if (isLeft && idx === 0) {
                const g = gOfItems[numGroups - 1];
                const gLen = g.length;
                g[gLen - 1].focus();
            }
            else if (isLeft) {
                this.iconButtonElements[idx - 1].focus();
            }
            else if (isRight) {
                this.iconButtonElements[idx + 1].focus();
            }
            event.preventDefault();
        }
        const itemElements = gOfItems[gNum];
        const gridWidth = this.gridWidth$.value;
        if (searchbar != null && iIdx < gridWidth && gNum === 0 && isUp) {
            searchbar.focus();
            event.preventDefault();
        }
        else if ((isRight || isTab) &&
            gNum === gOfItems.length - 1 &&
            iIdx === itemElements.length - 1) {
            const iconButtons = this.iconButtonElements;
            if (iconButtons != null && iconButtons.length > 0) {
                iconButtons[0].focus();
                event.preventDefault();
            }
        }
        else if (searchbar != null && searchbar === activeEl && isDown) {
            gOfItems[0][0].focus();
            event.preventDefault();
        }
        else if (gNum != null) {
            const nextGroup = gNum === gOfItems.length - 1 ? undefined : gOfItems[gNum + 1];
            const prevGroup = gNum === 0 ? undefined : gOfItems[gNum - 1];
            const nGLen = nextGroup == null ? 0 : nextGroup.length;
            const pGLen = prevGroup == null ? 0 : prevGroup.length;
            const keyboardNavigator = new KeyboardNavigator(itemElements.length, gridWidth);
            const itemIndexToMoveTo = keyboardNavigator.navigate(iIdx, event.key, nGLen, pGLen);
            if (itemIndexToMoveTo != null) {
                if ((isUp || isLeft) && itemIndexToMoveTo < 0) {
                    prevGroup[itemIndexToMoveTo + pGLen].focus();
                }
                else if ((isDown || isRight) && iIdx + 1 > itemIndexToMoveTo) {
                    nextGroup[itemIndexToMoveTo].focus();
                }
                else {
                    gOfItems[gNum][itemIndexToMoveTo].focus();
                }
                event.preventDefault();
            }
        }
    }
    /** @hidden */
    onQueryChange(event) {
        this.searchQueryChange.emit(event.detail.value);
    }
    /** @hidden */
    onSearch(event) {
        this.search.emit(event.detail.value);
    }
    setupReferenceVars() {
        let max = 0;
        for (const g of this.groups) {
            const itemSz = g.items.length;
            if (max < itemSz) {
                max = itemSz;
                this.largestItemsIndex = this.groups.indexOf(g);
            }
        }
        this.maxItems = max;
    }
    setMarginAndIllustration() {
        this.topMarginNeeded = true;
        this.contentHasScroll = false;
        this.cdr.detectChanges();
        const content = this.groupsContainer.nativeElement;
        this.contentHasScroll = content.scrollHeight > content.clientHeight;
        this.topMarginNeeded = !this.contentHasScroll && this.showSearchBar;
        this.showIllustration();
        this.cdr.detectChanges();
    }
    getGridWidth() {
        if (this.largestItemsIndex < 0) {
            this.setupReferenceVars();
        }
        const items = this.groupsOfItems[this.largestItemsIndex];
        const firstItemOffsetTop = items[0].offsetTop;
        let i = 0;
        for (const item of items) {
            if (item.offsetTop > firstItemOffsetTop) {
                return i;
            }
            i++;
        }
        return items.length;
    }
    setupFocusOrdering() {
        const buttonElements = this.buttonRefs.map(elRef => elRef.nativeElement);
        let focusableElements = [];
        if (this.showSearchBar) {
            focusableElements.push(this.searchbarRef.nativeElement);
        }
        focusableElements = [...focusableElements, ...buttonElements, ...this.iconButtonElements];
        focusableElements.forEach(el => {
            el.addEventListener('focus', (event) => {
                const t = event.target;
                if (t.tagName.toLowerCase() === 'avl-icon-button') {
                    if (this.showSearchBar &&
                        (['body', 'html'].includes(document.activeElement.tagName.toLowerCase()) ||
                            this.lastFocusedEl == null ||
                            (this.lastFocusedEl.tagName.toLowerCase() !== 'avl-icon-button' &&
                                this.lastFocusedEl !== buttonElements[buttonElements.length - 1]))) {
                        this.searchbarRef.nativeElement.focus();
                        event.preventDefault();
                    }
                }
                this.lastFocusedEl = event.target;
            });
        });
    }
}
AvlSolutionOverviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlSolutionOverviewComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AvlSolutionOverviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlSolutionOverviewComponent, selector: "avl-solution-overview", inputs: { groups: "groups", solutionName: "solutionName", solutionIconUrl: "solutionIconUrl", solutionSubtitle: "solutionSubtitle", showSearchBar: "showSearchBar" }, outputs: { searchQueryChange: "searchQueryChange", search: "search" }, host: { listeners: { "window:resize": "onResize()", "keydown": "onKeydownHandler($event)" } }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }, { propertyName: "searchbarRef", first: true, predicate: ["searchbar"], descendants: true }, { propertyName: "iconButtonsContainer", first: true, predicate: ["iconButtons"], descendants: true }, { propertyName: "searchbarContainer", first: true, predicate: ["searchbarContainer"], descendants: true }, { propertyName: "groupsContainer", first: true, predicate: ["groupsContainer"], descendants: true }, { propertyName: "buttonRefs", predicate: ["itemElement"], descendants: true }, { propertyName: "groupElementRefs", predicate: ["group"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"container\"  #container>\r\n  <div class=\"top-bar\">\r\n    <div class=\"row\">\r\n      <img  alt=\"[[solutionName]]\" class=\"solution-logo\" src=\"{{solutionIconUrl}}\" />\r\n      <h1 class=\"solution-name\">{{solutionName}}</h1>\r\n      <div class=\"action-buttons\" #iconButtons>\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"solutionSubtitle\">\r\n      <h2 class=\"solution-subtitle\">{{solutionSubtitle}}</h2>\r\n    </div>\r\n  </div>\r\n  <div class=\"outer-container\" [ngClass]=\"{'top-margin': topMarginNeeded}\">\r\n    <div\r\n      *ngIf=\"displayIllustration\"\r\n      [ngClass]=\"{ 'illustration-holder': 1, 'has-scrollbar': contentHasScroll }\"\r\n    ></div>\r\n    <div class=\"searchbar-container\" [ngClass]=\"gridWidthClass$ | async\" #searchbarContainer>\r\n      <avl-search-bar class=\"search-bar\" *ngIf=\"showSearchBar\"\r\n        #searchbar\r\n        always-open\r\n        (query-changed)=\"onQueryChange($event)\"\r\n        (search)=\"onSearch($event)\">\r\n      </avl-search-bar>\r\n    </div>\r\n    <div class=\"groups\" #groupsContainer>\r\n      <div class=\"flexible\"></div>\r\n      <ng-container *ngFor=\"let group of groups\">\r\n        <div class=\"group-container\">\r\n          <div class=\"item-container\" #group [ngClass]=\"getMaxColumnsClass()\">\r\n            <ng-container *ngTemplateOutlet=\"groupTpl; context: { group: group }\"></ng-container>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n      <div class='flexible'>\r\n      </div>\r\n      <div id=\"footer\">\r\n        <avl-footer companyLogo=\"./assets/images/avl_logo_inverse_48px.svg\" currentYear=\"2021\"> </avl-footer>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #groupTpl let-group=\"group\">\r\n  <h2 class=\"group-name\" *ngIf=\"group.title\">{{group.title}}</h2>\r\n  <div class=\"text-container\" *ngIf=\"group.header\">{{group.header}}</div>\r\n  <ng-container *ngFor=\"let item of group.items\">\r\n    <ng-container *ngIf=\"item.route\">\r\n      <a class=\"item\"\r\n         #itemElement\r\n         [routerLink]=\"item.route\"\r\n         [ngClass]=\"{'with-description': group.description}\"\r\n         tabindex=\"0\">\r\n        <ng-container *ngTemplateOutlet=\"buttonContent; context: { item: item }\">\r\n        </ng-container>\r\n      </a>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"item.link\">\r\n      <a class=\"item\"\r\n         #itemElement\r\n         [attr.href]=\"item.link\"\r\n         [attr.target]=\"item.target\"\r\n         [attr.rel]=\"item.target == '_blank' ? 'noopener' : null\"\r\n         [ngClass]=\"{'with-description': group.description}\"\r\n         tabindex=\"0\">\r\n        <ng-container *ngTemplateOutlet=\"buttonContent; context: { item: item }\">\r\n        </ng-container>\r\n      </a>\r\n    </ng-container>\r\n  </ng-container>\r\n  <div class=\"text-container\" *ngIf=\"group.footer\">{{group.footer}}</div>\r\n</ng-template>\r\n\r\n<ng-template #buttonContent let-item=\"item\">\r\n  <div class=\"icon-container\" [ngClass]=\"{'no-icon-circle': item.noIconCircle}\">\r\n    <avl-icon\r\n      *ngIf=\"item.icon\"\r\n      class=\"item-icon\"\r\n      [icon]=\"item.icon\">\r\n    </avl-icon>\r\n    <img  alt=\"[[item.label]]\" *ngIf=\"item.iconUrl\" class=\"item-icon\" src=\"{{item.iconUrl}}\" />\r\n  </div>\r\n  <div class=\"icon-label\"><span class=\"label\">{{item.label}}</span></div>\r\n  <div class=\"description\">\r\n    <span class=\"text\">\r\n      {{item.description}}\r\n    </span>\r\n  </div>\r\n</ng-template>\r\n\r\n\r\n", styles: [":host{--avl-solution-overview-background-color:var(--avl-background-1-color);--avl-solution-overview-background-image:auto;--avl-solution-overview-text-color:var(--avl-foreground-color);--avl-solution-overview-title-color:var(--avl-foreground-color);--avl-solution-overview-subtitle-color:var(--avl-foreground-medium-color);--avl-solution-overview-item-background-color:var(--avl-container-background-color);--avl-solution-overview-item-hover-color:var(--avl-container-background-product-hover-color);--avl-solution-overview-item-focus-color:var(--avl-container-background-product-focus-color);--avl-solution-overview-item-pressed-color:var(--avl-container-background-product-pressed-color);--avl-solution-overview-item-icon-circle-color:var(--avl-product-color);--avl-solution-overview-item-icon-color:var(--avl-on-primary-color);--avl-solution-overview-item-icon-color-no-circle:var(--avl-hint-color);--avl-solution-overview-item-description-color:var(--avl-foreground-medium-color);--avl-solution-overview-item-icon-pressed-color:var(--avl-solution-overview-item-icon-color);display:block;width:100%;--item-width:184px;--item-margin:24px;--total-width:calc(var(--item-width) + var(--item-margin));--total-height:100vh;height:var(--total-height);font-family:var(--avl-font-family)}.container{background-image:var(--avl-solution-overview-background-image);background-size:cover;background-color:var(--avl-solution-overview-background-color);height:100%}.container,.groups{display:flex;flex-direction:column}.groups{width:100%;overflow-y:auto;flex:1 1 100%}#footer{margin-top:24px}.flexible{flex:1 1 100%}.group-container{width:100%}.group-container,.outer-container{display:flex;justify-content:center;position:relative}.outer-container{align-items:center;flex-direction:column;overflow:hidden;height:100%}.outer-container.top-margin{margin-top:-50px}.searchbar-container{display:flex;justify-content:space-between}.search-bar{padding-right:20px}.external-link-container,.item-container{display:grid;width:100%;margin:0 12px 2px;padding-top:24px;grid-template-columns:repeat(auto-fill,var(--item-width)) [end];grid-gap:var(--item-margin);justify-content:center}.text-container{color:var(--avl-solution-overview-text-color);grid-column:1/end}.container .illustration-holder{position:absolute;width:25%;height:100%;right:0;bottom:0;background-image:var(--avl-solution-overview-illustration);background-position:50% 50%;background-size:contain;background-repeat:no-repeat}.container .illustration-holder.has-scrollbar{right:20px}.max-columns-1{max-width:calc(var(--total-width) * 1)}.max-columns-2{max-width:calc(var(--total-width) * 2)}.max-columns-3{max-width:calc(var(--total-width) * 3)}.max-columns-4{max-width:calc(var(--total-width) * 4)}.max-columns-5{max-width:calc(var(--total-width) * 5)}.grid-width-1{width:calc(var(--total-width) * 1)}.grid-width-2{width:calc(var(--total-width) * 2)}.grid-width-3{width:calc(var(--total-width) * 3)}.grid-width-4{width:calc(var(--total-width) * 4)}.grid-width-5{width:calc(var(--total-width) * 5)}.item{position:relative;display:flex;flex-direction:column;align-items:center;padding:12px;width:var(--item-width);height:112px;box-sizing:border-box;background-color:var(--avl-solution-overview-item-background-color);outline:none;box-shadow:var(--avl-box-shadow-1dp);transition:box-shadow .15s cubic-bezier(.4,0,.2,1)}.item.with-description{height:204px}.description{display:none}.item.with-description .description{overflow:hidden;display:block;font-weight:400;text-align:center;font-size:14px;line-height:16px;color:var(--avl-foreground-medium-color)}.item:active,.item:focus,.item:hover{box-shadow:var(--avl-box-shadow-8dp)}.item:focus{background-color:var(--avl-solution-overview-item-focus-color)}.item:hover{background-color:var(--avl-solution-overview-item-hover-color)}.item:active{background-color:var(--avl-solution-overview-item-pressed-color)}.icon-container{background:var(--avl-solution-overview-item-icon-circle-color);display:flex;align-items:center;justify-content:center;width:48px;height:48px;min-height:48px;border-radius:50%}.icon-container.no-icon-circle{background:transparent}.no-icon-circle .item-icon{--avl-icon-custom-color:var(--avl-solution-overview-item-icon-color-no-circle)}.item-icon{width:24px;height:24px;--avl-icon-custom-color:var(--avl-solution-overview-item-icon-color)}.item:active .item-icon{--avl-icon-custom-color:var(--avl-solution-overview-item-icon-pressed-color)}.icon-label{display:flex;justify-content:center;flex-flow:column;width:100%;font-size:14px;line-height:16px;margin:8px 0;font-weight:500;text-align:center;height:32px;color:var(--avl-solution-overview-text-color)}.group-name{margin:0 0 -8px;color:var(--avl-solution-overview-text-color);grid-column:1/end}.group-name,.solution-name{font-weight:400;font-size:24px}.solution-name{margin:0 0 0 32px;height:32px;line-height:32px;flex:auto;color:var(--avl-solution-overview-title-color)}.solution-subtitle{font-weight:400;font-size:20px;margin:0 0 0 64px;color:var(--avl-solution-overview-subtitle-color)}.top-bar{display:flex;flex-direction:column;padding:32px 32px 0}.top-bar .row{display:flex;flex-direction:row;justify-content:space-between;align-items:flex-start;height:32px}.top-bar .row:last-child{margin-top:12px;height:24px}.action-buttons{margin-top:-8px;justify-self:flex-end;height:32px}.solution-logo{top:32px;left:32px;width:32px;height:32px}avl-search-bar{padding-top:20px}"], components: [{ type: i1.AvlFooterComponent, selector: "avl-footer", inputs: ["companyLogo", "currentYear"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.AvlSearchBarDirective, selector: "avl-search-bar", outputs: ["queryChange", "openChange"] }, { type: i3.AvlFormControlDirective, selector: "avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input", inputs: ["readonly"], outputs: ["invalidChange"] }, { type: i3.AvlInteractionControlDirective, selector: "avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar", outputs: ["focusedChange"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlSolutionOverviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-solution-overview',
                    templateUrl: './avl-solution-overview.component.html',
                    styleUrls: ['./avl-solution-overview.component.css']
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { groups: [{
                type: Input
            }], solutionName: [{
                type: Input
            }], solutionIconUrl: [{
                type: Input
            }], solutionSubtitle: [{
                type: Input
            }], showSearchBar: [{
                type: Input
            }], searchQueryChange: [{
                type: Output
            }], search: [{
                type: Output
            }], buttonRefs: [{
                type: ViewChildren,
                args: ['itemElement']
            }], groupElementRefs: [{
                type: ViewChildren,
                args: ['group']
            }], container: [{
                type: ViewChild,
                args: ['container']
            }], searchbarRef: [{
                type: ViewChild,
                args: ['searchbar']
            }], iconButtonsContainer: [{
                type: ViewChild,
                args: ['iconButtons']
            }], searchbarContainer: [{
                type: ViewChild,
                args: ['searchbarContainer']
            }], groupsContainer: [{
                type: ViewChild,
                args: ['groupsContainer']
            }], onResize: [{
                type: HostListener,
                args: ['window:resize']
            }], onKeydownHandler: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25hdmlnYXRpb24vc3JjL2xpYi9jb21wb25lbnRzL2F2bC1zb2x1dGlvbi1vdmVydmlldy9hdmwtc29sdXRpb24tb3ZlcnZpZXcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmF2aWdhdGlvbi9zcmMvbGliL2NvbXBvbmVudHMvYXZsLXNvbHV0aW9uLW92ZXJ2aWV3L2F2bC1zb2x1dGlvbi1vdmVydmlldy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFFWixZQUFZLEVBQ1osS0FBSyxFQUNMLFlBQVksRUFDWixNQUFNLEVBQ04sU0FBUyxFQU9WLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQWMsY0FBYyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUNqRixPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sdURBQXVELENBQUM7Ozs7OztBQXFGL0QsTUFBTSxPQUFPLDRCQUE0QjtJQUN2QyxZQUFvQixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQXlEMUM7O1dBRUc7UUFFSSxzQkFBaUIsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRXREOztXQUVHO1FBRUksV0FBTSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFrQ25DLGVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBTTdDLHNCQUFpQixHQUFHLENBQUMsQ0FBQyxD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SztnQkFPQyxnQkFBZ0I7c0JBRHRCLEtBQUs7Z0JBUUMsYUFBYTtzQkFEbkIsS0FBSztnQkFPQyxpQkFBaUI7c0JBRHZCLE1BQU07Z0JBT0EsTUFBTTtzQkFEWixNQUFNO2dCQUlzQixVQUFVO3NCQUF0QyxZQUFZO3VCQUFDLGFBQWE7Z0JBR0osZ0JBQWdCO3NCQUF0QyxZQUFZO3VCQUFDLE9BQU87Z0JBR0csU0FBUztzQkFBaEMsU0FBUzt1QkFBQyxXQUFXO2dCQUdFLFlBQVk7c0JBQW5DLFNBQVM7dUJBQUMsV0FBVztnQkFHSSxvQkFBb0I7c0JBQTdDLFNBQVM7dUJBQUMsYUFBYTtnQkFHUyxrQkFBa0I7c0JBQWxELFNBQVM7dUJBQUMsb0JBQW9CO2dCQUdELGVBQWU7c0JBQTVDLFNBQVM7dUJBQUMsaUJBQWlCO2dCQTRJNUIsUUFBUTtzQkFEUCxZQUFZO3VCQUFDLGVBQWU7Z0JBTzdCLGdCQUFnQjtzQkFEZixZQUFZO3VCQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIEhvc3RMaXN0ZW5lcixcclxuICBFbGVtZW50UmVmLFxyXG4gIFZpZXdDaGlsZHJlbixcclxuICBJbnB1dCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgT3V0cHV0LFxyXG4gIFZpZXdDaGlsZCxcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIE9uSW5pdCxcclxuICBPbkNoYW5nZXMsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxuICBPbkRlc3Ryb3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBhc3luY1NjaGVkdWxlciwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRocm90dGxlVGltZSwgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEtleWJvYXJkTmF2aWdhdG9yIH0gZnJvbSAnLi9rZXlib2FyZC1uYXZpZ2F0b3InO1xyXG5cclxuaW1wb3J0ICdAYXZsLWNvbnRyb2xzL2NvcmUvZGlzdC9hdmwtaWNvbi9hdmwtaWNvbic7XHJcbmltcG9ydCAnQGF2bC1jb250cm9scy9jb3JlL2Rpc3QvYXZsLXNlYXJjaC1iYXIvYXZsLXNlYXJjaC1iYXInO1xyXG5cclxuaW1wb3J0IHR5cGUgeyBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXZsU29sdXRpb25PdmVydmlld0l0ZW0ge1xyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIHRoZSBpdGVtLlxyXG4gICAqL1xyXG4gIGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJvdXRlciB3aGljaCB0byBuYXZpZ2F0ZSB0byB3aGVuIHRoZSBpdGVtIGlzIGNsaWNrZWQuXHJcbiAgICogU2hvdWxkbid0IGJlIHVzZWQgdG9nZXRoZXIgd2l0aCBsaW5rLlxyXG4gICAqL1xyXG4gIHJvdXRlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBVUkwgd2hpY2ggdG8gbmF2aWdhdGUgdG8gd2hlbiB0aGUgaXRlbSBpcyBjbGlja2VkLlxyXG4gICAqIFNob3VsZG4ndCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggcm91dGUuXHJcbiAgICovXHJcbiAgbGluaz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIHdoZXJlIHRvIG9wZW4gdGhlIGxpbmtlZCBkb2N1bWVudCAoX2JsYW5rIHwgX3NlbGYgfCBfcGFyZW50IHwgX3RvcCB8IGZyYW1lbmFtZSkuXHJcbiAgICogVXNlZCBvbmx5IHdoZW4gbGluayBpcyBzZXQuXHJcbiAgICovXHJcbiAgdGFyZ2V0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBEZXNjcmlwdGlvbiBvZiB0aGUgaXRlbS5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSWNvbiBvZiB0aGUgaXRlbS5cclxuICAgKiBPbmx5IG9uZSBvZiBpY29uIGFuZCBpY29uVXJsIGNhbiBiZSB1c2VkLiBUaGUgb3RoZXIgc2hvdWxkIGJlIHVuZGVmaW5lZC5cclxuICAgKi9cclxuICBpY29uPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBVUkwgb2YgdGhlIGljb24gaW1hZ2Ugb2YgdGhlIGl0ZW0uXHJcbiAgICogT25seSBvbmUgb2YgaWNvbiBhbmQgaWNvblVybCBjYW4gYmUgdXNlZC4gVGhlIG90aGVyIHNob3VsZCBiZSB1bmRlZmluZWQuXHJcbiAgICovXHJcbiAgaWNvblVybD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRG9uJ3Qgc2hvdyBjaXJjbGUgYXJvdW5kIGljb24uIERpZmZlcmVudCBjb2xvciB3aWxsIGJlIGFwcGxpZWQgdG8gaWNvbiBpZiBlbmFibGVkXHJcbiAgICogQ2lyY2xlIGlzIHZpc2libGUgYnkgZGVmYXVsdFxyXG4gICAqL1xyXG4gIG5vSWNvbkNpcmNsZT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXZsU29sdXRpb25PdmVydmlld0dyb3VwIHtcclxuICAvKipcclxuICAgKiBJZiB0cnVlLCBhZGRpdGlvbmFsIHNwYWNlIGZvciBkZXNjcmlwdGlvbiB0ZXh0IHdpbGwgYmUgcHJvdmlkZWQuXHJcbiAgICogSXQgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdFxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGl0bGUgZm9yIHRoZSBncm91cFxyXG4gICAqL1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUZXh0IGFib3ZlIGdyb3VwXHJcbiAgICovXHJcbiAgaGVhZGVyPzogc3RyaW5nO1xyXG5cclxuICAvKlxyXG4gICAqIFRleHQgYmVsb3cgZ3JvdXBcclxuICAgKi9cclxuICBmb290ZXI/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEdyb3VwIGl0ZW1zXHJcbiAgICovXHJcbiAgaXRlbXM6IEF2bFNvbHV0aW9uT3ZlcnZpZXdJdGVtW107XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLXNvbHV0aW9uLW92ZXJ2aWV3JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9hdmwtc29sdXRpb24tb3ZlcnZpZXcuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxTb2x1dGlvbk92ZXJ2aWV3Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqICMjIyBTdHlsaW5nXHJcbiAgICogVGhlIGZvbGxvd2luZyBjdXN0b20gcHJvcGVydGllcyBhcmUgYXZhaWxhYmxlIGZvciBzdHlsaW5nOlxyXG4gICAqXHJcbiAgICogQ3VzdG9tIHByb3BlcnR5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBEZWZhdWx0XHJcbiAgICogOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LWJhY2tncm91bmQtY29sb3JgICAgICAgICB8IEJhY2tncm91bmQgY29sb3Igb2YgdGhlIG92ZXJ2aWV3ICAgfCBgLS1hdmwtYmFja2dyb3VuZC0xLWNvbG9yYFxyXG4gICAqIGAtLWF2bC1zb2x1dGlvbi1vdmVydmlldy10ZXh0LWNvbG9yYCAgICAgICAgICAgICAgfCBUZXh0IGNvbG9yICAgICAgICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLWZvcmVncm91bmQtY29sb3JgXHJcbiAgICogYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LWl0ZW0tYmFja2dyb3VuZC1jb2xvcmAgICB8IEl0ZW0gYmFja2dyb3VuZCBjb2xvciAgICAgICAgICAgICAgfCBgLS1hdmwtY29udGFpbmVyLWJhY2tncm91bmQtY29sb3JgXHJcbiAgICogYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LWJhY2tncm91bmQtaW1hZ2VgICAgICAgICB8IEJhY2tncm91bmQgaW1hZ2Ugb2YgdGhlIG92ZXJ2aWV3ICAgfCAgYXV0b1xyXG4gICAqIGAtLWF2bC1zb2x1dGlvbi1vdmVydmlldy1pdGVtLWhvdmVyLWNvbG9yYCAgICAgICAgfCBJdGVtIGJhY2tncm91bmQgY29sb3Igd2hlbiBob3ZlcmVkIHwgYC0tYXZsLWNvbnRhaW5lci1iYWNrZ3JvdW5kLXByb2R1Y3QtaG92ZXItY29sb3JgXHJcbiAgICogYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LWl0ZW0tZm9jdXMtY29sb3JgICAgICAgICB8IEl0ZW0gYmFja2dyb3VuZCBjb2xvciB3aGVuIGZvY3VzZWQgfCBgLS1hdmwtY29udGFpbmVyLWJhY2tncm91bmQtcHJvZHVjdC1mb2N1cy1jb2xvcmBcclxuICAgKiBgLS1hdmwtc29sdXRpb24tb3ZlcnZpZXctaXRlbS1wcmVzc2VkLWNvbG9yYCAgICAgIHwgSXRlbSBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gcHJlc3NlZCB8IGAtLWF2bC1jb250YWluZXItYmFja2dyb3VuZC1wcm9kdWN0LXByZXNzZWQtY29sb3JgXHJcbiAgICogYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LXRpdGxlLWNvbG9yYCAgICAgICAgICAgICB8IFRpdGxlIGNvbG9yICAgICAgICAgICAgICAgICAgICAgICAgfCBgLS1hdmwtZm9yZWdyb3VuZC1jb2xvcmBgXHJcbiAgICogYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LXN1YnRpdGxlLWNvbG9yYCAgICAgICAgICB8IFN1YnRpdGxlIGNvbG9yICAgICAgICAgICAgICAgICAgICAgfCBgLS1hdmwtZm9yZWdyb3VuZC1tZWRpdW0tY29sb3JgYFxyXG4gICAqIGAtLWF2bC1zb2x1dGlvbi1vdmVydmlldy1pdGVtLWljb24tY29sb3JgICAgICAgICAgfCBJdGVtIGljb24gY29sb3IgICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLW9uLXByaW1hcnktY29sb3JgXHJcbiAgICogYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LWl0ZW0taWNvbi1jb2xvci1uby1jaXJjbGVgIHwgSXRlbSBpY29uIGNvbG9yIGlmIG5vSWNvbkNpcmNsZSBpcyBzZXQgfCBgLS1hdmwtaGludC1jb2xvcmBcclxuICAgKiBgLS1hdmwtc29sdXRpb24tb3ZlcnZpZXctaXRlbS1pY29uLWNpcmNsZS1jb2xvcmAgIHwgQ29sb3IgZm9yIGljb24gY2lyY2xlICAgICAgICAgICAgICB8IGAtLWF2bC1wcm9kdWN0LWNvbG9yYFxyXG4gICAqIGAtLWF2bC1zb2x1dGlvbi1vdmVydmlldy1pdGVtLWljb24tcHJlc3NlZC1jb2xvcmAgfCBJdGVtIGljb24gY29sb3Igd2hlbiBwcmVzc2VkICAgICAgIHwgYC0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LWl0ZW0taWNvbi1jb2xvcmBcclxuICAgKiBgLS1hdmwtc29sdXRpb24tb3ZlcnZpZXctaXRlbS1kZXNjcmlwdGlvbi1jb2xvcmAgIHwgSXRlbSBkZXNjcmlwdGlvbiB0ZXh0IGNvbG9yICAgICAgICB8IGAtLWF2bC1mb3JlZ3JvdW5kLW1lZGl1bS1jb2xvcmBcclxuICAgKi9cclxuICBfc3R5bGluZzogYW55O1xyXG5cclxuICAvKipcclxuICAgKiBHcm91cHMgZGVmaW5pbmcgc2VjdGlvbnMgd2l0aCBidXR0b25zXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBncm91cHM6IEF2bFNvbHV0aW9uT3ZlcnZpZXdHcm91cFtdO1xyXG5cclxuICAvKipcclxuICAgKiBTb2x1dGlvbiBvdmVydmlldyB0aXRsZS5cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBzb2x1dGlvbk5hbWU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVVJMIG9mIHRoZSBpY29uIGltYWdlIG9mIHRoZSBzb2x1dGlvbiBvdmVydmlldyB0aXRsZS5cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBzb2x1dGlvbkljb25Vcmw6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU29sdXRpb24gb3ZlcnZpZXcgc3VidGl0bGUuXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgc29sdXRpb25TdWJ0aXRsZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRmxhZyBmb3IgdGhlIG9wdGlvbmFsIHNlYXJjaCBiYXIuXHJcbiAgICogSWYgdHJ1ZSwgc2VhcmNoIGJhciBpcyBzaG93bi5cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBzaG93U2VhcmNoQmFyOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBFbWl0cyBzZWFyY2ggcXVlcnkgc3RyaW5nIG9uIGNoYW5nZVxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyBzZWFyY2hRdWVyeUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xyXG5cclxuICAvKipcclxuICAgKiBFbWl0cyB2YWx1ZSBvZiB0aGUgc2VhcmNoIHF1ZXJ5IHdoZW4gc2VhcmNoIHRyaWdnZXJlZFxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyBzZWFyY2ggPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBAVmlld0NoaWxkcmVuKCdpdGVtRWxlbWVudCcpIGJ1dHRvblJlZnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBAVmlld0NoaWxkcmVuKCdncm91cCcpIGdyb3VwRWxlbWVudFJlZnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBAVmlld0NoaWxkKCdjb250YWluZXInKSBjb250YWluZXI6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBWaWV3Q2hpbGQoJ3NlYXJjaGJhcicpIHNlYXJjaGJhclJlZjogRWxlbWVudFJlZjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBAVmlld0NoaWxkKCdpY29uQnV0dG9ucycpIGljb25CdXR0b25zQ29udGFpbmVyOiBFbGVtZW50UmVmO1xyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIEBWaWV3Q2hpbGQoJ3NlYXJjaGJhckNvbnRhaW5lcicpIHNlYXJjaGJhckNvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBAVmlld0NoaWxkKCdncm91cHNDb250YWluZXInKSBncm91cHNDb250YWluZXI6IEVsZW1lbnRSZWY7XHJcblxyXG4gIHB1YmxpYyBncmlkV2lkdGhDbGFzcyQ6IE9ic2VydmFibGU8c3RyaW5nPjtcclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBwdWJsaWMgY29udGVudEhhc1Njcm9sbDogYm9vbGVhbjtcclxuICBcclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIHB1YmxpYyB0b3BNYXJnaW5OZWVkZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgcHVibGljIGRpc3BsYXlJbGx1c3RyYXRpb246IGJvb2xlYW47XHJcblxyXG4gIHByaXZhdGUgZ3JpZFdpZHRoJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPigtMSk7XHJcblxyXG4gIHByaXZhdGUgbGFzdEZvY3VzZWRFbDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgbWF4Q29sdW1uczogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIGxhcmdlc3RJdGVtc0luZGV4ID0gLTE7XHJcbiAgcHJpdmF0ZSBtYXhJdGVtcyA9IDA7XHJcblxyXG4gIC8vIGNhY2hlIHNjcmVlbldpZHRoIGZvciBtYXhDb2x1bW5zIGNhbGN1bGF0aW9uXHJcbiAgcHJpdmF0ZSBzY3JlZW5XaWR0aDogbnVtYmVyO1xyXG5cclxuICAvLyBjYWNoZSBpY29uIGJ1dHRvbnMgc2luY2UgdGhleSBjYW4gaGFyZGx5IGJlIGNoYW5nZWQgZHluYW1pY2FsbHlcclxuICBwcml2YXRlIGljb25CdXR0b25FbGVtZW50c0NhY2hlPzogSFRNTEVsZW1lbnRbXTtcclxuXHJcbiAgcHJpdmF0ZSBncm91cEVsZW1lbnRSZWZzQ2hhbmdlc1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICBwcml2YXRlIGdldCBncm91cHNPZkl0ZW1zKCk6IEhUTUxFbGVtZW50W11bXSB7XHJcbiAgICBsZXQgdiA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBnUmVmIG9mIHRoaXMuZ3JvdXBFbGVtZW50UmVmcykge1xyXG4gICAgICBjb25zdCBnRWwgPSBnUmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZ0VsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EuaXRlbScpKTtcclxuXHJcbiAgICAgIHYgPSBbLi4udiwgaXRlbXNdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHY7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldCBpY29uQnV0dG9uRWxlbWVudHMoKTogSFRNTEVsZW1lbnRbXSB7XHJcbiAgICBpZiAodGhpcy5pY29uQnV0dG9uRWxlbWVudHNDYWNoZSA9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuaWNvbkJ1dHRvbkVsZW1lbnRzQ2FjaGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcclxuICAgICAgICAodGhpcy5pY29uQnV0dG9uc0NvbnRhaW5lci5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5xdWVyeVNlbGVjdG9yQWxsKCdhdmwtaWNvbi1idXR0b24nKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuaWNvbkJ1dHRvbkVsZW1lbnRzQ2FjaGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAaGlkZGVuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZWFkb25seSBzaG93SWxsdXN0cmF0aW9uID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgY29udGFpbmVyRWxlbWVudDogRWxlbWVudCA9IHRoaXMuY29udGFpbmVyPy5uYXRpdmVFbGVtZW50O1xyXG4gICAgaWYgKCFjb250YWluZXJFbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGJhY2tncm91bmQgPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lckVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoXHJcbiAgICAgICctLWF2bC1zb2x1dGlvbi1vdmVydmlldy1iYWNrZ3JvdW5kLWltYWdlJ1xyXG4gICAgKTtcclxuICAgIGNvbnN0IGlsbHVzdHJhdGlvbiA9IGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyRWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShcclxuICAgICAgJy0tYXZsLXNvbHV0aW9uLW92ZXJ2aWV3LWlsbHVzdHJhdGlvbidcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5kaXNwbGF5SWxsdXN0cmF0aW9uID1cclxuICAgICAgKCFCb29sZWFuKGJhY2tncm91bmQpIHx8IGJhY2tncm91bmQucmVwbGFjZSgnICcsICcnKSA9PT0gJ25vbmUnIHx8IGJhY2tncm91bmQgPT09ICdhdXRvJykgJiZcclxuICAgICAgQm9vbGVhbihpbGx1c3RyYXRpb24pO1xyXG4gIH07XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5zZXR1cFJlZmVyZW5jZVZhcnMoKTtcclxuICAgIHRoaXMuZ3JpZFdpZHRoQ2xhc3MkID0gdGhpcy5ncmlkV2lkdGgkLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXHJcbiAgICAgIHRocm90dGxlVGltZSg1MCwgYXN5bmNTY2hlZHVsZXIsIHsgdHJhaWxpbmc6IHRydWUgfSksXHJcbiAgICAgIG1hcChncmlkV2lkdGggPT4ge1xyXG4gICAgICAgIHJldHVybiBgZ3JpZC13aWR0aC0ke2dyaWRXaWR0aH1gO1xyXG4gICAgICB9KSxcclxuICAgICAgdGFwKF8gPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0TWFyZ2luQW5kSWxsdXN0cmF0aW9uKCk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5ncm91cEVsZW1lbnRSZWZzQ2hhbmdlc1N1YnNjcmlwdGlvbikge1xyXG4gICAgICB0aGlzLmdyb3VwRWxlbWVudFJlZnNDaGFuZ2VzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlcy5ncm91cHMgJiYgIWNoYW5nZXMuZ3JvdXBzLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICB0aGlzLnNldHVwUmVmZXJlbmNlVmFycygpO1xyXG4gICAgICB0aGlzLmdyaWRXaWR0aCQubmV4dCh0aGlzLmdldEdyaWRXaWR0aCgpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5zZXR1cEZvY3VzT3JkZXJpbmcoKTtcclxuICAgIHRoaXMuZ3JpZFdpZHRoJC5uZXh0KHRoaXMuZ2V0R3JpZFdpZHRoKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBnZXRNYXhDb2x1bW5zQ2xhc3MoKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLm1heENvbHVtbnMgJiYgd2luZG93Lm91dGVyV2lkdGggPT09IHRoaXMuc2NyZWVuV2lkdGgpIHtcclxuICAgICAgcmV0dXJuIGBtYXgtY29sdW1ucy0ke3RoaXMubWF4Q29sdW1uc31gO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubWF4SXRlbXMgPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IG1heENvbHVtbnM6IG51bWJlcjtcclxuICAgIHN3aXRjaCAodGhpcy5tYXhJdGVtcykge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgICAgbWF4Q29sdW1ucyA9IDE7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgY2FzZSA0OlxyXG4gICAgICAgIG1heENvbHVtbnMgPSAyO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDM6XHJcbiAgICAgIGNhc2UgNTpcclxuICAgICAgY2FzZSA2OlxyXG4gICAgICBjYXNlIDk6XHJcbiAgICAgICAgbWF4Q29sdW1ucyA9IDM7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgNzpcclxuICAgICAgY2FzZSA4OlxyXG4gICAgICBjYXNlIDExOlxyXG4gICAgICBjYXNlIDEyOlxyXG4gICAgICAgIG1heENvbHVtbnMgPSA0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIG1heENvbHVtbnMgPSA1O1xyXG4gICAgfVxyXG4gICAgdGhpcy5tYXhDb2x1bW5zID0gbWF4Q29sdW1ucztcclxuICAgIHJldHVybiBgbWF4LWNvbHVtbnMtJHttYXhDb2x1bW5zfWA7XHJcbiAgfVxyXG5cclxuICAvKiogQGhpZGRlbiAqKi9cclxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJylcclxuICBvblJlc2l6ZSgpIHtcclxuICAgIHRoaXMuZ3JpZFdpZHRoJC5uZXh0KHRoaXMuZ2V0R3JpZFdpZHRoKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcclxuICBvbktleWRvd25IYW5kbGVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICBjb25zdCBnT2ZJdGVtcyA9IHRoaXMuZ3JvdXBzT2ZJdGVtcztcclxuICAgIGNvbnN0IG51bUdyb3VwcyA9IGdPZkl0ZW1zLmxlbmd0aDtcclxuICAgIGlmIChudW1Hcm91cHMgPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFjdGl2ZUVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcclxuICAgIGNvbnN0IGlzRG93biA9IFsnRG93bicsICdBcnJvd0Rvd24nXS5pbmNsdWRlcyhldmVudC5rZXkpO1xyXG4gICAgY29uc3QgaXNVcCA9IFsnVXAnLCAnQXJyb3dVcCddLmluY2x1ZGVzKGV2ZW50LmtleSk7XHJcbiAgICBjb25zdCBpc1JpZ2h0ID0gWydSaWdodCcsICdBcnJvd1JpZ2h0J10uaW5jbHVkZXMoZXZlbnQua2V5KTtcclxuICAgIGNvbnN0IGlzTGVmdCA9IFsnTGVmdCcsICdBcnJvd0xlZnQnXS5pbmNsdWRlcyhldmVudC5rZXkpO1xyXG4gICAgY29uc3QgaXNUYWIgPSBldmVudC5rZXkgPT09ICdUYWInO1xyXG5cclxuICAgIGNvbnN0IHNlYXJjaGJhciA9IHRoaXMuc2hvd1NlYXJjaEJhclxyXG4gICAgICA/ICh0aGlzLnNlYXJjaGJhclJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KVxyXG4gICAgICA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICBsZXQgZ051bTogbnVtYmVyO1xyXG4gICAgbGV0IGlJZHg6IG51bWJlcjtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGl0ZW1zIG9mIGdPZkl0ZW1zKSB7XHJcbiAgICAgIGlmIChpdGVtcy5pbmRleE9mKGFjdGl2ZUVsKSAhPT0gLTEpIHtcclxuICAgICAgICBpSWR4ID0gaXRlbXMuaW5kZXhPZihhY3RpdmVFbCk7XHJcbiAgICAgICAgZ051bSA9IGdPZkl0ZW1zLmluZGV4T2YoaXRlbXMpO1xyXG4gICAgICAgIC8vIEdvIHRvIHJvdXRlIG9uICdTcGFjZScuICdFbnRlcicgYWxyZWFkeSB3b3JrcyBvbiA8YT4uXHJcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XHJcbiAgICAgICAgICBpdGVtc1tpSWR4XS5jbGljaygpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmljb25CdXR0b25FbGVtZW50cy5pbmNsdWRlcyhhY3RpdmVFbCkpIHtcclxuICAgICAgY29uc3QgbnVtSWNvbkJ1dHRvbnMgPSB0aGlzLmljb25CdXR0b25FbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IGlkeCA9IHRoaXMuaWNvbkJ1dHRvbkVsZW1lbnRzLmluZGV4T2YoYWN0aXZlRWwpO1xyXG4gICAgICBpZiAoKGlzUmlnaHQgfHwgaXNUYWIpICYmIGlkeCA9PT0gbnVtSWNvbkJ1dHRvbnMgLSAxKSB7XHJcbiAgICAgICAgaWYgKHNlYXJjaGJhciAhPSBudWxsKSB7XHJcbiAgICAgICAgICBzZWFyY2hiYXIuZm9jdXMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZ09mSXRlbXNbMF1bMF0uZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNMZWZ0ICYmIGlkeCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnN0IGcgPSBnT2ZJdGVtc1tudW1Hcm91cHMgLSAxXTtcclxuICAgICAgICBjb25zdCBnTGVuID0gZy5sZW5ndGg7XHJcbiAgICAgICAgZ1tnTGVuIC0gMV0uZm9jdXMoKTtcclxuICAgICAgfSBlbHNlIGlmIChpc0xlZnQpIHtcclxuICAgICAgICB0aGlzLmljb25CdXR0b25FbGVtZW50c1tpZHggLSAxXS5mb2N1cygpO1xyXG4gICAgICB9IGVsc2UgaWYgKGlzUmlnaHQpIHtcclxuICAgICAgICB0aGlzLmljb25CdXR0b25FbGVtZW50c1tpZHggKyAxXS5mb2N1cygpO1xyXG4gICAgICB9XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaXRlbUVsZW1lbnRzID0gZ09mSXRlbXNbZ051bV07XHJcbiAgICBjb25zdCBncmlkV2lkdGggPSB0aGlzLmdyaWRXaWR0aCQudmFsdWU7XHJcblxyXG4gICAgaWYgKHNlYXJjaGJhciAhPSBudWxsICYmIGlJZHggPCBncmlkV2lkdGggJiYgZ051bSA9PT0gMCAmJiBpc1VwKSB7XHJcbiAgICAgIHNlYXJjaGJhci5mb2N1cygpO1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgKGlzUmlnaHQgfHwgaXNUYWIpICYmXHJcbiAgICAgIGdOdW0gPT09IGdPZkl0ZW1zLmxlbmd0aCAtIDEgJiZcclxuICAgICAgaUlkeCA9PT0gaXRlbUVsZW1lbnRzLmxlbmd0aCAtIDFcclxuICAgICkge1xyXG4gICAgICBjb25zdCBpY29uQnV0dG9ucyA9IHRoaXMuaWNvbkJ1dHRvbkVsZW1lbnRzO1xyXG4gICAgICBpZiAoaWNvbkJ1dHRvbnMgIT0gbnVsbCAmJiBpY29uQnV0dG9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgaWNvbkJ1dHRvbnNbMF0uZm9jdXMoKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHNlYXJjaGJhciAhPSBudWxsICYmIHNlYXJjaGJhciA9PT0gYWN0aXZlRWwgJiYgaXNEb3duKSB7XHJcbiAgICAgIGdPZkl0ZW1zWzBdWzBdLmZvY3VzKCk7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9IGVsc2UgaWYgKGdOdW0gIT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBuZXh0R3JvdXAgPSBnTnVtID09PSBnT2ZJdGVtcy5sZW5ndGggLSAxID8gdW5kZWZpbmVkIDogZ09mSXRlbXNbZ051bSArIDFdO1xyXG4gICAgICBjb25zdCBwcmV2R3JvdXAgPSBnTnVtID09PSAwID8gdW5kZWZpbmVkIDogZ09mSXRlbXNbZ051bSAtIDFdO1xyXG5cclxuICAgICAgY29uc3QgbkdMZW4gPSBuZXh0R3JvdXAgPT0gbnVsbCA/IDAgOiBuZXh0R3JvdXAubGVuZ3RoO1xyXG4gICAgICBjb25zdCBwR0xlbiA9IHByZXZHcm91cCA9PSBudWxsID8gMCA6IHByZXZHcm91cC5sZW5ndGg7XHJcblxyXG4gICAgICBjb25zdCBrZXlib2FyZE5hdmlnYXRvciA9IG5ldyBLZXlib2FyZE5hdmlnYXRvcihpdGVtRWxlbWVudHMubGVuZ3RoLCBncmlkV2lkdGgpO1xyXG4gICAgICBjb25zdCBpdGVtSW5kZXhUb01vdmVUbyA9IGtleWJvYXJkTmF2aWdhdG9yLm5hdmlnYXRlKGlJZHgsIGV2ZW50LmtleSwgbkdMZW4sIHBHTGVuKTtcclxuICAgICAgaWYgKGl0ZW1JbmRleFRvTW92ZVRvICE9IG51bGwpIHtcclxuICAgICAgICBpZiAoKGlzVXAgfHwgaXNMZWZ0KSAmJiBpdGVtSW5kZXhUb01vdmVUbyA8IDApIHtcclxuICAgICAgICAgIHByZXZHcm91cFtpdGVtSW5kZXhUb01vdmVUbyArIHBHTGVuXS5mb2N1cygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKGlzRG93biB8fCBpc1JpZ2h0KSAmJiBpSWR4ICsgMSA+IGl0ZW1JbmRleFRvTW92ZVRvKSB7XHJcbiAgICAgICAgICBuZXh0R3JvdXBbaXRlbUluZGV4VG9Nb3ZlVG9dLmZvY3VzKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGdPZkl0ZW1zW2dOdW1dW2l0ZW1JbmRleFRvTW92ZVRvXS5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIG9uUXVlcnlDaGFuZ2UoZXZlbnQ6IGFueSkge1xyXG4gICAgdGhpcy5zZWFyY2hRdWVyeUNoYW5nZS5lbWl0KGV2ZW50LmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIG9uU2VhcmNoKGV2ZW50OiBhbnkpIHtcclxuICAgIHRoaXMuc2VhcmNoLmVtaXQoZXZlbnQuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0dXBSZWZlcmVuY2VWYXJzKCk6IHZvaWQge1xyXG4gICAgbGV0IG1heCA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IGcgb2YgdGhpcy5ncm91cHMpIHtcclxuICAgICAgY29uc3QgaXRlbVN6ID0gZy5pdGVtcy5sZW5ndGg7XHJcbiAgICAgIGlmIChtYXggPCBpdGVtU3opIHtcclxuICAgICAgICBtYXggPSBpdGVtU3o7XHJcbiAgICAgICAgdGhpcy5sYXJnZXN0SXRlbXNJbmRleCA9IHRoaXMuZ3JvdXBzLmluZGV4T2YoZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMubWF4SXRlbXMgPSBtYXg7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldE1hcmdpbkFuZElsbHVzdHJhdGlvbigpIHtcclxuICAgIHRoaXMudG9wTWFyZ2luTmVlZGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5jb250ZW50SGFzU2Nyb2xsID0gZmFsc2U7XHJcbiAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5ncm91cHNDb250YWluZXIubmF0aXZlRWxlbWVudDtcclxuICAgIHRoaXMuY29udGVudEhhc1Njcm9sbCA9IGNvbnRlbnQuc2Nyb2xsSGVpZ2h0ID4gY29udGVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICB0aGlzLnRvcE1hcmdpbk5lZWRlZCA9ICF0aGlzLmNvbnRlbnRIYXNTY3JvbGwgJiYgdGhpcy5zaG93U2VhcmNoQmFyXHJcbiAgICB0aGlzLnNob3dJbGx1c3RyYXRpb24oKTtcclxuICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0R3JpZFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5sYXJnZXN0SXRlbXNJbmRleCA8IDApIHtcclxuICAgICAgdGhpcy5zZXR1cFJlZmVyZW5jZVZhcnMoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5ncm91cHNPZkl0ZW1zW3RoaXMubGFyZ2VzdEl0ZW1zSW5kZXhdO1xyXG4gICAgY29uc3QgZmlyc3RJdGVtT2Zmc2V0VG9wID0gaXRlbXNbMF0ub2Zmc2V0VG9wO1xyXG5cclxuICAgIGxldCBpID0gMDtcclxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xyXG4gICAgICBpZiAoaXRlbS5vZmZzZXRUb3AgPiBmaXJzdEl0ZW1PZmZzZXRUb3ApIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgICBpKys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXRlbXMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXR1cEZvY3VzT3JkZXJpbmcoKSB7XHJcbiAgICBjb25zdCBidXR0b25FbGVtZW50czogSFRNTEVsZW1lbnRbXSA9IHRoaXMuYnV0dG9uUmVmcy5tYXAoZWxSZWYgPT4gZWxSZWYubmF0aXZlRWxlbWVudCk7XHJcbiAgICBsZXQgZm9jdXNhYmxlRWxlbWVudHM6IEhUTUxFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgICBpZiAodGhpcy5zaG93U2VhcmNoQmFyKSB7XHJcbiAgICAgIGZvY3VzYWJsZUVsZW1lbnRzLnB1c2godGhpcy5zZWFyY2hiYXJSZWYubmF0aXZlRWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICBmb2N1c2FibGVFbGVtZW50cyA9IFsuLi5mb2N1c2FibGVFbGVtZW50cywgLi4uYnV0dG9uRWxlbWVudHMsIC4uLnRoaXMuaWNvbkJ1dHRvbkVsZW1lbnRzXTtcclxuXHJcbiAgICBmb2N1c2FibGVFbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoZXZlbnQ6IEZvY3VzRXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCB0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgIGlmICh0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2F2bC1pY29uLWJ1dHRvbicpIHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5zaG93U2VhcmNoQmFyICYmXHJcbiAgICAgICAgICAgIChbJ2JvZHknLCAnaHRtbCddLmluY2x1ZGVzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICAgICAgICAgIHRoaXMubGFzdEZvY3VzZWRFbCA9PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgKHRoaXMubGFzdEZvY3VzZWRFbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdhdmwtaWNvbi1idXR0b24nICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RGb2N1c2VkRWwgIT09IGJ1dHRvbkVsZW1lbnRzW2J1dHRvbkVsZW1lbnRzLmxlbmd0aCAtIDFdKSlcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaGJhclJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGFzdEZvY3VzZWRFbCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiICAjY29udGFpbmVyPlxyXG4gIDxkaXYgY2xhc3M9XCJ0b3AtYmFyXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XHJcbiAgICAgIDxpbWcgIGFsdD1cIltbc29sdXRpb25OYW1lXV1cIiBjbGFzcz1cInNvbHV0aW9uLWxvZ29cIiBzcmM9XCJ7e3NvbHV0aW9uSWNvblVybH19XCIgLz5cclxuICAgICAgPGgxIGNsYXNzPVwic29sdXRpb24tbmFtZVwiPnt7c29sdXRpb25OYW1lfX08L2gxPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9uLWJ1dHRvbnNcIiAjaWNvbkJ1dHRvbnM+XHJcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cInJvd1wiICpuZ0lmPVwic29sdXRpb25TdWJ0aXRsZVwiPlxyXG4gICAgICA8aDIgY2xhc3M9XCJzb2x1dGlvbi1zdWJ0aXRsZVwiPnt7c29sdXRpb25TdWJ0aXRsZX19PC9oMj5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJvdXRlci1jb250YWluZXJcIiBbbmdDbGFzc109XCJ7J3RvcC1tYXJnaW4nOiB0b3BNYXJnaW5OZWVkZWR9XCI+XHJcbiAgICA8ZGl2XHJcbiAgICAgICpuZ0lmPVwiZGlzcGxheUlsbHVzdHJhdGlvblwiXHJcbiAgICAgIFtuZ0NsYXNzXT1cInsgJ2lsbHVzdHJhdGlvbi1ob2xkZXInOiAxLCAnaGFzLXNjcm9sbGJhcic6IGNvbnRlbnRIYXNTY3JvbGwgfVwiXHJcbiAgICA+PC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwic2VhcmNoYmFyLWNvbnRhaW5lclwiIFtuZ0NsYXNzXT1cImdyaWRXaWR0aENsYXNzJCB8IGFzeW5jXCIgI3NlYXJjaGJhckNvbnRhaW5lcj5cclxuICAgICAgPGF2bC1zZWFyY2gtYmFyIGNsYXNzPVwic2VhcmNoLWJhclwiICpuZ0lmPVwic2hvd1NlYXJjaEJhclwiXHJcbiAgICAgICAgI3NlYXJjaGJhclxyXG4gICAgICAgIGFsd2F5cy1vcGVuXHJcbiAgICAgICAgKHF1ZXJ5LWNoYW5nZWQpPVwib25RdWVyeUNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAoc2VhcmNoKT1cIm9uU2VhcmNoKCRldmVudClcIj5cclxuICAgICAgPC9hdmwtc2VhcmNoLWJhcj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImdyb3Vwc1wiICNncm91cHNDb250YWluZXI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4aWJsZVwiPjwvZGl2PlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBncm91cCBvZiBncm91cHNcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JvdXAtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1jb250YWluZXJcIiAjZ3JvdXAgW25nQ2xhc3NdPVwiZ2V0TWF4Q29sdW1uc0NsYXNzKClcIj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cImdyb3VwVHBsOyBjb250ZXh0OiB7IGdyb3VwOiBncm91cCB9XCI+PC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDxkaXYgY2xhc3M9J2ZsZXhpYmxlJz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgaWQ9XCJmb290ZXJcIj5cclxuICAgICAgICA8YXZsLWZvb3RlciBjb21wYW55TG9nbz1cIi4vYXNzZXRzL2ltYWdlcy9hdmxfbG9nb19pbnZlcnNlXzQ4cHguc3ZnXCIgY3VycmVudFllYXI9XCIyMDIxXCI+IDwvYXZsLWZvb3Rlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcblxyXG48bmctdGVtcGxhdGUgI2dyb3VwVHBsIGxldC1ncm91cD1cImdyb3VwXCI+XHJcbiAgPGgyIGNsYXNzPVwiZ3JvdXAtbmFtZVwiICpuZ0lmPVwiZ3JvdXAudGl0bGVcIj57e2dyb3VwLnRpdGxlfX08L2gyPlxyXG4gIDxkaXYgY2xhc3M9XCJ0ZXh0LWNvbnRhaW5lclwiICpuZ0lmPVwiZ3JvdXAuaGVhZGVyXCI+e3tncm91cC5oZWFkZXJ9fTwvZGl2PlxyXG4gIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgZ3JvdXAuaXRlbXNcIj5cclxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpdGVtLnJvdXRlXCI+XHJcbiAgICAgIDxhIGNsYXNzPVwiaXRlbVwiXHJcbiAgICAgICAgICNpdGVtRWxlbWVudFxyXG4gICAgICAgICBbcm91dGVyTGlua109XCJpdGVtLnJvdXRlXCJcclxuICAgICAgICAgW25nQ2xhc3NdPVwieyd3aXRoLWRlc2NyaXB0aW9uJzogZ3JvdXAuZGVzY3JpcHRpb259XCJcclxuICAgICAgICAgdGFiaW5kZXg9XCIwXCI+XHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cImJ1dHRvbkNvbnRlbnQ7IGNvbnRleHQ6IHsgaXRlbTogaXRlbSB9XCI+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDwvYT5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0ubGlua1wiPlxyXG4gICAgICA8YSBjbGFzcz1cIml0ZW1cIlxyXG4gICAgICAgICAjaXRlbUVsZW1lbnRcclxuICAgICAgICAgW2F0dHIuaHJlZl09XCJpdGVtLmxpbmtcIlxyXG4gICAgICAgICBbYXR0ci50YXJnZXRdPVwiaXRlbS50YXJnZXRcIlxyXG4gICAgICAgICBbYXR0ci5yZWxdPVwiaXRlbS50YXJnZXQgPT0gJ19ibGFuaycgPyAnbm9vcGVuZXInIDogbnVsbFwiXHJcbiAgICAgICAgIFtuZ0NsYXNzXT1cInsnd2l0aC1kZXNjcmlwdGlvbic6IGdyb3VwLmRlc2NyaXB0aW9ufVwiXHJcbiAgICAgICAgIHRhYmluZGV4PVwiMFwiPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJidXR0b25Db250ZW50OyBjb250ZXh0OiB7IGl0ZW06IGl0ZW0gfVwiPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICA8L2E+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuICA8L25nLWNvbnRhaW5lcj5cclxuICA8ZGl2IGNsYXNzPVwidGV4dC1jb250YWluZXJcIiAqbmdJZj1cImdyb3VwLmZvb3RlclwiPnt7Z3JvdXAuZm9vdGVyfX08L2Rpdj5cclxuPC9uZy10ZW1wbGF0ZT5cclxuXHJcbjxuZy10ZW1wbGF0ZSAjYnV0dG9uQ29udGVudCBsZXQtaXRlbT1cIml0ZW1cIj5cclxuICA8ZGl2IGNsYXNzPVwiaWNvbi1jb250YWluZXJcIiBbbmdDbGFzc109XCJ7J25vLWljb24tY2lyY2xlJzogaXRlbS5ub0ljb25DaXJjbGV9XCI+XHJcbiAgICA8YXZsLWljb25cclxuICAgICAgKm5nSWY9XCJpdGVtLmljb25cIlxyXG4gICAgICBjbGFzcz1cIml0ZW0taWNvblwiXHJcbiAgICAgIFtpY29uXT1cIml0ZW0uaWNvblwiPlxyXG4gICAgPC9hdmwtaWNvbj5cclxuICAgIDxpbWcgIGFsdD1cIltbaXRlbS5sYWJlbF1dXCIgKm5nSWY9XCJpdGVtLmljb25VcmxcIiBjbGFzcz1cIml0ZW0taWNvblwiIHNyYz1cInt7aXRlbS5pY29uVXJsfX1cIiAvPlxyXG4gIDwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJpY29uLWxhYmVsXCI+PHNwYW4gY2xhc3M9XCJsYWJlbFwiPnt7aXRlbS5sYWJlbH19PC9zcGFuPjwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJkZXNjcmlwdGlvblwiPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJ0ZXh0XCI+XHJcbiAgICAgIHt7aXRlbS5kZXNjcmlwdGlvbn19XHJcbiAgICA8L3NwYW4+XHJcbiAgPC9kaXY+XHJcbjwvbmctdGVtcGxhdGU+XHJcblxyXG5cclxuIl19