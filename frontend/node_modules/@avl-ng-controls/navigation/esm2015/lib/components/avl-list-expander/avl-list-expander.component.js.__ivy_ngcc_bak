var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, HostListener, Output, EventEmitter } from '@angular/core';
let AvlListExpanderComponent = class AvlListExpanderComponent {
    constructor() {
        /**
         * Boolean that changes modes between wide and narrow, false by default.
         */
        this.narrow = false;
        this._open = false;
        /**
         * Event that emits when the expander is opened or closed.
         * Sends boolean value of new open state.
         */
        this.openChange = new EventEmitter();
    }
    /**
     * Boolean that tells whether the expander is open or closed, expander is closed by default.
     */
    set open(value) {
        this._open = value;
        this.openChange.emit(this._open);
    }
    get open() {
        return this._open;
    }
    toggleClick() {
        this.open = !this.open;
    }
    /** @hidden */
    keyEvent(event) {
        const activeEl = document.activeElement;
        if (event.key === ' ' || event.key === 'Enter') {
            activeEl.click();
            return;
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AvlListExpanderComponent.prototype, "narrow", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AvlListExpanderComponent.prototype, "open", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AvlListExpanderComponent.prototype, "openChange", void 0);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], AvlListExpanderComponent.prototype, "keyEvent", null);
AvlListExpanderComponent = __decorate([
    Component({
        selector: 'avl-list-expander',
        template: "<hr/>\r\n<div id=\"expander\">\r\n    <div  [ngClass]=\"narrow ? 'title-container-narrow' : 'title-container'\" tabindex=\"0\" (click)=\"toggleClick()\">\r\n        <div [ngClass]=\"narrow ? 'icon-narrow' : 'icon'\" *ngIf=\"!open\">\r\n            <avl-icon icon=\"hardware:keyboard-arrow-down\" id=\"starsIcon\"></avl-icon>\r\n        </div>\r\n        <div [ngClass]=\"narrow ? 'icon-narrow' : 'icon'\" *ngIf=\"open\">\r\n            <avl-icon icon=\"hardware:keyboard-arrow-up\" id=\"starsIcon\"></avl-icon>\r\n        </div>\r\n        <div [ngClass]=\"narrow ? 'title-narrow' : 'title'\">\r\n            <ng-content select=\"div[role=header]\"></ng-content>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"open\" [ngClass]=\"narrow ? 'content-narrow' : 'content'\">\r\n        <ng-content select=\"div[role=content]\"></ng-content>\r\n    </div>\r\n</div>\r\n\r\n",
        styles: [".title-container:hover{background-color:var(--avl-list-expander-header-hover-color,var(--avl-ink-default-hover-color))}.title-container:focus{background-color:var(--avl-list-expander-header-focus-color,var(--avl-ink-default-focus-color));outline:0}.title-container:active{background-color:var(--avl-list-expander-header-pressed-color,var(--avl-ink-default-pressed-color))}.title-container{height:48px;display:flex;flex-flow:row;align-items:center;cursor:pointer}.title{font-size:17px;color:var(--avl-list-expander-title-color,var(--avl-foreground-color))}.icon{margin:12px 12px 12px 24px;height:24px}.content{margin:4px 24px}hr{display:block;border:0;border-top:1px solid var(--avl-list-expander-divider-color,var(--avl-divider-color));margin:0}avl-icon{--avl-icon-custom-color:var(--avl-list-expander-icon-color, var(--avl-hint-color))}.icon-narrow{margin:16px 24px 16px 16px;position:absolute;right:0;bottom:0;height:24px}.title-container-narrow{position:relative;height:56px;display:flex;flex-flow:row;align-items:center;cursor:pointer}.content-narrow{margin:0 24px 24px}.title-narrow{margin-left:24px;font-size:17px;margin-right:64px;white-space:nowrap;overflow:hidden}.title-container-narrow:hover{background-color:var(--avl-list-expander-header-hover-color,var(--avl-ink-default-hover-color))}.title-container-narrow:focus{background-color:var(--avl-list-expander-header-focus-color,var(--avl-ink-default-focus-color));outline:0}.title-container-narrow:active{background-color:var(--avl-list-expander-header-pressed-color,var(--avl-ink-default-pressed-color))}"]
    }),
    __metadata("design:paramtypes", [])
], AvlListExpanderComponent);
export { AvlListExpanderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWxpc3QtZXhwYW5kZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1uZy1jb250cm9scy9uYXZpZ2F0aW9uLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYXZsLWxpc3QtZXhwYW5kZXIvYXZsLWxpc3QtZXhwYW5kZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3JGLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0lBNkNqQztRQTNCQTs7V0FFRztRQUVILFdBQU0sR0FBWSxLQUFLLENBQUM7UUFHaEIsVUFBSyxHQUFHLEtBQUssQ0FBQztRQWN0Qjs7O1dBR0c7UUFDTyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQUVwQyxDQUFDO0lBbkJoQjs7T0FFRztJQUVILElBQUksSUFBSSxDQUFDLEtBQWM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQVVELFdBQVc7UUFDUCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRUQsY0FBYztJQUVkLFFBQVEsQ0FBQyxLQUFvQjtRQUN6QixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBNEIsQ0FBQztRQUN2RCxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQzVDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixPQUFPO1NBQ1Y7SUFDTCxDQUFDO0NBQ0osQ0FBQTtBQXRDRztJQURDLEtBQUssRUFBRTs7d0RBQ2dCO0FBUXhCO0lBREMsS0FBSyxFQUFFOzs7b0RBSVA7QUFVUztJQUFULE1BQU0sRUFBRTs7NERBQTBDO0FBVW5EO0lBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztxQ0FDcEIsYUFBYTs7d0RBTTVCO0FBM0RRLHdCQUF3QjtJQUxwQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLHczQkFBaUQ7O0tBRXBELENBQUM7O0dBQ1csd0JBQXdCLENBNERwQztTQTVEWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBIb3N0TGlzdGVuZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXZsLWxpc3QtZXhwYW5kZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2F2bC1saXN0LWV4cGFuZGVyLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2F2bC1saXN0LWV4cGFuZGVyLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsTGlzdEV4cGFuZGVyQ29tcG9uZW50IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiAjIyMgU3R5bGluZ1xyXG4gICAgICogVGhlIGZvbGxvd2luZyBjdXN0b20gcHJvcGVydGllcyBhcmUgYXZhaWxhYmxlIGZvciBzdHlsaW5nOlxyXG4gICAgICpcclxuICAgICAqIEN1c3RvbSBwcm9wZXJ0eSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVmYXVsdFxyXG4gICAgICogOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBgLS1hdmwtbGlzdC1leHBhbmRlci1oZWFkZXItaG92ZXItY29sb3JgICAgICAgIHwgSGVhZGVyIGJhY2tncm91bmQgY29sb3Igd2hlbiBob3ZlcmVkICB8IGAtLWF2bC1pbmstZGVmYXVsdC1ob3Zlci1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1saXN0LWV4cGFuZGVyLWhlYWRlci1mb2N1cy1jb2xvcmAgICAgICAgfCBIZWFkZXIgYmFja2dyb3VuZCBjb2xvciB3aGVuIGZvY3VzZWQgIHwgYC0tYXZsLWluay1kZWZhdWx0LWZvY3VzLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWxpc3QtZXhwYW5kZXItaGVhZGVyLXByZXNzZWQtY29sb3JgICAgICB8IEhlYWRlciBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gcHJlc3NlZCAgfCBgLS1hdmwtaW5rLWRlZmF1bHQtcHJlc3NlZC1jb2xvcmBcclxuICAgICAqIGAtLWF2bC1saXN0LWV4cGFuZGVyLWRpdmlkZXItY29sb3JgICAgICAgICAgICAgfCBEaXZpZGVyIGNvbG9yICAgICAgICAgICAgICAgICAgICAgICAgIHwgYC0tYXZsLWRpdmlkZXItY29sb3JgXHJcbiAgICAgKiBgLS1hdmwtbGlzdC1leHBhbmRlci10aXRsZS1jb2xvcmAgICAgICAgICAgICAgIHwgVGl0bGUgY29sb3IgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGAtLWF2bC1pbmstZGVmYXVsdC1wcmVzc2VkLWNvbG9yYFxyXG4gICAgICogYC0tYXZsLWxpc3QtZXhwYW5kZXItaWNvbi1jb2xvcmAgICAgICAgICAgICAgICB8IEFycm93IGljb24gY29sb3IgICAgICAgICAgICAgICAgICAgICAgfCBgLS1hdmwtZGl2aWRlci1jb2xvcmBcclxuICAgICAqL1xyXG4gICAgX3N0eWxpbmc6IGFueTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJvb2xlYW4gdGhhdCBjaGFuZ2VzIG1vZGVzIGJldHdlZW4gd2lkZSBhbmQgbmFycm93LCBmYWxzZSBieSBkZWZhdWx0LlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgbmFycm93OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG5cclxuICAgIHByaXZhdGUgX29wZW4gPSBmYWxzZTtcclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB0aGF0IHRlbGxzIHdoZXRoZXIgdGhlIGV4cGFuZGVyIGlzIG9wZW4gb3IgY2xvc2VkLCBleHBhbmRlciBpcyBjbG9zZWQgYnkgZGVmYXVsdC5cclxuICAgICAqL1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBvcGVuKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fb3BlbiA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMub3BlbkNoYW5nZS5lbWl0KHRoaXMuX29wZW4pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBvcGVuKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcGVuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgdGhhdCBlbWl0cyB3aGVuIHRoZSBleHBhbmRlciBpcyBvcGVuZWQgb3IgY2xvc2VkLlxyXG4gICAgICogU2VuZHMgYm9vbGVhbiB2YWx1ZSBvZiBuZXcgb3BlbiBzdGF0ZS5cclxuICAgICAqL1xyXG4gICAgQE91dHB1dCgpIG9wZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIHRvZ2dsZUNsaWNrKCkge1xyXG4gICAgICAgIHRoaXMub3BlbiA9ICF0aGlzLm9wZW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBoaWRkZW4gKi9cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxyXG4gICAga2V5RXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVFbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnIHx8IGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICAgICAgICBhY3RpdmVFbC5jbGljaygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==