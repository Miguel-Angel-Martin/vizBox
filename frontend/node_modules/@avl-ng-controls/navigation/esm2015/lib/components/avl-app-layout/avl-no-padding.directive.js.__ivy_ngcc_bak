var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { OnInit, Directive, OnDestroy, ElementRef } from '@angular/core';
let AvlNoPaddingDirective = class AvlNoPaddingDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    /** @hidden */
    ngOnInit() {
        const appLayout = this.findAppLayout();
        if (appLayout) {
            appLayout.setAttribute('noPadding', '');
        }
    }
    /** @hidden */
    ngOnDestroy() {
        const appLayout = this.findAppLayout();
        if (appLayout) {
            appLayout.removeAttribute('noPadding');
        }
    }
    findAppLayout() {
        let element = this.elementRef.nativeElement;
        while (element) {
            if (element.tagName.toLowerCase() == 'avl-app-layout') {
                return element;
            }
            element = element.parentElement;
        }
    }
};
AvlNoPaddingDirective.ctorParameters = () => [
    { type: ElementRef }
];
AvlNoPaddingDirective = __decorate([
    Directive({
        selector: '[avl-no-padding]'
    }),
    __metadata("design:paramtypes", [ElementRef])
], AvlNoPaddingDirective);
export { AvlNoPaddingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW5vLXBhZGRpbmcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1uZy1jb250cm9scy9uYXZpZ2F0aW9uLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYXZsLWFwcC1sYXlvdXQvYXZsLW5vLXBhZGRpbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLekUsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFFaEMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFJLENBQUM7SUFFL0MsY0FBYztJQUNkLFFBQVE7UUFDTixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkMsSUFBSSxTQUFTLEVBQUU7WUFDYixTQUFTLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFRCxjQUFjO0lBQ2QsV0FBVztRQUNULE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QyxJQUFJLFNBQVMsRUFBRTtZQUNiLFNBQVMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBRU8sYUFBYTtRQUNuQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQTRCLENBQUM7UUFDM0QsT0FBTyxPQUFPLEVBQUU7WUFDZCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksZ0JBQWdCLEVBQUU7Z0JBQ3JELE9BQU8sT0FBTyxDQUFDO2FBQ2hCO1lBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7U0FDakM7SUFDSCxDQUFDO0NBRUYsQ0FBQTs7WUE1QmlDLFVBQVU7O0FBRi9CLHFCQUFxQjtJQUhqQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsa0JBQWtCO0tBQzdCLENBQUM7cUNBR2dDLFVBQVU7R0FGL0IscUJBQXFCLENBOEJqQztTQTlCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIERpcmVjdGl2ZSwgT25EZXN0cm95LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1thdmwtbm8tcGFkZGluZ10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxOb1BhZGRpbmdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gIC8qKiBAaGlkZGVuICovXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBjb25zdCBhcHBMYXlvdXQgPSB0aGlzLmZpbmRBcHBMYXlvdXQoKTtcclxuICAgIGlmIChhcHBMYXlvdXQpIHtcclxuICAgICAgYXBwTGF5b3V0LnNldEF0dHJpYnV0ZSgnbm9QYWRkaW5nJywgJycpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgY29uc3QgYXBwTGF5b3V0ID0gdGhpcy5maW5kQXBwTGF5b3V0KCk7XHJcbiAgICBpZiAoYXBwTGF5b3V0KSB7XHJcbiAgICAgIGFwcExheW91dC5yZW1vdmVBdHRyaWJ1dGUoJ25vUGFkZGluZycpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBwcml2YXRlIGZpbmRBcHBMYXlvdXQoKSB7XHJcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgd2hpbGUgKGVsZW1lbnQpIHtcclxuICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICdhdmwtYXBwLWxheW91dCcpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgfVxyXG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19