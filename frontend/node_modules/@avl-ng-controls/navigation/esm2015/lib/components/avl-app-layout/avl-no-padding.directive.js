import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { OnInit, Directive, OnDestroy, ElementRef } from '@angular/core';
let AvlNoPaddingDirective = class AvlNoPaddingDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    /** @hidden */
    ngOnInit() {
        const appLayout = this.findAppLayout();
        if (appLayout) {
            appLayout.setAttribute('noPadding', '');
        }
    }
    /** @hidden */
    ngOnDestroy() {
        const appLayout = this.findAppLayout();
        if (appLayout) {
            appLayout.removeAttribute('noPadding');
        }
    }
    findAppLayout() {
        let element = this.elementRef.nativeElement;
        while (element) {
            if (element.tagName.toLowerCase() == 'avl-app-layout') {
                return element;
            }
            element = element.parentElement;
        }
    }
};
AvlNoPaddingDirective.ɵfac = function AvlNoPaddingDirective_Factory(t) { return new (t || AvlNoPaddingDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlNoPaddingDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlNoPaddingDirective, selectors: [["", "avl-no-padding", ""]] });
AvlNoPaddingDirective.ctorParameters = () => [
    { type: ElementRef }
];
AvlNoPaddingDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlNoPaddingDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlNoPaddingDirective, [{
        type: Directive,
        args: [{
                selector: '[avl-no-padding]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
export { AvlNoPaddingDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW5vLXBhZGRpbmcuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1uZy1jb250cm9scy9uYXZpZ2F0aW9uL2xpYi9jb21wb25lbnRzL2F2bC1hcHAtbGF5b3V0L2F2bC1uby1wYWRkaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUt6RSxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtBQUFHLElBRW5DLFlBQW9CLFVBQXNCO0FBQUksUUFBMUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLElBQUcsQ0FBQztBQUNqRCxJQUNFLGNBQWM7QUFDaEIsSUFBRSxRQUFRO0FBQ1YsUUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDM0MsUUFBSSxJQUFJLFNBQVMsRUFBRTtBQUNuQixZQUFNLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzlDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLGNBQWM7QUFDaEIsSUFBRSxXQUFXO0FBQ2IsUUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDM0MsUUFBSSxJQUFJLFNBQVMsRUFBRTtBQUNuQixZQUFNLFNBQVMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDN0MsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ1UsYUFBYTtBQUN2QixRQUFJLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBNEIsQ0FBQztBQUMvRCxRQUFJLE9BQU8sT0FBTyxFQUFFO0FBQ3BCLFlBQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLGdCQUFnQixFQUFFO0FBQzdELGdCQUFRLE9BQU8sT0FBTyxDQUFDO0FBQ3ZCLGFBQU87QUFDUCxZQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3RDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxDQUNDOztnSUFBQTtBQUNEO0FBQStDLFlBN0JiLFVBQVU7QUFBRztBQUZsQyxxQkFBcUIsb0JBSGpDLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRSxuQ0FFUixrQ0FFOEIsVUFBVTtNQUpkLE1BQzdCLENBQUMsYkFHNkMsR0FGbEMscUJBQXFCLENBOEJqQzs7Ozs7OzJFQUNEOztBQXBDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUE1QkEsQUFBQSxBQUZBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBRkEsQUFBQSxBQThCQSxBQTlCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBEaXJlY3RpdmUsIE9uRGVzdHJveSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbYXZsLW5vLXBhZGRpbmddJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsTm9QYWRkaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxyXG5cclxuICAvKiogQGhpZGRlbiAqL1xyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgY29uc3QgYXBwTGF5b3V0ID0gdGhpcy5maW5kQXBwTGF5b3V0KCk7XHJcbiAgICBpZiAoYXBwTGF5b3V0KSB7XHJcbiAgICAgIGFwcExheW91dC5zZXRBdHRyaWJ1dGUoJ25vUGFkZGluZycsICcnKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLyoqIEBoaWRkZW4gKi9cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGNvbnN0IGFwcExheW91dCA9IHRoaXMuZmluZEFwcExheW91dCgpO1xyXG4gICAgaWYgKGFwcExheW91dCkge1xyXG4gICAgICBhcHBMYXlvdXQucmVtb3ZlQXR0cmlidXRlKCdub1BhZGRpbmcnKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcHJpdmF0ZSBmaW5kQXBwTGF5b3V0KCkge1xyXG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcclxuICAgIHdoaWxlIChlbGVtZW50KSB7XHJcbiAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnYXZsLWFwcC1sYXlvdXQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==