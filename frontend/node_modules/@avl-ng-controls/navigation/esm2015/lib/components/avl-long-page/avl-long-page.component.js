import { Component, ViewEncapsulation, ContentChildren, Inject, PLATFORM_ID } from '@angular/core';
import { AvlParagraphDirective } from './avl-paragraph.directive';
import { NavigationEnd } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
* avl-long-page should only be used inside avl-app-layout. The only scrollable container should
* be avl-app-layout (already set by default) and avl-long-page and components that are using it must
* not scroll in order for avl-long-page to work properly.
*/
export class AvlLongPageComponent {
    /**
    * @hidden
    */
    constructor(router, renderer, platformId) {
        this.router = router;
        this.renderer = renderer;
        this.platformId = platformId;
        this.scrollListener = (event) => {
            let newParagraph;
            if (this.scrollContainer.scrollHeight < Math.round(this.scrollContainer.scrollTop + this.scrollContainer.getBoundingClientRect().height)) {
                newParagraph = this.paragraphs.last;
            }
            else {
                this.paragraphs.forEach(paragraph => {
                    const p = paragraph.elementRef.nativeElement;
                    const rect = p.getBoundingClientRect();
                    if (rect.top < window.innerHeight * 0.1) {
                        newParagraph = paragraph;
                    }
                });
            }
            if (newParagraph) {
                this.currentFragment = newParagraph.paragraphName;
                this.router.navigate([], { queryParamsHandling: 'preserve', fragment: newParagraph.paragraphName });
            }
        };
    }
    handleRouteChange() {
        const paragraphName = this.router.parseUrl(this.router.url).fragment;
        const paragraph = this.paragraphs.find(p => p.paragraphName === paragraphName);
        if (this.currentFragment === paragraphName) {
            return;
        }
        if (paragraph) {
            setTimeout(() => paragraph.elementRef.nativeElement.scrollIntoView({ behavior: 'instant', block: 'start', inline: 'nearest' }), 0);
        }
    }
    /**
    * @hidden
    */
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.scrollContainer = document.querySelector('avl-app-layout main');
            this.scrollSubscription = this.renderer.listen(this.scrollContainer, 'scroll', this.scrollListener);
        }
        this.handleRouteChange();
        this.routerSubscription = this.router.events.subscribe(newRoute => {
            if (newRoute instanceof NavigationEnd) {
                this.handleRouteChange();
            }
        });
        this.paragraphsSubscription = this.paragraphs.changes.subscribe(_ => {
            /* if scrollIntoView has not occured yet try it with new paragraphs
               this is needed for components which render content (paragraphs)
               after view has been initialized
            */
            if (!this.currentFragment) {
                this.handleRouteChange();
            }
        });
    }
    /**
    * @hidden
    */
    ngOnDestroy() {
        if (this.routerSubscription) {
            this.routerSubscription.unsubscribe();
        }
        if (this.paragraphsSubscription) {
            this.paragraphsSubscription.unsubscribe();
        }
        if (this.scrollSubscription) {
            this.scrollSubscription();
        }
    }
}
AvlLongPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlLongPageComponent, deps: [{ token: i1.Router }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
AvlLongPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.3", type: AvlLongPageComponent, selector: "avl-long-page", queries: [{ propertyName: "paragraphs", predicate: AvlParagraphDirective }], ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{font-family:var(--avl-font-family)}"], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: AvlLongPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'avl-long-page',
                    templateUrl: './avl-long-page.component.html',
                    styleUrls: [
                        './avl-long-page.component.css'
                    ],
                    encapsulation: ViewEncapsulation.None
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i0.Renderer2 }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { paragraphs: [{
                type: ContentChildren,
                args: [AvlParagraphDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,