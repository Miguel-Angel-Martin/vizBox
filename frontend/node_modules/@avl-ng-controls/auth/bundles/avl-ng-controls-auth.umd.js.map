{"version":3,"file":"avl-ng-controls-auth.umd.js","sources":["ng:/@avl-ng-controls/auth/lib/variables.ts","ng:/@avl-ng-controls/auth/lib/services/avl-auth.service.ts","ng:/@avl-ng-controls/auth/lib/services/token-pending.ts","ng:/@avl-ng-controls/auth/lib/services/storage-names.ts","ng:/@avl-ng-controls/auth/lib/services/token-storage.ts","ng:/@avl-ng-controls/auth/lib/services/avl-oidc-code-auth.service.ts","ng:/@avl-ng-controls/auth/lib/services/avl-token.interceptor.ts"],"names":["InjectionToken","BehaviorSubject","HttpClient","Observable","distinctUntilKeyChanged","skipWhile","map","take","HttpHeaders","catchError","CryptoJS.enc","CryptoJS.lib","CryptoJS.SHA256","HttpBackend","Inject","Router","Location","Injectable","from","switchMap","throwError","__param"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface AuthConfig { \r\n  tokenUrl: string;\r\n  loginUrl: string;\r\n  refreshUrl?: string;\r\n  loginUrlParamRedirect: string;\r\n  loginUrlParamChallenge: string;\r\n  loginUrlParamNonce: string;\r\n  logoutUrl?: string;\r\n  logoutUrlParamIdToken?: string;\r\n  logoutUrlParamRedirect?: string;\r\n  requiredRole?: string;\r\n  tokenPrefix?: string;\r\n}\r\n\r\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>(undefined);\r\n\r\nexport const INTERCEPTOR_BASE_PATHS = new InjectionToken<string[]>(undefined);","import { Observable, BehaviorSubject } from 'rxjs';\r\nimport { User } from '../user.model';\r\nexport abstract class AvlAuthService {\r\n  /**\r\n   * User data is held in this property\r\n   */\r\n  protected userSubject = new BehaviorSubject<User>(undefined);\r\n\r\n  /**\r\n   * Current user as Observable\r\n   */\r\n  public user$: Observable<User> = this.userSubject.asObservable();\r\n\r\n  /**\r\n   * String holding error message in case user couldn't authenticate\r\n   */\r\n  protected errorMessageSubject = new BehaviorSubject<string>(undefined);\r\n\r\n  /**\r\n   * Error messsage in case failed authentication as Observable\r\n   */\r\n  public errorMessage$: Observable<string> = this.errorMessageSubject.asObservable();\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public abstract isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public abstract redirectedFromLogIn: BehaviorSubject<boolean>;\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after succesful authentication\r\n   */\r\n  public abstract login(redirectUrl?: string): void;\r\n\r\n  /**\r\n  * If tokens are peristed in local storage, set current user data\r\n  */\r\n  public abstract reloadPersistedUserData(): void;\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  public abstract logout(redirectUrl?: string): void;\r\n\r\n  /**\r\n   * Currently authenticated user data\r\n   */\r\n  public get currentUser(): User {\r\n    return this.userSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Current error message for fail authentication\r\n   * Undefined when user is logged in\r\n   */\r\n  public get errorMessage(): string {\r\n    return this.errorMessageSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Use to clear error message after user is informed\r\n   */\r\n  public clearErrorMessage() {\r\n    this.errorMessageSubject.next(undefined);\r\n  }\r\n\r\n  /**\r\n   * For token based authetication.\r\n   * Provide functionality to refresh tokens\r\n   */\r\n  public refreshTokens?(): Promise<any>;\r\n\r\n  /**\r\n   * For token based authetication.\r\n   * Updates user authentication with refresh tokens\r\n   */\r\n   public abstract refreshUserIfNeeded(): void;\r\n\r\n  /**\r\n  * Read user from session storage\r\n  */\r\n   public abstract readUserFromSessionStorage(): User;\r\n\r\n  /**\r\n  * Store user to session storage\r\n  */\r\n   public abstract storeUserToSessionStorage(user: User): void;\r\n   \r\n  /**\r\n  * Clear user from session storage\r\n  */\r\n   public abstract clearUserFromSessionStorage(): void;\r\n}\r\n","export class TokensPending {\r\n  success?: boolean;\r\n  waiting?: boolean;\r\n  constructor(waiting?: boolean, success?: boolean) {\r\n    this.waiting = waiting;\r\n    this.success = success;\r\n  }\r\n}\r\n","export enum StorageNames {\r\n  AccessToken = 'access_token',\r\n  AccessTokenExpiresAt = 'access_token_expires_at',\r\n  AccessTokenStoredAt = 'access_token_stored_at',\r\n  RefreshToken = 'refresh_token',\r\n  RefreshTokenExpiresAt = 'refresh_token_expires_at',\r\n  IdToken = 'id_token',\r\n  Roles = 'roles',\r\n  UserName = 'username',\r\n  Name = 'name'\r\n}\r\n","import { User } from '../user.model';\r\nimport { StorageNames } from './storage-names';\r\n\r\nexport class TokenStorage {\r\n  private prefix = '';\r\n\r\n  constructor(prefix: string = '') {\r\n    this.prefix = prefix;\r\n  }\r\n\r\n  readUser(): User {\r\n    const roles = JSON.parse(this.getItem(StorageNames.Roles)) as string[];\r\n    return {\r\n      username: this.getItem(StorageNames.UserName),\r\n      name: this.getItem(StorageNames.Name),\r\n      access_token: this.getItem(StorageNames.AccessToken),\r\n      access_token_expires: this.getNumber(StorageNames.AccessTokenExpiresAt),\r\n      access_token_stored: this.getNumber(StorageNames.AccessTokenStoredAt),\r\n      refresh_token: this.getItem(StorageNames.RefreshToken),\r\n      refresh_token_expires: this.getNumber(StorageNames.RefreshTokenExpiresAt),\r\n      id_token: this.getItem(StorageNames.IdToken),\r\n      roles\r\n    };\r\n  }\r\n\r\n  storeUser(user: User) {\r\n    this.setItem(StorageNames.UserName, user.username);\r\n    this.setItem(StorageNames.Name, user.name);\r\n    this.setItem(StorageNames.AccessToken, user.access_token);\r\n    this.setItem(StorageNames.AccessTokenExpiresAt, `${user.access_token_expires}`);\r\n    this.setItem(StorageNames.AccessTokenStoredAt, `${user.access_token_stored}`);\r\n    this.setItem(StorageNames.RefreshToken, user.refresh_token);\r\n    this.setItem(StorageNames.RefreshTokenExpiresAt, `${user.refresh_token_expires}`);\r\n    this.setItem(StorageNames.IdToken, user.id_token);\r\n\r\n    const rolesStr = JSON.stringify(user.roles);\r\n    sessionStorage.setItem(StorageNames.Roles, `${rolesStr}`);\r\n  }\r\n\r\n  clearUser() {\r\n    for (const name in StorageNames) {\r\n      if (StorageNames.hasOwnProperty(name)) {\r\n        this.removeItem(StorageNames[name]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getNumber(key: string): number {\r\n    return parseInt(this.getItem(key), 10);\r\n  }\r\n\r\n  getItem(key: string): string {\r\n    return sessionStorage.getItem(this.prefix + key);\r\n  }\r\n\r\n  setItem(key: string, value: string): void {\r\n    sessionStorage.setItem(this.prefix + key, value);\r\n  }\r\n\r\n  removeItem(key: string): void {\r\n    sessionStorage.removeItem(this.prefix + key);\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { map, take, distinctUntilKeyChanged, skipWhile, catchError } from 'rxjs/operators';\r\n\r\nimport * as CryptoJS from 'crypto-js';\r\n\r\nimport { User } from '../user.model';\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { AUTH_CONFIG, AuthConfig } from '../variables';\r\nimport { TokensPending } from './token-pending';\r\nimport { TokenStorage } from './token-storage';\r\nimport { TokenResponse } from './token-response';\r\nimport { StorageNames } from './storage-names';\r\nimport { TokenClaims } from './token-claims';\r\n\r\nconst LOGOUT_CONFIG_NOT_SET_ERROR =\r\n  'User signed out locally, but logout request towards OIDC server not initiated since logoutUrl is not set in authConfig.';\r\n\r\n@Injectable()\r\nexport class AvlOidcCodeAuthService extends AvlAuthService {\r\n  // success will be set after tokens are successfully fetched or not\r\n  private tokensPendingSubject = new BehaviorSubject<TokensPending>(new TokensPending(false));\r\n\r\n  /**\r\n   * When fetching tokens, this observable changes\r\n   * @returns Observable with following context:\r\n   * - waiting - if true, request for new tokens is made, this happens on initial authentication and on refreshTokens\r\n   * - success - true for successful authentication\r\n   */\r\n  public tokensPending$: Observable<TokensPending>;\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n\r\n  private http: HttpClient;\r\n  private storage: TokenStorage;\r\n\r\n  constructor(\r\n    private httpBackend: HttpBackend,\r\n    @Inject(AUTH_CONFIG) private authConfig: AuthConfig,\r\n    private router: Router,\r\n    private loc: Location\r\n  ) {\r\n    super();\r\n\r\n    this.http = new HttpClient(this.httpBackend);\r\n\r\n    this.tokensPending$ = this.tokensPendingSubject.asObservable();\r\n    this.isLoggedIn$ = new Observable<boolean>(observer => {\r\n      const tokensPendingState = this.tokensPendingSubject.value;\r\n      this.tokensPending$\r\n        .pipe(\r\n          distinctUntilKeyChanged('waiting'),\r\n          skipWhile(tokenPending => tokenPending.waiting !== false),\r\n          map(tokenPending => {\r\n            if (tokenPending.success != null) {\r\n              observer.next(tokenPending.success);\r\n            }\r\n          }),\r\n          take(1)\r\n        )\r\n        .subscribe();\r\n      if (tokensPendingState.waiting !== true && tokensPendingState.success !== null) {\r\n        observer.next(this.currentUser != null && this.isAccessTokenValid());\r\n      }\r\n    });\r\n\r\n    this.storage = new TokenStorage(this.authConfig.tokenPrefix);\r\n    const user = this.storage.readUser();\r\n\r\n    if (this.isUserInvalid(user)) {\r\n      this.storage.clearUser();\r\n    } else {\r\n      this.persistUser(user);\r\n    }\r\n\r\n    // if user is not logged in and pkce exists handle redirect from oidc server if possible\r\n    if (this.currentUser == null && this.pkce) {\r\n      this.handleOidcRedirect();\r\n    } else {\r\n      this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n    }\r\n  }\r\n\r\n  private isUserInvalid(data: Partial<User>): boolean {\r\n    return (\r\n      data.username == null || data.access_token == null || data.access_token_expires < Date.now()\r\n    );\r\n  }\r\n\r\n  private get pkce(): string | undefined {\r\n    return this.storage.getItem('pkce') || undefined;\r\n  }\r\n  private set pkce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('pkce', c);\r\n    } else {\r\n      this.storage.removeItem('pkce');\r\n    }\r\n  }\r\n\r\n  private get nonce(): string | undefined {\r\n    return sessionStorage.getItem('nonce') || undefined;\r\n  }\r\n  private set nonce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('nonce', c);\r\n    } else {\r\n      this.storage.removeItem('nonce');\r\n    }\r\n  }\r\n\r\n  private isAccessTokenValid(): boolean {\r\n    return Date.now() < this.currentUser.access_token_expires;\r\n  }\r\n\r\n  private persistUser(user?: User): void {\r\n    if (!user) {\r\n      this.clearUser();\r\n      return;\r\n    }\r\n    this.storage.storeUser(user);\r\n    this.userSubject.next(user);\r\n  }\r\n\r\n  private clearUser(): void {\r\n    this.storage.clearUser();\r\n    this.userSubject.next(undefined);\r\n  }\r\n\r\n  /*\r\n   * Checks if current url is redirect from oidc server and gets access token from the server.\r\n   */\r\n  private async handleOidcRedirect() {\r\n    const pkce = this.pkce;\r\n    this.pkce = undefined;\r\n\r\n    const urlParts = this.loc.path(true).split('?', 2);\r\n    let urlHash: string;\r\n    let first: number;\r\n    let last: number;\r\n    let urlPartSplit: string[];\r\n\r\n    if (urlParts.length === 2) {\r\n      first = urlParts[1].lastIndexOf('#');\r\n      if (first !== -1) {\r\n        last = urlParts[1].lastIndexOf('&');\r\n        urlHash = urlParts[1].slice(first, last);\r\n        urlPartSplit = urlParts[1].split('#', 2);\r\n        urlParts[1] = urlParts[1].split('&').pop();\r\n        urlParts[1] = urlPartSplit[0].concat('&').concat(urlParts[1]);\r\n      }\r\n    }\r\n\r\n    let query = urlParts.length === 2 ? this.parseQueryString(urlParts[1]) : [];\r\n    let queryCode: string;\r\n    for (let i = query.length - 1; i >= 0; i--) {\r\n      if (query[i].key === 'code') {\r\n        queryCode = query[i].value;\r\n        query = [...query.slice(0, i), ...query.slice(i + 1)];\r\n        break;\r\n      }\r\n    }\r\n    if (urlParts.length === 2 && queryCode) {\r\n      const nonce = this.nonce;\r\n      this.nonce = undefined;\r\n\r\n      const httpOptions = {\r\n        headers: new HttpHeaders({\r\n          code: queryCode,\r\n          verifier: pkce,\r\n          nonce: nonce\r\n        })\r\n      };\r\n\r\n      this.updateTokensPending(new TokensPending(true));\r\n      try {\r\n        const user = await this.http\r\n          .post<TokenResponse>(this.authConfig.tokenUrl, {}, httpOptions)\r\n          .pipe(map(token => this.readUserFromToken(token)))\r\n          .toPromise();\r\n        this.persistUser(user);\r\n        this.updateTokensPending(new TokensPending(false, true));\r\n      } catch (error) {\r\n        this.updateTokensPending(new TokensPending(false, false), error.message);\r\n      }\r\n    }\r\n\r\n    if (urlHash) {\r\n      this.router.navigateByUrl(\r\n        `${urlParts[0]}${this.reconstructQueryParamString(query)}${urlHash}`,\r\n        { replaceUrl: true }\r\n      );\r\n      this.redirectedFromLogIn.next(true);\r\n    } else {\r\n      this.router.navigateByUrl(`${urlParts[0]}${this.reconstructQueryParamString(query)}`, {\r\n        replaceUrl: true\r\n      });\r\n      this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n    }\r\n  }\r\n\r\n  public reloadPersistedUserData() {\r\n    const user = this.storage.readUser();\r\n    if (this.currentUser?.access_token === user?.access_token) {\r\n      return;\r\n    }\r\n\r\n    if (this.isUserInvalid(user)) {\r\n      this.clearUser();\r\n    } else {\r\n      this.persistUser(user);\r\n    }\r\n  }\r\n  private reconstructQueryParamString(queryParams: { key: string; value: string }[]): string {\r\n    let s = '?';\r\n    if (queryParams.length === 0) {\r\n      return '';\r\n    }\r\n    for (const q of queryParams) {\r\n      if (s === '?') {\r\n        s += `${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      } else {\r\n        s += `&${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      }\r\n    }\r\n    return s;\r\n  }\r\n\r\n  private updateTokensPending(state: TokensPending, errorMessage?: string) {\r\n    // the order here is important\r\n    // errorMessage will be set before isLoggedIn becomes false\r\n    if (state.waiting === false) {\r\n      this.errorMessageSubject.next(errorMessage);\r\n    }\r\n    this.tokensPendingSubject.next(state);\r\n  }\r\n\r\n  private readUserFromToken(token: TokenResponse): User {\r\n    const accessTokenClaims = this.readClaimsFromToken(token.accesstoken);\r\n\r\n    // Calculate actual expiry date for this machine\r\n    const accessTokenStoredAt = Date.now(); // [ms]\r\n    const accessTokenExpiresAt = accessTokenStoredAt + token.expiresIn * 1000;\r\n\r\n    const refreshTokenClaims = this.readClaimsFromToken(token.refreshtoken);\r\n    let refreshTokenExpiresAt = null;\r\n    if (refreshTokenClaims) {\r\n      // If time value is 0 token lasts indefinitely\r\n      const refreshTokenExpiresIn =\r\n        refreshTokenClaims['exp'] !== 0 ? refreshTokenClaims['exp'] - refreshTokenClaims['iat'] : 0;\r\n      const refreshTokenStoredAt = accessTokenStoredAt;\r\n      refreshTokenExpiresAt =\r\n        refreshTokenExpiresIn !== 0 ? refreshTokenStoredAt + refreshTokenExpiresIn * 1000 : 0;\r\n    }\r\n\r\n    const roles = accessTokenClaims?.roles;\r\n\r\n    return {\r\n      username: accessTokenClaims.preferred_username,\r\n      name: accessTokenClaims.name ?? accessTokenClaims.preferred_username,\r\n      access_token: token.accesstoken,\r\n      access_token_expires: accessTokenExpiresAt,\r\n      access_token_stored: accessTokenStoredAt,\r\n      refresh_token: token.refreshtoken,\r\n      refresh_token_expires: refreshTokenExpiresAt,\r\n      id_token: token.idToken,\r\n      roles: roles\r\n    } as User;\r\n  }\r\n\r\n  public async refreshUserIfNeeded() {\r\n    const accessTokenExpired = this.currentUser?.access_token_expires < Date.now();\r\n    if (accessTokenExpired) {\r\n      await this.refreshTokens();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If needed, this method can be called to refresh tokens for current user\r\n   * @returns Promise resolved with object containing new tokens\r\n   */\r\n  public async refreshTokens(): Promise<any> {\r\n    const refreshTokenValid = this.currentUser?.refresh_token_expires > Date.now();\r\n    if (!refreshTokenValid) {\r\n      this.logout();\r\n      return;\r\n    }\r\n\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        grant_type: 'refresh_token',\r\n        'refresh-token': this.storage.getItem(StorageNames.RefreshToken)\r\n      })\r\n    };\r\n\r\n    if (!this.authConfig.refreshUrl) {\r\n      throw new Error('refreshUrl missing in AuthConfig');\r\n    }\r\n    this.updateTokensPending(new TokensPending(true));\r\n\r\n    try {\r\n      const user = await this.http\r\n        .post<TokenResponse>(this.authConfig.refreshUrl, {}, httpOptions)\r\n        .pipe(map(token => this.readUserFromToken(token)))\r\n        .toPromise();\r\n      this.persistUser(user);\r\n      this.updateTokensPending(new TokensPending(false, true));\r\n    } catch (error) {\r\n      this.updateTokensPending(new TokensPending(false, false), error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after successful authentication\r\n   */\r\n  public login(redirectUrl?: string): void {\r\n    location.href = this.generateLoginUrl(redirectUrl ? redirectUrl : location.href);\r\n  }\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  public logout(redirectUrl?: string): void {\r\n    const { logoutUrl } = this.authConfig;\r\n\r\n    if (!logoutUrl) {\r\n      console.warn(LOGOUT_CONFIG_NOT_SET_ERROR);\r\n    }\r\n\r\n    const headers = new HttpHeaders({ 'refresh-token': this.currentUser.refresh_token });\r\n    this.http\r\n      .post(logoutUrl, {}, { headers })\r\n      .pipe(\r\n        catchError(error => {\r\n          this.onLogout(redirectUrl);\r\n          throw error;\r\n        })\r\n      )\r\n      .subscribe(() => this.onLogout(redirectUrl));\r\n  }\r\n\r\n  private onLogout(redirectUrl?: string): void {\r\n    this.clearUser();\r\n    this.redirectIfNeeded(redirectUrl);\r\n  }\r\n\r\n  private redirectIfNeeded(redirectUrl?: string): void {\r\n    if (redirectUrl) {\r\n      this.navigateTo(redirectUrl);\r\n    } else {\r\n      this.reloadPage();\r\n    }\r\n  }\r\n\r\n  private reloadPage(): void {\r\n    window.location.reload();\r\n  }\r\n\r\n  private navigateTo(redirectUrl: string): void {\r\n    this.router.navigate([redirectUrl]);\r\n  }\r\n\r\n  private generateLoginUrl(redirectUrl: string): string {\r\n    const redirect_b64 = '' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(redirectUrl));\r\n\r\n    // Generate a session value.\r\n    const nonce = CryptoJS.lib.WordArray.random(16).toString();\r\n\r\n    // Generate pkce\r\n    const pkce = CryptoJS.lib.WordArray.random(32).toString();\r\n    const bytes = CryptoJS.SHA256(pkce) as CryptoJS.WordArray;\r\n    let pkce_hash = CryptoJS.enc.Base64.stringify(bytes);\r\n\r\n    // KeyCloak requires this - https://tools.ietf.org/html/rfc7636#appendix-A\r\n    pkce_hash = pkce_hash.replace(/=/g, '');\r\n    pkce_hash = pkce_hash.replace(/\\+/g, '-');\r\n    pkce_hash = pkce_hash.replace(/\\//g, '_');\r\n\r\n    this.pkce = pkce;\r\n    this.nonce = nonce;\r\n\r\n    let url = this.authConfig.loginUrl;\r\n    url += '?' + this.authConfig.loginUrlParamRedirect + '=' + encodeURIComponent(redirect_b64);\r\n    url += '&' + this.authConfig.loginUrlParamChallenge + '=' + encodeURIComponent(pkce_hash);\r\n    url += '&' + this.authConfig.loginUrlParamNonce + '=' + encodeURIComponent(nonce);\r\n    return url;\r\n  }\r\n\r\n  private readClaimsFromToken(token: string): TokenClaims | null {\r\n    if (!token.includes('.')) {\r\n      // Token is not a valid JWT token\r\n      return null;\r\n    }\r\n    const tokenParts = token.split('.');\r\n    const claimsString = this.b64DecodeUnicode(tokenParts[1]);\r\n    return JSON.parse(claimsString) as TokenClaims;\r\n  }\r\n\r\n  private b64DecodeUnicode(str: string): string {\r\n    const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\r\n    return decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n  }\r\n\r\n  private parseQueryString(queryString: string): { key: string; value: string }[] {\r\n    if (!queryString.length) {\r\n      return [];\r\n    }\r\n    const queryDict = [];\r\n    const pairs = queryString.split('&');\r\n    for (const pair of pairs) {\r\n      const index = pair.indexOf('=');\r\n      let key: string;\r\n      let value: string;\r\n      if (index === -1) {\r\n        key = pair;\r\n        value = undefined;\r\n      } else {\r\n        key = pair.substr(0, index);\r\n        value = pair.substr(index + 1);\r\n      }\r\n      queryDict.push({\r\n        key: decodeURIComponent(key),\r\n        value: decodeURIComponent(value)\r\n      });\r\n    }\r\n    return queryDict;\r\n  }\r\n\r\n  public readUserFromSessionStorage(): User {\r\n    return this.storage.readUser();\r\n  }\r\n\r\n  public storeUserToSessionStorage(user: User): void {\r\n    this.storage.storeUser(user);\r\n  }\r\n\r\n  public clearUserFromSessionStorage(): void {\r\n    this.storage.clearUser();\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, from, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { INTERCEPTOR_BASE_PATHS } from '../variables';\r\n\r\n@Injectable()\r\nexport class AvlTokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    public auth: AvlAuthService,\r\n    @Inject(INTERCEPTOR_BASE_PATHS) protected basePaths: string[]\r\n  ) {\r\n    for (const i in this.basePaths) {\r\n      if (this.basePaths.hasOwnProperty(i)) {\r\n        this.basePaths[i] = this.basePaths[i].toLowerCase();\r\n      }\r\n    }\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.isUrlInBasePaths(req)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    if (this.auth.currentUser) {\r\n      req = this.setAuthHeader(req);\r\n    }\r\n\r\n    return next\r\n      .handle(req)\r\n      .pipe(catchError((err: HttpErrorResponse) => this.handleHttpError(req, next, err)));\r\n  }\r\n\r\n  private handleHttpError(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler,\r\n    err: HttpErrorResponse\r\n  ): Observable<any> {\r\n    if (err.status === 401) {\r\n      // Unauthorized, tokens expired\r\n      return from(this.auth.refreshTokens()).pipe(\r\n        switchMap(_ => next.handle(this.setAuthHeader(req))),\r\n        catchError(_ => throwError(err))\r\n      );\r\n    }\r\n    return throwError(err);\r\n  }\r\n\r\n  /** Check if request URL is in provided basePaths\r\n   * @param request Http request instance whose URL is checked.\r\n   */\r\n  private isUrlInBasePaths(request: HttpRequest<any>): boolean {\r\n    const url = request.url.toLowerCase();\r\n    const path = this.basePaths.find(path => url.startsWith(path));\r\n    return Boolean(path);\r\n  }\r\n\r\n  /** Sets access token to authorization header of HTTP request\r\n   * @param request HTTP request instance\r\n   * @returns Cloned HTTP with adapted headers\r\n   */\r\n  private setAuthHeader(req: HttpRequest<any>): HttpRequest<any> {\r\n    const access_token = this.auth.currentUser.access_token;\r\n    const header = `Bearer ${access_token}`;\r\n    const headers = req.headers.set('Authorization', header);\r\n\r\n    return req.clone({ headers });\r\n  }\r\n}\r\n"]}