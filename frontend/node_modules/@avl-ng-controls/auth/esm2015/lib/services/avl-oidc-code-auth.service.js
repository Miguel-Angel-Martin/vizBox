import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/common';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Injectable, Inject } from '@angular/core';
import { Location } from '@angular/common';
import { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { map, take, distinctUntilKeyChanged, skipWhile } from 'rxjs/operators';
import * as CryptoJS from 'crypto-js';
import { AvlAuthService } from './avl-auth.service';
import { AUTH_CONFIG } from '../variables';
import { TokensPending } from './token-pending';
import { TokenStorage } from './token-storage';
import { StorageNames } from './storage-names';
let AvlOidcCodeAuthService = class AvlOidcCodeAuthService extends AvlAuthService {
    constructor(httpBackend, authConfig, router, loc) {
        super();
        this.httpBackend = httpBackend;
        this.authConfig = authConfig;
        this.router = router;
        this.loc = loc;
        // success will be set after tokens are successfully fetched or not
        this.tokensPendingSubject = new BehaviorSubject(new TokensPending(false));
        /**
         * Observable tracking if redirected from idb
         * Resolves to true on redirection, false otherwise
         */
        this.redirectedFromLogIn = new BehaviorSubject(undefined);
        this.http = new HttpClient(this.httpBackend);
        this.tokensPending$ = this.tokensPendingSubject.asObservable();
        this.isLoggedIn$ = new Observable(observer => {
            const tokensPendingState = this.tokensPendingSubject.value;
            this.tokensPending$.pipe(distinctUntilKeyChanged('waiting'), skipWhile(tokenPending => tokenPending.waiting !== false), map(tokenPending => {
                if (tokenPending.success != null) {
                    observer.next(tokenPending.success);
                }
            }), take(1)).subscribe();
            if (tokensPendingState.waiting !== true && tokensPendingState.success !== null) {
                observer.next(this.currentUser != null && this.isAccessTokenValid());
            }
        });
        this.storage = new TokenStorage(this.authConfig.tokenPrefix);
        const user = this.storage.readUser();
        if (this.persistedUserInvalid(user)) {
            this.clearUser();
        }
        else {
            this.persistUser(user);
        }
        // if user is not logged in and pkce exists handle redirect from oidc server if possible
        if (this.currentUser == null && this.pkce) {
            this.handleOidcRedirect();
        }
        else {
            this.redirectedFromLogIn.next(Boolean(this.currentUser));
        }
    }
    persistedUserInvalid(data) {
        return (data.username == null || data.access_token == null || data.access_token_expires < Date.now());
    }
    get pkce() {
        return this.storage.getItem('pkce') || undefined;
    }
    set pkce(c) {
        if (c) {
            this.storage.setItem('pkce', c);
        }
        else {
            this.storage.removeItem('pkce');
        }
    }
    get nonce() {
        return sessionStorage.getItem('nonce') || undefined;
    }
    set nonce(c) {
        if (c) {
            this.storage.setItem('nonce', c);
        }
        else {
            this.storage.removeItem('nonce');
        }
    }
    isAccessTokenValid() {
        return Date.now() < this.currentUser.access_token_expires;
    }
    persistUser(user) {
        if (!user) {
            this.clearUser();
            return;
        }
        this.storage.storeUser(user);
        this.userSubject.next(user);
    }
    clearUser() {
        this.storage.clearUser();
        this.userSubject.next(undefined);
    }
    /*
     * Checks if current url is redirect from oidc server and gets access token from the server.
     */
    handleOidcRedirect() {
        return __awaiter(this, void 0, void 0, function* () {
            const pkce = this.pkce;
            this.pkce = undefined;
            const urlParts = this.loc.path(true).split('?', 2);
            let urlHash;
            let first;
            let last;
            let urlPartSplit;
            if (urlParts.length === 2) {
                first = urlParts[1].lastIndexOf('#');
                if (first !== -1) {
                    last = urlParts[1].lastIndexOf('&');
                    urlHash = urlParts[1].slice(first, last);
                    urlPartSplit = urlParts[1].split('#', 2);
                    urlParts[1] = urlParts[1].split('&').pop();
                    urlParts[1] = urlPartSplit[0].concat('&').concat(urlParts[1]);
                }
            }
            let query = urlParts.length === 2 ? this.parseQueryString(urlParts[1]) : [];
            let queryCode;
            for (let i = query.length - 1; i >= 0; i--) {
                if (query[i].key === 'code') {
                    queryCode = query[i].value;
                    query = [...query.slice(0, i), ...query.slice(i + 1)];
                    break;
                }
            }
            if (urlParts.length === 2 && queryCode) {
                const nonce = this.nonce;
                this.nonce = undefined;
                const httpOptions = {
                    headers: new HttpHeaders({
                        code: queryCode,
                        verifier: pkce,
                        nonce: nonce
                    })
                };
                this.updateTokensPending(new TokensPending(true));
                try {
                    const user = yield this.http
                        .post(this.authConfig.tokenUrl, {}, httpOptions)
                        .pipe(map(token => this.readUserFromToken(token)))
                        .toPromise();
                    this.persistUser(user);
                    this.updateTokensPending(new TokensPending(false, true));
                }
                catch (error) {
                    this.updateTokensPending(new TokensPending(false, false), error.message);
                }
            }
            if (urlHash) {
                this.router.navigateByUrl(`${urlParts[0]}${this.reconstructQueryParamString(query)}${urlHash}`, { replaceUrl: true });
                this.redirectedFromLogIn.next(true);
            }
            else {
                this.router.navigateByUrl(`${urlParts[0]}${this.reconstructQueryParamString(query)}`, {
                    replaceUrl: true
                });
                this.redirectedFromLogIn.next(Boolean(this.currentUser));
            }
        });
    }
    reloadPersistedUserData() {
        const user = this.storage.readUser();
        if (this.persistedUserInvalid(user)) {
            this.clearUser();
        }
        else {
            this.persistUser(user);
        }
    }
    reconstructQueryParamString(queryParams) {
        let s = '?';
        if (queryParams.length === 0) {
            return '';
        }
        for (const q of queryParams) {
            if (s === '?') {
                s += `${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;
            }
            else {
                s += `&${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;
            }
        }
        return s;
    }
    updateTokensPending(state, errorMessage) {
        // the order here is important
        // errorMessage will be set before isLoggedIn becomes false
        if (state.waiting === false) {
            this.errorMessageSubject.next(errorMessage);
        }
        this.tokensPendingSubject.next(state);
    }
    readUserFromToken(token) {
        var _a;
        const accessTokenClaims = this.readClaimsFromToken(token.accesstoken);
        // Calculate actual expiry date for this machine
        const accessTokenStoredAt = Date.now(); // [ms]
        const accessTokenExpiresAt = accessTokenStoredAt + token.expiresIn * 1000;
        const refreshTokenClaims = this.readClaimsFromToken(token.refreshtoken);
        let refreshTokenExpiresAt = null;
        if (refreshTokenClaims) {
            // If time value is 0 token lasts indefinitely
            const refreshTokenExpiresIn = refreshTokenClaims['exp'] !== 0 ? refreshTokenClaims['exp'] - refreshTokenClaims['iat'] : 0;
            const refreshTokenStoredAt = accessTokenStoredAt;
            refreshTokenExpiresAt =
                refreshTokenExpiresIn !== 0 ? refreshTokenStoredAt + refreshTokenExpiresIn * 1000 : 0;
        }
        const roles = accessTokenClaims === null || accessTokenClaims === void 0 ? void 0 : accessTokenClaims.roles;
        if (roles && this.hasRequiredRole(roles)) {
            this.storage.setItem(StorageNames.AccessTokenStoredAt, `${accessTokenStoredAt}`);
            return {
                username: accessTokenClaims.preferred_username,
                name: (_a = accessTokenClaims.name) !== null && _a !== void 0 ? _a : accessTokenClaims.preferred_username,
                access_token: token.accesstoken,
                access_token_expires: accessTokenExpiresAt,
                refresh_token: token.refreshtoken,
                refresh_token_expires: refreshTokenExpiresAt,
                id_token: token.idToken,
                roles: roles
            };
        }
        else {
            throw new Error(`Role ${this.authConfig.requiredRole} not in claims`);
        }
    }
    hasRequiredRole(roles) {
        return (!this.authConfig.requiredRole ||
            (this.authConfig.requiredRole && roles.indexOf(this.authConfig.requiredRole) !== -1));
    }
    /**
     * If needed, this method can be called to refresh tokens for current user
     * @returns Promise resolved with object containing new tokens
     */
    refreshTokens() {
        return __awaiter(this, void 0, void 0, function* () {
            const httpOptions = {
                headers: new HttpHeaders({
                    grant_type: 'refresh_token',
                    'refresh-token': this.storage.getItem(StorageNames.RefreshToken)
                })
            };
            if (!this.authConfig.refreshUrl) {
                throw new Error('refreshUrl missing in AuthConfig');
            }
            this.updateTokensPending(new TokensPending(true));
            try {
                const user = yield this.http
                    .post(this.authConfig.refreshUrl, {}, httpOptions)
                    .pipe(map(token => this.readUserFromToken(token)))
                    .toPromise();
                this.persistUser(user);
                this.updateTokensPending(new TokensPending(false, true));
            }
            catch (error) {
                this.updateTokensPending(new TokensPending(false, false), error.message);
                throw error;
            }
        });
    }
    /**
     * Login user and redirect after successful authentication.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after successful authentication
     */
    login(redirectUrl) {
        location.href = this.generateLoginUrl(redirectUrl ? redirectUrl : location.href);
    }
    /**
     * Log out user and redirect after.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after logging out
     */
    logout(redirectUrl) {
        const logoutConfigSet = this.authConfig.logoutUrl != null || this.authConfig.logoutUrlParamIdToken != null;
        const user = this.userSubject.getValue();
        this.clearUser();
        if (!logoutConfigSet) {
            console.warn('User signed out locally, but logout request towards OIDC server not initiated since logoutUrl or logoutUrlParamIdToken not set in authConfig.');
            return;
        }
        let url = `${this.authConfig.logoutUrl}?${this.authConfig.logoutUrlParamIdToken}=${encodeURIComponent(user.id_token)}`;
        if (this.authConfig.logoutUrlParamRedirect) {
            // Avoid any query parameters for the logout redirect url
            redirectUrl = redirectUrl !== null && redirectUrl !== void 0 ? redirectUrl : location.href.split('?')[0];
            url = `${url}&${this.authConfig.logoutUrlParamRedirect}=${encodeURIComponent(redirectUrl)}`;
        }
        location.href = url;
    }
    generateLoginUrl(redirectUrl) {
        const redirect_b64 = '' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(redirectUrl));
        // Generate a session value.
        const nonce = CryptoJS.lib.WordArray.random(16).toString();
        // Generate pkce
        const pkce = CryptoJS.lib.WordArray.random(32).toString();
        const bytes = CryptoJS.SHA256(pkce);
        let pkce_hash = CryptoJS.enc.Base64.stringify(bytes);
        // KeyCloak requires this - https://tools.ietf.org/html/rfc7636#appendix-A
        pkce_hash = pkce_hash.replace(/=/g, '');
        pkce_hash = pkce_hash.replace(/\+/g, '-');
        pkce_hash = pkce_hash.replace(/\//g, '_');
        this.pkce = pkce;
        this.nonce = nonce;
        let url = this.authConfig.loginUrl;
        url += '?' + this.authConfig.loginUrlParamRedirect + '=' + encodeURIComponent(redirect_b64);
        url += '&' + this.authConfig.loginUrlParamChallenge + '=' + encodeURIComponent(pkce_hash);
        url += '&' + this.authConfig.loginUrlParamNonce + '=' + encodeURIComponent(nonce);
        return url;
    }
    readClaimsFromToken(token) {
        if (!token.includes('.')) {
            // Token is not a valid JWT token
            return null;
        }
        const tokenParts = token.split('.');
        const claimsString = this.b64DecodeUnicode(tokenParts[1]);
        return JSON.parse(claimsString);
    }
    b64DecodeUnicode(str) {
        const base64 = str.replace(/\-/g, '+').replace(/\_/g, '/');
        return decodeURIComponent(atob(base64)
            .split('')
            .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
            .join(''));
    }
    parseQueryString(queryString) {
        if (!queryString.length) {
            return [];
        }
        const queryDict = [];
        const pairs = queryString.split('&');
        for (const pair of pairs) {
            const index = pair.indexOf('=');
            let key;
            let value;
            if (index === -1) {
                key = pair;
                value = undefined;
            }
            else {
                key = pair.substr(0, index);
                value = pair.substr(index + 1);
            }
            queryDict.push({
                key: decodeURIComponent(key),
                value: decodeURIComponent(value)
            });
        }
        return queryDict;
    }
};
AvlOidcCodeAuthService.ɵfac = function AvlOidcCodeAuthService_Factory(t) { return new (t || AvlOidcCodeAuthService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpBackend), ɵngcc0.ɵɵinject(AUTH_CONFIG), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.Location)); };
AvlOidcCodeAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AvlOidcCodeAuthService, factory: AvlOidcCodeAuthService.ɵfac });
AvlOidcCodeAuthService.ctorParameters = () => [
    { type: HttpBackend },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] },
    { type: Router },
    { type: Location }
];
AvlOidcCodeAuthService = __decorate([ __param(1, Inject(AUTH_CONFIG)),
    __metadata("design:paramtypes", [HttpBackend, Object, Router, Location])
], AvlOidcCodeAuthService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlOidcCodeAuthService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpBackend }, { type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_CONFIG]
            }] }, { type: ɵngcc2.Router }, { type: ɵngcc3.Location }]; }, null); })();
export { AvlOidcCodeAuthService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW9pZGMtY29kZS1hdXRoLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLW5nLWNvbnRyb2xzL2F1dGgvbGliL3NlcnZpY2VzL2F2bC1vaWRjLWNvZGUtYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9FLE9BQU8sS0FBSyxRQUFRLE1BQU0sV0FBVyxDQUFDO0FBR3RDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFjLE1BQU0sY0FBYyxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSy9DLElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXVCLFNBQVEsY0FBYztBQUMxRCxJQTBCRSxZQUFvQixXQUF3QixFQUErQixVQUFzQixFQUN2RixNQUFjLEVBQVUsR0FBYTtBQUNqRCxRQUFJLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFIc0IsZ0JB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QUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBM0JBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWdCQSxBQUdBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBRUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFJQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFJQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXRYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQTVCQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBNEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBNUJBLEFBQUEsQUFpWkEsQUFqWkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEh0dHBCYWNrZW5kLCBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IG1hcCwgdGFrZSwgZGlzdGluY3RVbnRpbEtleUNoYW5nZWQsIHNraXBXaGlsZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCAqIGFzIENyeXB0b0pTIGZyb20gJ2NyeXB0by1qcyc7XHJcblxyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vdXNlci5tb2RlbCc7XHJcbmltcG9ydCB7IEF2bEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi9hdmwtYXV0aC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQVVUSF9DT05GSUcsIEF1dGhDb25maWcgfSBmcm9tICcuLi92YXJpYWJsZXMnO1xyXG5pbXBvcnQgeyBUb2tlbnNQZW5kaW5nIH0gZnJvbSAnLi90b2tlbi1wZW5kaW5nJztcclxuaW1wb3J0IHsgVG9rZW5TdG9yYWdlIH0gZnJvbSAnLi90b2tlbi1zdG9yYWdlJztcclxuaW1wb3J0IHsgVG9rZW5SZXNwb25zZSB9IGZyb20gJy4vdG9rZW4tcmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlTmFtZXMgfSBmcm9tICcuL3N0b3JhZ2UtbmFtZXMnO1xyXG5pbXBvcnQgeyBUb2tlbkNsYWltcyB9IGZyb20gJy4vdG9rZW4tY2xhaW1zJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBdmxPaWRjQ29kZUF1dGhTZXJ2aWNlIGV4dGVuZHMgQXZsQXV0aFNlcnZpY2Uge1xyXG4gIC8vIHN1Y2Nlc3Mgd2lsbCBiZSBzZXQgYWZ0ZXIgdG9rZW5zIGFyZSBzdWNjZXNzZnVsbHkgZmV0Y2hlZCBvciBub3RcclxuICBwcml2YXRlIHRva2Vuc1BlbmRpbmdTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxUb2tlbnNQZW5kaW5nPihuZXcgVG9rZW5zUGVuZGluZyhmYWxzZSkpO1xyXG5cclxuICAvKipcclxuICAgKiBXaGVuIGZldGNoaW5nIHRva2VucywgdGhpcyBvYnNlcnZhYmxlIGNoYW5nZXNcclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIHdpdGggZm9sbG93aW5nIGNvbnRleHQ6XHJcbiAgICogLSB3YWl0aW5nIC0gaWYgdHJ1ZSwgcmVxdWVzdCBmb3IgbmV3IHRva2VucyBpcyBtYWRlLCB0aGlzIGhhcHBlbnMgb24gaW5pdGlhbCBhdXRoZW50aWNhdGlvbiBhbmQgb24gcmVmcmVzaFRva2Vuc1xyXG4gICAqIC0gc3VjY2VzcyAtIHRydWUgZm9yIHN1Y2Nlc3NmdWwgYXV0aGVudGljYXRpb25cclxuICAgKi9cclxuICBwdWJsaWMgdG9rZW5zUGVuZGluZyQ6IE9ic2VydmFibGU8VG9rZW5zUGVuZGluZz47XHJcblxyXG4gIC8qKlxyXG4gICAqIE9ic2VydmFibGUgdHJhY2tpbmcgYXV0aGVudGljYXRlZCBzdGF0ZVxyXG4gICAqIFJlc29sdmVzIHRvIHRydWUgb24gc3VjY2Vzc2Z1bCBsb2cgaW4sIGZhbHNlIG90aGVyd2lzZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0xvZ2dlZEluJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICBcclxuICAvKipcclxuICAgKiBPYnNlcnZhYmxlIHRyYWNraW5nIGlmIHJlZGlyZWN0ZWQgZnJvbSBpZGJcclxuICAgKiBSZXNvbHZlcyB0byB0cnVlIG9uIHJlZGlyZWN0aW9uLCBmYWxzZSBvdGhlcndpc2VcclxuICAgKi9cclxuICBwdWJsaWMgcmVkaXJlY3RlZEZyb21Mb2dJbiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odW5kZWZpbmVkKTtcclxuXHJcbiAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50O1xyXG4gIHByaXZhdGUgc3RvcmFnZTogVG9rZW5TdG9yYWdlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBCYWNrZW5kOiBIdHRwQmFja2VuZCwgQEluamVjdChBVVRIX0NPTkZJRykgcHJpdmF0ZSBhdXRoQ29uZmlnOiBBdXRoQ29uZmlnLFxyXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlciwgcHJpdmF0ZSBsb2M6IExvY2F0aW9uKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuaHR0cCA9IG5ldyBIdHRwQ2xpZW50KHRoaXMuaHR0cEJhY2tlbmQpO1xyXG5cclxuICAgIHRoaXMudG9rZW5zUGVuZGluZyQgPSB0aGlzLnRva2Vuc1BlbmRpbmdTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgdGhpcy5pc0xvZ2dlZEluJCA9IG5ldyBPYnNlcnZhYmxlPGJvb2xlYW4+KG9ic2VydmVyID0+IHtcclxuICAgICAgY29uc3QgdG9rZW5zUGVuZGluZ1N0YXRlID0gdGhpcy50b2tlbnNQZW5kaW5nU3ViamVjdC52YWx1ZTtcclxuICAgICAgdGhpcy50b2tlbnNQZW5kaW5nJC5waXBlKFxyXG4gICAgICAgIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKCd3YWl0aW5nJyksXHJcbiAgICAgICAgc2tpcFdoaWxlKHRva2VuUGVuZGluZyA9PiB0b2tlblBlbmRpbmcud2FpdGluZyAhPT0gZmFsc2UpLFxyXG4gICAgICAgIG1hcCh0b2tlblBlbmRpbmcgPT4ge1xyXG4gICAgICAgICAgaWYgKHRva2VuUGVuZGluZy5zdWNjZXNzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0b2tlblBlbmRpbmcuc3VjY2Vzcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSksIHRha2UoMSkpLnN1YnNjcmliZSgpO1xyXG4gICAgICBpZiAodG9rZW5zUGVuZGluZ1N0YXRlLndhaXRpbmcgIT09IHRydWUgJiYgdG9rZW5zUGVuZGluZ1N0YXRlLnN1Y2Nlc3MgIT09IG51bGwpIHtcclxuICAgICAgICBvYnNlcnZlci5uZXh0KHRoaXMuY3VycmVudFVzZXIgIT0gbnVsbCAmJiB0aGlzLmlzQWNjZXNzVG9rZW5WYWxpZCgpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zdG9yYWdlID0gbmV3IFRva2VuU3RvcmFnZSh0aGlzLmF1dGhDb25maWcudG9rZW5QcmVmaXgpO1xyXG4gICAgY29uc3QgdXNlciA9IHRoaXMuc3RvcmFnZS5yZWFkVXNlcigpO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5wZXJzaXN0ZWRVc2VySW52YWxpZCh1c2VyKSkge1xyXG4gICAgICB0aGlzLmNsZWFyVXNlcigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wZXJzaXN0VXNlcih1c2VyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiB1c2VyIGlzIG5vdCBsb2dnZWQgaW4gYW5kIHBrY2UgZXhpc3RzIGhhbmRsZSByZWRpcmVjdCBmcm9tIG9pZGMgc2VydmVyIGlmIHBvc3NpYmxlXHJcbiAgICBpZiAodGhpcy5jdXJyZW50VXNlciA9PSBudWxsICYmIHRoaXMucGtjZSkge1xyXG4gICAgICB0aGlzLmhhbmRsZU9pZGNSZWRpcmVjdCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yZWRpcmVjdGVkRnJvbUxvZ0luLm5leHQoQm9vbGVhbih0aGlzLmN1cnJlbnRVc2VyKSk7XHJcbiAgICB9XHJcbiAgfSBcclxuXHJcbiAgXHJcbiAgcHJpdmF0ZSBwZXJzaXN0ZWRVc2VySW52YWxpZChkYXRhOiBQYXJ0aWFsPFVzZXI+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBkYXRhLnVzZXJuYW1lID09IG51bGwgfHwgZGF0YS5hY2Nlc3NfdG9rZW4gPT0gbnVsbCB8fCBkYXRhLmFjY2Vzc190b2tlbl9leHBpcmVzIDwgRGF0ZS5ub3coKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IHBrY2UoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSgncGtjZScpIHx8IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgcHJpdmF0ZSBzZXQgcGtjZShjOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcclxuICAgIGlmIChjKSB7XHJcbiAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKCdwa2NlJywgYyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbSgncGtjZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgbm9uY2UoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdub25jZScpIHx8IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgcHJpdmF0ZSBzZXQgbm9uY2UoYzogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoYykge1xyXG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSgnbm9uY2UnLCBjKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKCdub25jZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc0FjY2Vzc1Rva2VuVmFsaWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKSA8IHRoaXMuY3VycmVudFVzZXIuYWNjZXNzX3Rva2VuX2V4cGlyZXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBlcnNpc3RVc2VyKHVzZXI/OiBVc2VyKTogdm9pZCB7XHJcbiAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgdGhpcy5jbGVhclVzZXIoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdG9yYWdlLnN0b3JlVXNlcih1c2VyKTtcclxuICAgIHRoaXMudXNlclN1YmplY3QubmV4dCh1c2VyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xlYXJVc2VyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdG9yYWdlLmNsZWFyVXNlcigpO1xyXG4gICAgdGhpcy51c2VyU3ViamVjdC5uZXh0KHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIENoZWNrcyBpZiBjdXJyZW50IHVybCBpcyByZWRpcmVjdCBmcm9tIG9pZGMgc2VydmVyIGFuZCBnZXRzIGFjY2VzcyB0b2tlbiBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVPaWRjUmVkaXJlY3QoKSB7XHJcbiAgICBjb25zdCBwa2NlID0gdGhpcy5wa2NlO1xyXG4gICAgdGhpcy5wa2NlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0IHVybFBhcnRzID0gdGhpcy5sb2MucGF0aCh0cnVlKS5zcGxpdCgnPycsIDIpO1xyXG4gICAgbGV0IHVybEhhc2g6IHN0cmluZztcclxuICAgIGxldCBmaXJzdDogbnVtYmVyO1xyXG4gICAgbGV0IGxhc3Q6IG51bWJlcjtcclxuICAgIGxldCB1cmxQYXJ0U3BsaXQ6IHN0cmluZ1tdO1xyXG5cclxuICAgIGlmICh1cmxQYXJ0cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgZmlyc3QgPSB1cmxQYXJ0c1sxXS5sYXN0SW5kZXhPZignIycpO1xyXG4gICAgICBpZiAoZmlyc3QgIT09IC0xKSB7XHJcbiAgICAgICAgbGFzdCA9IHVybFBhcnRzWzFdLmxhc3RJbmRleE9mKCcmJyk7XHJcbiAgICAgICAgdXJsSGFzaCA9IHVybFBhcnRzWzFdLnNsaWNlKGZpcnN0LCBsYXN0KTtcclxuICAgICAgICB1cmxQYXJ0U3BsaXQgPSB1cmxQYXJ0c1sxXS5zcGxpdCgnIycsIDIpO1xyXG4gICAgICAgIHVybFBhcnRzWzFdID0gdXJsUGFydHNbMV0uc3BsaXQoJyYnKS5wb3AoKTtcclxuICAgICAgICB1cmxQYXJ0c1sxXSA9IHVybFBhcnRTcGxpdFswXS5jb25jYXQoJyYnKS5jb25jYXQodXJsUGFydHNbMV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHF1ZXJ5ID0gdXJsUGFydHMubGVuZ3RoID09PSAyID8gdGhpcy5wYXJzZVF1ZXJ5U3RyaW5nKHVybFBhcnRzWzFdKSA6IFtdO1xyXG4gICAgbGV0IHF1ZXJ5Q29kZTogc3RyaW5nO1xyXG4gICAgZm9yIChsZXQgaSA9IHF1ZXJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgIGlmIChxdWVyeVtpXS5rZXkgPT09ICdjb2RlJykge1xyXG4gICAgICAgIHF1ZXJ5Q29kZSA9IHF1ZXJ5W2ldLnZhbHVlO1xyXG4gICAgICAgIHF1ZXJ5ID0gWy4uLnF1ZXJ5LnNsaWNlKDAsIGkpLCAuLi5xdWVyeS5zbGljZShpICsgMSldO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodXJsUGFydHMubGVuZ3RoID09PSAyICYmIHF1ZXJ5Q29kZSkge1xyXG4gICAgICBjb25zdCBub25jZSA9IHRoaXMubm9uY2U7XHJcbiAgICAgIHRoaXMubm9uY2UgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICBjb25zdCBodHRwT3B0aW9ucyA9IHtcclxuICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICAgY29kZTogcXVlcnlDb2RlLFxyXG4gICAgICAgICAgdmVyaWZpZXI6IHBrY2UsXHJcbiAgICAgICAgICBub25jZTogbm9uY2VcclxuICAgICAgICB9KVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy51cGRhdGVUb2tlbnNQZW5kaW5nKG5ldyBUb2tlbnNQZW5kaW5nKHRydWUpKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5odHRwXHJcbiAgICAgICAgICAucG9zdDxUb2tlblJlc3BvbnNlPih0aGlzLmF1dGhDb25maWcudG9rZW5VcmwsIHt9LCBodHRwT3B0aW9ucylcclxuICAgICAgICAgIC5waXBlKG1hcCh0b2tlbiA9PiB0aGlzLnJlYWRVc2VyRnJvbVRva2VuKHRva2VuKSkpXHJcbiAgICAgICAgICAudG9Qcm9taXNlKCk7XHJcbiAgICAgICAgdGhpcy5wZXJzaXN0VXNlcih1c2VyKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVRva2Vuc1BlbmRpbmcobmV3IFRva2Vuc1BlbmRpbmcoZmFsc2UsIHRydWUpKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVRva2Vuc1BlbmRpbmcobmV3IFRva2Vuc1BlbmRpbmcoZmFsc2UsIGZhbHNlKSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodXJsSGFzaCkge1xyXG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKFxyXG4gICAgICAgIGAke3VybFBhcnRzWzBdfSR7dGhpcy5yZWNvbnN0cnVjdFF1ZXJ5UGFyYW1TdHJpbmcocXVlcnkpfSR7dXJsSGFzaH1gLFxyXG4gICAgICAgIHsgcmVwbGFjZVVybDogdHJ1ZSB9XHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMucmVkaXJlY3RlZEZyb21Mb2dJbi5uZXh0KHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybChgJHt1cmxQYXJ0c1swXX0ke3RoaXMucmVjb25zdHJ1Y3RRdWVyeVBhcmFtU3RyaW5nKHF1ZXJ5KX1gLCB7XHJcbiAgICAgICAgcmVwbGFjZVVybDogdHJ1ZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5yZWRpcmVjdGVkRnJvbUxvZ0luLm5leHQoQm9vbGVhbih0aGlzLmN1cnJlbnRVc2VyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVsb2FkUGVyc2lzdGVkVXNlckRhdGEoKSB7XHJcbiAgICBjb25zdCB1c2VyID0gdGhpcy5zdG9yYWdlLnJlYWRVc2VyKCk7XHJcbiAgICBcclxuICAgIGlmICh0aGlzLnBlcnNpc3RlZFVzZXJJbnZhbGlkKHVzZXIpKSB7XHJcbiAgICAgIHRoaXMuY2xlYXJVc2VyKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBlcnNpc3RVc2VyKHVzZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIHJlY29uc3RydWN0UXVlcnlQYXJhbVN0cmluZyhxdWVyeVBhcmFtczogeyBrZXk6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9W10pOiBzdHJpbmcge1xyXG4gICAgbGV0IHMgPSAnPyc7XHJcbiAgICBpZiAocXVlcnlQYXJhbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgcSBvZiBxdWVyeVBhcmFtcykge1xyXG4gICAgICBpZiAocyA9PT0gJz8nKSB7XHJcbiAgICAgICAgcyArPSBgJHtlbmNvZGVVUklDb21wb25lbnQocS5rZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChxLnZhbHVlKX1gO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHMgKz0gYCYke2VuY29kZVVSSUNvbXBvbmVudChxLmtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHEudmFsdWUpfWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVUb2tlbnNQZW5kaW5nKFxyXG4gICAgc3RhdGU6IFRva2Vuc1BlbmRpbmcsXHJcbiAgICBlcnJvck1lc3NhZ2U/OiBzdHJpbmdcclxuICApIHtcclxuICAgIC8vIHRoZSBvcmRlciBoZXJlIGlzIGltcG9ydGFudFxyXG4gICAgLy8gZXJyb3JNZXNzYWdlIHdpbGwgYmUgc2V0IGJlZm9yZSBpc0xvZ2dlZEluIGJlY29tZXMgZmFsc2VcclxuICAgIGlmIChzdGF0ZS53YWl0aW5nID09PSBmYWxzZSkge1xyXG4gICAgICB0aGlzLmVycm9yTWVzc2FnZVN1YmplY3QubmV4dChlcnJvck1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gICAgdGhpcy50b2tlbnNQZW5kaW5nU3ViamVjdC5uZXh0KHN0YXRlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVhZFVzZXJGcm9tVG9rZW4odG9rZW46IFRva2VuUmVzcG9uc2UpOiBVc2VyIHtcclxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuQ2xhaW1zID0gdGhpcy5yZWFkQ2xhaW1zRnJvbVRva2VuKHRva2VuLmFjY2Vzc3Rva2VuKTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgYWN0dWFsIGV4cGlyeSBkYXRlIGZvciB0aGlzIG1hY2hpbmVcclxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuU3RvcmVkQXQgPSBEYXRlLm5vdygpOyAvLyBbbXNdXHJcbiAgICBjb25zdCBhY2Nlc3NUb2tlbkV4cGlyZXNBdCA9IGFjY2Vzc1Rva2VuU3RvcmVkQXQgKyB0b2tlbi5leHBpcmVzSW4gKiAxMDAwO1xyXG5cclxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbkNsYWltcyA9IHRoaXMucmVhZENsYWltc0Zyb21Ub2tlbih0b2tlbi5yZWZyZXNodG9rZW4pO1xyXG4gICAgbGV0IHJlZnJlc2hUb2tlbkV4cGlyZXNBdCA9IG51bGw7XHJcbiAgICBpZiAocmVmcmVzaFRva2VuQ2xhaW1zKSB7XHJcbiAgICAgIC8vIElmIHRpbWUgdmFsdWUgaXMgMCB0b2tlbiBsYXN0cyBpbmRlZmluaXRlbHlcclxuICAgICAgY29uc3QgcmVmcmVzaFRva2VuRXhwaXJlc0luID1cclxuICAgICAgICByZWZyZXNoVG9rZW5DbGFpbXNbJ2V4cCddICE9PSAwID8gcmVmcmVzaFRva2VuQ2xhaW1zWydleHAnXSAtIHJlZnJlc2hUb2tlbkNsYWltc1snaWF0J10gOiAwO1xyXG4gICAgICBjb25zdCByZWZyZXNoVG9rZW5TdG9yZWRBdCA9IGFjY2Vzc1Rva2VuU3RvcmVkQXQ7XHJcbiAgICAgIHJlZnJlc2hUb2tlbkV4cGlyZXNBdCA9XHJcbiAgICAgICAgcmVmcmVzaFRva2VuRXhwaXJlc0luICE9PSAwID8gcmVmcmVzaFRva2VuU3RvcmVkQXQgKyByZWZyZXNoVG9rZW5FeHBpcmVzSW4gKiAxMDAwIDogMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByb2xlcyA9IGFjY2Vzc1Rva2VuQ2xhaW1zPy5yb2xlcyBhcyBzdHJpbmdbXTtcclxuICAgIGlmIChyb2xlcyAmJiB0aGlzLmhhc1JlcXVpcmVkUm9sZShyb2xlcykpIHtcclxuICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oU3RvcmFnZU5hbWVzLkFjY2Vzc1Rva2VuU3RvcmVkQXQsIGAke2FjY2Vzc1Rva2VuU3RvcmVkQXR9YCk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlcm5hbWU6IGFjY2Vzc1Rva2VuQ2xhaW1zLnByZWZlcnJlZF91c2VybmFtZSxcclxuICAgICAgICBuYW1lOiBhY2Nlc3NUb2tlbkNsYWltcy5uYW1lID8/IGFjY2Vzc1Rva2VuQ2xhaW1zLnByZWZlcnJlZF91c2VybmFtZSxcclxuICAgICAgICBhY2Nlc3NfdG9rZW46IHRva2VuLmFjY2Vzc3Rva2VuLFxyXG4gICAgICAgIGFjY2Vzc190b2tlbl9leHBpcmVzOiBhY2Nlc3NUb2tlbkV4cGlyZXNBdCxcclxuICAgICAgICByZWZyZXNoX3Rva2VuOiB0b2tlbi5yZWZyZXNodG9rZW4sXHJcbiAgICAgICAgcmVmcmVzaF90b2tlbl9leHBpcmVzOiByZWZyZXNoVG9rZW5FeHBpcmVzQXQsXHJcbiAgICAgICAgaWRfdG9rZW46IHRva2VuLmlkVG9rZW4sXHJcbiAgICAgICAgcm9sZXM6IHJvbGVzXHJcbiAgICAgIH0gYXMgVXNlcjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUm9sZSAke3RoaXMuYXV0aENvbmZpZy5yZXF1aXJlZFJvbGV9IG5vdCBpbiBjbGFpbXNgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFzUmVxdWlyZWRSb2xlKHJvbGVzOiBzdHJpbmdbXSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgIXRoaXMuYXV0aENvbmZpZy5yZXF1aXJlZFJvbGUgfHxcclxuICAgICAgKHRoaXMuYXV0aENvbmZpZy5yZXF1aXJlZFJvbGUgJiYgcm9sZXMuaW5kZXhPZih0aGlzLmF1dGhDb25maWcucmVxdWlyZWRSb2xlKSAhPT0gLTEpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSWYgbmVlZGVkLCB0aGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlZnJlc2ggdG9rZW5zIGZvciBjdXJyZW50IHVzZXJcclxuICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmVkIHdpdGggb2JqZWN0IGNvbnRhaW5pbmcgbmV3IHRva2Vuc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyByZWZyZXNoVG9rZW5zKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICBjb25zdCBodHRwT3B0aW9ucyA9IHtcclxuICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHtcclxuICAgICAgICBncmFudF90eXBlOiAncmVmcmVzaF90b2tlbicsXHJcbiAgICAgICAgJ3JlZnJlc2gtdG9rZW4nOiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShTdG9yYWdlTmFtZXMuUmVmcmVzaFRva2VuKVxyXG4gICAgICB9KVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIXRoaXMuYXV0aENvbmZpZy5yZWZyZXNoVXJsKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVmcmVzaFVybCBtaXNzaW5nIGluIEF1dGhDb25maWcnKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVG9rZW5zUGVuZGluZyhuZXcgVG9rZW5zUGVuZGluZyh0cnVlKSk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuaHR0cFxyXG4gICAgICAgIC5wb3N0PFRva2VuUmVzcG9uc2U+KHRoaXMuYXV0aENvbmZpZy5yZWZyZXNoVXJsLCB7fSwgaHR0cE9wdGlvbnMpXHJcbiAgICAgICAgLnBpcGUobWFwKHRva2VuID0+IHRoaXMucmVhZFVzZXJGcm9tVG9rZW4odG9rZW4pKSlcclxuICAgICAgICAudG9Qcm9taXNlKCk7XHJcbiAgICAgIHRoaXMucGVyc2lzdFVzZXIodXNlcik7XHJcbiAgICAgIHRoaXMudXBkYXRlVG9rZW5zUGVuZGluZyhuZXcgVG9rZW5zUGVuZGluZyhmYWxzZSwgdHJ1ZSkpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy51cGRhdGVUb2tlbnNQZW5kaW5nKG5ldyBUb2tlbnNQZW5kaW5nKGZhbHNlLCBmYWxzZSksIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvZ2luIHVzZXIgYW5kIHJlZGlyZWN0IGFmdGVyIHN1Y2Nlc3NmdWwgYXV0aGVudGljYXRpb24uXHJcbiAgICogQ3VzdG9tIGF1dGggc2VydmljZXMgbmVlZCB0byBwcm92aWRlIGltcGxlbWVudGF0aW9uXHJcbiAgICogQHBhcmFtIHJlZGlyZWN0VXJsIFVybCB0byByZWRpcmVjdCBhZnRlciBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uXHJcbiAgICovXHJcbiAgbG9naW4ocmVkaXJlY3RVcmw/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGxvY2F0aW9uLmhyZWYgPSB0aGlzLmdlbmVyYXRlTG9naW5VcmwocmVkaXJlY3RVcmwgPyByZWRpcmVjdFVybCA6IGxvY2F0aW9uLmhyZWYpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9nIG91dCB1c2VyIGFuZCByZWRpcmVjdCBhZnRlci5cclxuICAgKiBDdXN0b20gYXV0aCBzZXJ2aWNlcyBuZWVkIHRvIHByb3ZpZGUgaW1wbGVtZW50YXRpb25cclxuICAgKiBAcGFyYW0gcmVkaXJlY3RVcmwgVXJsIHRvIHJlZGlyZWN0IGFmdGVyIGxvZ2dpbmcgb3V0XHJcbiAgICovXHJcbiAgbG9nb3V0KHJlZGlyZWN0VXJsPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBsb2dvdXRDb25maWdTZXQgPVxyXG4gICAgICB0aGlzLmF1dGhDb25maWcubG9nb3V0VXJsICE9IG51bGwgfHwgdGhpcy5hdXRoQ29uZmlnLmxvZ291dFVybFBhcmFtSWRUb2tlbiAhPSBudWxsO1xyXG4gICAgY29uc3QgdXNlciA9IHRoaXMudXNlclN1YmplY3QuZ2V0VmFsdWUoKTtcclxuICAgIHRoaXMuY2xlYXJVc2VyKCk7XHJcbiAgICBpZiAoIWxvZ291dENvbmZpZ1NldCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ1VzZXIgc2lnbmVkIG91dCBsb2NhbGx5LCBidXQgbG9nb3V0IHJlcXVlc3QgdG93YXJkcyBPSURDIHNlcnZlciBub3QgaW5pdGlhdGVkIHNpbmNlIGxvZ291dFVybCBvciBsb2dvdXRVcmxQYXJhbUlkVG9rZW4gbm90IHNldCBpbiBhdXRoQ29uZmlnLidcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHVybCA9IGAke3RoaXMuYXV0aENvbmZpZy5sb2dvdXRVcmx9PyR7XHJcbiAgICAgIHRoaXMuYXV0aENvbmZpZy5sb2dvdXRVcmxQYXJhbUlkVG9rZW5cclxuICAgIH09JHtlbmNvZGVVUklDb21wb25lbnQodXNlci5pZF90b2tlbil9YDtcclxuICAgIGlmICh0aGlzLmF1dGhDb25maWcubG9nb3V0VXJsUGFyYW1SZWRpcmVjdCkge1xyXG4gICAgICAvLyBBdm9pZCBhbnkgcXVlcnkgcGFyYW1ldGVycyBmb3IgdGhlIGxvZ291dCByZWRpcmVjdCB1cmxcclxuICAgICAgcmVkaXJlY3RVcmwgPSByZWRpcmVjdFVybCA/PyBsb2NhdGlvbi5ocmVmLnNwbGl0KCc/JylbMF07XHJcbiAgICAgIHVybCA9IGAke3VybH0mJHt0aGlzLmF1dGhDb25maWcubG9nb3V0VXJsUGFyYW1SZWRpcmVjdH09JHtlbmNvZGVVUklDb21wb25lbnQocmVkaXJlY3RVcmwpfWA7XHJcbiAgICB9XHJcbiAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZUxvZ2luVXJsKHJlZGlyZWN0VXJsOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgcmVkaXJlY3RfYjY0ID0gJycgKyBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShyZWRpcmVjdFVybCkpO1xyXG5cclxuICAgIC8vIEdlbmVyYXRlIGEgc2Vzc2lvbiB2YWx1ZS5cclxuICAgIGNvbnN0IG5vbmNlID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgLy8gR2VuZXJhdGUgcGtjZVxyXG4gICAgY29uc3QgcGtjZSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDMyKS50b1N0cmluZygpO1xyXG4gICAgY29uc3QgYnl0ZXMgPSBDcnlwdG9KUy5TSEEyNTYocGtjZSkgYXMgQ3J5cHRvSlMuV29yZEFycmF5O1xyXG4gICAgbGV0IHBrY2VfaGFzaCA9IENyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KGJ5dGVzKTtcclxuXHJcbiAgICAvLyBLZXlDbG9hayByZXF1aXJlcyB0aGlzIC0gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2MzYjYXBwZW5kaXgtQVxyXG4gICAgcGtjZV9oYXNoID0gcGtjZV9oYXNoLnJlcGxhY2UoLz0vZywgJycpO1xyXG4gICAgcGtjZV9oYXNoID0gcGtjZV9oYXNoLnJlcGxhY2UoL1xcKy9nLCAnLScpO1xyXG4gICAgcGtjZV9oYXNoID0gcGtjZV9oYXNoLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xyXG5cclxuICAgIHRoaXMucGtjZSA9IHBrY2U7XHJcbiAgICB0aGlzLm5vbmNlID0gbm9uY2U7XHJcblxyXG4gICAgbGV0IHVybCA9IHRoaXMuYXV0aENvbmZpZy5sb2dpblVybDtcclxuICAgIHVybCArPSAnPycgKyB0aGlzLmF1dGhDb25maWcubG9naW5VcmxQYXJhbVJlZGlyZWN0ICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlZGlyZWN0X2I2NCk7XHJcbiAgICB1cmwgKz0gJyYnICsgdGhpcy5hdXRoQ29uZmlnLmxvZ2luVXJsUGFyYW1DaGFsbGVuZ2UgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQocGtjZV9oYXNoKTtcclxuICAgIHVybCArPSAnJicgKyB0aGlzLmF1dGhDb25maWcubG9naW5VcmxQYXJhbU5vbmNlICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG5vbmNlKTtcclxuICAgIHJldHVybiB1cmw7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlYWRDbGFpbXNGcm9tVG9rZW4odG9rZW46IHN0cmluZyk6IFRva2VuQ2xhaW1zIHwgbnVsbCB7XHJcbiAgICBpZiAoIXRva2VuLmluY2x1ZGVzKCcuJykpIHtcclxuICAgICAgLy8gVG9rZW4gaXMgbm90IGEgdmFsaWQgSldUIHRva2VuXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdG9rZW5QYXJ0cyA9IHRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICBjb25zdCBjbGFpbXNTdHJpbmcgPSB0aGlzLmI2NERlY29kZVVuaWNvZGUodG9rZW5QYXJ0c1sxXSk7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShjbGFpbXNTdHJpbmcpIGFzIFRva2VuQ2xhaW1zO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBiNjREZWNvZGVVbmljb2RlKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGJhc2U2NCA9IHN0ci5yZXBsYWNlKC9cXC0vZywgJysnKS5yZXBsYWNlKC9cXF8vZywgJy8nKTtcclxuXHJcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KFxyXG4gICAgICBhdG9iKGJhc2U2NClcclxuICAgICAgICAuc3BsaXQoJycpXHJcbiAgICAgICAgLm1hcChjID0+ICclJyArICgnMDAnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpKVxyXG4gICAgICAgIC5qb2luKCcnKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZzogc3RyaW5nKTogeyBrZXk6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9W10ge1xyXG4gICAgaWYgKCFxdWVyeVN0cmluZy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcXVlcnlEaWN0ID0gW107XHJcbiAgICBjb25zdCBwYWlycyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCcmJyk7XHJcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBwYWlyLmluZGV4T2YoJz0nKTtcclxuICAgICAgbGV0IGtleTogc3RyaW5nO1xyXG4gICAgICBsZXQgdmFsdWU6IHN0cmluZztcclxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgIGtleSA9IHBhaXI7XHJcbiAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAga2V5ID0gcGFpci5zdWJzdHIoMCwgaW5kZXgpO1xyXG4gICAgICAgIHZhbHVlID0gcGFpci5zdWJzdHIoaW5kZXggKyAxKTtcclxuICAgICAgfVxyXG4gICAgICBxdWVyeURpY3QucHVzaCh7XHJcbiAgICAgICAga2V5OiBkZWNvZGVVUklDb21wb25lbnQoa2V5KSxcclxuICAgICAgICB2YWx1ZTogZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBxdWVyeURpY3Q7XHJcbiAgfVxyXG59XHJcbiJdfQ==