import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { AvlAuthService } from './avl-auth.service';
import { INTERCEPTOR_BASE_PATHS } from '../variables';
let AvlTokenInterceptor = class AvlTokenInterceptor {
    constructor(auth, basePaths) {
        this.auth = auth;
        this.basePaths = basePaths;
        this.enabled = true;
        for (const i in this.basePaths) {
            if (this.basePaths.hasOwnProperty(i)) {
                this.basePaths[i] = this.basePaths[i].toLowerCase();
            }
        }
    }
    setAuthHeader(req) {
        const access_token = this.auth.currentUser.access_token;
        const header = `Bearer ${access_token}`;
        const headers = req.headers.set('Authorization', header);
        return req.clone({ headers });
    }
    intercept(req, next) {
        if (!this.enabled) {
            return next.handle(req);
        }
        // check if we need to add token into request
        const url = req.url.toLowerCase();
        for (const basePath of this.basePaths) {
            if (url.startsWith(basePath)) {
                if (this.auth.currentUser != null) {
                    req = this.setAuthHeader(req);
                }
                break;
            }
        }
        return next.handle(req).pipe(catchError((err) => {
            if (err.status === 401) {
                return from(this.auth.refreshTokens()).pipe(switchMap(_ => next.handle(this.setAuthHeader(req))), catchError(_ => throwError(err)));
            }
            return throwError(err);
        }));
    }
};
AvlTokenInterceptor.ɵfac = function AvlTokenInterceptor_Factory(t) { return new (t || AvlTokenInterceptor)(ɵngcc0.ɵɵinject(AvlAuthService), ɵngcc0.ɵɵinject(INTERCEPTOR_BASE_PATHS)); };
AvlTokenInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AvlTokenInterceptor, factory: AvlTokenInterceptor.ɵfac });
AvlTokenInterceptor.ctorParameters = () => [
    { type: AvlAuthService },
    { type: Array, decorators: [{ type: Inject, args: [INTERCEPTOR_BASE_PATHS,] }] }
];
AvlTokenInterceptor = __decorate([ __param(1, Inject(INTERCEPTOR_BASE_PATHS)),
    __metadata("design:paramtypes", [AvlAuthService, Array])
], AvlTokenInterceptor);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlTokenInterceptor, [{
        type: Injectable
    }], function () { return [{ type: AvlAuthService }, { type: Array, decorators: [{
                type: Inject,
                args: [INTERCEPTOR_BASE_PATHS]
            }] }]; }, null); })();
export { AvlTokenInterceptor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,