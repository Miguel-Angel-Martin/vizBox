import { BehaviorSubject } from 'rxjs';
export class AvlAuthService {
    constructor() {
        /**
         * User data is held in this property
         */
        this.userSubject = new BehaviorSubject(undefined);
        /**
         * Current user as Observable
         */
        this.user$ = this.userSubject.asObservable();
        /**
         * String holding error message in case user couldn't authenticate
         */
        this.errorMessageSubject = new BehaviorSubject(undefined);
        /**
         * Error messsage in case failed authentication as Observable
         */
        this.errorMessage$ = this.errorMessageSubject.asObservable();
    }
    /**
     * Currently authenticated user data
     */
    get currentUser() {
        return this.userSubject.value;
    }
    /**
     * Current error message for fail authentication
     * Undefined when user is logged in
     */
    get errorMessage() {
        return this.errorMessageSubject.value;
    }
    /**
     * Use to clear error message after user is informed
     */
    clearErrorMessage() {
        this.errorMessageSubject.next(undefined);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWF1dGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtbmctY29udHJvbHMvYXV0aC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hdmwtYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbkQsTUFBTSxPQUFnQixjQUFjO0lBQXBDO1FBQ0U7O1dBRUc7UUFDTyxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFPLFNBQVMsQ0FBQyxDQUFDO1FBRTdEOztXQUVHO1FBQ0ksVUFBSyxHQUFxQixJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWpFOztXQUVHO1FBQ08sd0JBQW1CLEdBQUcsSUFBSSxlQUFlLENBQVMsU0FBUyxDQUFDLENBQUM7UUFFdkU7O1dBRUc7UUFDSSxrQkFBYSxHQUF1QixJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLENBQUM7SUE0RHJGLENBQUM7SUEzQkM7O09BRUc7SUFDSCxJQUFXLFdBQVc7UUFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQztJQUN4QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpQkFBaUI7UUFDdEIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxDQUFDO0NBT0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL3VzZXIubW9kZWwnO1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXZsQXV0aFNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIFVzZXIgZGF0YSBpcyBoZWxkIGluIHRoaXMgcHJvcGVydHlcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgdXNlclN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFVzZXI+KHVuZGVmaW5lZCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1cnJlbnQgdXNlciBhcyBPYnNlcnZhYmxlXHJcbiAgICovXHJcbiAgcHVibGljIHVzZXIkOiBPYnNlcnZhYmxlPFVzZXI+ID0gdGhpcy51c2VyU3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgLyoqXHJcbiAgICogU3RyaW5nIGhvbGRpbmcgZXJyb3IgbWVzc2FnZSBpbiBjYXNlIHVzZXIgY291bGRuJ3QgYXV0aGVudGljYXRlXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGVycm9yTWVzc2FnZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4odW5kZWZpbmVkKTtcclxuXHJcbiAgLyoqXHJcbiAgICogRXJyb3IgbWVzc3NhZ2UgaW4gY2FzZSBmYWlsZWQgYXV0aGVudGljYXRpb24gYXMgT2JzZXJ2YWJsZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcnJvck1lc3NhZ2UkOiBPYnNlcnZhYmxlPHN0cmluZz4gPSB0aGlzLmVycm9yTWVzc2FnZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9ic2VydmFibGUgdHJhY2tpbmcgYXV0aGVudGljYXRlZCBzdGF0ZVxyXG4gICAqIFJlc29sdmVzIHRvIHRydWUgb24gc3VjY2Vzc2Z1bCBsb2cgaW4sIGZhbHNlIG90aGVyd2lzZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBpc0xvZ2dlZEluJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuXHJcbiAgLyoqXHJcbiAgICogT2JzZXJ2YWJsZSB0cmFja2luZyBpZiByZWRpcmVjdGVkIGZyb20gaWRiXHJcbiAgICogUmVzb2x2ZXMgdG8gdHJ1ZSBvbiByZWRpcmVjdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IHJlZGlyZWN0ZWRGcm9tTG9nSW46IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPjtcclxuXHJcbiAgLyoqXHJcbiAgICogTG9naW4gdXNlciBhbmQgcmVkaXJlY3QgYWZ0ZXIgc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvbi5cclxuICAgKiBDdXN0b20gYXV0aCBzZXJ2aWNlcyBuZWVkIHRvIHByb3ZpZGUgaW1wbGVtZW50YXRpb25cclxuICAgKiBAcGFyYW0gcmVkaXJlY3RVcmwgVXJsIHRvIHJlZGlyZWN0IGFmdGVyIHN1Y2Nlc2Z1bCBhdXRoZW50aWNhdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBsb2dpbihyZWRpcmVjdFVybD86IHN0cmluZyk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICogSWYgdG9rZW5zIGFyZSBwZXJpc3RlZCBpbiBsb2NhbCBzdG9yYWdlLCBzZXQgY3VycmVudCB1c2VyIGRhdGFcclxuICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCByZWxvYWRQZXJzaXN0ZWRVc2VyRGF0YSgpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBMb2cgb3V0IHVzZXIgYW5kIHJlZGlyZWN0IGFmdGVyLlxyXG4gICAqIEN1c3RvbSBhdXRoIHNlcnZpY2VzIG5lZWQgdG8gcHJvdmlkZSBpbXBsZW1lbnRhdGlvblxyXG4gICAqIEBwYXJhbSByZWRpcmVjdFVybCBVcmwgdG8gcmVkaXJlY3QgYWZ0ZXIgbG9nZ2luZyBvdXRcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgbG9nb3V0KHJlZGlyZWN0VXJsPzogc3RyaW5nKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBkYXRhXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBjdXJyZW50VXNlcigpOiBVc2VyIHtcclxuICAgIHJldHVybiB0aGlzLnVzZXJTdWJqZWN0LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3VycmVudCBlcnJvciBtZXNzYWdlIGZvciBmYWlsIGF1dGhlbnRpY2F0aW9uXHJcbiAgICogVW5kZWZpbmVkIHdoZW4gdXNlciBpcyBsb2dnZWQgaW5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGVycm9yTWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZXJyb3JNZXNzYWdlU3ViamVjdC52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZSB0byBjbGVhciBlcnJvciBtZXNzYWdlIGFmdGVyIHVzZXIgaXMgaW5mb3JtZWRcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXJFcnJvck1lc3NhZ2UoKSB7XHJcbiAgICB0aGlzLmVycm9yTWVzc2FnZVN1YmplY3QubmV4dCh1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yIHRva2VuIGJhc2VkIGF1dGhldGljYXRpb24uXHJcbiAgICogUHJvdmlkZSBmdW5jdGlvbmFsaXR5IHRvIHJlZnJlc2ggdG9rZW5zXHJcbiAgICovXHJcbiAgcHVibGljIHJlZnJlc2hUb2tlbnM/KCk6IFByb21pc2U8YW55PjtcclxufVxyXG4iXX0=