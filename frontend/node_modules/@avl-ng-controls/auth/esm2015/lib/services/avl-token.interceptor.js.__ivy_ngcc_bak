var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { AvlAuthService } from './avl-auth.service';
import { INTERCEPTOR_BASE_PATHS } from '../variables';
let AvlTokenInterceptor = class AvlTokenInterceptor {
    constructor(auth, basePaths) {
        this.auth = auth;
        this.basePaths = basePaths;
        this.enabled = true;
        for (const i in this.basePaths) {
            if (this.basePaths.hasOwnProperty(i)) {
                this.basePaths[i] = this.basePaths[i].toLowerCase();
            }
        }
    }
    setAuthHeader(req) {
        const access_token = this.auth.currentUser.access_token;
        const header = `Bearer ${access_token}`;
        const headers = req.headers.set('Authorization', header);
        return req.clone({ headers });
    }
    intercept(req, next) {
        if (!this.enabled) {
            return next.handle(req);
        }
        // check if we need to add token into request
        const url = req.url.toLowerCase();
        for (const basePath of this.basePaths) {
            if (url.startsWith(basePath)) {
                if (this.auth.currentUser != null) {
                    req = this.setAuthHeader(req);
                }
                break;
            }
        }
        return next.handle(req).pipe(catchError((err) => {
            if (err.status === 401) {
                return from(this.auth.refreshTokens()).pipe(switchMap(_ => next.handle(this.setAuthHeader(req))), catchError(_ => throwError(err)));
            }
            return throwError(err);
        }));
    }
};
AvlTokenInterceptor.ctorParameters = () => [
    { type: AvlAuthService },
    { type: Array, decorators: [{ type: Inject, args: [INTERCEPTOR_BASE_PATHS,] }] }
];
AvlTokenInterceptor = __decorate([
    Injectable(),
    __param(1, Inject(INTERCEPTOR_BASE_PATHS)),
    __metadata("design:paramtypes", [AvlAuthService, Array])
], AvlTokenInterceptor);
export { AvlTokenInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXRva2VuLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1uZy1jb250cm9scy9hdXRoLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2F2bC10b2tlbi5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVFuRCxPQUFPLEVBQWMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFHdEQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFHOUIsWUFDUyxJQUFvQixFQUNlLFNBQW1CO1FBRHRELFNBQUksR0FBSixJQUFJLENBQWdCO1FBQ2UsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUpyRCxZQUFPLEdBQUcsSUFBSSxDQUFDO1FBTXZCLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDckQ7U0FDRjtJQUNILENBQUM7SUFFTyxhQUFhLENBQUMsR0FBcUI7UUFDekMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1FBQ3hELE1BQU0sTUFBTSxHQUFHLFVBQVUsWUFBWSxFQUFFLENBQUM7UUFDeEMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXpELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBQ2hELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QjtRQUVELDZDQUE2QztRQUM3QyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLEtBQUssTUFBTSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNyQyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzVCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO29CQUNqQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDL0I7Z0JBQ0QsTUFBTTthQUNQO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixVQUFVLENBQUMsQ0FBQyxHQUFzQixFQUFFLEVBQUU7WUFDcEMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDekMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFDcEQsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2pDLENBQUM7YUFDSDtZQUNELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTs7WUE5Q2dCLGNBQWM7d0NBQzFCLE1BQU0sU0FBQyxzQkFBc0I7O0FBTHJCLG1CQUFtQjtJQUQvQixVQUFVLEVBQUU7SUFNUixXQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO3FDQURsQixjQUFjO0dBSmxCLG1CQUFtQixDQWtEL0I7U0FsRFksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgSHR0cFJlcXVlc3QsXHJcbiAgSHR0cEhhbmRsZXIsXHJcbiAgSHR0cEV2ZW50LFxyXG4gIEh0dHBJbnRlcmNlcHRvcixcclxuICBIdHRwRXJyb3JSZXNwb25zZVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBBdmxBdXRoU2VydmljZSB9IGZyb20gJy4vYXZsLWF1dGguc2VydmljZSc7XHJcbmltcG9ydCB7IElOVEVSQ0VQVE9SX0JBU0VfUEFUSFMgfSBmcm9tICcuLi92YXJpYWJsZXMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXZsVG9rZW5JbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgcHJvdGVjdGVkIGVuYWJsZWQgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBhdXRoOiBBdmxBdXRoU2VydmljZSxcclxuICAgIEBJbmplY3QoSU5URVJDRVBUT1JfQkFTRV9QQVRIUykgcHJvdGVjdGVkIGJhc2VQYXRoczogc3RyaW5nW11cclxuICApIHtcclxuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLmJhc2VQYXRocykge1xyXG4gICAgICBpZiAodGhpcy5iYXNlUGF0aHMuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICB0aGlzLmJhc2VQYXRoc1tpXSA9IHRoaXMuYmFzZVBhdGhzW2ldLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0QXV0aEhlYWRlcihyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVxdWVzdDxhbnk+IHtcclxuICAgIGNvbnN0IGFjY2Vzc190b2tlbiA9IHRoaXMuYXV0aC5jdXJyZW50VXNlci5hY2Nlc3NfdG9rZW47XHJcbiAgICBjb25zdCBoZWFkZXIgPSBgQmVhcmVyICR7YWNjZXNzX3Rva2VufWA7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gcmVxLmhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgaGVhZGVyKTtcclxuXHJcbiAgICByZXR1cm4gcmVxLmNsb25lKHsgaGVhZGVycyB9KTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBhZGQgdG9rZW4gaW50byByZXF1ZXN0XHJcbiAgICBjb25zdCB1cmwgPSByZXEudXJsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBmb3IgKGNvbnN0IGJhc2VQYXRoIG9mIHRoaXMuYmFzZVBhdGhzKSB7XHJcbiAgICAgIGlmICh1cmwuc3RhcnRzV2l0aChiYXNlUGF0aCkpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRoLmN1cnJlbnRVc2VyICE9IG51bGwpIHtcclxuICAgICAgICAgIHJlcSA9IHRoaXMuc2V0QXV0aEhlYWRlcihyZXEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXHJcbiAgICAgIGNhdGNoRXJyb3IoKGVycjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAoZXJyLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmF1dGgucmVmcmVzaFRva2VucygpKS5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoXyA9PiBuZXh0LmhhbmRsZSh0aGlzLnNldEF1dGhIZWFkZXIocmVxKSkpLFxyXG4gICAgICAgICAgICBjYXRjaEVycm9yKF8gPT4gdGhyb3dFcnJvcihlcnIpKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==