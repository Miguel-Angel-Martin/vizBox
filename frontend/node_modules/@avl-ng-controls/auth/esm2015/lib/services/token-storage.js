import { StorageNames } from './storage-names';
export class TokenStorage {
    constructor(prefix) {
        this.prefix = '';
        this.prefix = prefix !== null && prefix !== void 0 ? prefix : '';
    }
    readUser() {
        const roles = JSON.parse(this.getItem(StorageNames.Roles));
        return {
            username: this.getItem(StorageNames.UserName),
            name: this.getItem(StorageNames.Name),
            access_token: this.getItem(StorageNames.AccessToken),
            access_token_expires: this.getNumber(StorageNames.AccessTokenExpiresAt),
            refresh_token: this.getItem(StorageNames.RefreshToken),
            refresh_token_expires: this.getNumber(StorageNames.RefreshTokenExpiresAt),
            id_token: this.getItem(StorageNames.IdToken),
            roles
        };
    }
    storeUser(user) {
        this.setItem(StorageNames.UserName, user.username);
        this.setItem(StorageNames.Name, user.name);
        this.setItem(StorageNames.AccessToken, user.access_token);
        this.setItem(StorageNames.AccessTokenExpiresAt, `${user.access_token_expires}`);
        this.setItem(StorageNames.RefreshToken, user.refresh_token);
        this.setItem(StorageNames.RefreshTokenExpiresAt, `${user.refresh_token_expires}`);
        this.setItem(StorageNames.IdToken, user.id_token);
        const rolesStr = JSON.stringify(user.roles);
        sessionStorage.setItem(StorageNames.Roles, `${rolesStr}`);
    }
    clearUser() {
        for (const name in StorageNames) {
            if (StorageNames.hasOwnProperty(name)) {
                this.removeItem(StorageNames[name]);
            }
        }
    }
    getNumber(key) {
        return parseInt(this.getItem(key), 10);
    }
    getItem(key) {
        return sessionStorage.getItem(this.prefix + key);
    }
    setItem(key, value) {
        sessionStorage.setItem(this.prefix + key, value);
    }
    removeItem(key) {
        sessionStorage.removeItem(this.prefix + key);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4tc3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtbmctY29udHJvbHMvYXV0aC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90b2tlbi1zdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxNQUFNLE9BQU8sWUFBWTtJQUd2QixZQUFZLE1BQWU7UUFGbkIsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUdsQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQWEsQ0FBQztRQUN2RSxPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUM3QyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3JDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDcEQsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUM7WUFDdkUsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztZQUN0RCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQztZQUN6RSxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQzVDLEtBQUs7U0FDTixDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFVO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWxELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLGNBQWMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELFNBQVM7UUFDUCxLQUFLLE1BQU0sSUFBSSxJQUFJLFlBQVksRUFBRTtZQUMvQixJQUFJLFlBQVksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDckM7U0FDRjtJQUNILENBQUM7SUFFTyxTQUFTLENBQUMsR0FBVztRQUMzQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVztRQUNqQixPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ2hDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFXO1FBQ3BCLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vdXNlci5tb2RlbCc7XHJcbmltcG9ydCB7IFN0b3JhZ2VOYW1lcyB9IGZyb20gJy4vc3RvcmFnZS1uYW1lcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgVG9rZW5TdG9yYWdlIHtcclxuICBwcml2YXRlIHByZWZpeCA9ICcnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwcmVmaXg/OiBzdHJpbmcpIHtcclxuICAgIHRoaXMucHJlZml4ID0gcHJlZml4ID8/ICcnO1xyXG4gIH1cclxuXHJcbiAgcmVhZFVzZXIoKTogVXNlciB7XHJcbiAgICBjb25zdCByb2xlcyA9IEpTT04ucGFyc2UodGhpcy5nZXRJdGVtKFN0b3JhZ2VOYW1lcy5Sb2xlcykpIGFzIHN0cmluZ1tdO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdXNlcm5hbWU6IHRoaXMuZ2V0SXRlbShTdG9yYWdlTmFtZXMuVXNlck5hbWUpLFxyXG4gICAgICBuYW1lOiB0aGlzLmdldEl0ZW0oU3RvcmFnZU5hbWVzLk5hbWUpLFxyXG4gICAgICBhY2Nlc3NfdG9rZW46IHRoaXMuZ2V0SXRlbShTdG9yYWdlTmFtZXMuQWNjZXNzVG9rZW4pLFxyXG4gICAgICBhY2Nlc3NfdG9rZW5fZXhwaXJlczogdGhpcy5nZXROdW1iZXIoU3RvcmFnZU5hbWVzLkFjY2Vzc1Rva2VuRXhwaXJlc0F0KSxcclxuICAgICAgcmVmcmVzaF90b2tlbjogdGhpcy5nZXRJdGVtKFN0b3JhZ2VOYW1lcy5SZWZyZXNoVG9rZW4pLFxyXG4gICAgICByZWZyZXNoX3Rva2VuX2V4cGlyZXM6IHRoaXMuZ2V0TnVtYmVyKFN0b3JhZ2VOYW1lcy5SZWZyZXNoVG9rZW5FeHBpcmVzQXQpLFxyXG4gICAgICBpZF90b2tlbjogdGhpcy5nZXRJdGVtKFN0b3JhZ2VOYW1lcy5JZFRva2VuKSxcclxuICAgICAgcm9sZXNcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdG9yZVVzZXIodXNlcjogVXNlcikge1xyXG4gICAgdGhpcy5zZXRJdGVtKFN0b3JhZ2VOYW1lcy5Vc2VyTmFtZSwgdXNlci51c2VybmFtZSk7XHJcbiAgICB0aGlzLnNldEl0ZW0oU3RvcmFnZU5hbWVzLk5hbWUsIHVzZXIubmFtZSk7XHJcbiAgICB0aGlzLnNldEl0ZW0oU3RvcmFnZU5hbWVzLkFjY2Vzc1Rva2VuLCB1c2VyLmFjY2Vzc190b2tlbik7XHJcbiAgICB0aGlzLnNldEl0ZW0oU3RvcmFnZU5hbWVzLkFjY2Vzc1Rva2VuRXhwaXJlc0F0LCBgJHt1c2VyLmFjY2Vzc190b2tlbl9leHBpcmVzfWApO1xyXG4gICAgdGhpcy5zZXRJdGVtKFN0b3JhZ2VOYW1lcy5SZWZyZXNoVG9rZW4sIHVzZXIucmVmcmVzaF90b2tlbik7XHJcbiAgICB0aGlzLnNldEl0ZW0oU3RvcmFnZU5hbWVzLlJlZnJlc2hUb2tlbkV4cGlyZXNBdCwgYCR7dXNlci5yZWZyZXNoX3Rva2VuX2V4cGlyZXN9YCk7XHJcbiAgICB0aGlzLnNldEl0ZW0oU3RvcmFnZU5hbWVzLklkVG9rZW4sIHVzZXIuaWRfdG9rZW4pO1xyXG5cclxuICAgIGNvbnN0IHJvbGVzU3RyID0gSlNPTi5zdHJpbmdpZnkodXNlci5yb2xlcyk7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFN0b3JhZ2VOYW1lcy5Sb2xlcywgYCR7cm9sZXNTdHJ9YCk7XHJcbiAgfVxyXG5cclxuICBjbGVhclVzZXIoKSB7XHJcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gU3RvcmFnZU5hbWVzKSB7XHJcbiAgICAgIGlmIChTdG9yYWdlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oU3RvcmFnZU5hbWVzW25hbWVdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXROdW1iZXIoa2V5OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuZ2V0SXRlbShrZXkpLCAxMCk7XHJcbiAgfVxyXG5cclxuICBnZXRJdGVtKGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHRoaXMucHJlZml4ICsga2V5KTtcclxuICB9XHJcblxyXG4gIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0odGhpcy5wcmVmaXggKyBrZXksIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5wcmVmaXggKyBrZXkpO1xyXG4gIH1cclxufVxyXG4iXX0=