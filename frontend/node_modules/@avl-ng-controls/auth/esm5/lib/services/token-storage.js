import { StorageNames } from './storage-names';
var TokenStorage = /** @class */ (function () {
    function TokenStorage(prefix) {
        this.prefix = '';
        this.prefix = prefix !== null && prefix !== void 0 ? prefix : '';
    }
    TokenStorage.prototype.readUser = function () {
        var roles = JSON.parse(this.getItem(StorageNames.Roles));
        return {
            username: this.getItem(StorageNames.UserName),
            name: this.getItem(StorageNames.Name),
            access_token: this.getItem(StorageNames.AccessToken),
            access_token_expires: this.getNumber(StorageNames.AccessTokenExpiresAt),
            refresh_token: this.getItem(StorageNames.RefreshToken),
            refresh_token_expires: this.getNumber(StorageNames.RefreshTokenExpiresAt),
            id_token: this.getItem(StorageNames.IdToken),
            roles: roles
        };
    };
    TokenStorage.prototype.storeUser = function (user) {
        this.setItem(StorageNames.UserName, user.username);
        this.setItem(StorageNames.Name, user.name);
        this.setItem(StorageNames.AccessToken, user.access_token);
        this.setItem(StorageNames.AccessTokenExpiresAt, "" + user.access_token_expires);
        this.setItem(StorageNames.RefreshToken, user.refresh_token);
        this.setItem(StorageNames.RefreshTokenExpiresAt, "" + user.refresh_token_expires);
        this.setItem(StorageNames.IdToken, user.id_token);
        var rolesStr = JSON.stringify(user.roles);
        sessionStorage.setItem(StorageNames.Roles, "" + rolesStr);
    };
    TokenStorage.prototype.clearUser = function () {
        for (var name_1 in StorageNames) {
            if (StorageNames.hasOwnProperty(name_1)) {
                this.removeItem(StorageNames[name_1]);
            }
        }
    };
    TokenStorage.prototype.getNumber = function (key) {
        return parseInt(this.getItem(key), 10);
    };
    TokenStorage.prototype.getItem = function (key) {
        return sessionStorage.getItem(this.prefix + key);
    };
    TokenStorage.prototype.setItem = function (key, value) {
        sessionStorage.setItem(this.prefix + key, value);
    };
    TokenStorage.prototype.removeItem = function (key) {
        sessionStorage.removeItem(this.prefix + key);
    };
    return TokenStorage;
}());
export { TokenStorage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4tc3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtbmctY29udHJvbHMvYXV0aC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90b2tlbi1zdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUdFLHNCQUFZLE1BQWU7UUFGbkIsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUdsQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsK0JBQVEsR0FBUjtRQUNFLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQWEsQ0FBQztRQUN2RSxPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUM3QyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3JDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDcEQsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUM7WUFDdkUsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztZQUN0RCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQztZQUN6RSxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQzVDLEtBQUssT0FBQTtTQUNOLENBQUM7SUFDSixDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUFVLElBQVU7UUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsS0FBRyxJQUFJLENBQUMsb0JBQXNCLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLEtBQUcsSUFBSSxDQUFDLHFCQUF1QixDQUFDLENBQUM7UUFDbEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVsRCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxjQUFjLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBRyxRQUFVLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsZ0NBQVMsR0FBVDtRQUNFLEtBQUssSUFBTSxNQUFJLElBQUksWUFBWSxFQUFFO1lBQy9CLElBQUksWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFJLENBQUMsRUFBRTtnQkFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBSSxDQUFDLENBQUMsQ0FBQzthQUNyQztTQUNGO0lBQ0gsQ0FBQztJQUVPLGdDQUFTLEdBQWpCLFVBQWtCLEdBQVc7UUFDM0IsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsOEJBQU8sR0FBUCxVQUFRLEdBQVc7UUFDakIsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELDhCQUFPLEdBQVAsVUFBUSxHQUFXLEVBQUUsS0FBYTtRQUNoQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxpQ0FBVSxHQUFWLFVBQVcsR0FBVztRQUNwQixjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi91c2VyLm1vZGVsJztcclxuaW1wb3J0IHsgU3RvcmFnZU5hbWVzIH0gZnJvbSAnLi9zdG9yYWdlLW5hbWVzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2tlblN0b3JhZ2Uge1xyXG4gIHByaXZhdGUgcHJlZml4ID0gJyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByZWZpeD86IHN0cmluZykge1xyXG4gICAgdGhpcy5wcmVmaXggPSBwcmVmaXggPz8gJyc7XHJcbiAgfVxyXG5cclxuICByZWFkVXNlcigpOiBVc2VyIHtcclxuICAgIGNvbnN0IHJvbGVzID0gSlNPTi5wYXJzZSh0aGlzLmdldEl0ZW0oU3RvcmFnZU5hbWVzLlJvbGVzKSkgYXMgc3RyaW5nW107XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB1c2VybmFtZTogdGhpcy5nZXRJdGVtKFN0b3JhZ2VOYW1lcy5Vc2VyTmFtZSksXHJcbiAgICAgIG5hbWU6IHRoaXMuZ2V0SXRlbShTdG9yYWdlTmFtZXMuTmFtZSksXHJcbiAgICAgIGFjY2Vzc190b2tlbjogdGhpcy5nZXRJdGVtKFN0b3JhZ2VOYW1lcy5BY2Nlc3NUb2tlbiksXHJcbiAgICAgIGFjY2Vzc190b2tlbl9leHBpcmVzOiB0aGlzLmdldE51bWJlcihTdG9yYWdlTmFtZXMuQWNjZXNzVG9rZW5FeHBpcmVzQXQpLFxyXG4gICAgICByZWZyZXNoX3Rva2VuOiB0aGlzLmdldEl0ZW0oU3RvcmFnZU5hbWVzLlJlZnJlc2hUb2tlbiksXHJcbiAgICAgIHJlZnJlc2hfdG9rZW5fZXhwaXJlczogdGhpcy5nZXROdW1iZXIoU3RvcmFnZU5hbWVzLlJlZnJlc2hUb2tlbkV4cGlyZXNBdCksXHJcbiAgICAgIGlkX3Rva2VuOiB0aGlzLmdldEl0ZW0oU3RvcmFnZU5hbWVzLklkVG9rZW4pLFxyXG4gICAgICByb2xlc1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0b3JlVXNlcih1c2VyOiBVc2VyKSB7XHJcbiAgICB0aGlzLnNldEl0ZW0oU3RvcmFnZU5hbWVzLlVzZXJOYW1lLCB1c2VyLnVzZXJuYW1lKTtcclxuICAgIHRoaXMuc2V0SXRlbShTdG9yYWdlTmFtZXMuTmFtZSwgdXNlci5uYW1lKTtcclxuICAgIHRoaXMuc2V0SXRlbShTdG9yYWdlTmFtZXMuQWNjZXNzVG9rZW4sIHVzZXIuYWNjZXNzX3Rva2VuKTtcclxuICAgIHRoaXMuc2V0SXRlbShTdG9yYWdlTmFtZXMuQWNjZXNzVG9rZW5FeHBpcmVzQXQsIGAke3VzZXIuYWNjZXNzX3Rva2VuX2V4cGlyZXN9YCk7XHJcbiAgICB0aGlzLnNldEl0ZW0oU3RvcmFnZU5hbWVzLlJlZnJlc2hUb2tlbiwgdXNlci5yZWZyZXNoX3Rva2VuKTtcclxuICAgIHRoaXMuc2V0SXRlbShTdG9yYWdlTmFtZXMuUmVmcmVzaFRva2VuRXhwaXJlc0F0LCBgJHt1c2VyLnJlZnJlc2hfdG9rZW5fZXhwaXJlc31gKTtcclxuICAgIHRoaXMuc2V0SXRlbShTdG9yYWdlTmFtZXMuSWRUb2tlbiwgdXNlci5pZF90b2tlbik7XHJcblxyXG4gICAgY29uc3Qgcm9sZXNTdHIgPSBKU09OLnN0cmluZ2lmeSh1c2VyLnJvbGVzKTtcclxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oU3RvcmFnZU5hbWVzLlJvbGVzLCBgJHtyb2xlc1N0cn1gKTtcclxuICB9XHJcblxyXG4gIGNsZWFyVXNlcigpIHtcclxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBTdG9yYWdlTmFtZXMpIHtcclxuICAgICAgaWYgKFN0b3JhZ2VOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbShTdG9yYWdlTmFtZXNbbmFtZV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldE51bWJlcihrZXk6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5nZXRJdGVtKGtleSksIDEwKTtcclxuICB9XHJcblxyXG4gIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0odGhpcy5wcmVmaXggKyBrZXkpO1xyXG4gIH1cclxuXHJcbiAgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnByZWZpeCArIGtleSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLnByZWZpeCArIGtleSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==