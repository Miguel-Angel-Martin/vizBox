import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/common';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { Injectable, Inject } from '@angular/core';
import { Location } from '@angular/common';
import { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { map, take, distinctUntilKeyChanged, skipWhile, catchError } from 'rxjs/operators';
import * as CryptoJS from 'crypto-js';
import { AvlAuthService } from './avl-auth.service';
import { AUTH_CONFIG } from '../variables';
import { TokensPending } from './token-pending';
import { TokenStorage } from './token-storage';
import { StorageNames } from './storage-names';
var LOGOUT_CONFIG_NOT_SET_ERROR = 'User signed out locally, but logout request towards OIDC server not initiated since logoutUrl is not set in authConfig.';
var AvlOidcCodeAuthService = /** @class */ (function (_super) {
    __extends(AvlOidcCodeAuthService, _super);
    function AvlOidcCodeAuthService(httpBackend, authConfig, router, loc) {
        var _this = _super.call(this) || this;
        _this.httpBackend = httpBackend;
        _this.authConfig = authConfig;
        _this.router = router;
        _this.loc = loc;
        // success will be set after tokens are successfully fetched or not
        _this.tokensPendingSubject = new BehaviorSubject(new TokensPending(false));
        /**
         * Observable tracking if redirected from idb
         * Resolves to true on redirection, false otherwise
         */
        _this.redirectedFromLogIn = new BehaviorSubject(undefined);
        _this.http = new HttpClient(_this.httpBackend);
        _this.tokensPending$ = _this.tokensPendingSubject.asObservable();
        _this.isLoggedIn$ = new Observable(function (observer) {
            var tokensPendingState = _this.tokensPendingSubject.value;
            _this.tokensPending$
                .pipe(distinctUntilKeyChanged('waiting'), skipWhile(function (tokenPending) { return tokenPending.waiting !== false; }), map(function (tokenPending) {
                if (tokenPending.success != null) {
                    observer.next(tokenPending.success);
                }
            }), take(1))
                .subscribe();
            if (tokensPendingState.waiting !== true && tokensPendingState.success !== null) {
                observer.next(_this.currentUser != null && _this.isAccessTokenValid());
            }
        });
        _this.storage = new TokenStorage(_this.authConfig.tokenPrefix);
        var user = _this.storage.readUser();
        if (_this.isUserInvalid(user)) {
            _this.storage.clearUser();
        }
        else {
            _this.persistUser(user);
        }
        // if user is not logged in and pkce exists handle redirect from oidc server if possible
        if (_this.currentUser == null && _this.pkce) {
            _this.handleOidcRedirect();
        }
        else {
            _this.redirectedFromLogIn.next(Boolean(_this.currentUser));
        }
        return _this;
    }
    AvlOidcCodeAuthService.prototype.isUserInvalid = function (data) {
        return (data.username == null || data.access_token == null || data.access_token_expires < Date.now());
    };
    Object.defineProperty(AvlOidcCodeAuthService.prototype, "pkce", {
        get: function () {
            return this.storage.getItem('pkce') || undefined;
        },
        set: function (c) {
            if (c) {
                this.storage.setItem('pkce', c);
            }
            else {
                this.storage.removeItem('pkce');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlOidcCodeAuthService.prototype, "nonce", {
        get: function () {
            return sessionStorage.getItem('nonce') || undefined;
        },
        set: function (c) {
            if (c) {
                this.storage.setItem('nonce', c);
            }
            else {
                this.storage.removeItem('nonce');
            }
        },
        enumerable: true,
        configurable: true
    });
    AvlOidcCodeAuthService.prototype.isAccessTokenValid = function () {
        return Date.now() < this.currentUser.access_token_expires;
    };
    AvlOidcCodeAuthService.prototype.persistUser = function (user) {
        if (!user) {
            this.clearUser();
            return;
        }
        this.storage.storeUser(user);
        this.userSubject.next(user);
    };
    AvlOidcCodeAuthService.prototype.clearUser = function () {
        this.storage.clearUser();
        this.userSubject.next(undefined);
    };
    /*
     * Checks if current url is redirect from oidc server and gets access token from the server.
     */
    AvlOidcCodeAuthService.prototype.handleOidcRedirect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pkce, urlParts, urlHash, first, last, urlPartSplit, query, queryCode, i, nonce, httpOptions, user, error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pkce = this.pkce;
                        this.pkce = undefined;
                        urlParts = this.loc.path(true).split('?', 2);
                        if (urlParts.length === 2) {
                            first = urlParts[1].lastIndexOf('#');
                            if (first !== -1) {
                                last = urlParts[1].lastIndexOf('&');
                                urlHash = urlParts[1].slice(first, last);
                                urlPartSplit = urlParts[1].split('#', 2);
                                urlParts[1] = urlParts[1].split('&').pop();
                                urlParts[1] = urlPartSplit[0].concat('&').concat(urlParts[1]);
                            }
                        }
                        query = urlParts.length === 2 ? this.parseQueryString(urlParts[1]) : [];
                        for (i = query.length - 1; i >= 0; i--) {
                            if (query[i].key === 'code') {
                                queryCode = query[i].value;
                                query = __spread(query.slice(0, i), query.slice(i + 1));
                                break;
                            }
                        }
                        if (!(urlParts.length === 2 && queryCode)) return [3 /*break*/, 4];
                        nonce = this.nonce;
                        this.nonce = undefined;
                        httpOptions = {
                            headers: new HttpHeaders({
                                code: queryCode,
                                verifier: pkce,
                                nonce: nonce
                            })
                        };
                        this.updateTokensPending(new TokensPending(true));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.http
                                .post(this.authConfig.tokenUrl, {}, httpOptions)
                                .pipe(map(function (token) { return _this.readUserFromToken(token); }))
                                .toPromise()];
                    case 2:
                        user = _a.sent();
                        this.persistUser(user);
                        this.updateTokensPending(new TokensPending(false, true));
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        this.updateTokensPending(new TokensPending(false, false), error_1.message);
                        return [3 /*break*/, 4];
                    case 4:
                        if (urlHash) {
                            this.router.navigateByUrl("" + urlParts[0] + this.reconstructQueryParamString(query) + urlHash, { replaceUrl: true });
                            this.redirectedFromLogIn.next(true);
                        }
                        else {
                            this.router.navigateByUrl("" + urlParts[0] + this.reconstructQueryParamString(query), {
                                replaceUrl: true
                            });
                            this.redirectedFromLogIn.next(Boolean(this.currentUser));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AvlOidcCodeAuthService.prototype.reloadPersistedUserData = function () {
        var _a;
        var user = this.storage.readUser();
        if (((_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.access_token) === (user === null || user === void 0 ? void 0 : user.access_token)) {
            return;
        }
        if (this.isUserInvalid(user)) {
            this.clearUser();
        }
        else {
            this.persistUser(user);
        }
    };
    AvlOidcCodeAuthService.prototype.reconstructQueryParamString = function (queryParams) {
        var e_1, _a;
        var s = '?';
        if (queryParams.length === 0) {
            return '';
        }
        try {
            for (var queryParams_1 = __values(queryParams), queryParams_1_1 = queryParams_1.next(); !queryParams_1_1.done; queryParams_1_1 = queryParams_1.next()) {
                var q = queryParams_1_1.value;
                if (s === '?') {
                    s += encodeURIComponent(q.key) + "=" + encodeURIComponent(q.value);
                }
                else {
                    s += "&" + encodeURIComponent(q.key) + "=" + encodeURIComponent(q.value);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (queryParams_1_1 && !queryParams_1_1.done && (_a = queryParams_1.return)) _a.call(queryParams_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return s;
    };
    AvlOidcCodeAuthService.prototype.updateTokensPending = function (state, errorMessage) {
        // the order here is important
        // errorMessage will be set before isLoggedIn becomes false
        if (state.waiting === false) {
            this.errorMessageSubject.next(errorMessage);
        }
        this.tokensPendingSubject.next(state);
    };
    AvlOidcCodeAuthService.prototype.readUserFromToken = function (token) {
        var _a;
        var accessTokenClaims = this.readClaimsFromToken(token.accesstoken);
        // Calculate actual expiry date for this machine
        var accessTokenStoredAt = Date.now(); // [ms]
        var accessTokenExpiresAt = accessTokenStoredAt + token.expiresIn * 1000;
        var refreshTokenClaims = this.readClaimsFromToken(token.refreshtoken);
        var refreshTokenExpiresAt = null;
        if (refreshTokenClaims) {
            // If time value is 0 token lasts indefinitely
            var refreshTokenExpiresIn = refreshTokenClaims['exp'] !== 0 ? refreshTokenClaims['exp'] - refreshTokenClaims['iat'] : 0;
            var refreshTokenStoredAt = accessTokenStoredAt;
            refreshTokenExpiresAt =
                refreshTokenExpiresIn !== 0 ? refreshTokenStoredAt + refreshTokenExpiresIn * 1000 : 0;
        }
        var roles = accessTokenClaims === null || accessTokenClaims === void 0 ? void 0 : accessTokenClaims.roles;
        return {
            username: accessTokenClaims.preferred_username,
            name: (_a = accessTokenClaims.name) !== null && _a !== void 0 ? _a : accessTokenClaims.preferred_username,
            access_token: token.accesstoken,
            access_token_expires: accessTokenExpiresAt,
            access_token_stored: accessTokenStoredAt,
            refresh_token: token.refreshtoken,
            refresh_token_expires: refreshTokenExpiresAt,
            id_token: token.idToken,
            roles: roles
        };
    };
    AvlOidcCodeAuthService.prototype.refreshUserIfNeeded = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var accessTokenExpired;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        accessTokenExpired = ((_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.access_token_expires) < Date.now();
                        if (!accessTokenExpired) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.refreshTokens()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * If needed, this method can be called to refresh tokens for current user
     * @returns Promise resolved with object containing new tokens
     */
    AvlOidcCodeAuthService.prototype.refreshTokens = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var refreshTokenValid, httpOptions, user, error_2;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        refreshTokenValid = ((_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.refresh_token_expires) > Date.now();
                        if (!refreshTokenValid) {
                            this.logout();
                            return [2 /*return*/];
                        }
                        httpOptions = {
                            headers: new HttpHeaders({
                                grant_type: 'refresh_token',
                                'refresh-token': this.storage.getItem(StorageNames.RefreshToken)
                            })
                        };
                        if (!this.authConfig.refreshUrl) {
                            throw new Error('refreshUrl missing in AuthConfig');
                        }
                        this.updateTokensPending(new TokensPending(true));
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.http
                                .post(this.authConfig.refreshUrl, {}, httpOptions)
                                .pipe(map(function (token) { return _this.readUserFromToken(token); }))
                                .toPromise()];
                    case 2:
                        user = _b.sent();
                        this.persistUser(user);
                        this.updateTokensPending(new TokensPending(false, true));
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _b.sent();
                        this.updateTokensPending(new TokensPending(false, false), error_2.message);
                        throw error_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Login user and redirect after successful authentication.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after successful authentication
     */
    AvlOidcCodeAuthService.prototype.login = function (redirectUrl) {
        location.href = this.generateLoginUrl(redirectUrl ? redirectUrl : location.href);
    };
    /**
     * Log out user and redirect after.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after logging out
     */
    AvlOidcCodeAuthService.prototype.logout = function (redirectUrl) {
        var _this = this;
        var logoutUrl = this.authConfig.logoutUrl;
        if (!logoutUrl) {
            console.warn(LOGOUT_CONFIG_NOT_SET_ERROR);
        }
        var headers = new HttpHeaders({ 'refresh-token': this.currentUser.refresh_token });
        this.http
            .post(logoutUrl, {}, { headers: headers })
            .pipe(catchError(function (error) {
            _this.onLogout(redirectUrl);
            throw error;
        }))
            .subscribe(function () { return _this.onLogout(redirectUrl); });
    };
    AvlOidcCodeAuthService.prototype.onLogout = function (redirectUrl) {
        this.clearUser();
        this.redirectIfNeeded(redirectUrl);
    };
    AvlOidcCodeAuthService.prototype.redirectIfNeeded = function (redirectUrl) {
        if (redirectUrl) {
            this.navigateTo(redirectUrl);
        }
        else {
            this.reloadPage();
        }
    };
    AvlOidcCodeAuthService.prototype.reloadPage = function () {
        window.location.reload();
    };
    AvlOidcCodeAuthService.prototype.navigateTo = function (redirectUrl) {
        this.router.navigate([redirectUrl]);
    };
    AvlOidcCodeAuthService.prototype.generateLoginUrl = function (redirectUrl) {
        var redirect_b64 = '' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(redirectUrl));
        // Generate a session value.
        var nonce = CryptoJS.lib.WordArray.random(16).toString();
        // Generate pkce
        var pkce = CryptoJS.lib.WordArray.random(32).toString();
        var bytes = CryptoJS.SHA256(pkce);
        var pkce_hash = CryptoJS.enc.Base64.stringify(bytes);
        // KeyCloak requires this - https://tools.ietf.org/html/rfc7636#appendix-A
        pkce_hash = pkce_hash.replace(/=/g, '');
        pkce_hash = pkce_hash.replace(/\+/g, '-');
        pkce_hash = pkce_hash.replace(/\//g, '_');
        this.pkce = pkce;
        this.nonce = nonce;
        var url = this.authConfig.loginUrl;
        url += '?' + this.authConfig.loginUrlParamRedirect + '=' + encodeURIComponent(redirect_b64);
        url += '&' + this.authConfig.loginUrlParamChallenge + '=' + encodeURIComponent(pkce_hash);
        url += '&' + this.authConfig.loginUrlParamNonce + '=' + encodeURIComponent(nonce);
        return url;
    };
    AvlOidcCodeAuthService.prototype.readClaimsFromToken = function (token) {
        if (!token.includes('.')) {
            // Token is not a valid JWT token
            return null;
        }
        var tokenParts = token.split('.');
        var claimsString = this.b64DecodeUnicode(tokenParts[1]);
        return JSON.parse(claimsString);
    };
    AvlOidcCodeAuthService.prototype.b64DecodeUnicode = function (str) {
        var base64 = str.replace(/\-/g, '+').replace(/\_/g, '/');
        return decodeURIComponent(atob(base64)
            .split('')
            .map(function (c) { return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2); })
            .join(''));
    };
    AvlOidcCodeAuthService.prototype.parseQueryString = function (queryString) {
        var e_2, _a;
        if (!queryString.length) {
            return [];
        }
        var queryDict = [];
        var pairs = queryString.split('&');
        try {
            for (var pairs_1 = __values(pairs), pairs_1_1 = pairs_1.next(); !pairs_1_1.done; pairs_1_1 = pairs_1.next()) {
                var pair = pairs_1_1.value;
                var index = pair.indexOf('=');
                var key = void 0;
                var value = void 0;
                if (index === -1) {
                    key = pair;
                    value = undefined;
                }
                else {
                    key = pair.substr(0, index);
                    value = pair.substr(index + 1);
                }
                queryDict.push({
                    key: decodeURIComponent(key),
                    value: decodeURIComponent(value)
                });
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (pairs_1_1 && !pairs_1_1.done && (_a = pairs_1.return)) _a.call(pairs_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return queryDict;
    };
    AvlOidcCodeAuthService.prototype.readUserFromSessionStorage = function () {
        return this.storage.readUser();
    };
    AvlOidcCodeAuthService.prototype.storeUserToSessionStorage = function (user) {
        this.storage.storeUser(user);
    };
    AvlOidcCodeAuthService.prototype.clearUserFromSessionStorage = function () {
        this.storage.clearUser();
    };
    AvlOidcCodeAuthService.ctorParameters = function () { return [
        { type: HttpBackend },
        { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] },
        { type: Router },
        { type: Location }
    ]; };
    AvlOidcCodeAuthService = __decorate([ __param(1, Inject(AUTH_CONFIG)),
        __metadata("design:paramtypes", [HttpBackend, Object, Router,
            Location])
    ], AvlOidcCodeAuthService);
AvlOidcCodeAuthService.ɵfac = function AvlOidcCodeAuthService_Factory(t) { return new (t || AvlOidcCodeAuthService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpBackend), ɵngcc0.ɵɵinject(AUTH_CONFIG), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.Location)); };
AvlOidcCodeAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AvlOidcCodeAuthService, factory: function (t) { return AvlOidcCodeAuthService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlOidcCodeAuthService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpBackend }, { type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_CONFIG]
            }] }, { type: ɵngcc2.Router }, { type: ɵngcc3.Location }]; }, null); })();
    return AvlOidcCodeAuthService;
}(AvlAuthService));
export { AvlOidcCodeAuthService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW9pZGMtY29kZS1hdXRoLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLW5nLWNvbnRyb2xzL2F1dGgvbGliL3NlcnZpY2VzL2F2bC1vaWRjLWNvZGUtYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNGLE9BQU8sS0FBSyxRQUFRLE1BQU0sV0FBVyxDQUFDO0FBR3RDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFjLE1BQU0sY0FBYyxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DLElBQU0sMkJBQTJCLEdBQy9CLHlIQUF5SCxDQUFDO0FBRzVIO0FBQ0csSUFEeUMsMENBQWM7QUFB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QSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUEyQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSkEsQUFNQSxBQUFBLEFBdUNBLEFBNUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUE5QkEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBZ0JBLEFBR0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFhQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBUEEsQUFTQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFQQSxBQVNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFFQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUdBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFFQSxBQUdBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFHQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUVBLEFBSUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFJQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWlCQSxBQWhCQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTVaQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQS9CQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBOEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBL0JBLEFBQUEsQUF5YkEsQUFBQSxBQUFBLEFBQUEsQUF6YkEsQUFBQSxBQUFBLEFBeWJBLEFBemJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBIdHRwQmFja2VuZCwgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBtYXAsIHRha2UsIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLCBza2lwV2hpbGUsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgKiBhcyBDcnlwdG9KUyBmcm9tICdjcnlwdG8tanMnO1xyXG5cclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL3VzZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBBdmxBdXRoU2VydmljZSB9IGZyb20gJy4vYXZsLWF1dGguc2VydmljZSc7XHJcbmltcG9ydCB7IEFVVEhfQ09ORklHLCBBdXRoQ29uZmlnIH0gZnJvbSAnLi4vdmFyaWFibGVzJztcclxuaW1wb3J0IHsgVG9rZW5zUGVuZGluZyB9IGZyb20gJy4vdG9rZW4tcGVuZGluZyc7XHJcbmltcG9ydCB7IFRva2VuU3RvcmFnZSB9IGZyb20gJy4vdG9rZW4tc3RvcmFnZSc7XHJcbmltcG9ydCB7IFRva2VuUmVzcG9uc2UgfSBmcm9tICcuL3Rva2VuLXJlc3BvbnNlJztcclxuaW1wb3J0IHsgU3RvcmFnZU5hbWVzIH0gZnJvbSAnLi9zdG9yYWdlLW5hbWVzJztcclxuaW1wb3J0IHsgVG9rZW5DbGFpbXMgfSBmcm9tICcuL3Rva2VuLWNsYWltcyc7XHJcblxyXG5jb25zdCBMT0dPVVRfQ09ORklHX05PVF9TRVRfRVJST1IgPVxyXG4gICdVc2VyIHNpZ25lZCBvdXQgbG9jYWxseSwgYnV0IGxvZ291dCByZXF1ZXN0IHRvd2FyZHMgT0lEQyBzZXJ2ZXIgbm90IGluaXRpYXRlZCBzaW5jZSBsb2dvdXRVcmwgaXMgbm90IHNldCBpbiBhdXRoQ29uZmlnLic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBdmxPaWRjQ29kZUF1dGhTZXJ2aWNlIGV4dGVuZHMgQXZsQXV0aFNlcnZpY2Uge1xyXG4gIC8vIHN1Y2Nlc3Mgd2lsbCBiZSBzZXQgYWZ0ZXIgdG9rZW5zIGFyZSBzdWNjZXNzZnVsbHkgZmV0Y2hlZCBvciBub3RcclxuICBwcml2YXRlIHRva2Vuc1BlbmRpbmdTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxUb2tlbnNQZW5kaW5nPihuZXcgVG9rZW5zUGVuZGluZyhmYWxzZSkpO1xyXG5cclxuICAvKipcclxuICAgKiBXaGVuIGZldGNoaW5nIHRva2VucywgdGhpcyBvYnNlcnZhYmxlIGNoYW5nZXNcclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIHdpdGggZm9sbG93aW5nIGNvbnRleHQ6XHJcbiAgICogLSB3YWl0aW5nIC0gaWYgdHJ1ZSwgcmVxdWVzdCBmb3IgbmV3IHRva2VucyBpcyBtYWRlLCB0aGlzIGhhcHBlbnMgb24gaW5pdGlhbCBhdXRoZW50aWNhdGlvbiBhbmQgb24gcmVmcmVzaFRva2Vuc1xyXG4gICAqIC0gc3VjY2VzcyAtIHRydWUgZm9yIHN1Y2Nlc3NmdWwgYXV0aGVudGljYXRpb25cclxuICAgKi9cclxuICBwdWJsaWMgdG9rZW5zUGVuZGluZyQ6IE9ic2VydmFibGU8VG9rZW5zUGVuZGluZz47XHJcblxyXG4gIC8qKlxyXG4gICAqIE9ic2VydmFibGUgdHJhY2tpbmcgYXV0aGVudGljYXRlZCBzdGF0ZVxyXG4gICAqIFJlc29sdmVzIHRvIHRydWUgb24gc3VjY2Vzc2Z1bCBsb2cgaW4sIGZhbHNlIG90aGVyd2lzZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0xvZ2dlZEluJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuXHJcbiAgLyoqXHJcbiAgICogT2JzZXJ2YWJsZSB0cmFja2luZyBpZiByZWRpcmVjdGVkIGZyb20gaWRiXHJcbiAgICogUmVzb2x2ZXMgdG8gdHJ1ZSBvbiByZWRpcmVjdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICovXHJcbiAgcHVibGljIHJlZGlyZWN0ZWRGcm9tTG9nSW4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHVuZGVmaW5lZCk7XHJcblxyXG4gIHByaXZhdGUgaHR0cDogSHR0cENsaWVudDtcclxuICBwcml2YXRlIHN0b3JhZ2U6IFRva2VuU3RvcmFnZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHBCYWNrZW5kOiBIdHRwQmFja2VuZCxcclxuICAgIEBJbmplY3QoQVVUSF9DT05GSUcpIHByaXZhdGUgYXV0aENvbmZpZzogQXV0aENvbmZpZyxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICBwcml2YXRlIGxvYzogTG9jYXRpb25cclxuICApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5odHRwID0gbmV3IEh0dHBDbGllbnQodGhpcy5odHRwQmFja2VuZCk7XHJcblxyXG4gICAgdGhpcy50b2tlbnNQZW5kaW5nJCA9IHRoaXMudG9rZW5zUGVuZGluZ1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB0aGlzLmlzTG9nZ2VkSW4kID0gbmV3IE9ic2VydmFibGU8Ym9vbGVhbj4ob2JzZXJ2ZXIgPT4ge1xyXG4gICAgICBjb25zdCB0b2tlbnNQZW5kaW5nU3RhdGUgPSB0aGlzLnRva2Vuc1BlbmRpbmdTdWJqZWN0LnZhbHVlO1xyXG4gICAgICB0aGlzLnRva2Vuc1BlbmRpbmckXHJcbiAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCgnd2FpdGluZycpLFxyXG4gICAgICAgICAgc2tpcFdoaWxlKHRva2VuUGVuZGluZyA9PiB0b2tlblBlbmRpbmcud2FpdGluZyAhPT0gZmFsc2UpLFxyXG4gICAgICAgICAgbWFwKHRva2VuUGVuZGluZyA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0b2tlblBlbmRpbmcuc3VjY2VzcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0b2tlblBlbmRpbmcuc3VjY2Vzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgdGFrZSgxKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKCk7XHJcbiAgICAgIGlmICh0b2tlbnNQZW5kaW5nU3RhdGUud2FpdGluZyAhPT0gdHJ1ZSAmJiB0b2tlbnNQZW5kaW5nU3RhdGUuc3VjY2VzcyAhPT0gbnVsbCkge1xyXG4gICAgICAgIG9ic2VydmVyLm5leHQodGhpcy5jdXJyZW50VXNlciAhPSBudWxsICYmIHRoaXMuaXNBY2Nlc3NUb2tlblZhbGlkKCkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnN0b3JhZ2UgPSBuZXcgVG9rZW5TdG9yYWdlKHRoaXMuYXV0aENvbmZpZy50b2tlblByZWZpeCk7XHJcbiAgICBjb25zdCB1c2VyID0gdGhpcy5zdG9yYWdlLnJlYWRVc2VyKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNVc2VySW52YWxpZCh1c2VyKSkge1xyXG4gICAgICB0aGlzLnN0b3JhZ2UuY2xlYXJVc2VyKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBlcnNpc3RVc2VyKHVzZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIHVzZXIgaXMgbm90IGxvZ2dlZCBpbiBhbmQgcGtjZSBleGlzdHMgaGFuZGxlIHJlZGlyZWN0IGZyb20gb2lkYyBzZXJ2ZXIgaWYgcG9zc2libGVcclxuICAgIGlmICh0aGlzLmN1cnJlbnRVc2VyID09IG51bGwgJiYgdGhpcy5wa2NlKSB7XHJcbiAgICAgIHRoaXMuaGFuZGxlT2lkY1JlZGlyZWN0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlZGlyZWN0ZWRGcm9tTG9nSW4ubmV4dChCb29sZWFuKHRoaXMuY3VycmVudFVzZXIpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNVc2VySW52YWxpZChkYXRhOiBQYXJ0aWFsPFVzZXI+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBkYXRhLnVzZXJuYW1lID09IG51bGwgfHwgZGF0YS5hY2Nlc3NfdG9rZW4gPT0gbnVsbCB8fCBkYXRhLmFjY2Vzc190b2tlbl9leHBpcmVzIDwgRGF0ZS5ub3coKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IHBrY2UoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSgncGtjZScpIHx8IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgcHJpdmF0ZSBzZXQgcGtjZShjOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcclxuICAgIGlmIChjKSB7XHJcbiAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKCdwa2NlJywgYyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbSgncGtjZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgbm9uY2UoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdub25jZScpIHx8IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgcHJpdmF0ZSBzZXQgbm9uY2UoYzogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoYykge1xyXG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSgnbm9uY2UnLCBjKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKCdub25jZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc0FjY2Vzc1Rva2VuVmFsaWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKSA8IHRoaXMuY3VycmVudFVzZXIuYWNjZXNzX3Rva2VuX2V4cGlyZXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBlcnNpc3RVc2VyKHVzZXI/OiBVc2VyKTogdm9pZCB7XHJcbiAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgdGhpcy5jbGVhclVzZXIoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdG9yYWdlLnN0b3JlVXNlcih1c2VyKTtcclxuICAgIHRoaXMudXNlclN1YmplY3QubmV4dCh1c2VyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xlYXJVc2VyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdG9yYWdlLmNsZWFyVXNlcigpO1xyXG4gICAgdGhpcy51c2VyU3ViamVjdC5uZXh0KHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIENoZWNrcyBpZiBjdXJyZW50IHVybCBpcyByZWRpcmVjdCBmcm9tIG9pZGMgc2VydmVyIGFuZCBnZXRzIGFjY2VzcyB0b2tlbiBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVPaWRjUmVkaXJlY3QoKSB7XHJcbiAgICBjb25zdCBwa2NlID0gdGhpcy5wa2NlO1xyXG4gICAgdGhpcy5wa2NlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0IHVybFBhcnRzID0gdGhpcy5sb2MucGF0aCh0cnVlKS5zcGxpdCgnPycsIDIpO1xyXG4gICAgbGV0IHVybEhhc2g6IHN0cmluZztcclxuICAgIGxldCBmaXJzdDogbnVtYmVyO1xyXG4gICAgbGV0IGxhc3Q6IG51bWJlcjtcclxuICAgIGxldCB1cmxQYXJ0U3BsaXQ6IHN0cmluZ1tdO1xyXG5cclxuICAgIGlmICh1cmxQYXJ0cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgZmlyc3QgPSB1cmxQYXJ0c1sxXS5sYXN0SW5kZXhPZignIycpO1xyXG4gICAgICBpZiAoZmlyc3QgIT09IC0xKSB7XHJcbiAgICAgICAgbGFzdCA9IHVybFBhcnRzWzFdLmxhc3RJbmRleE9mKCcmJyk7XHJcbiAgICAgICAgdXJsSGFzaCA9IHVybFBhcnRzWzFdLnNsaWNlKGZpcnN0LCBsYXN0KTtcclxuICAgICAgICB1cmxQYXJ0U3BsaXQgPSB1cmxQYXJ0c1sxXS5zcGxpdCgnIycsIDIpO1xyXG4gICAgICAgIHVybFBhcnRzWzFdID0gdXJsUGFydHNbMV0uc3BsaXQoJyYnKS5wb3AoKTtcclxuICAgICAgICB1cmxQYXJ0c1sxXSA9IHVybFBhcnRTcGxpdFswXS5jb25jYXQoJyYnKS5jb25jYXQodXJsUGFydHNbMV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHF1ZXJ5ID0gdXJsUGFydHMubGVuZ3RoID09PSAyID8gdGhpcy5wYXJzZVF1ZXJ5U3RyaW5nKHVybFBhcnRzWzFdKSA6IFtdO1xyXG4gICAgbGV0IHF1ZXJ5Q29kZTogc3RyaW5nO1xyXG4gICAgZm9yIChsZXQgaSA9IHF1ZXJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgIGlmIChxdWVyeVtpXS5rZXkgPT09ICdjb2RlJykge1xyXG4gICAgICAgIHF1ZXJ5Q29kZSA9IHF1ZXJ5W2ldLnZhbHVlO1xyXG4gICAgICAgIHF1ZXJ5ID0gWy4uLnF1ZXJ5LnNsaWNlKDAsIGkpLCAuLi5xdWVyeS5zbGljZShpICsgMSldO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodXJsUGFydHMubGVuZ3RoID09PSAyICYmIHF1ZXJ5Q29kZSkge1xyXG4gICAgICBjb25zdCBub25jZSA9IHRoaXMubm9uY2U7XHJcbiAgICAgIHRoaXMubm9uY2UgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICBjb25zdCBodHRwT3B0aW9ucyA9IHtcclxuICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICAgY29kZTogcXVlcnlDb2RlLFxyXG4gICAgICAgICAgdmVyaWZpZXI6IHBrY2UsXHJcbiAgICAgICAgICBub25jZTogbm9uY2VcclxuICAgICAgICB9KVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy51cGRhdGVUb2tlbnNQZW5kaW5nKG5ldyBUb2tlbnNQZW5kaW5nKHRydWUpKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5odHRwXHJcbiAgICAgICAgICAucG9zdDxUb2tlblJlc3BvbnNlPih0aGlzLmF1dGhDb25maWcudG9rZW5VcmwsIHt9LCBodHRwT3B0aW9ucylcclxuICAgICAgICAgIC5waXBlKG1hcCh0b2tlbiA9PiB0aGlzLnJlYWRVc2VyRnJvbVRva2VuKHRva2VuKSkpXHJcbiAgICAgICAgICAudG9Qcm9taXNlKCk7XHJcbiAgICAgICAgdGhpcy5wZXJzaXN0VXNlcih1c2VyKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVRva2Vuc1BlbmRpbmcobmV3IFRva2Vuc1BlbmRpbmcoZmFsc2UsIHRydWUpKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVRva2Vuc1BlbmRpbmcobmV3IFRva2Vuc1BlbmRpbmcoZmFsc2UsIGZhbHNlKSwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodXJsSGFzaCkge1xyXG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKFxyXG4gICAgICAgIGAke3VybFBhcnRzWzBdfSR7dGhpcy5yZWNvbnN0cnVjdFF1ZXJ5UGFyYW1TdHJpbmcocXVlcnkpfSR7dXJsSGFzaH1gLFxyXG4gICAgICAgIHsgcmVwbGFjZVVybDogdHJ1ZSB9XHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMucmVkaXJlY3RlZEZyb21Mb2dJbi5uZXh0KHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybChgJHt1cmxQYXJ0c1swXX0ke3RoaXMucmVjb25zdHJ1Y3RRdWVyeVBhcmFtU3RyaW5nKHF1ZXJ5KX1gLCB7XHJcbiAgICAgICAgcmVwbGFjZVVybDogdHJ1ZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5yZWRpcmVjdGVkRnJvbUxvZ0luLm5leHQoQm9vbGVhbih0aGlzLmN1cnJlbnRVc2VyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVsb2FkUGVyc2lzdGVkVXNlckRhdGEoKSB7XHJcbiAgICBjb25zdCB1c2VyID0gdGhpcy5zdG9yYWdlLnJlYWRVc2VyKCk7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50VXNlcj8uYWNjZXNzX3Rva2VuID09PSB1c2VyPy5hY2Nlc3NfdG9rZW4pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzVXNlckludmFsaWQodXNlcikpIHtcclxuICAgICAgdGhpcy5jbGVhclVzZXIoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGVyc2lzdFVzZXIodXNlcik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgcmVjb25zdHJ1Y3RRdWVyeVBhcmFtU3RyaW5nKHF1ZXJ5UGFyYW1zOiB7IGtleTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH1bXSk6IHN0cmluZyB7XHJcbiAgICBsZXQgcyA9ICc/JztcclxuICAgIGlmIChxdWVyeVBhcmFtcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBxIG9mIHF1ZXJ5UGFyYW1zKSB7XHJcbiAgICAgIGlmIChzID09PSAnPycpIHtcclxuICAgICAgICBzICs9IGAke2VuY29kZVVSSUNvbXBvbmVudChxLmtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHEudmFsdWUpfWA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcyArPSBgJiR7ZW5jb2RlVVJJQ29tcG9uZW50KHEua2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQocS52YWx1ZSl9YDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVRva2Vuc1BlbmRpbmcoc3RhdGU6IFRva2Vuc1BlbmRpbmcsIGVycm9yTWVzc2FnZT86IHN0cmluZykge1xyXG4gICAgLy8gdGhlIG9yZGVyIGhlcmUgaXMgaW1wb3J0YW50XHJcbiAgICAvLyBlcnJvck1lc3NhZ2Ugd2lsbCBiZSBzZXQgYmVmb3JlIGlzTG9nZ2VkSW4gYmVjb21lcyBmYWxzZVxyXG4gICAgaWYgKHN0YXRlLndhaXRpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMuZXJyb3JNZXNzYWdlU3ViamVjdC5uZXh0KGVycm9yTWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRva2Vuc1BlbmRpbmdTdWJqZWN0Lm5leHQoc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWFkVXNlckZyb21Ub2tlbih0b2tlbjogVG9rZW5SZXNwb25zZSk6IFVzZXIge1xyXG4gICAgY29uc3QgYWNjZXNzVG9rZW5DbGFpbXMgPSB0aGlzLnJlYWRDbGFpbXNGcm9tVG9rZW4odG9rZW4uYWNjZXNzdG9rZW4pO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBhY3R1YWwgZXhwaXJ5IGRhdGUgZm9yIHRoaXMgbWFjaGluZVxyXG4gICAgY29uc3QgYWNjZXNzVG9rZW5TdG9yZWRBdCA9IERhdGUubm93KCk7IC8vIFttc11cclxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuRXhwaXJlc0F0ID0gYWNjZXNzVG9rZW5TdG9yZWRBdCArIHRva2VuLmV4cGlyZXNJbiAqIDEwMDA7XHJcblxyXG4gICAgY29uc3QgcmVmcmVzaFRva2VuQ2xhaW1zID0gdGhpcy5yZWFkQ2xhaW1zRnJvbVRva2VuKHRva2VuLnJlZnJlc2h0b2tlbik7XHJcbiAgICBsZXQgcmVmcmVzaFRva2VuRXhwaXJlc0F0ID0gbnVsbDtcclxuICAgIGlmIChyZWZyZXNoVG9rZW5DbGFpbXMpIHtcclxuICAgICAgLy8gSWYgdGltZSB2YWx1ZSBpcyAwIHRva2VuIGxhc3RzIGluZGVmaW5pdGVseVxyXG4gICAgICBjb25zdCByZWZyZXNoVG9rZW5FeHBpcmVzSW4gPVxyXG4gICAgICAgIHJlZnJlc2hUb2tlbkNsYWltc1snZXhwJ10gIT09IDAgPyByZWZyZXNoVG9rZW5DbGFpbXNbJ2V4cCddIC0gcmVmcmVzaFRva2VuQ2xhaW1zWydpYXQnXSA6IDA7XHJcbiAgICAgIGNvbnN0IHJlZnJlc2hUb2tlblN0b3JlZEF0ID0gYWNjZXNzVG9rZW5TdG9yZWRBdDtcclxuICAgICAgcmVmcmVzaFRva2VuRXhwaXJlc0F0ID1cclxuICAgICAgICByZWZyZXNoVG9rZW5FeHBpcmVzSW4gIT09IDAgPyByZWZyZXNoVG9rZW5TdG9yZWRBdCArIHJlZnJlc2hUb2tlbkV4cGlyZXNJbiAqIDEwMDAgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJvbGVzID0gYWNjZXNzVG9rZW5DbGFpbXM/LnJvbGVzO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHVzZXJuYW1lOiBhY2Nlc3NUb2tlbkNsYWltcy5wcmVmZXJyZWRfdXNlcm5hbWUsXHJcbiAgICAgIG5hbWU6IGFjY2Vzc1Rva2VuQ2xhaW1zLm5hbWUgPz8gYWNjZXNzVG9rZW5DbGFpbXMucHJlZmVycmVkX3VzZXJuYW1lLFxyXG4gICAgICBhY2Nlc3NfdG9rZW46IHRva2VuLmFjY2Vzc3Rva2VuLFxyXG4gICAgICBhY2Nlc3NfdG9rZW5fZXhwaXJlczogYWNjZXNzVG9rZW5FeHBpcmVzQXQsXHJcbiAgICAgIGFjY2Vzc190b2tlbl9zdG9yZWQ6IGFjY2Vzc1Rva2VuU3RvcmVkQXQsXHJcbiAgICAgIHJlZnJlc2hfdG9rZW46IHRva2VuLnJlZnJlc2h0b2tlbixcclxuICAgICAgcmVmcmVzaF90b2tlbl9leHBpcmVzOiByZWZyZXNoVG9rZW5FeHBpcmVzQXQsXHJcbiAgICAgIGlkX3Rva2VuOiB0b2tlbi5pZFRva2VuLFxyXG4gICAgICByb2xlczogcm9sZXNcclxuICAgIH0gYXMgVXNlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyByZWZyZXNoVXNlcklmTmVlZGVkKCkge1xyXG4gICAgY29uc3QgYWNjZXNzVG9rZW5FeHBpcmVkID0gdGhpcy5jdXJyZW50VXNlcj8uYWNjZXNzX3Rva2VuX2V4cGlyZXMgPCBEYXRlLm5vdygpO1xyXG4gICAgaWYgKGFjY2Vzc1Rva2VuRXhwaXJlZCkge1xyXG4gICAgICBhd2FpdCB0aGlzLnJlZnJlc2hUb2tlbnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIG5lZWRlZCwgdGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZWZyZXNoIHRva2VucyBmb3IgY3VycmVudCB1c2VyXHJcbiAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZlZCB3aXRoIG9iamVjdCBjb250YWluaW5nIG5ldyB0b2tlbnNcclxuICAgKi9cclxuICBwdWJsaWMgYXN5bmMgcmVmcmVzaFRva2VucygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QgcmVmcmVzaFRva2VuVmFsaWQgPSB0aGlzLmN1cnJlbnRVc2VyPy5yZWZyZXNoX3Rva2VuX2V4cGlyZXMgPiBEYXRlLm5vdygpO1xyXG4gICAgaWYgKCFyZWZyZXNoVG9rZW5WYWxpZCkge1xyXG4gICAgICB0aGlzLmxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaHR0cE9wdGlvbnMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nLFxyXG4gICAgICAgICdyZWZyZXNoLXRva2VuJzogdGhpcy5zdG9yYWdlLmdldEl0ZW0oU3RvcmFnZU5hbWVzLlJlZnJlc2hUb2tlbilcclxuICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCF0aGlzLmF1dGhDb25maWcucmVmcmVzaFVybCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlZnJlc2hVcmwgbWlzc2luZyBpbiBBdXRoQ29uZmlnJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZVRva2Vuc1BlbmRpbmcobmV3IFRva2Vuc1BlbmRpbmcodHJ1ZSkpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLmh0dHBcclxuICAgICAgICAucG9zdDxUb2tlblJlc3BvbnNlPih0aGlzLmF1dGhDb25maWcucmVmcmVzaFVybCwge30sIGh0dHBPcHRpb25zKVxyXG4gICAgICAgIC5waXBlKG1hcCh0b2tlbiA9PiB0aGlzLnJlYWRVc2VyRnJvbVRva2VuKHRva2VuKSkpXHJcbiAgICAgICAgLnRvUHJvbWlzZSgpO1xyXG4gICAgICB0aGlzLnBlcnNpc3RVc2VyKHVzZXIpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRva2Vuc1BlbmRpbmcobmV3IFRva2Vuc1BlbmRpbmcoZmFsc2UsIHRydWUpKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlVG9rZW5zUGVuZGluZyhuZXcgVG9rZW5zUGVuZGluZyhmYWxzZSwgZmFsc2UpLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2dpbiB1c2VyIGFuZCByZWRpcmVjdCBhZnRlciBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAqIEN1c3RvbSBhdXRoIHNlcnZpY2VzIG5lZWQgdG8gcHJvdmlkZSBpbXBsZW1lbnRhdGlvblxyXG4gICAqIEBwYXJhbSByZWRpcmVjdFVybCBVcmwgdG8gcmVkaXJlY3QgYWZ0ZXIgc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2dpbihyZWRpcmVjdFVybD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgbG9jYXRpb24uaHJlZiA9IHRoaXMuZ2VuZXJhdGVMb2dpblVybChyZWRpcmVjdFVybCA/IHJlZGlyZWN0VXJsIDogbG9jYXRpb24uaHJlZik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2cgb3V0IHVzZXIgYW5kIHJlZGlyZWN0IGFmdGVyLlxyXG4gICAqIEN1c3RvbSBhdXRoIHNlcnZpY2VzIG5lZWQgdG8gcHJvdmlkZSBpbXBsZW1lbnRhdGlvblxyXG4gICAqIEBwYXJhbSByZWRpcmVjdFVybCBVcmwgdG8gcmVkaXJlY3QgYWZ0ZXIgbG9nZ2luZyBvdXRcclxuICAgKi9cclxuICBwdWJsaWMgbG9nb3V0KHJlZGlyZWN0VXJsPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IGxvZ291dFVybCB9ID0gdGhpcy5hdXRoQ29uZmlnO1xyXG5cclxuICAgIGlmICghbG9nb3V0VXJsKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihMT0dPVVRfQ09ORklHX05PVF9TRVRfRVJST1IpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoeyAncmVmcmVzaC10b2tlbic6IHRoaXMuY3VycmVudFVzZXIucmVmcmVzaF90b2tlbiB9KTtcclxuICAgIHRoaXMuaHR0cFxyXG4gICAgICAucG9zdChsb2dvdXRVcmwsIHt9LCB7IGhlYWRlcnMgfSlcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9uTG9nb3V0KHJlZGlyZWN0VXJsKTtcclxuICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLm9uTG9nb3V0KHJlZGlyZWN0VXJsKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uTG9nb3V0KHJlZGlyZWN0VXJsPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyVXNlcigpO1xyXG4gICAgdGhpcy5yZWRpcmVjdElmTmVlZGVkKHJlZGlyZWN0VXJsKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVkaXJlY3RJZk5lZWRlZChyZWRpcmVjdFVybD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKHJlZGlyZWN0VXJsKSB7XHJcbiAgICAgIHRoaXMubmF2aWdhdGVUbyhyZWRpcmVjdFVybCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbG9hZFBhZ2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVsb2FkUGFnZSgpOiB2b2lkIHtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbmF2aWdhdGVUbyhyZWRpcmVjdFVybDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbcmVkaXJlY3RVcmxdKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2VuZXJhdGVMb2dpblVybChyZWRpcmVjdFVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHJlZGlyZWN0X2I2NCA9ICcnICsgQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkoQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UocmVkaXJlY3RVcmwpKTtcclxuXHJcbiAgICAvLyBHZW5lcmF0ZSBhIHNlc3Npb24gdmFsdWUuXHJcbiAgICBjb25zdCBub25jZSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDE2KS50b1N0cmluZygpO1xyXG5cclxuICAgIC8vIEdlbmVyYXRlIHBrY2VcclxuICAgIGNvbnN0IHBrY2UgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSgzMikudG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IGJ5dGVzID0gQ3J5cHRvSlMuU0hBMjU2KHBrY2UpIGFzIENyeXB0b0pTLldvcmRBcnJheTtcclxuICAgIGxldCBwa2NlX2hhc2ggPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShieXRlcyk7XHJcblxyXG4gICAgLy8gS2V5Q2xvYWsgcmVxdWlyZXMgdGhpcyAtIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3NjM2I2FwcGVuZGl4LUFcclxuICAgIHBrY2VfaGFzaCA9IHBrY2VfaGFzaC5yZXBsYWNlKC89L2csICcnKTtcclxuICAgIHBrY2VfaGFzaCA9IHBrY2VfaGFzaC5yZXBsYWNlKC9cXCsvZywgJy0nKTtcclxuICAgIHBrY2VfaGFzaCA9IHBrY2VfaGFzaC5yZXBsYWNlKC9cXC8vZywgJ18nKTtcclxuXHJcbiAgICB0aGlzLnBrY2UgPSBwa2NlO1xyXG4gICAgdGhpcy5ub25jZSA9IG5vbmNlO1xyXG5cclxuICAgIGxldCB1cmwgPSB0aGlzLmF1dGhDb25maWcubG9naW5Vcmw7XHJcbiAgICB1cmwgKz0gJz8nICsgdGhpcy5hdXRoQ29uZmlnLmxvZ2luVXJsUGFyYW1SZWRpcmVjdCArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChyZWRpcmVjdF9iNjQpO1xyXG4gICAgdXJsICs9ICcmJyArIHRoaXMuYXV0aENvbmZpZy5sb2dpblVybFBhcmFtQ2hhbGxlbmdlICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHBrY2VfaGFzaCk7XHJcbiAgICB1cmwgKz0gJyYnICsgdGhpcy5hdXRoQ29uZmlnLmxvZ2luVXJsUGFyYW1Ob25jZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChub25jZSk7XHJcbiAgICByZXR1cm4gdXJsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWFkQ2xhaW1zRnJvbVRva2VuKHRva2VuOiBzdHJpbmcpOiBUb2tlbkNsYWltcyB8IG51bGwge1xyXG4gICAgaWYgKCF0b2tlbi5pbmNsdWRlcygnLicpKSB7XHJcbiAgICAgIC8vIFRva2VuIGlzIG5vdCBhIHZhbGlkIEpXVCB0b2tlblxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IHRva2VuUGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xyXG4gICAgY29uc3QgY2xhaW1zU3RyaW5nID0gdGhpcy5iNjREZWNvZGVVbmljb2RlKHRva2VuUGFydHNbMV0pO1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoY2xhaW1zU3RyaW5nKSBhcyBUb2tlbkNsYWltcztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYjY0RGVjb2RlVW5pY29kZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBiYXNlNjQgPSBzdHIucmVwbGFjZSgvXFwtL2csICcrJykucmVwbGFjZSgvXFxfL2csICcvJyk7XHJcblxyXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChcclxuICAgICAgYXRvYihiYXNlNjQpXHJcbiAgICAgICAgLnNwbGl0KCcnKVxyXG4gICAgICAgIC5tYXAoYyA9PiAnJScgKyAoJzAwJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC0yKSlcclxuICAgICAgICAuam9pbignJylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmc6IHN0cmluZyk6IHsga2V5OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfVtdIHtcclxuICAgIGlmICghcXVlcnlTdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIGNvbnN0IHF1ZXJ5RGljdCA9IFtdO1xyXG4gICAgY29uc3QgcGFpcnMgPSBxdWVyeVN0cmluZy5zcGxpdCgnJicpO1xyXG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFpci5pbmRleE9mKCc9Jyk7XHJcbiAgICAgIGxldCBrZXk6IHN0cmluZztcclxuICAgICAgbGV0IHZhbHVlOiBzdHJpbmc7XHJcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICBrZXkgPSBwYWlyO1xyXG4gICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGtleSA9IHBhaXIuc3Vic3RyKDAsIGluZGV4KTtcclxuICAgICAgICB2YWx1ZSA9IHBhaXIuc3Vic3RyKGluZGV4ICsgMSk7XHJcbiAgICAgIH1cclxuICAgICAgcXVlcnlEaWN0LnB1c2goe1xyXG4gICAgICAgIGtleTogZGVjb2RlVVJJQ29tcG9uZW50KGtleSksXHJcbiAgICAgICAgdmFsdWU6IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcXVlcnlEaWN0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlYWRVc2VyRnJvbVNlc3Npb25TdG9yYWdlKCk6IFVzZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5yZWFkVXNlcigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0b3JlVXNlclRvU2Vzc2lvblN0b3JhZ2UodXNlcjogVXNlcik6IHZvaWQge1xyXG4gICAgdGhpcy5zdG9yYWdlLnN0b3JlVXNlcih1c2VyKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhclVzZXJGcm9tU2Vzc2lvblN0b3JhZ2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnN0b3JhZ2UuY2xlYXJVc2VyKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==