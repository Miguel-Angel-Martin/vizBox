import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { AvlAuthService } from './avl-auth.service';
import { INTERCEPTOR_BASE_PATHS } from '../variables';
var AvlTokenInterceptor = /** @class */ (function () {
    function AvlTokenInterceptor(auth, basePaths) {
        this.auth = auth;
        this.basePaths = basePaths;
        for (var i in this.basePaths) {
            if (this.basePaths.hasOwnProperty(i)) {
                this.basePaths[i] = this.basePaths[i].toLowerCase();
            }
        }
    }
    AvlTokenInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        if (!this.isUrlInBasePaths(req)) {
            return next.handle(req);
        }
        if (this.auth.currentUser) {
            req = this.setAuthHeader(req);
        }
        return next
            .handle(req)
            .pipe(catchError(function (err) { return _this.handleHttpError(req, next, err); }));
    };
    AvlTokenInterceptor.prototype.handleHttpError = function (req, next, err) {
        var _this = this;
        if (err.status === 401) {
            // Unauthorized, tokens expired
            return from(this.auth.refreshTokens()).pipe(switchMap(function (_) { return next.handle(_this.setAuthHeader(req)); }), catchError(function (_) { return throwError(err); }));
        }
        return throwError(err);
    };
    /** Check if request URL is in provided basePaths
     * @param request Http request instance whose URL is checked.
     */
    AvlTokenInterceptor.prototype.isUrlInBasePaths = function (request) {
        var url = request.url.toLowerCase();
        var path = this.basePaths.find(function (path) { return url.startsWith(path); });
        return Boolean(path);
    };
    /** Sets access token to authorization header of HTTP request
     * @param request HTTP request instance
     * @returns Cloned HTTP with adapted headers
     */
    AvlTokenInterceptor.prototype.setAuthHeader = function (req) {
        var access_token = this.auth.currentUser.access_token;
        var header = "Bearer " + access_token;
        var headers = req.headers.set('Authorization', header);
        return req.clone({ headers: headers });
    };
    AvlTokenInterceptor.ctorParameters = function () { return [
        { type: AvlAuthService },
        { type: Array, decorators: [{ type: Inject, args: [INTERCEPTOR_BASE_PATHS,] }] }
    ]; };
    AvlTokenInterceptor = __decorate([ __param(1, Inject(INTERCEPTOR_BASE_PATHS)),
        __metadata("design:paramtypes", [AvlAuthService, Array])
    ], AvlTokenInterceptor);
AvlTokenInterceptor.ɵfac = function AvlTokenInterceptor_Factory(t) { return new (t || AvlTokenInterceptor)(ɵngcc0.ɵɵinject(AvlAuthService), ɵngcc0.ɵɵinject(INTERCEPTOR_BASE_PATHS)); };
AvlTokenInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AvlTokenInterceptor, factory: function (t) { return AvlTokenInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlTokenInterceptor, [{
        type: Injectable
    }], function () { return [{ type: AvlAuthService }, { type: Array, decorators: [{
                type: Inject,
                args: [INTERCEPTOR_BASE_PATHS]
            }] }]; }, null); })();
    return AvlTokenInterceptor;
}());
export { AvlTokenInterceptor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,