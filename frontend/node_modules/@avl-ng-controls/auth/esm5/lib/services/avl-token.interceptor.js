import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { Injectable, Inject } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { AvlAuthService } from './avl-auth.service';
import { INTERCEPTOR_BASE_PATHS } from '../variables';
var AvlTokenInterceptor = /** @class */ (function () {
    function AvlTokenInterceptor(auth, basePaths) {
        this.auth = auth;
        this.basePaths = basePaths;
        this.enabled = true;
        for (var i in this.basePaths) {
            if (this.basePaths.hasOwnProperty(i)) {
                this.basePaths[i] = this.basePaths[i].toLowerCase();
            }
        }
    }
    AvlTokenInterceptor.prototype.setAuthHeader = function (req) {
        var access_token = this.auth.currentUser.access_token;
        var header = "Bearer " + access_token;
        var headers = req.headers.set('Authorization', header);
        return req.clone({ headers: headers });
    };
    AvlTokenInterceptor.prototype.intercept = function (req, next) {
        var e_1, _a;
        var _this = this;
        if (!this.enabled) {
            return next.handle(req);
        }
        // check if we need to add token into request
        var url = req.url.toLowerCase();
        try {
            for (var _b = __values(this.basePaths), _c = _b.next(); !_c.done; _c = _b.next()) {
                var basePath = _c.value;
                if (url.startsWith(basePath)) {
                    if (this.auth.currentUser != null) {
                        req = this.setAuthHeader(req);
                    }
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return next.handle(req).pipe(catchError(function (err) {
            if (err.status === 401) {
                return from(_this.auth.refreshTokens()).pipe(switchMap(function (_) { return next.handle(_this.setAuthHeader(req)); }), catchError(function (_) { return throwError(err); }));
            }
            return throwError(err);
        }));
    };
    AvlTokenInterceptor.ctorParameters = function () { return [
        { type: AvlAuthService },
        { type: Array, decorators: [{ type: Inject, args: [INTERCEPTOR_BASE_PATHS,] }] }
    ]; };
    AvlTokenInterceptor = __decorate([ __param(1, Inject(INTERCEPTOR_BASE_PATHS)),
        __metadata("design:paramtypes", [AvlAuthService, Array])
    ], AvlTokenInterceptor);
AvlTokenInterceptor.ɵfac = function AvlTokenInterceptor_Factory(t) { return new (t || AvlTokenInterceptor)(ɵngcc0.ɵɵinject(AvlAuthService), ɵngcc0.ɵɵinject(INTERCEPTOR_BASE_PATHS)); };
AvlTokenInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AvlTokenInterceptor, factory: function (t) { return AvlTokenInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlTokenInterceptor, [{
        type: Injectable
    }], function () { return [{ type: AvlAuthService }, { type: Array, decorators: [{
                type: Inject,
                args: [INTERCEPTOR_BASE_PATHS]
            }] }]; }, null); })();
    return AvlTokenInterceptor;
}());
export { AvlTokenInterceptor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,