import { BehaviorSubject } from 'rxjs';
var AvlAuthService = /** @class */ (function () {
    function AvlAuthService() {
        /**
         * User data is held in this property
         */
        this.userSubject = new BehaviorSubject(undefined);
        /**
         * Current user as Observable
         */
        this.user$ = this.userSubject.asObservable();
        /**
         * String holding error message in case user couldn't authenticate
         */
        this.errorMessageSubject = new BehaviorSubject(undefined);
        /**
         * Error messsage in case failed authentication as Observable
         */
        this.errorMessage$ = this.errorMessageSubject.asObservable();
    }
    Object.defineProperty(AvlAuthService.prototype, "currentUser", {
        /**
         * Currently authenticated user data
         */
        get: function () {
            return this.userSubject.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlAuthService.prototype, "errorMessage", {
        /**
         * Current error message for fail authentication
         * Undefined when user is logged in
         */
        get: function () {
            return this.errorMessageSubject.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Use to clear error message after user is informed
     */
    AvlAuthService.prototype.clearErrorMessage = function () {
        this.errorMessageSubject.next(undefined);
    };
    return AvlAuthService;
}());
export { AvlAuthService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWF1dGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtbmctY29udHJvbHMvYXV0aC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hdmwtYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbkQ7SUFBQTtRQUNFOztXQUVHO1FBQ08sZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBTyxTQUFTLENBQUMsQ0FBQztRQUU3RDs7V0FFRztRQUNJLFVBQUssR0FBcUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVqRTs7V0FFRztRQUNPLHdCQUFtQixHQUFHLElBQUksZUFBZSxDQUFTLFNBQVMsQ0FBQyxDQUFDO1FBRXZFOztXQUVHO1FBQ0ksa0JBQWEsR0FBdUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBNERyRixDQUFDO0lBeEJDLHNCQUFXLHVDQUFXO1FBSHRCOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBTUQsc0JBQVcsd0NBQVk7UUFKdkI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFFRDs7T0FFRztJQUNJLDBDQUFpQixHQUF4QjtRQUNFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQU9ILHFCQUFDO0FBQUQsQ0FBQyxBQS9FRCxJQStFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vdXNlci5tb2RlbCc7XHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBdmxBdXRoU2VydmljZSB7XHJcbiAgLyoqXHJcbiAgICogVXNlciBkYXRhIGlzIGhlbGQgaW4gdGhpcyBwcm9wZXJ0eVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCB1c2VyU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VXNlcj4odW5kZWZpbmVkKTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VycmVudCB1c2VyIGFzIE9ic2VydmFibGVcclxuICAgKi9cclxuICBwdWJsaWMgdXNlciQ6IE9ic2VydmFibGU8VXNlcj4gPSB0aGlzLnVzZXJTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAvKipcclxuICAgKiBTdHJpbmcgaG9sZGluZyBlcnJvciBtZXNzYWdlIGluIGNhc2UgdXNlciBjb3VsZG4ndCBhdXRoZW50aWNhdGVcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZXJyb3JNZXNzYWdlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPih1bmRlZmluZWQpO1xyXG5cclxuICAvKipcclxuICAgKiBFcnJvciBtZXNzc2FnZSBpbiBjYXNlIGZhaWxlZCBhdXRoZW50aWNhdGlvbiBhcyBPYnNlcnZhYmxlXHJcbiAgICovXHJcbiAgcHVibGljIGVycm9yTWVzc2FnZSQ6IE9ic2VydmFibGU8c3RyaW5nPiA9IHRoaXMuZXJyb3JNZXNzYWdlU3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgLyoqXHJcbiAgICogT2JzZXJ2YWJsZSB0cmFja2luZyBhdXRoZW50aWNhdGVkIHN0YXRlXHJcbiAgICogUmVzb2x2ZXMgdG8gdHJ1ZSBvbiBzdWNjZXNzZnVsIGxvZyBpbiwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGlzTG9nZ2VkSW4kOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG5cclxuICAvKipcclxuICAgKiBPYnNlcnZhYmxlIHRyYWNraW5nIGlmIHJlZGlyZWN0ZWQgZnJvbSBpZGJcclxuICAgKiBSZXNvbHZlcyB0byB0cnVlIG9uIHJlZGlyZWN0aW9uLCBmYWxzZSBvdGhlcndpc2VcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgcmVkaXJlY3RlZEZyb21Mb2dJbjogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xyXG5cclxuICAvKipcclxuICAgKiBMb2dpbiB1c2VyIGFuZCByZWRpcmVjdCBhZnRlciBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAqIEN1c3RvbSBhdXRoIHNlcnZpY2VzIG5lZWQgdG8gcHJvdmlkZSBpbXBsZW1lbnRhdGlvblxyXG4gICAqIEBwYXJhbSByZWRpcmVjdFVybCBVcmwgdG8gcmVkaXJlY3QgYWZ0ZXIgc3VjY2VzZnVsIGF1dGhlbnRpY2F0aW9uXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGxvZ2luKHJlZGlyZWN0VXJsPzogc3RyaW5nKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgKiBJZiB0b2tlbnMgYXJlIHBlcmlzdGVkIGluIGxvY2FsIHN0b3JhZ2UsIHNldCBjdXJyZW50IHVzZXIgZGF0YVxyXG4gICovXHJcbiAgcHVibGljIGFic3RyYWN0IHJlbG9hZFBlcnNpc3RlZFVzZXJEYXRhKCk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIExvZyBvdXQgdXNlciBhbmQgcmVkaXJlY3QgYWZ0ZXIuXHJcbiAgICogQ3VzdG9tIGF1dGggc2VydmljZXMgbmVlZCB0byBwcm92aWRlIGltcGxlbWVudGF0aW9uXHJcbiAgICogQHBhcmFtIHJlZGlyZWN0VXJsIFVybCB0byByZWRpcmVjdCBhZnRlciBsb2dnaW5nIG91dFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBsb2dvdXQocmVkaXJlY3RVcmw/OiBzdHJpbmcpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBDdXJyZW50bHkgYXV0aGVudGljYXRlZCB1c2VyIGRhdGFcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGN1cnJlbnRVc2VyKCk6IFVzZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlclN1YmplY3QudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDdXJyZW50IGVycm9yIG1lc3NhZ2UgZm9yIGZhaWwgYXV0aGVudGljYXRpb25cclxuICAgKiBVbmRlZmluZWQgd2hlbiB1c2VyIGlzIGxvZ2dlZCBpblxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgZXJyb3JNZXNzYWdlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5lcnJvck1lc3NhZ2VTdWJqZWN0LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXNlIHRvIGNsZWFyIGVycm9yIG1lc3NhZ2UgYWZ0ZXIgdXNlciBpcyBpbmZvcm1lZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGVhckVycm9yTWVzc2FnZSgpIHtcclxuICAgIHRoaXMuZXJyb3JNZXNzYWdlU3ViamVjdC5uZXh0KHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb3IgdG9rZW4gYmFzZWQgYXV0aGV0aWNhdGlvbi5cclxuICAgKiBQcm92aWRlIGZ1bmN0aW9uYWxpdHkgdG8gcmVmcmVzaCB0b2tlbnNcclxuICAgKi9cclxuICBwdWJsaWMgcmVmcmVzaFRva2Vucz8oKTogUHJvbWlzZTxhbnk+O1xyXG59XHJcbiJdfQ==