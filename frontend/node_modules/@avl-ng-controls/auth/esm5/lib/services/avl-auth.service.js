import { BehaviorSubject } from 'rxjs';
var AvlAuthService = /** @class */ (function () {
    function AvlAuthService() {
        /**
         * User data is held in this property
         */
        this.userSubject = new BehaviorSubject(undefined);
        /**
         * Current user as Observable
         */
        this.user$ = this.userSubject.asObservable();
        /**
         * String holding error message in case user couldn't authenticate
         */
        this.errorMessageSubject = new BehaviorSubject(undefined);
        /**
         * Error messsage in case failed authentication as Observable
         */
        this.errorMessage$ = this.errorMessageSubject.asObservable();
    }
    Object.defineProperty(AvlAuthService.prototype, "currentUser", {
        /**
         * Currently authenticated user data
         */
        get: function () {
            return this.userSubject.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AvlAuthService.prototype, "errorMessage", {
        /**
         * Current error message for fail authentication
         * Undefined when user is logged in
         */
        get: function () {
            return this.errorMessageSubject.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Use to clear error message after user is informed
     */
    AvlAuthService.prototype.clearErrorMessage = function () {
        this.errorMessageSubject.next(undefined);
    };
    return AvlAuthService;
}());
export { AvlAuthService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWF1dGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtbmctY29udHJvbHMvYXV0aC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hdmwtYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbkQ7SUFBQTtRQUNFOztXQUVHO1FBQ08sZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBTyxTQUFTLENBQUMsQ0FBQztRQUU3RDs7V0FFRztRQUNJLFVBQUssR0FBcUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVqRTs7V0FFRztRQUNPLHdCQUFtQixHQUFHLElBQUksZUFBZSxDQUFTLFNBQVMsQ0FBQyxDQUFDO1FBRXZFOztXQUVHO1FBQ0ksa0JBQWEsR0FBdUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBaUZyRixDQUFDO0lBN0NDLHNCQUFXLHVDQUFXO1FBSHRCOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBTUQsc0JBQVcsd0NBQVk7UUFKdkI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFFRDs7T0FFRztJQUNJLDBDQUFpQixHQUF4QjtRQUNFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQTRCSCxxQkFBQztBQUFELENBQUMsQUFwR0QsSUFvR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL3VzZXIubW9kZWwnO1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXZsQXV0aFNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIFVzZXIgZGF0YSBpcyBoZWxkIGluIHRoaXMgcHJvcGVydHlcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgdXNlclN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFVzZXI+KHVuZGVmaW5lZCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1cnJlbnQgdXNlciBhcyBPYnNlcnZhYmxlXHJcbiAgICovXHJcbiAgcHVibGljIHVzZXIkOiBPYnNlcnZhYmxlPFVzZXI+ID0gdGhpcy51c2VyU3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgLyoqXHJcbiAgICogU3RyaW5nIGhvbGRpbmcgZXJyb3IgbWVzc2FnZSBpbiBjYXNlIHVzZXIgY291bGRuJ3QgYXV0aGVudGljYXRlXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGVycm9yTWVzc2FnZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4odW5kZWZpbmVkKTtcclxuXHJcbiAgLyoqXHJcbiAgICogRXJyb3IgbWVzc3NhZ2UgaW4gY2FzZSBmYWlsZWQgYXV0aGVudGljYXRpb24gYXMgT2JzZXJ2YWJsZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcnJvck1lc3NhZ2UkOiBPYnNlcnZhYmxlPHN0cmluZz4gPSB0aGlzLmVycm9yTWVzc2FnZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9ic2VydmFibGUgdHJhY2tpbmcgYXV0aGVudGljYXRlZCBzdGF0ZVxyXG4gICAqIFJlc29sdmVzIHRvIHRydWUgb24gc3VjY2Vzc2Z1bCBsb2cgaW4sIGZhbHNlIG90aGVyd2lzZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBpc0xvZ2dlZEluJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuXHJcbiAgLyoqXHJcbiAgICogT2JzZXJ2YWJsZSB0cmFja2luZyBpZiByZWRpcmVjdGVkIGZyb20gaWRiXHJcbiAgICogUmVzb2x2ZXMgdG8gdHJ1ZSBvbiByZWRpcmVjdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IHJlZGlyZWN0ZWRGcm9tTG9nSW46IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPjtcclxuXHJcbiAgLyoqXHJcbiAgICogTG9naW4gdXNlciBhbmQgcmVkaXJlY3QgYWZ0ZXIgc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvbi5cclxuICAgKiBDdXN0b20gYXV0aCBzZXJ2aWNlcyBuZWVkIHRvIHByb3ZpZGUgaW1wbGVtZW50YXRpb25cclxuICAgKiBAcGFyYW0gcmVkaXJlY3RVcmwgVXJsIHRvIHJlZGlyZWN0IGFmdGVyIHN1Y2Nlc2Z1bCBhdXRoZW50aWNhdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBsb2dpbihyZWRpcmVjdFVybD86IHN0cmluZyk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICogSWYgdG9rZW5zIGFyZSBwZXJpc3RlZCBpbiBsb2NhbCBzdG9yYWdlLCBzZXQgY3VycmVudCB1c2VyIGRhdGFcclxuICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCByZWxvYWRQZXJzaXN0ZWRVc2VyRGF0YSgpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBMb2cgb3V0IHVzZXIgYW5kIHJlZGlyZWN0IGFmdGVyLlxyXG4gICAqIEN1c3RvbSBhdXRoIHNlcnZpY2VzIG5lZWQgdG8gcHJvdmlkZSBpbXBsZW1lbnRhdGlvblxyXG4gICAqIEBwYXJhbSByZWRpcmVjdFVybCBVcmwgdG8gcmVkaXJlY3QgYWZ0ZXIgbG9nZ2luZyBvdXRcclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgbG9nb3V0KHJlZGlyZWN0VXJsPzogc3RyaW5nKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlciBkYXRhXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBjdXJyZW50VXNlcigpOiBVc2VyIHtcclxuICAgIHJldHVybiB0aGlzLnVzZXJTdWJqZWN0LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3VycmVudCBlcnJvciBtZXNzYWdlIGZvciBmYWlsIGF1dGhlbnRpY2F0aW9uXHJcbiAgICogVW5kZWZpbmVkIHdoZW4gdXNlciBpcyBsb2dnZWQgaW5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGVycm9yTWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZXJyb3JNZXNzYWdlU3ViamVjdC52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZSB0byBjbGVhciBlcnJvciBtZXNzYWdlIGFmdGVyIHVzZXIgaXMgaW5mb3JtZWRcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXJFcnJvck1lc3NhZ2UoKSB7XHJcbiAgICB0aGlzLmVycm9yTWVzc2FnZVN1YmplY3QubmV4dCh1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yIHRva2VuIGJhc2VkIGF1dGhldGljYXRpb24uXHJcbiAgICogUHJvdmlkZSBmdW5jdGlvbmFsaXR5IHRvIHJlZnJlc2ggdG9rZW5zXHJcbiAgICovXHJcbiAgcHVibGljIHJlZnJlc2hUb2tlbnM/KCk6IFByb21pc2U8YW55PjtcclxuXHJcbiAgLyoqXHJcbiAgICogRm9yIHRva2VuIGJhc2VkIGF1dGhldGljYXRpb24uXHJcbiAgICogVXBkYXRlcyB1c2VyIGF1dGhlbnRpY2F0aW9uIHdpdGggcmVmcmVzaCB0b2tlbnNcclxuICAgKi9cclxuICAgcHVibGljIGFic3RyYWN0IHJlZnJlc2hVc2VySWZOZWVkZWQoKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgKiBSZWFkIHVzZXIgZnJvbSBzZXNzaW9uIHN0b3JhZ2VcclxuICAqL1xyXG4gICBwdWJsaWMgYWJzdHJhY3QgcmVhZFVzZXJGcm9tU2Vzc2lvblN0b3JhZ2UoKTogVXNlcjtcclxuXHJcbiAgLyoqXHJcbiAgKiBTdG9yZSB1c2VyIHRvIHNlc3Npb24gc3RvcmFnZVxyXG4gICovXHJcbiAgIHB1YmxpYyBhYnN0cmFjdCBzdG9yZVVzZXJUb1Nlc3Npb25TdG9yYWdlKHVzZXI6IFVzZXIpOiB2b2lkO1xyXG4gICBcclxuICAvKipcclxuICAqIENsZWFyIHVzZXIgZnJvbSBzZXNzaW9uIHN0b3JhZ2VcclxuICAqL1xyXG4gICBwdWJsaWMgYWJzdHJhY3QgY2xlYXJVc2VyRnJvbVNlc3Npb25TdG9yYWdlKCk6IHZvaWQ7XHJcbn1cclxuIl19