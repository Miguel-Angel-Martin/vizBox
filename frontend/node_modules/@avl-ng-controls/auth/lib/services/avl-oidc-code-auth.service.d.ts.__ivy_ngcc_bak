import { Location } from '@angular/common';
import { HttpBackend } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { User } from '../user.model';
import { AvlAuthService } from './avl-auth.service';
import { AuthConfig } from '../variables';
import { TokensPending } from './token-pending';
export declare class AvlOidcCodeAuthService extends AvlAuthService {
    private httpBackend;
    private authConfig;
    private router;
    private loc;
    private tokensPendingSubject;
    /**
     * When fetching tokens, this observable changes
     * @returns Observable with following context:
     * - waiting - if true, request for new tokens is made, this happens on initial authentication and on refreshTokens
     * - success - true for successful authentication
     */
    tokensPending$: Observable<TokensPending>;
    /**
     * Observable tracking authenticated state
     * Resolves to true on successful log in, false otherwise
     */
    isLoggedIn$: Observable<boolean>;
    /**
     * Observable tracking if redirected from idb
     * Resolves to true on redirection, false otherwise
     */
    redirectedFromLogIn: BehaviorSubject<boolean>;
    private http;
    private storage;
    constructor(httpBackend: HttpBackend, authConfig: AuthConfig, router: Router, loc: Location);
    private isUserInvalid;
    private get pkce();
    private set pkce(value);
    private get nonce();
    private set nonce(value);
    private isAccessTokenValid;
    private persistUser;
    private clearUser;
    private handleOidcRedirect;
    reloadPersistedUserData(): void;
    private reconstructQueryParamString;
    private updateTokensPending;
    private readUserFromToken;
    refreshUserIfNeeded(): Promise<void>;
    /**
     * If needed, this method can be called to refresh tokens for current user
     * @returns Promise resolved with object containing new tokens
     */
    refreshTokens(): Promise<any>;
    /**
     * Login user and redirect after successful authentication.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after successful authentication
     */
    login(redirectUrl?: string): void;
    /**
     * Log out user and redirect after.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after logging out
     */
    logout(redirectUrl?: string): void;
    private onLogout;
    private redirectIfNeeded;
    private reloadPage;
    private navigateTo;
    private generateLoginUrl;
    private readClaimsFromToken;
    private b64DecodeUnicode;
    private parseQueryString;
    readUserFromSessionStorage(): User;
    storeUserToSessionStorage(user: User): void;
    clearUserFromSessionStorage(): void;
}
