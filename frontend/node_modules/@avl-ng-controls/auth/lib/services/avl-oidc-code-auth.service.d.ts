import { Location } from '@angular/common';
import { HttpBackend } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { User } from '../user.model';
import { AvlAuthService } from './avl-auth.service';
import { AuthConfig } from '../variables';
import { TokensPending } from './token-pending';
import * as ɵngcc0 from '@angular/core';
export declare class AvlOidcCodeAuthService extends AvlAuthService {
    private httpBackend;
    private authConfig;
    private router;
    private loc;
    private tokensPendingSubject;
    /**
     * When fetching tokens, this observable changes
     * @returns Observable with following context:
     * - waiting - if true, request for new tokens is made, this happens on initial authentication and on refreshTokens
     * - success - true for successful authentication
     */
    tokensPending$: Observable<TokensPending>;
    /**
     * Observable tracking authenticated state
     * Resolves to true on successful log in, false otherwise
     */
    isLoggedIn$: Observable<boolean>;
    /**
     * Observable tracking if redirected from idb
     * Resolves to true on redirection, false otherwise
     */
    redirectedFromLogIn: BehaviorSubject<boolean>;
    private http;
    private storage;
    constructor(httpBackend: HttpBackend, authConfig: AuthConfig, router: Router, loc: Location);
    private isUserInvalid;
    private get pkce();
    private set pkce(value);
    private get nonce();
    private set nonce(value);
    private isAccessTokenValid;
    private persistUser;
    private clearUser;
    private handleOidcRedirect;
    reloadPersistedUserData(): void;
    private reconstructQueryParamString;
    private updateTokensPending;
    private readUserFromToken;
    refreshUserIfNeeded(): Promise<void>;
    /**
     * If needed, this method can be called to refresh tokens for current user
     * @returns Promise resolved with object containing new tokens
     */
    refreshTokens(): Promise<any>;
    /**
     * Login user and redirect after successful authentication.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after successful authentication
     */
    login(redirectUrl?: string): void;
    /**
     * Log out user and redirect after.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after logging out
     */
    logout(redirectUrl?: string): void;
    private onLogout;
    private redirectIfNeeded;
    private reloadPage;
    private navigateTo;
    private generateLoginUrl;
    private readClaimsFromToken;
    private b64DecodeUnicode;
    private parseQueryString;
    readUserFromSessionStorage(): User;
    storeUserToSessionStorage(user: User): void;
    clearUserFromSessionStorage(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlOidcCodeAuthService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AvlOidcCodeAuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW9pZGMtY29kZS1hdXRoLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXZsLW9pZGMtY29kZS1hdXRoLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBIdHRwQmFja2VuZCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi91c2VyLm1vZGVsJztcclxuaW1wb3J0IHsgQXZsQXV0aFNlcnZpY2UgfSBmcm9tICcuL2F2bC1hdXRoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBdXRoQ29uZmlnIH0gZnJvbSAnLi4vdmFyaWFibGVzJztcclxuaW1wb3J0IHsgVG9rZW5zUGVuZGluZyB9IGZyb20gJy4vdG9rZW4tcGVuZGluZyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2bE9pZGNDb2RlQXV0aFNlcnZpY2UgZXh0ZW5kcyBBdmxBdXRoU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGh0dHBCYWNrZW5kO1xyXG4gICAgcHJpdmF0ZSBhdXRoQ29uZmlnO1xyXG4gICAgcHJpdmF0ZSByb3V0ZXI7XHJcbiAgICBwcml2YXRlIGxvYztcclxuICAgIHByaXZhdGUgdG9rZW5zUGVuZGluZ1N1YmplY3Q7XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gZmV0Y2hpbmcgdG9rZW5zLCB0aGlzIG9ic2VydmFibGUgY2hhbmdlc1xyXG4gICAgICogQHJldHVybnMgT2JzZXJ2YWJsZSB3aXRoIGZvbGxvd2luZyBjb250ZXh0OlxyXG4gICAgICogLSB3YWl0aW5nIC0gaWYgdHJ1ZSwgcmVxdWVzdCBmb3IgbmV3IHRva2VucyBpcyBtYWRlLCB0aGlzIGhhcHBlbnMgb24gaW5pdGlhbCBhdXRoZW50aWNhdGlvbiBhbmQgb24gcmVmcmVzaFRva2Vuc1xyXG4gICAgICogLSBzdWNjZXNzIC0gdHJ1ZSBmb3Igc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvblxyXG4gICAgICovXHJcbiAgICB0b2tlbnNQZW5kaW5nJDogT2JzZXJ2YWJsZTxUb2tlbnNQZW5kaW5nPjtcclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2YWJsZSB0cmFja2luZyBhdXRoZW50aWNhdGVkIHN0YXRlXHJcbiAgICAgKiBSZXNvbHZlcyB0byB0cnVlIG9uIHN1Y2Nlc3NmdWwgbG9nIGluLCBmYWxzZSBvdGhlcndpc2VcclxuICAgICAqL1xyXG4gICAgaXNMb2dnZWRJbiQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgdHJhY2tpbmcgaWYgcmVkaXJlY3RlZCBmcm9tIGlkYlxyXG4gICAgICogUmVzb2x2ZXMgdG8gdHJ1ZSBvbiByZWRpcmVjdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICAgKi9cclxuICAgIHJlZGlyZWN0ZWRGcm9tTG9nSW46IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPjtcclxuICAgIHByaXZhdGUgaHR0cDtcclxuICAgIHByaXZhdGUgc3RvcmFnZTtcclxuICAgIGNvbnN0cnVjdG9yKGh0dHBCYWNrZW5kOiBIdHRwQmFja2VuZCwgYXV0aENvbmZpZzogQXV0aENvbmZpZywgcm91dGVyOiBSb3V0ZXIsIGxvYzogTG9jYXRpb24pO1xyXG4gICAgcHJpdmF0ZSBpc1VzZXJJbnZhbGlkO1xyXG4gICAgcHJpdmF0ZSBnZXQgcGtjZSgpO1xyXG4gICAgcHJpdmF0ZSBzZXQgcGtjZSh2YWx1ZSk7XHJcbiAgICBwcml2YXRlIGdldCBub25jZSgpO1xyXG4gICAgcHJpdmF0ZSBzZXQgbm9uY2UodmFsdWUpO1xyXG4gICAgcHJpdmF0ZSBpc0FjY2Vzc1Rva2VuVmFsaWQ7XHJcbiAgICBwcml2YXRlIHBlcnNpc3RVc2VyO1xyXG4gICAgcHJpdmF0ZSBjbGVhclVzZXI7XHJcbiAgICBwcml2YXRlIGhhbmRsZU9pZGNSZWRpcmVjdDtcclxuICAgIHJlbG9hZFBlcnNpc3RlZFVzZXJEYXRhKCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHJlY29uc3RydWN0UXVlcnlQYXJhbVN0cmluZztcclxuICAgIHByaXZhdGUgdXBkYXRlVG9rZW5zUGVuZGluZztcclxuICAgIHByaXZhdGUgcmVhZFVzZXJGcm9tVG9rZW47XHJcbiAgICByZWZyZXNoVXNlcklmTmVlZGVkKCk6IFByb21pc2U8dm9pZD47XHJcbiAgICAvKipcclxuICAgICAqIElmIG5lZWRlZCwgdGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZWZyZXNoIHRva2VucyBmb3IgY3VycmVudCB1c2VyXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmVkIHdpdGggb2JqZWN0IGNvbnRhaW5pbmcgbmV3IHRva2Vuc1xyXG4gICAgICovXHJcbiAgICByZWZyZXNoVG9rZW5zKCk6IFByb21pc2U8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogTG9naW4gdXNlciBhbmQgcmVkaXJlY3QgYWZ0ZXIgc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvbi5cclxuICAgICAqIEN1c3RvbSBhdXRoIHNlcnZpY2VzIG5lZWQgdG8gcHJvdmlkZSBpbXBsZW1lbnRhdGlvblxyXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJsIFVybCB0byByZWRpcmVjdCBhZnRlciBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIGxvZ2luKHJlZGlyZWN0VXJsPzogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogTG9nIG91dCB1c2VyIGFuZCByZWRpcmVjdCBhZnRlci5cclxuICAgICAqIEN1c3RvbSBhdXRoIHNlcnZpY2VzIG5lZWQgdG8gcHJvdmlkZSBpbXBsZW1lbnRhdGlvblxyXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJsIFVybCB0byByZWRpcmVjdCBhZnRlciBsb2dnaW5nIG91dFxyXG4gICAgICovXHJcbiAgICBsb2dvdXQocmVkaXJlY3RVcmw/OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBvbkxvZ291dDtcclxuICAgIHByaXZhdGUgcmVkaXJlY3RJZk5lZWRlZDtcclxuICAgIHByaXZhdGUgcmVsb2FkUGFnZTtcclxuICAgIHByaXZhdGUgbmF2aWdhdGVUbztcclxuICAgIHByaXZhdGUgZ2VuZXJhdGVMb2dpblVybDtcclxuICAgIHByaXZhdGUgcmVhZENsYWltc0Zyb21Ub2tlbjtcclxuICAgIHByaXZhdGUgYjY0RGVjb2RlVW5pY29kZTtcclxuICAgIHByaXZhdGUgcGFyc2VRdWVyeVN0cmluZztcclxuICAgIHJlYWRVc2VyRnJvbVNlc3Npb25TdG9yYWdlKCk6IFVzZXI7XHJcbiAgICBzdG9yZVVzZXJUb1Nlc3Npb25TdG9yYWdlKHVzZXI6IFVzZXIpOiB2b2lkO1xyXG4gICAgY2xlYXJVc2VyRnJvbVNlc3Npb25TdG9yYWdlKCk6IHZvaWQ7XHJcbn1cclxuIl19