import { Observable, BehaviorSubject } from 'rxjs';
import { User } from '../user.model';
export declare abstract class AvlAuthService {
    /**
     * User data is held in this property
     */
    protected userSubject: BehaviorSubject<User>;
    /**
     * Current user as Observable
     */
    user$: Observable<User>;
    /**
     * String holding error message in case user couldn't authenticate
     */
    protected errorMessageSubject: BehaviorSubject<string>;
    /**
     * Error messsage in case failed authentication as Observable
     */
    errorMessage$: Observable<string>;
    /**
     * Observable tracking authenticated state
     * Resolves to true on successful log in, false otherwise
     */
    abstract isLoggedIn$: Observable<boolean>;
    /**
     * Observable tracking if redirected from idb
     * Resolves to true on redirection, false otherwise
     */
    abstract redirectedFromLogIn: BehaviorSubject<boolean>;
    /**
     * Login user and redirect after successful authentication.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after succesful authentication
     */
    abstract login(redirectUrl?: string): void;
    /**
    * If tokens are peristed in local storage, set current user data
    */
    abstract reloadPersistedUserData(): void;
    /**
     * Log out user and redirect after.
     * Custom auth services need to provide implementation
     * @param redirectUrl Url to redirect after logging out
     */
    abstract logout(redirectUrl?: string): void;
    /**
     * Currently authenticated user data
     */
    get currentUser(): User;
    /**
     * Current error message for fail authentication
     * Undefined when user is logged in
     */
    get errorMessage(): string;
    /**
     * Use to clear error message after user is informed
     */
    clearErrorMessage(): void;
    /**
     * For token based authetication.
     * Provide functionality to refresh tokens
     */
    refreshTokens?(): Promise<any>;
}
