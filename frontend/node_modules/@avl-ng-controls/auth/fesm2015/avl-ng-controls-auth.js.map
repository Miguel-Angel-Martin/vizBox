{"version":3,"file":"avl-ng-controls-auth.js","sources":["ng://@avl-ng-controls/auth/lib/variables.ts","ng://@avl-ng-controls/auth/lib/services/avl-auth.service.ts","ng://@avl-ng-controls/auth/lib/services/token-pending.ts","ng://@avl-ng-controls/auth/lib/services/storage-names.ts","ng://@avl-ng-controls/auth/lib/services/token-storage.ts","ng://@avl-ng-controls/auth/lib/services/avl-oidc-code-auth.service.ts","ng://@avl-ng-controls/auth/lib/services/avl-token.interceptor.ts","ng://@avl-ng-controls/auth/public-api.ts","ng://@avl-ng-controls/auth/avl-ng-controls-auth.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface AuthConfig { \r\n  tokenUrl: string;\r\n  loginUrl: string;\r\n  refreshUrl?: string;\r\n  loginUrlParamRedirect: string;\r\n  loginUrlParamChallenge: string;\r\n  loginUrlParamNonce: string;\r\n  logoutUrl?: string;\r\n  logoutUrlParamIdToken?: string;\r\n  logoutUrlParamRedirect?: string;\r\n  requiredRole?: string;\r\n  tokenPrefix?: string;\r\n}\r\n\r\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>(undefined);\r\n\r\nexport const INTERCEPTOR_BASE_PATHS = new InjectionToken<string[]>(undefined);","import { Observable, BehaviorSubject } from 'rxjs';\r\nimport { User } from '../user.model';\r\nexport abstract class AvlAuthService {\r\n  /**\r\n   * User data is held in this property\r\n   */\r\n  protected userSubject = new BehaviorSubject<User>(undefined);\r\n\r\n  /**\r\n   * Current user as Observable\r\n   */\r\n  public user$: Observable<User> = this.userSubject.asObservable();\r\n\r\n  /**\r\n   * String holding error message in case user couldn't authenticate\r\n   */\r\n  protected errorMessageSubject = new BehaviorSubject<string>(undefined);\r\n\r\n  /**\r\n   * Error messsage in case failed authentication as Observable\r\n   */\r\n  public errorMessage$: Observable<string> = this.errorMessageSubject.asObservable();\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public abstract isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public abstract redirectedFromLogIn: BehaviorSubject<boolean>;\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after succesful authentication\r\n   */\r\n  public abstract login(redirectUrl?: string): void;\r\n\r\n  /**\r\n  * If tokens are peristed in local storage, set current user data\r\n  */\r\n  public abstract reloadPersistedUserData(): void;\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  public abstract logout(redirectUrl?: string): void;\r\n\r\n  /**\r\n   * Currently authenticated user data\r\n   */\r\n  public get currentUser(): User {\r\n    return this.userSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Current error message for fail authentication\r\n   * Undefined when user is logged in\r\n   */\r\n  public get errorMessage(): string {\r\n    return this.errorMessageSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Use to clear error message after user is informed\r\n   */\r\n  public clearErrorMessage() {\r\n    this.errorMessageSubject.next(undefined);\r\n  }\r\n\r\n  /**\r\n   * For token based authetication.\r\n   * Provide functionality to refresh tokens\r\n   */\r\n  public refreshTokens?(): Promise<any>;\r\n}\r\n","export class TokensPending {\r\n  success?: boolean;\r\n  waiting?: boolean;\r\n  constructor(waiting?: boolean, success?: boolean) {\r\n    this.waiting = waiting;\r\n    this.success = success;\r\n  }\r\n}\r\n","export enum StorageNames {\r\n  AccessToken = 'access_token',\r\n  AccessTokenExpiresAt = 'access_token_expires_at',\r\n  AccessTokenStoredAt = 'access_token_stored_at',\r\n  RefreshToken = 'refresh_token',\r\n  RefreshTokenExpiresAt = 'refresh_token_expires_at',\r\n  IdToken = 'id_token',\r\n  Roles = 'roles',\r\n  UserName = 'username',\r\n  Name = 'name'\r\n}\r\n","import { User } from '../user.model';\r\nimport { StorageNames } from './storage-names';\r\n\r\nexport class TokenStorage {\r\n  private prefix = '';\r\n\r\n  constructor(prefix?: string) {\r\n    this.prefix = prefix ?? '';\r\n  }\r\n\r\n  readUser(): User {\r\n    const roles = JSON.parse(this.getItem(StorageNames.Roles)) as string[];\r\n    return {\r\n      username: this.getItem(StorageNames.UserName),\r\n      name: this.getItem(StorageNames.Name),\r\n      access_token: this.getItem(StorageNames.AccessToken),\r\n      access_token_expires: this.getNumber(StorageNames.AccessTokenExpiresAt),\r\n      refresh_token: this.getItem(StorageNames.RefreshToken),\r\n      refresh_token_expires: this.getNumber(StorageNames.RefreshTokenExpiresAt),\r\n      id_token: this.getItem(StorageNames.IdToken),\r\n      roles\r\n    };\r\n  }\r\n\r\n  storeUser(user: User) {\r\n    this.setItem(StorageNames.UserName, user.username);\r\n    this.setItem(StorageNames.Name, user.name);\r\n    this.setItem(StorageNames.AccessToken, user.access_token);\r\n    this.setItem(StorageNames.AccessTokenExpiresAt, `${user.access_token_expires}`);\r\n    this.setItem(StorageNames.RefreshToken, user.refresh_token);\r\n    this.setItem(StorageNames.RefreshTokenExpiresAt, `${user.refresh_token_expires}`);\r\n    this.setItem(StorageNames.IdToken, user.id_token);\r\n\r\n    const rolesStr = JSON.stringify(user.roles);\r\n    sessionStorage.setItem(StorageNames.Roles, `${rolesStr}`);\r\n  }\r\n\r\n  clearUser() {\r\n    for (const name in StorageNames) {\r\n      if (StorageNames.hasOwnProperty(name)) {\r\n        this.removeItem(StorageNames[name]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getNumber(key: string): number {\r\n    return parseInt(this.getItem(key), 10);\r\n  }\r\n\r\n  getItem(key: string): string {\r\n    return sessionStorage.getItem(this.prefix + key);\r\n  }\r\n\r\n  setItem(key: string, value: string): void {\r\n    sessionStorage.setItem(this.prefix + key, value);\r\n  }\r\n\r\n  removeItem(key: string): void {\r\n    sessionStorage.removeItem(this.prefix + key);\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { map, take, distinctUntilKeyChanged, skipWhile } from 'rxjs/operators';\r\n\r\nimport * as CryptoJS from 'crypto-js';\r\n\r\nimport { User } from '../user.model';\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { AUTH_CONFIG, AuthConfig } from '../variables';\r\nimport { TokensPending } from './token-pending';\r\nimport { TokenStorage } from './token-storage';\r\nimport { TokenResponse } from './token-response';\r\nimport { StorageNames } from './storage-names';\r\nimport { TokenClaims } from './token-claims';\r\n\r\n\r\n@Injectable()\r\nexport class AvlOidcCodeAuthService extends AvlAuthService {\r\n  // success will be set after tokens are successfully fetched or not\r\n  private tokensPendingSubject = new BehaviorSubject<TokensPending>(new TokensPending(false));\r\n\r\n  /**\r\n   * When fetching tokens, this observable changes\r\n   * @returns Observable with following context:\r\n   * - waiting - if true, request for new tokens is made, this happens on initial authentication and on refreshTokens\r\n   * - success - true for successful authentication\r\n   */\r\n  public tokensPending$: Observable<TokensPending>;\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public isLoggedIn$: Observable<boolean>;\r\n  \r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n\r\n  private http: HttpClient;\r\n  private storage: TokenStorage;\r\n\r\n  constructor(private httpBackend: HttpBackend, @Inject(AUTH_CONFIG) private authConfig: AuthConfig,\r\n    private router: Router, private loc: Location) {\r\n    super();\r\n\r\n    this.http = new HttpClient(this.httpBackend);\r\n\r\n    this.tokensPending$ = this.tokensPendingSubject.asObservable();\r\n    this.isLoggedIn$ = new Observable<boolean>(observer => {\r\n      const tokensPendingState = this.tokensPendingSubject.value;\r\n      this.tokensPending$.pipe(\r\n        distinctUntilKeyChanged('waiting'),\r\n        skipWhile(tokenPending => tokenPending.waiting !== false),\r\n        map(tokenPending => {\r\n          if (tokenPending.success != null) {\r\n            observer.next(tokenPending.success);\r\n          }\r\n        }), take(1)).subscribe();\r\n      if (tokensPendingState.waiting !== true && tokensPendingState.success !== null) {\r\n        observer.next(this.currentUser != null && this.isAccessTokenValid());\r\n      }\r\n    });\r\n\r\n    this.storage = new TokenStorage(this.authConfig.tokenPrefix);\r\n    const user = this.storage.readUser();\r\n    \r\n    if (this.persistedUserInvalid(user)) {\r\n      this.clearUser();\r\n    } else {\r\n      this.persistUser(user);\r\n    }\r\n\r\n    // if user is not logged in and pkce exists handle redirect from oidc server if possible\r\n    if (this.currentUser == null && this.pkce) {\r\n      this.handleOidcRedirect();\r\n    } else {\r\n      this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n    }\r\n  } \r\n\r\n  \r\n  private persistedUserInvalid(data: Partial<User>): boolean {\r\n    return (\r\n      data.username == null || data.access_token == null || data.access_token_expires < Date.now()\r\n    );\r\n  }\r\n\r\n  private get pkce(): string | undefined {\r\n    return this.storage.getItem('pkce') || undefined;\r\n  }\r\n  private set pkce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('pkce', c);\r\n    } else {\r\n      this.storage.removeItem('pkce');\r\n    }\r\n  }\r\n\r\n  private get nonce(): string | undefined {\r\n    return sessionStorage.getItem('nonce') || undefined;\r\n  }\r\n  private set nonce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('nonce', c);\r\n    } else {\r\n      this.storage.removeItem('nonce');\r\n    }\r\n  }\r\n\r\n  private isAccessTokenValid(): boolean {\r\n    return Date.now() < this.currentUser.access_token_expires;\r\n  }\r\n\r\n  private persistUser(user?: User): void {\r\n    if (!user) {\r\n      this.clearUser();\r\n      return;\r\n    }\r\n    this.storage.storeUser(user);\r\n    this.userSubject.next(user);\r\n  }\r\n\r\n  private clearUser(): void {\r\n    this.storage.clearUser();\r\n    this.userSubject.next(undefined);\r\n  }\r\n\r\n  /*\r\n   * Checks if current url is redirect from oidc server and gets access token from the server.\r\n   */\r\n  private async handleOidcRedirect() {\r\n    const pkce = this.pkce;\r\n    this.pkce = undefined;\r\n\r\n    const urlParts = this.loc.path(true).split('?', 2);\r\n    let urlHash: string;\r\n    let first: number;\r\n    let last: number;\r\n    let urlPartSplit: string[];\r\n\r\n    if (urlParts.length === 2) {\r\n      first = urlParts[1].lastIndexOf('#');\r\n      if (first !== -1) {\r\n        last = urlParts[1].lastIndexOf('&');\r\n        urlHash = urlParts[1].slice(first, last);\r\n        urlPartSplit = urlParts[1].split('#', 2);\r\n        urlParts[1] = urlParts[1].split('&').pop();\r\n        urlParts[1] = urlPartSplit[0].concat('&').concat(urlParts[1]);\r\n      }\r\n    }\r\n\r\n    let query = urlParts.length === 2 ? this.parseQueryString(urlParts[1]) : [];\r\n    let queryCode: string;\r\n    for (let i = query.length - 1; i >= 0; i--) {\r\n      if (query[i].key === 'code') {\r\n        queryCode = query[i].value;\r\n        query = [...query.slice(0, i), ...query.slice(i + 1)];\r\n        break;\r\n      }\r\n    }\r\n    if (urlParts.length === 2 && queryCode) {\r\n      const nonce = this.nonce;\r\n      this.nonce = undefined;\r\n\r\n      const httpOptions = {\r\n        headers: new HttpHeaders({\r\n          code: queryCode,\r\n          verifier: pkce,\r\n          nonce: nonce\r\n        })\r\n      };\r\n\r\n      this.updateTokensPending(new TokensPending(true));\r\n      try {\r\n        const user = await this.http\r\n          .post<TokenResponse>(this.authConfig.tokenUrl, {}, httpOptions)\r\n          .pipe(map(token => this.readUserFromToken(token)))\r\n          .toPromise();\r\n        this.persistUser(user);\r\n        this.updateTokensPending(new TokensPending(false, true));\r\n      } catch (error) {\r\n        this.updateTokensPending(new TokensPending(false, false), error.message);\r\n      }\r\n    }\r\n\r\n    if (urlHash) {\r\n      this.router.navigateByUrl(\r\n        `${urlParts[0]}${this.reconstructQueryParamString(query)}${urlHash}`,\r\n        { replaceUrl: true }\r\n      );\r\n      this.redirectedFromLogIn.next(true);\r\n    } else {\r\n      this.router.navigateByUrl(`${urlParts[0]}${this.reconstructQueryParamString(query)}`, {\r\n        replaceUrl: true\r\n      });\r\n      this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n    }\r\n  }\r\n\r\n  public reloadPersistedUserData() {\r\n    const user = this.storage.readUser();\r\n    \r\n    if (this.persistedUserInvalid(user)) {\r\n      this.clearUser();\r\n    } else {\r\n      this.persistUser(user);\r\n    }\r\n  }\r\n  private reconstructQueryParamString(queryParams: { key: string; value: string }[]): string {\r\n    let s = '?';\r\n    if (queryParams.length === 0) {\r\n      return '';\r\n    }\r\n    for (const q of queryParams) {\r\n      if (s === '?') {\r\n        s += `${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      } else {\r\n        s += `&${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      }\r\n    }\r\n    return s;\r\n  }\r\n\r\n  private updateTokensPending(\r\n    state: TokensPending,\r\n    errorMessage?: string\r\n  ) {\r\n    // the order here is important\r\n    // errorMessage will be set before isLoggedIn becomes false\r\n    if (state.waiting === false) {\r\n      this.errorMessageSubject.next(errorMessage);\r\n    }\r\n    this.tokensPendingSubject.next(state);\r\n  }\r\n\r\n  private readUserFromToken(token: TokenResponse): User {\r\n    const accessTokenClaims = this.readClaimsFromToken(token.accesstoken);\r\n\r\n    // Calculate actual expiry date for this machine\r\n    const accessTokenStoredAt = Date.now(); // [ms]\r\n    const accessTokenExpiresAt = accessTokenStoredAt + token.expiresIn * 1000;\r\n\r\n    const refreshTokenClaims = this.readClaimsFromToken(token.refreshtoken);\r\n    let refreshTokenExpiresAt = null;\r\n    if (refreshTokenClaims) {\r\n      // If time value is 0 token lasts indefinitely\r\n      const refreshTokenExpiresIn =\r\n        refreshTokenClaims['exp'] !== 0 ? refreshTokenClaims['exp'] - refreshTokenClaims['iat'] : 0;\r\n      const refreshTokenStoredAt = accessTokenStoredAt;\r\n      refreshTokenExpiresAt =\r\n        refreshTokenExpiresIn !== 0 ? refreshTokenStoredAt + refreshTokenExpiresIn * 1000 : 0;\r\n    }\r\n\r\n    const roles = accessTokenClaims?.roles as string[];\r\n    if (roles && this.hasRequiredRole(roles)) {\r\n      this.storage.setItem(StorageNames.AccessTokenStoredAt, `${accessTokenStoredAt}`);\r\n      return {\r\n        username: accessTokenClaims.preferred_username,\r\n        name: accessTokenClaims.name ?? accessTokenClaims.preferred_username,\r\n        access_token: token.accesstoken,\r\n        access_token_expires: accessTokenExpiresAt,\r\n        refresh_token: token.refreshtoken,\r\n        refresh_token_expires: refreshTokenExpiresAt,\r\n        id_token: token.idToken,\r\n        roles: roles\r\n      } as User;\r\n    } else {\r\n      throw new Error(`Role ${this.authConfig.requiredRole} not in claims`);\r\n    }\r\n  }\r\n\r\n  private hasRequiredRole(roles: string[]) {\r\n    return (\r\n      !this.authConfig.requiredRole ||\r\n      (this.authConfig.requiredRole && roles.indexOf(this.authConfig.requiredRole) !== -1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If needed, this method can be called to refresh tokens for current user\r\n   * @returns Promise resolved with object containing new tokens\r\n   */\r\n  public async refreshTokens(): Promise<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        grant_type: 'refresh_token',\r\n        'refresh-token': this.storage.getItem(StorageNames.RefreshToken)\r\n      })\r\n    };\r\n\r\n    if (!this.authConfig.refreshUrl) {\r\n      throw new Error('refreshUrl missing in AuthConfig');\r\n    }\r\n    this.updateTokensPending(new TokensPending(true));\r\n\r\n    try {\r\n      const user = await this.http\r\n        .post<TokenResponse>(this.authConfig.refreshUrl, {}, httpOptions)\r\n        .pipe(map(token => this.readUserFromToken(token)))\r\n        .toPromise();\r\n      this.persistUser(user);\r\n      this.updateTokensPending(new TokensPending(false, true));\r\n    } catch (error) {\r\n      this.updateTokensPending(new TokensPending(false, false), error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after successful authentication\r\n   */\r\n  login(redirectUrl?: string): void {\r\n    location.href = this.generateLoginUrl(redirectUrl ? redirectUrl : location.href);\r\n  }\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  logout(redirectUrl?: string): void {\r\n    const logoutConfigSet =\r\n      this.authConfig.logoutUrl != null || this.authConfig.logoutUrlParamIdToken != null;\r\n    const user = this.userSubject.getValue();\r\n    this.clearUser();\r\n    if (!logoutConfigSet) {\r\n      console.warn(\r\n        'User signed out locally, but logout request towards OIDC server not initiated since logoutUrl or logoutUrlParamIdToken not set in authConfig.'\r\n      );\r\n      return;\r\n    }\r\n    let url = `${this.authConfig.logoutUrl}?${\r\n      this.authConfig.logoutUrlParamIdToken\r\n    }=${encodeURIComponent(user.id_token)}`;\r\n    if (this.authConfig.logoutUrlParamRedirect) {\r\n      // Avoid any query parameters for the logout redirect url\r\n      redirectUrl = redirectUrl ?? location.href.split('?')[0];\r\n      url = `${url}&${this.authConfig.logoutUrlParamRedirect}=${encodeURIComponent(redirectUrl)}`;\r\n    }\r\n    location.href = url;\r\n  }\r\n\r\n  private generateLoginUrl(redirectUrl: string): string {\r\n    const redirect_b64 = '' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(redirectUrl));\r\n\r\n    // Generate a session value.\r\n    const nonce = CryptoJS.lib.WordArray.random(16).toString();\r\n\r\n    // Generate pkce\r\n    const pkce = CryptoJS.lib.WordArray.random(32).toString();\r\n    const bytes = CryptoJS.SHA256(pkce) as CryptoJS.WordArray;\r\n    let pkce_hash = CryptoJS.enc.Base64.stringify(bytes);\r\n\r\n    // KeyCloak requires this - https://tools.ietf.org/html/rfc7636#appendix-A\r\n    pkce_hash = pkce_hash.replace(/=/g, '');\r\n    pkce_hash = pkce_hash.replace(/\\+/g, '-');\r\n    pkce_hash = pkce_hash.replace(/\\//g, '_');\r\n\r\n    this.pkce = pkce;\r\n    this.nonce = nonce;\r\n\r\n    let url = this.authConfig.loginUrl;\r\n    url += '?' + this.authConfig.loginUrlParamRedirect + '=' + encodeURIComponent(redirect_b64);\r\n    url += '&' + this.authConfig.loginUrlParamChallenge + '=' + encodeURIComponent(pkce_hash);\r\n    url += '&' + this.authConfig.loginUrlParamNonce + '=' + encodeURIComponent(nonce);\r\n    return url;\r\n  }\r\n\r\n  private readClaimsFromToken(token: string): TokenClaims | null {\r\n    if (!token.includes('.')) {\r\n      // Token is not a valid JWT token\r\n      return null;\r\n    }\r\n    const tokenParts = token.split('.');\r\n    const claimsString = this.b64DecodeUnicode(tokenParts[1]);\r\n    return JSON.parse(claimsString) as TokenClaims;\r\n  }\r\n\r\n  private b64DecodeUnicode(str: string): string {\r\n    const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\r\n    return decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n  }\r\n\r\n  private parseQueryString(queryString: string): { key: string; value: string }[] {\r\n    if (!queryString.length) {\r\n      return [];\r\n    }\r\n    const queryDict = [];\r\n    const pairs = queryString.split('&');\r\n    for (const pair of pairs) {\r\n      const index = pair.indexOf('=');\r\n      let key: string;\r\n      let value: string;\r\n      if (index === -1) {\r\n        key = pair;\r\n        value = undefined;\r\n      } else {\r\n        key = pair.substr(0, index);\r\n        value = pair.substr(index + 1);\r\n      }\r\n      queryDict.push({\r\n        key: decodeURIComponent(key),\r\n        value: decodeURIComponent(value)\r\n      });\r\n    }\r\n    return queryDict;\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, from, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { INTERCEPTOR_BASE_PATHS } from '../variables';\r\n\r\n@Injectable()\r\nexport class AvlTokenInterceptor implements HttpInterceptor {\r\n  protected enabled = true;\r\n\r\n  constructor(\r\n    public auth: AvlAuthService,\r\n    @Inject(INTERCEPTOR_BASE_PATHS) protected basePaths: string[]\r\n  ) {\r\n    for (const i in this.basePaths) {\r\n      if (this.basePaths.hasOwnProperty(i)) {\r\n        this.basePaths[i] = this.basePaths[i].toLowerCase();\r\n      }\r\n    }\r\n  }\r\n\r\n  private setAuthHeader(req: HttpRequest<any>): HttpRequest<any> {\r\n    const access_token = this.auth.currentUser.access_token;\r\n    const header = `Bearer ${access_token}`;\r\n    const headers = req.headers.set('Authorization', header);\r\n\r\n    return req.clone({ headers });\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.enabled) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    // check if we need to add token into request\r\n    const url = req.url.toLowerCase();\r\n    for (const basePath of this.basePaths) {\r\n      if (url.startsWith(basePath)) {\r\n        if (this.auth.currentUser != null) {\r\n          req = this.setAuthHeader(req);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return next.handle(req).pipe(\r\n      catchError((err: HttpErrorResponse) => {\r\n        if (err.status === 401) {\r\n          return from(this.auth.refreshTokens()).pipe(\r\n            switchMap(_ => next.handle(this.setAuthHeader(req))),\r\n            catchError(_ => throwError(err))\r\n          );\r\n        }\r\n        return throwError(err);\r\n      })\r\n    );\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of auth\r\n */\r\n\r\nexport { User } from './lib/user.model';\r\nexport {\r\n  AUTH_CONFIG,\r\n  AuthConfig,\r\n  INTERCEPTOR_BASE_PATHS,\r\n} from './lib/variables';\r\nexport { AvlAuthService } from './lib/services/avl-auth.service';\r\nexport { AvlOidcCodeAuthService } from './lib/services/avl-oidc-code-auth.service';\r\nexport { AvlTokenInterceptor } from './lib/services/avl-token.interceptor';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["CryptoJS.enc","CryptoJS.lib","CryptoJS.SHA256","__param"],"mappings":"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"}