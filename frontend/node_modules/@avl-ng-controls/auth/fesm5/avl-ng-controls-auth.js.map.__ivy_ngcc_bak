{"version":3,"file":"avl-ng-controls-auth.js","sources":["ng://@avl-ng-controls/auth/lib/variables.ts","ng://@avl-ng-controls/auth/lib/services/avl-auth.service.ts","ng://@avl-ng-controls/auth/lib/services/token-pending.ts","ng://@avl-ng-controls/auth/lib/services/storage-names.ts","ng://@avl-ng-controls/auth/lib/services/token-storage.ts","ng://@avl-ng-controls/auth/lib/services/avl-oidc-code-auth.service.ts","ng://@avl-ng-controls/auth/lib/services/avl-token.interceptor.ts","ng://@avl-ng-controls/auth/public-api.ts","ng://@avl-ng-controls/auth/avl-ng-controls-auth.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface AuthConfig { \r\n  tokenUrl: string;\r\n  loginUrl: string;\r\n  refreshUrl?: string;\r\n  loginUrlParamRedirect: string;\r\n  loginUrlParamChallenge: string;\r\n  loginUrlParamNonce: string;\r\n  logoutUrl?: string;\r\n  logoutUrlParamIdToken?: string;\r\n  logoutUrlParamRedirect?: string;\r\n  requiredRole?: string;\r\n  tokenPrefix?: string;\r\n}\r\n\r\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>(undefined);\r\n\r\nexport const INTERCEPTOR_BASE_PATHS = new InjectionToken<string[]>(undefined);","import { Observable, BehaviorSubject } from 'rxjs';\r\nimport { User } from '../user.model';\r\nexport abstract class AvlAuthService {\r\n  /**\r\n   * User data is held in this property\r\n   */\r\n  protected userSubject = new BehaviorSubject<User>(undefined);\r\n\r\n  /**\r\n   * Current user as Observable\r\n   */\r\n  public user$: Observable<User> = this.userSubject.asObservable();\r\n\r\n  /**\r\n   * String holding error message in case user couldn't authenticate\r\n   */\r\n  protected errorMessageSubject = new BehaviorSubject<string>(undefined);\r\n\r\n  /**\r\n   * Error messsage in case failed authentication as Observable\r\n   */\r\n  public errorMessage$: Observable<string> = this.errorMessageSubject.asObservable();\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public abstract isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public abstract redirectedFromLogIn: BehaviorSubject<boolean>;\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after succesful authentication\r\n   */\r\n  public abstract login(redirectUrl?: string): void;\r\n\r\n  /**\r\n  * If tokens are peristed in local storage, set current user data\r\n  */\r\n  public abstract reloadPersistedUserData(): void;\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  public abstract logout(redirectUrl?: string): void;\r\n\r\n  /**\r\n   * Currently authenticated user data\r\n   */\r\n  public get currentUser(): User {\r\n    return this.userSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Current error message for fail authentication\r\n   * Undefined when user is logged in\r\n   */\r\n  public get errorMessage(): string {\r\n    return this.errorMessageSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Use to clear error message after user is informed\r\n   */\r\n  public clearErrorMessage() {\r\n    this.errorMessageSubject.next(undefined);\r\n  }\r\n\r\n  /**\r\n   * For token based authetication.\r\n   * Provide functionality to refresh tokens\r\n   */\r\n  public refreshTokens?(): Promise<any>;\r\n\r\n  /**\r\n   * For token based authetication.\r\n   * Updates user authentication with refresh tokens\r\n   */\r\n   public abstract refreshUserIfNeeded(): void;\r\n\r\n  /**\r\n  * Read user from session storage\r\n  */\r\n   public abstract readUserFromSessionStorage(): User;\r\n\r\n  /**\r\n  * Store user to session storage\r\n  */\r\n   public abstract storeUserToSessionStorage(user: User): void;\r\n   \r\n  /**\r\n  * Clear user from session storage\r\n  */\r\n   public abstract clearUserFromSessionStorage(): void;\r\n}\r\n","export class TokensPending {\r\n  success?: boolean;\r\n  waiting?: boolean;\r\n  constructor(waiting?: boolean, success?: boolean) {\r\n    this.waiting = waiting;\r\n    this.success = success;\r\n  }\r\n}\r\n","export enum StorageNames {\r\n  AccessToken = 'access_token',\r\n  AccessTokenExpiresAt = 'access_token_expires_at',\r\n  AccessTokenStoredAt = 'access_token_stored_at',\r\n  RefreshToken = 'refresh_token',\r\n  RefreshTokenExpiresAt = 'refresh_token_expires_at',\r\n  IdToken = 'id_token',\r\n  Roles = 'roles',\r\n  UserName = 'username',\r\n  Name = 'name'\r\n}\r\n","import { User } from '../user.model';\r\nimport { StorageNames } from './storage-names';\r\n\r\nexport class TokenStorage {\r\n  private prefix = '';\r\n\r\n  constructor(prefix: string = '') {\r\n    this.prefix = prefix;\r\n  }\r\n\r\n  readUser(): User {\r\n    const roles = JSON.parse(this.getItem(StorageNames.Roles)) as string[];\r\n    return {\r\n      username: this.getItem(StorageNames.UserName),\r\n      name: this.getItem(StorageNames.Name),\r\n      access_token: this.getItem(StorageNames.AccessToken),\r\n      access_token_expires: this.getNumber(StorageNames.AccessTokenExpiresAt),\r\n      access_token_stored: this.getNumber(StorageNames.AccessTokenStoredAt),\r\n      refresh_token: this.getItem(StorageNames.RefreshToken),\r\n      refresh_token_expires: this.getNumber(StorageNames.RefreshTokenExpiresAt),\r\n      id_token: this.getItem(StorageNames.IdToken),\r\n      roles\r\n    };\r\n  }\r\n\r\n  storeUser(user: User) {\r\n    this.setItem(StorageNames.UserName, user.username);\r\n    this.setItem(StorageNames.Name, user.name);\r\n    this.setItem(StorageNames.AccessToken, user.access_token);\r\n    this.setItem(StorageNames.AccessTokenExpiresAt, `${user.access_token_expires}`);\r\n    this.setItem(StorageNames.AccessTokenStoredAt, `${user.access_token_stored}`);\r\n    this.setItem(StorageNames.RefreshToken, user.refresh_token);\r\n    this.setItem(StorageNames.RefreshTokenExpiresAt, `${user.refresh_token_expires}`);\r\n    this.setItem(StorageNames.IdToken, user.id_token);\r\n\r\n    const rolesStr = JSON.stringify(user.roles);\r\n    sessionStorage.setItem(StorageNames.Roles, `${rolesStr}`);\r\n  }\r\n\r\n  clearUser() {\r\n    for (const name in StorageNames) {\r\n      if (StorageNames.hasOwnProperty(name)) {\r\n        this.removeItem(StorageNames[name]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getNumber(key: string): number {\r\n    return parseInt(this.getItem(key), 10);\r\n  }\r\n\r\n  getItem(key: string): string {\r\n    return sessionStorage.getItem(this.prefix + key);\r\n  }\r\n\r\n  setItem(key: string, value: string): void {\r\n    sessionStorage.setItem(this.prefix + key, value);\r\n  }\r\n\r\n  removeItem(key: string): void {\r\n    sessionStorage.removeItem(this.prefix + key);\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { map, take, distinctUntilKeyChanged, skipWhile, catchError } from 'rxjs/operators';\r\n\r\nimport * as CryptoJS from 'crypto-js';\r\n\r\nimport { User } from '../user.model';\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { AUTH_CONFIG, AuthConfig } from '../variables';\r\nimport { TokensPending } from './token-pending';\r\nimport { TokenStorage } from './token-storage';\r\nimport { TokenResponse } from './token-response';\r\nimport { StorageNames } from './storage-names';\r\nimport { TokenClaims } from './token-claims';\r\n\r\nconst LOGOUT_CONFIG_NOT_SET_ERROR =\r\n  'User signed out locally, but logout request towards OIDC server not initiated since logoutUrl is not set in authConfig.';\r\n\r\n@Injectable()\r\nexport class AvlOidcCodeAuthService extends AvlAuthService {\r\n  // success will be set after tokens are successfully fetched or not\r\n  private tokensPendingSubject = new BehaviorSubject<TokensPending>(new TokensPending(false));\r\n\r\n  /**\r\n   * When fetching tokens, this observable changes\r\n   * @returns Observable with following context:\r\n   * - waiting - if true, request for new tokens is made, this happens on initial authentication and on refreshTokens\r\n   * - success - true for successful authentication\r\n   */\r\n  public tokensPending$: Observable<TokensPending>;\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n\r\n  private http: HttpClient;\r\n  private storage: TokenStorage;\r\n\r\n  constructor(\r\n    private httpBackend: HttpBackend,\r\n    @Inject(AUTH_CONFIG) private authConfig: AuthConfig,\r\n    private router: Router,\r\n    private loc: Location\r\n  ) {\r\n    super();\r\n\r\n    this.http = new HttpClient(this.httpBackend);\r\n\r\n    this.tokensPending$ = this.tokensPendingSubject.asObservable();\r\n    this.isLoggedIn$ = new Observable<boolean>(observer => {\r\n      const tokensPendingState = this.tokensPendingSubject.value;\r\n      this.tokensPending$\r\n        .pipe(\r\n          distinctUntilKeyChanged('waiting'),\r\n          skipWhile(tokenPending => tokenPending.waiting !== false),\r\n          map(tokenPending => {\r\n            if (tokenPending.success != null) {\r\n              observer.next(tokenPending.success);\r\n            }\r\n          }),\r\n          take(1)\r\n        )\r\n        .subscribe();\r\n      if (tokensPendingState.waiting !== true && tokensPendingState.success !== null) {\r\n        observer.next(this.currentUser != null && this.isAccessTokenValid());\r\n      }\r\n    });\r\n\r\n    this.storage = new TokenStorage(this.authConfig.tokenPrefix);\r\n    const user = this.storage.readUser();\r\n\r\n    if (this.isUserInvalid(user)) {\r\n      this.storage.clearUser();\r\n    } else {\r\n      this.persistUser(user);\r\n    }\r\n\r\n    // if user is not logged in and pkce exists handle redirect from oidc server if possible\r\n    if (this.currentUser == null && this.pkce) {\r\n      this.handleOidcRedirect();\r\n    } else {\r\n      this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n    }\r\n  }\r\n\r\n  private isUserInvalid(data: Partial<User>): boolean {\r\n    return (\r\n      data.username == null || data.access_token == null || data.access_token_expires < Date.now()\r\n    );\r\n  }\r\n\r\n  private get pkce(): string | undefined {\r\n    return this.storage.getItem('pkce') || undefined;\r\n  }\r\n  private set pkce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('pkce', c);\r\n    } else {\r\n      this.storage.removeItem('pkce');\r\n    }\r\n  }\r\n\r\n  private get nonce(): string | undefined {\r\n    return sessionStorage.getItem('nonce') || undefined;\r\n  }\r\n  private set nonce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('nonce', c);\r\n    } else {\r\n      this.storage.removeItem('nonce');\r\n    }\r\n  }\r\n\r\n  private isAccessTokenValid(): boolean {\r\n    return Date.now() < this.currentUser.access_token_expires;\r\n  }\r\n\r\n  private persistUser(user?: User): void {\r\n    if (!user) {\r\n      this.clearUser();\r\n      return;\r\n    }\r\n    this.storage.storeUser(user);\r\n    this.userSubject.next(user);\r\n  }\r\n\r\n  private clearUser(): void {\r\n    this.storage.clearUser();\r\n    this.userSubject.next(undefined);\r\n  }\r\n\r\n  /*\r\n   * Checks if current url is redirect from oidc server and gets access token from the server.\r\n   */\r\n  private async handleOidcRedirect() {\r\n    const pkce = this.pkce;\r\n    this.pkce = undefined;\r\n\r\n    const urlParts = this.loc.path(true).split('?', 2);\r\n    let urlHash: string;\r\n    let first: number;\r\n    let last: number;\r\n    let urlPartSplit: string[];\r\n\r\n    if (urlParts.length === 2) {\r\n      first = urlParts[1].lastIndexOf('#');\r\n      if (first !== -1) {\r\n        last = urlParts[1].lastIndexOf('&');\r\n        urlHash = urlParts[1].slice(first, last);\r\n        urlPartSplit = urlParts[1].split('#', 2);\r\n        urlParts[1] = urlParts[1].split('&').pop();\r\n        urlParts[1] = urlPartSplit[0].concat('&').concat(urlParts[1]);\r\n      }\r\n    }\r\n\r\n    let query = urlParts.length === 2 ? this.parseQueryString(urlParts[1]) : [];\r\n    let queryCode: string;\r\n    for (let i = query.length - 1; i >= 0; i--) {\r\n      if (query[i].key === 'code') {\r\n        queryCode = query[i].value;\r\n        query = [...query.slice(0, i), ...query.slice(i + 1)];\r\n        break;\r\n      }\r\n    }\r\n    if (urlParts.length === 2 && queryCode) {\r\n      const nonce = this.nonce;\r\n      this.nonce = undefined;\r\n\r\n      const httpOptions = {\r\n        headers: new HttpHeaders({\r\n          code: queryCode,\r\n          verifier: pkce,\r\n          nonce: nonce\r\n        })\r\n      };\r\n\r\n      this.updateTokensPending(new TokensPending(true));\r\n      try {\r\n        const user = await this.http\r\n          .post<TokenResponse>(this.authConfig.tokenUrl, {}, httpOptions)\r\n          .pipe(map(token => this.readUserFromToken(token)))\r\n          .toPromise();\r\n        this.persistUser(user);\r\n        this.updateTokensPending(new TokensPending(false, true));\r\n      } catch (error) {\r\n        this.updateTokensPending(new TokensPending(false, false), error.message);\r\n      }\r\n    }\r\n\r\n    if (urlHash) {\r\n      this.router.navigateByUrl(\r\n        `${urlParts[0]}${this.reconstructQueryParamString(query)}${urlHash}`,\r\n        { replaceUrl: true }\r\n      );\r\n      this.redirectedFromLogIn.next(true);\r\n    } else {\r\n      this.router.navigateByUrl(`${urlParts[0]}${this.reconstructQueryParamString(query)}`, {\r\n        replaceUrl: true\r\n      });\r\n      this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n    }\r\n  }\r\n\r\n  public reloadPersistedUserData() {\r\n    const user = this.storage.readUser();\r\n    if (this.currentUser?.access_token === user?.access_token) {\r\n      return;\r\n    }\r\n\r\n    if (this.isUserInvalid(user)) {\r\n      this.clearUser();\r\n    } else {\r\n      this.persistUser(user);\r\n    }\r\n  }\r\n  private reconstructQueryParamString(queryParams: { key: string; value: string }[]): string {\r\n    let s = '?';\r\n    if (queryParams.length === 0) {\r\n      return '';\r\n    }\r\n    for (const q of queryParams) {\r\n      if (s === '?') {\r\n        s += `${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      } else {\r\n        s += `&${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      }\r\n    }\r\n    return s;\r\n  }\r\n\r\n  private updateTokensPending(state: TokensPending, errorMessage?: string) {\r\n    // the order here is important\r\n    // errorMessage will be set before isLoggedIn becomes false\r\n    if (state.waiting === false) {\r\n      this.errorMessageSubject.next(errorMessage);\r\n    }\r\n    this.tokensPendingSubject.next(state);\r\n  }\r\n\r\n  private readUserFromToken(token: TokenResponse): User {\r\n    const accessTokenClaims = this.readClaimsFromToken(token.accesstoken);\r\n\r\n    // Calculate actual expiry date for this machine\r\n    const accessTokenStoredAt = Date.now(); // [ms]\r\n    const accessTokenExpiresAt = accessTokenStoredAt + token.expiresIn * 1000;\r\n\r\n    const refreshTokenClaims = this.readClaimsFromToken(token.refreshtoken);\r\n    let refreshTokenExpiresAt = null;\r\n    if (refreshTokenClaims) {\r\n      // If time value is 0 token lasts indefinitely\r\n      const refreshTokenExpiresIn =\r\n        refreshTokenClaims['exp'] !== 0 ? refreshTokenClaims['exp'] - refreshTokenClaims['iat'] : 0;\r\n      const refreshTokenStoredAt = accessTokenStoredAt;\r\n      refreshTokenExpiresAt =\r\n        refreshTokenExpiresIn !== 0 ? refreshTokenStoredAt + refreshTokenExpiresIn * 1000 : 0;\r\n    }\r\n\r\n    const roles = accessTokenClaims?.roles;\r\n\r\n    return {\r\n      username: accessTokenClaims.preferred_username,\r\n      name: accessTokenClaims.name ?? accessTokenClaims.preferred_username,\r\n      access_token: token.accesstoken,\r\n      access_token_expires: accessTokenExpiresAt,\r\n      access_token_stored: accessTokenStoredAt,\r\n      refresh_token: token.refreshtoken,\r\n      refresh_token_expires: refreshTokenExpiresAt,\r\n      id_token: token.idToken,\r\n      roles: roles\r\n    } as User;\r\n  }\r\n\r\n  public async refreshUserIfNeeded() {\r\n    const accessTokenExpired = this.currentUser?.access_token_expires < Date.now();\r\n    if (accessTokenExpired) {\r\n      await this.refreshTokens();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If needed, this method can be called to refresh tokens for current user\r\n   * @returns Promise resolved with object containing new tokens\r\n   */\r\n  public async refreshTokens(): Promise<any> {\r\n    const refreshTokenValid = this.currentUser?.refresh_token_expires > Date.now();\r\n    if (!refreshTokenValid) {\r\n      this.logout();\r\n      return;\r\n    }\r\n\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        grant_type: 'refresh_token',\r\n        'refresh-token': this.storage.getItem(StorageNames.RefreshToken)\r\n      })\r\n    };\r\n\r\n    if (!this.authConfig.refreshUrl) {\r\n      throw new Error('refreshUrl missing in AuthConfig');\r\n    }\r\n    this.updateTokensPending(new TokensPending(true));\r\n\r\n    try {\r\n      const user = await this.http\r\n        .post<TokenResponse>(this.authConfig.refreshUrl, {}, httpOptions)\r\n        .pipe(map(token => this.readUserFromToken(token)))\r\n        .toPromise();\r\n      this.persistUser(user);\r\n      this.updateTokensPending(new TokensPending(false, true));\r\n    } catch (error) {\r\n      this.updateTokensPending(new TokensPending(false, false), error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after successful authentication\r\n   */\r\n  public login(redirectUrl?: string): void {\r\n    location.href = this.generateLoginUrl(redirectUrl ? redirectUrl : location.href);\r\n  }\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  public logout(redirectUrl?: string): void {\r\n    const { logoutUrl } = this.authConfig;\r\n\r\n    if (!logoutUrl) {\r\n      console.warn(LOGOUT_CONFIG_NOT_SET_ERROR);\r\n    }\r\n\r\n    const headers = new HttpHeaders({ 'refresh-token': this.currentUser.refresh_token });\r\n    this.http\r\n      .post(logoutUrl, {}, { headers })\r\n      .pipe(\r\n        catchError(error => {\r\n          this.onLogout(redirectUrl);\r\n          throw error;\r\n        })\r\n      )\r\n      .subscribe(() => this.onLogout(redirectUrl));\r\n  }\r\n\r\n  private onLogout(redirectUrl?: string): void {\r\n    this.clearUser();\r\n    this.redirectIfNeeded(redirectUrl);\r\n  }\r\n\r\n  private redirectIfNeeded(redirectUrl?: string): void {\r\n    if (redirectUrl) {\r\n      this.navigateTo(redirectUrl);\r\n    } else {\r\n      this.reloadPage();\r\n    }\r\n  }\r\n\r\n  private reloadPage(): void {\r\n    window.location.reload();\r\n  }\r\n\r\n  private navigateTo(redirectUrl: string): void {\r\n    this.router.navigate([redirectUrl]);\r\n  }\r\n\r\n  private generateLoginUrl(redirectUrl: string): string {\r\n    const redirect_b64 = '' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(redirectUrl));\r\n\r\n    // Generate a session value.\r\n    const nonce = CryptoJS.lib.WordArray.random(16).toString();\r\n\r\n    // Generate pkce\r\n    const pkce = CryptoJS.lib.WordArray.random(32).toString();\r\n    const bytes = CryptoJS.SHA256(pkce) as CryptoJS.WordArray;\r\n    let pkce_hash = CryptoJS.enc.Base64.stringify(bytes);\r\n\r\n    // KeyCloak requires this - https://tools.ietf.org/html/rfc7636#appendix-A\r\n    pkce_hash = pkce_hash.replace(/=/g, '');\r\n    pkce_hash = pkce_hash.replace(/\\+/g, '-');\r\n    pkce_hash = pkce_hash.replace(/\\//g, '_');\r\n\r\n    this.pkce = pkce;\r\n    this.nonce = nonce;\r\n\r\n    let url = this.authConfig.loginUrl;\r\n    url += '?' + this.authConfig.loginUrlParamRedirect + '=' + encodeURIComponent(redirect_b64);\r\n    url += '&' + this.authConfig.loginUrlParamChallenge + '=' + encodeURIComponent(pkce_hash);\r\n    url += '&' + this.authConfig.loginUrlParamNonce + '=' + encodeURIComponent(nonce);\r\n    return url;\r\n  }\r\n\r\n  private readClaimsFromToken(token: string): TokenClaims | null {\r\n    if (!token.includes('.')) {\r\n      // Token is not a valid JWT token\r\n      return null;\r\n    }\r\n    const tokenParts = token.split('.');\r\n    const claimsString = this.b64DecodeUnicode(tokenParts[1]);\r\n    return JSON.parse(claimsString) as TokenClaims;\r\n  }\r\n\r\n  private b64DecodeUnicode(str: string): string {\r\n    const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\r\n    return decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n  }\r\n\r\n  private parseQueryString(queryString: string): { key: string; value: string }[] {\r\n    if (!queryString.length) {\r\n      return [];\r\n    }\r\n    const queryDict = [];\r\n    const pairs = queryString.split('&');\r\n    for (const pair of pairs) {\r\n      const index = pair.indexOf('=');\r\n      let key: string;\r\n      let value: string;\r\n      if (index === -1) {\r\n        key = pair;\r\n        value = undefined;\r\n      } else {\r\n        key = pair.substr(0, index);\r\n        value = pair.substr(index + 1);\r\n      }\r\n      queryDict.push({\r\n        key: decodeURIComponent(key),\r\n        value: decodeURIComponent(value)\r\n      });\r\n    }\r\n    return queryDict;\r\n  }\r\n\r\n  public readUserFromSessionStorage(): User {\r\n    return this.storage.readUser();\r\n  }\r\n\r\n  public storeUserToSessionStorage(user: User): void {\r\n    this.storage.storeUser(user);\r\n  }\r\n\r\n  public clearUserFromSessionStorage(): void {\r\n    this.storage.clearUser();\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, from, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { INTERCEPTOR_BASE_PATHS } from '../variables';\r\n\r\n@Injectable()\r\nexport class AvlTokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    public auth: AvlAuthService,\r\n    @Inject(INTERCEPTOR_BASE_PATHS) protected basePaths: string[]\r\n  ) {\r\n    for (const i in this.basePaths) {\r\n      if (this.basePaths.hasOwnProperty(i)) {\r\n        this.basePaths[i] = this.basePaths[i].toLowerCase();\r\n      }\r\n    }\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.isUrlInBasePaths(req)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    if (this.auth.currentUser) {\r\n      req = this.setAuthHeader(req);\r\n    }\r\n\r\n    return next\r\n      .handle(req)\r\n      .pipe(catchError((err: HttpErrorResponse) => this.handleHttpError(req, next, err)));\r\n  }\r\n\r\n  private handleHttpError(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler,\r\n    err: HttpErrorResponse\r\n  ): Observable<any> {\r\n    if (err.status === 401) {\r\n      // Unauthorized, tokens expired\r\n      return from(this.auth.refreshTokens()).pipe(\r\n        switchMap(_ => next.handle(this.setAuthHeader(req))),\r\n        catchError(_ => throwError(err))\r\n      );\r\n    }\r\n    return throwError(err);\r\n  }\r\n\r\n  /** Check if request URL is in provided basePaths\r\n   * @param request Http request instance whose URL is checked.\r\n   */\r\n  private isUrlInBasePaths(request: HttpRequest<any>): boolean {\r\n    const url = request.url.toLowerCase();\r\n    const path = this.basePaths.find(path => url.startsWith(path));\r\n    return Boolean(path);\r\n  }\r\n\r\n  /** Sets access token to authorization header of HTTP request\r\n   * @param request HTTP request instance\r\n   * @returns Cloned HTTP with adapted headers\r\n   */\r\n  private setAuthHeader(req: HttpRequest<any>): HttpRequest<any> {\r\n    const access_token = this.auth.currentUser.access_token;\r\n    const header = `Bearer ${access_token}`;\r\n    const headers = req.headers.set('Authorization', header);\r\n\r\n    return req.clone({ headers });\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of auth\r\n */\r\n\r\nexport { User } from './lib/user.model';\r\nexport {\r\n  AUTH_CONFIG,\r\n  AuthConfig,\r\n  INTERCEPTOR_BASE_PATHS,\r\n} from './lib/variables';\r\nexport { AvlAuthService } from './lib/services/avl-auth.service';\r\nexport { AvlOidcCodeAuthService } from './lib/services/avl-oidc-code-auth.service';\r\nexport { AvlTokenInterceptor } from './lib/services/avl-token.interceptor';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["CryptoJS.enc","CryptoJS.lib","CryptoJS.SHA256","__param"],"mappings":"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"}