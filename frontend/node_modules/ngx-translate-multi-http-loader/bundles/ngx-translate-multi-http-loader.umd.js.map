{"version":3,"file":"ngx-translate-multi-http-loader.umd.js","sources":["ngx-translate-multi-http-loader/projects/ngx-translate/multi-http-loader/src/lib/multi-http-loader.ts"],"names":["catchError","of"],"mappings":";;;;;;;;;;;;AAEA,QAUA,wBAAA,IAAA;AAAc;AAAY;AAA2B;AAElD;AAAY,QADb,kCAAF,IAAA,EAAA,SAAA;AAAI,YACQ,IAAZ,CAAA,IAAgB,GAAJ,IAAI,CAAhB;AAAC,YACW,IAAZ,CAAA,SAAqB,GAAT,SAAS,CAArB;AAAC,SACK;AACN;AACW;AAA2B;AAClC;AAAY,QADP,wBAAT,CAAA,SAAA,CAAA,cAAA,GAAA,UAAA,IAAA;AAAI,YACA,IAAJ,KAAA,GAAA,IAAA,CAAA;AAAC,YACD,qBAAA,QAAA,GAAA,IAAA,CAAA,SAAA,CAAA,GAAA,CAAA,UAAA,QAAA;AAAI,gBACE,qBAAqB,IAAI,GAA/B,QAAA,CAAA,MAAiD,GAAG,IAApD,GAAA,QAAA,CAAA,MAAA,CAAA;AAAC,gBACD,OAAA,KAAgB,CAAhB,IAAqB,CAAC,GAAtB,CAAA,IAAA,CAAA,CAAA,IAAA,CAAAA,oBAAA,CAAA,UAA0D,GAA1D;AAAI,oBACI,OAAO,CAAf,KAAqB,CAAC,kCAAtB,EAAA,IAAA,CAAA,CAAA;AAAC,oBACS,OAAVC,OAAA,CAAA,EAAA,CAAA,CAAA;AAAC,iBACD,CAAA,CAAA,CAAA;AAAC,aACD,CAAA,CAAA;AAAC;AAGqC,SADtC,CAAA;AAAC;AACuC;AAAU;AAAC;AAAiE;AAAC;AAAmE;AAAC;AAAM","sourcesContent":["import {HttpClient} from \"@angular/common/http\";\nimport {TranslateLoader} from \"@ngx-translate/core\";\nimport {Observable, forkJoin, of} from \"rxjs\";\nimport {catchError, map} from \"rxjs/operators\";\nimport merge from 'deepmerge';\n\n\nexport interface ITranslationResource {\n  prefix: string;\n  suffix: string;\n}\n\nexport class MultiTranslateHttpLoader implements TranslateLoader {\n  constructor(\n    private http: HttpClient,\n    private resources: ITranslationResource[],\n  ) {}\n\n  public getTranslation(lang: string): Observable<any> {\n    const requests = this.resources.map(resource => {\n      const path = resource.prefix + lang + resource.suffix;\n      return this.http.get(path).pipe(catchError(res => {\n        console.error(\"Could not find translation file:\", path);\n        return of({});\n      }));\n    });\n    return forkJoin(requests).pipe(map(response => merge.all(response)));\n  }\n}\n"]}