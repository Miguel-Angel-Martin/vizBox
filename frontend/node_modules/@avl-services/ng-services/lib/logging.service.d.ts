import { HttpClient } from '@angular/common/http';
import { OnDestroy } from '@angular/core';
import { AvlAuthService } from '@avl-ng-controls/auth';
import { Observable } from 'rxjs';
import { Log, LogConfig, LogSeverity } from './logging.model';
import * as ɵngcc0 from '@angular/core';
export declare class LoggingService implements OnDestroy {
    private http;
    private config;
    private authService;
    private logs;
    private headers;
    private isLogging;
    private debounceTime$;
    private logs$;
    private stopLogging$;
    private postLogs$;
    private destroyed$;
    /**
     * @ignore
     */
    constructor(http: HttpClient, config: LogConfig, authService: AvlAuthService);
    /**
     * @ignore
     */
    ngOnDestroy(): void;
    /**
     * Starts periodical logging process.
     *
     * Depends on _debounceTime_ and _capacity_ properties.
     */
    startLogging(): void;
    /**
     * Stops logging process.
     */
    stopLogging(): void;
    /**
     * Gets all currently queued logs as an observable value.
     * @returns All currently queued logs as an observable value
     */
    getLogs$(): Observable<Log[]>;
    /**
     * Logs message with debug severity.
     * @param message Message used for constructing a debug log
     * @param componentName Name of the component which called this method
     */
    debug(message: string, componentName?: string): void;
    /**
     * Logs message with info severity.
     * @param message Message used for constructing a info log
     * @param componentName Name of the component which called this method
     */
    info(message: string, componentName?: string): void;
    /**
     * Logs message with warning severity.
     * @param message Message used for constructing a warning log
     * @param componentName Name of the component which called this method
     */
    warn(message: string, componentName?: string): void;
    /**
     * Logs message with error severity.
     * @param message Message used for constructing a error log
     * @param componentName Name of the component which called this method
     */
    error(message: string, componentName?: string): void;
    /**
     * Logs message with fatal severity.
     * @param message Message used for constructing a fatal log
     * @param componentName Name of the component which called this method
     */
    fatal(message: string, componentName?: string): void;
    /**
     * Setter for debounce time (log period).
     * @param debounceTime Time in milliseconds; determines the period of API requests for logging
     */
    setLoggingDebounceTime(debounceTime: number): void;
    /**
     * Setter for global log level.
     * @param globalLogLevel Minimum message severity to log
     */
    setGlobalLogLevel(globalLogLevel: LogSeverity): void;
    /**
     * Setter for log queue capacity.
     * @param capacity Log queue capacity
     */
    setLogCapacity(capacity: number): void;
    private log;
    private createAndStoreLog;
    private isFullCapacity;
    private clearLogs;
    private onPostMessages;
    private postLogs;
    private periodicalLogging;
    private postMessages;
    private dispatchLogs;
    private decideOnLogging;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LoggingService, [null, null, { optional: true; }]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImxvZ2dpbmcuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEF2bEF1dGhTZXJ2aWNlIH0gZnJvbSAnQGF2bC1uZy1jb250cm9scy9hdXRoJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBMb2csIExvZ0NvbmZpZywgTG9nU2V2ZXJpdHkgfSBmcm9tICcuL2xvZ2dpbmcubW9kZWwnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMb2dnaW5nU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGh0dHA7XHJcbiAgICBwcml2YXRlIGNvbmZpZztcclxuICAgIHByaXZhdGUgYXV0aFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIGxvZ3M7XHJcbiAgICBwcml2YXRlIGhlYWRlcnM7XHJcbiAgICBwcml2YXRlIGlzTG9nZ2luZztcclxuICAgIHByaXZhdGUgZGVib3VuY2VUaW1lJDtcclxuICAgIHByaXZhdGUgbG9ncyQ7XHJcbiAgICBwcml2YXRlIHN0b3BMb2dnaW5nJDtcclxuICAgIHByaXZhdGUgcG9zdExvZ3MkO1xyXG4gICAgcHJpdmF0ZSBkZXN0cm95ZWQkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQsIGNvbmZpZzogTG9nQ29uZmlnLCBhdXRoU2VydmljZTogQXZsQXV0aFNlcnZpY2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyBwZXJpb2RpY2FsIGxvZ2dpbmcgcHJvY2Vzcy5cclxuICAgICAqXHJcbiAgICAgKiBEZXBlbmRzIG9uIF9kZWJvdW5jZVRpbWVfIGFuZCBfY2FwYWNpdHlfIHByb3BlcnRpZXMuXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0TG9nZ2luZygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBsb2dnaW5nIHByb2Nlc3MuXHJcbiAgICAgKi9cclxuICAgIHN0b3BMb2dnaW5nKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYWxsIGN1cnJlbnRseSBxdWV1ZWQgbG9ncyBhcyBhbiBvYnNlcnZhYmxlIHZhbHVlLlxyXG4gICAgICogQHJldHVybnMgQWxsIGN1cnJlbnRseSBxdWV1ZWQgbG9ncyBhcyBhbiBvYnNlcnZhYmxlIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGdldExvZ3MkKCk6IE9ic2VydmFibGU8TG9nW10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2dzIG1lc3NhZ2Ugd2l0aCBkZWJ1ZyBzZXZlcml0eS5cclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIE1lc3NhZ2UgdXNlZCBmb3IgY29uc3RydWN0aW5nIGEgZGVidWcgbG9nXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgd2hpY2ggY2FsbGVkIHRoaXMgbWV0aG9kXHJcbiAgICAgKi9cclxuICAgIGRlYnVnKG1lc3NhZ2U6IHN0cmluZywgY29tcG9uZW50TmFtZT86IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIExvZ3MgbWVzc2FnZSB3aXRoIGluZm8gc2V2ZXJpdHkuXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBNZXNzYWdlIHVzZWQgZm9yIGNvbnN0cnVjdGluZyBhIGluZm8gbG9nXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgd2hpY2ggY2FsbGVkIHRoaXMgbWV0aG9kXHJcbiAgICAgKi9cclxuICAgIGluZm8obWVzc2FnZTogc3RyaW5nLCBjb21wb25lbnROYW1lPzogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogTG9ncyBtZXNzYWdlIHdpdGggd2FybmluZyBzZXZlcml0eS5cclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIE1lc3NhZ2UgdXNlZCBmb3IgY29uc3RydWN0aW5nIGEgd2FybmluZyBsb2dcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCB3aGljaCBjYWxsZWQgdGhpcyBtZXRob2RcclxuICAgICAqL1xyXG4gICAgd2FybihtZXNzYWdlOiBzdHJpbmcsIGNvbXBvbmVudE5hbWU/OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2dzIG1lc3NhZ2Ugd2l0aCBlcnJvciBzZXZlcml0eS5cclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIE1lc3NhZ2UgdXNlZCBmb3IgY29uc3RydWN0aW5nIGEgZXJyb3IgbG9nXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgd2hpY2ggY2FsbGVkIHRoaXMgbWV0aG9kXHJcbiAgICAgKi9cclxuICAgIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgY29tcG9uZW50TmFtZT86IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIExvZ3MgbWVzc2FnZSB3aXRoIGZhdGFsIHNldmVyaXR5LlxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgTWVzc2FnZSB1c2VkIGZvciBjb25zdHJ1Y3RpbmcgYSBmYXRhbCBsb2dcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCB3aGljaCBjYWxsZWQgdGhpcyBtZXRob2RcclxuICAgICAqL1xyXG4gICAgZmF0YWwobWVzc2FnZTogc3RyaW5nLCBjb21wb25lbnROYW1lPzogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU2V0dGVyIGZvciBkZWJvdW5jZSB0aW1lIChsb2cgcGVyaW9kKS5cclxuICAgICAqIEBwYXJhbSBkZWJvdW5jZVRpbWUgVGltZSBpbiBtaWxsaXNlY29uZHM7IGRldGVybWluZXMgdGhlIHBlcmlvZCBvZiBBUEkgcmVxdWVzdHMgZm9yIGxvZ2dpbmdcclxuICAgICAqL1xyXG4gICAgc2V0TG9nZ2luZ0RlYm91bmNlVGltZShkZWJvdW5jZVRpbWU6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFNldHRlciBmb3IgZ2xvYmFsIGxvZyBsZXZlbC5cclxuICAgICAqIEBwYXJhbSBnbG9iYWxMb2dMZXZlbCBNaW5pbXVtIG1lc3NhZ2Ugc2V2ZXJpdHkgdG8gbG9nXHJcbiAgICAgKi9cclxuICAgIHNldEdsb2JhbExvZ0xldmVsKGdsb2JhbExvZ0xldmVsOiBMb2dTZXZlcml0eSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFNldHRlciBmb3IgbG9nIHF1ZXVlIGNhcGFjaXR5LlxyXG4gICAgICogQHBhcmFtIGNhcGFjaXR5IExvZyBxdWV1ZSBjYXBhY2l0eVxyXG4gICAgICovXHJcbiAgICBzZXRMb2dDYXBhY2l0eShjYXBhY2l0eTogbnVtYmVyKTogdm9pZDtcclxuICAgIHByaXZhdGUgbG9nO1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVBbmRTdG9yZUxvZztcclxuICAgIHByaXZhdGUgaXNGdWxsQ2FwYWNpdHk7XHJcbiAgICBwcml2YXRlIGNsZWFyTG9ncztcclxuICAgIHByaXZhdGUgb25Qb3N0TWVzc2FnZXM7XHJcbiAgICBwcml2YXRlIHBvc3RMb2dzO1xyXG4gICAgcHJpdmF0ZSBwZXJpb2RpY2FsTG9nZ2luZztcclxuICAgIHByaXZhdGUgcG9zdE1lc3NhZ2VzO1xyXG4gICAgcHJpdmF0ZSBkaXNwYXRjaExvZ3M7XHJcbiAgICBwcml2YXRlIGRlY2lkZU9uTG9nZ2luZztcclxufVxyXG4iXX0=