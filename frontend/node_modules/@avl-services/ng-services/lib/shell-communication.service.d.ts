import { Router } from '@angular/router';
import { Observable, BehaviorSubject } from 'rxjs';
import { ColorScheme } from './message.model';
import { AvlAuthService } from '@avl-ng-controls/auth';
import * as ɵngcc0 from '@angular/core';
export declare class ShellCommunicationService {
    private router;
    private authService;
    private readonly id;
    private handlers;
    private themeSubject;
    private languageSubject;
    private actionSubject;
    private localeSubject;
    private colorSchemeSubject;
    /**
    * Observable tracking theme
    * Emits "dark" if dark theme selected, "light" otherwise
    */
    theme$: Observable<string>;
    /**
    * Observable tracking language
    */
    language$: Observable<string>;
    action$: Observable<string>;
    /**
    * Observable tracking country changes
    */
    locale$: Observable<string>;
    /**
    * Observable tracking color scheme changes
    */
    colorScheme$: Observable<ColorScheme>;
    /**
    * Observable tracking login state
    * Resolves to true on successful login, false otherwise
    */
    isLoggedIn$: Observable<boolean>;
    /**
     * Observable tracking if redirected from idb
     * Resolves to true on redirection, false otherwise
     */
    redirectedFromLogIn: BehaviorSubject<boolean>;
    /**
     * If current application is inside shell application
     * True if current application is inside shell application, false otherwise.
     */
    isChild: boolean;
    constructor(router: Router, authService: AvlAuthService);
    notifyShellAboutAction(action: string): void;
    /**
     * Sends message to shell that it needs to navigate to login page
     */
    notifyShellAboutLogin(url: string): void;
    /**
     * Sends message to shell that it needs to navigate to @url
     */
    notifyShellAboutNavigation(url: string): void;
    /**
     * Sends registration message to shell
     */
    registerToShell(): void;
    /**
    * Send updated user data to shell
    */
    updateUserToShell(): void;
    private onMessage;
    private postMessageToShell;
    private handleColorScheme;
    private handleLanguage;
    private handleLocale;
    private handleTheme;
    private handleNavigation;
    private handleAction;
    private handleAuthentication;
    private handleRedirectedFromLogIn;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShellCommunicationService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlbGwtY29tbXVuaWNhdGlvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInNoZWxsLWNvbW11bmljYXRpb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ29sb3JTY2hlbWUgfSBmcm9tICcuL21lc3NhZ2UubW9kZWwnO1xyXG5pbXBvcnQgeyBBdmxBdXRoU2VydmljZSB9IGZyb20gJ0BhdmwtbmctY29udHJvbHMvYXV0aCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNoZWxsQ29tbXVuaWNhdGlvblNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSByb3V0ZXI7XHJcbiAgICBwcml2YXRlIGF1dGhTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpZDtcclxuICAgIHByaXZhdGUgaGFuZGxlcnM7XHJcbiAgICBwcml2YXRlIHRoZW1lU3ViamVjdDtcclxuICAgIHByaXZhdGUgbGFuZ3VhZ2VTdWJqZWN0O1xyXG4gICAgcHJpdmF0ZSBhY3Rpb25TdWJqZWN0O1xyXG4gICAgcHJpdmF0ZSBsb2NhbGVTdWJqZWN0O1xyXG4gICAgcHJpdmF0ZSBjb2xvclNjaGVtZVN1YmplY3Q7XHJcbiAgICAvKipcclxuICAgICogT2JzZXJ2YWJsZSB0cmFja2luZyB0aGVtZVxyXG4gICAgKiBFbWl0cyBcImRhcmtcIiBpZiBkYXJrIHRoZW1lIHNlbGVjdGVkLCBcImxpZ2h0XCIgb3RoZXJ3aXNlXHJcbiAgICAqL1xyXG4gICAgdGhlbWUkOiBPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICAvKipcclxuICAgICogT2JzZXJ2YWJsZSB0cmFja2luZyBsYW5ndWFnZVxyXG4gICAgKi9cclxuICAgIGxhbmd1YWdlJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgYWN0aW9uJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgLyoqXHJcbiAgICAqIE9ic2VydmFibGUgdHJhY2tpbmcgY291bnRyeSBjaGFuZ2VzXHJcbiAgICAqL1xyXG4gICAgbG9jYWxlJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgLyoqXHJcbiAgICAqIE9ic2VydmFibGUgdHJhY2tpbmcgY29sb3Igc2NoZW1lIGNoYW5nZXNcclxuICAgICovXHJcbiAgICBjb2xvclNjaGVtZSQ6IE9ic2VydmFibGU8Q29sb3JTY2hlbWU+O1xyXG4gICAgLyoqXHJcbiAgICAqIE9ic2VydmFibGUgdHJhY2tpbmcgbG9naW4gc3RhdGVcclxuICAgICogUmVzb2x2ZXMgdG8gdHJ1ZSBvbiBzdWNjZXNzZnVsIGxvZ2luLCBmYWxzZSBvdGhlcndpc2VcclxuICAgICovXHJcbiAgICBpc0xvZ2dlZEluJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2YWJsZSB0cmFja2luZyBpZiByZWRpcmVjdGVkIGZyb20gaWRiXHJcbiAgICAgKiBSZXNvbHZlcyB0byB0cnVlIG9uIHJlZGlyZWN0aW9uLCBmYWxzZSBvdGhlcndpc2VcclxuICAgICAqL1xyXG4gICAgcmVkaXJlY3RlZEZyb21Mb2dJbjogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBjdXJyZW50IGFwcGxpY2F0aW9uIGlzIGluc2lkZSBzaGVsbCBhcHBsaWNhdGlvblxyXG4gICAgICogVHJ1ZSBpZiBjdXJyZW50IGFwcGxpY2F0aW9uIGlzIGluc2lkZSBzaGVsbCBhcHBsaWNhdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBpc0NoaWxkOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3Iocm91dGVyOiBSb3V0ZXIsIGF1dGhTZXJ2aWNlOiBBdmxBdXRoU2VydmljZSk7XHJcbiAgICBub3RpZnlTaGVsbEFib3V0QWN0aW9uKGFjdGlvbjogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZSB0byBzaGVsbCB0aGF0IGl0IG5lZWRzIHRvIG5hdmlnYXRlIHRvIGxvZ2luIHBhZ2VcclxuICAgICAqL1xyXG4gICAgbm90aWZ5U2hlbGxBYm91dExvZ2luKHVybDogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgbWVzc2FnZSB0byBzaGVsbCB0aGF0IGl0IG5lZWRzIHRvIG5hdmlnYXRlIHRvIEB1cmxcclxuICAgICAqL1xyXG4gICAgbm90aWZ5U2hlbGxBYm91dE5hdmlnYXRpb24odXJsOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyByZWdpc3RyYXRpb24gbWVzc2FnZSB0byBzaGVsbFxyXG4gICAgICovXHJcbiAgICByZWdpc3RlclRvU2hlbGwoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgKiBTZW5kIHVwZGF0ZWQgdXNlciBkYXRhIHRvIHNoZWxsXHJcbiAgICAqL1xyXG4gICAgdXBkYXRlVXNlclRvU2hlbGwoKTogdm9pZDtcclxuICAgIHByaXZhdGUgb25NZXNzYWdlO1xyXG4gICAgcHJpdmF0ZSBwb3N0TWVzc2FnZVRvU2hlbGw7XHJcbiAgICBwcml2YXRlIGhhbmRsZUNvbG9yU2NoZW1lO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVMYW5ndWFnZTtcclxuICAgIHByaXZhdGUgaGFuZGxlTG9jYWxlO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVUaGVtZTtcclxuICAgIHByaXZhdGUgaGFuZGxlTmF2aWdhdGlvbjtcclxuICAgIHByaXZhdGUgaGFuZGxlQWN0aW9uO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVBdXRoZW50aWNhdGlvbjtcclxuICAgIHByaXZhdGUgaGFuZGxlUmVkaXJlY3RlZEZyb21Mb2dJbjtcclxufVxyXG4iXX0=