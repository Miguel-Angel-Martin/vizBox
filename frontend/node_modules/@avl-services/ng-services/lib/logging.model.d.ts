/**
 * List of all types of messages that can be logged.
 */
export declare enum LogSeverity {
    Debug = 0,
    Info = 1,
    Warning = 2,
    Error = 3,
    Fatal = 4
}
/**
 * **LogConfig** class is required by the _LoggingModule_.
 *
 * An instance of this class should be passed into _forRoot_ method of _LoggingModule_
 * when importing module in the Angular application.
 * ```
 * import logConfig from 'logging.config.ts;
 * import LoggingModule from '@avl-services/ng-services';
 *  ....
 *  @NgModule({
 *    imports: [
 *      LoggingModule.forRoot(logConfig),
 *      ...
 *    ],
 *    ...
 *  }) export class AppModule {}
 * ```
 */
export declare class LogConfig {
    /**
     * API endpoint for logging (e.g. https://vizbox.avl.com/api/theia/logs).
     * - Mandatory
     */
    readonly endpoint: string;
    /**
     * Name of the database in which logs will be stored.
     * - Mandatory
     */
    readonly targetName: string;
    /**
     * Name of the application that uses the logging service.
     * - Mandatory
     */
    readonly appName: string;
    /**
     * Version of the application that uses the logging service.
     * - Mandatory
     */
    readonly version: string;
    /**
     * Flag that indicates whether logging starts automatically once the user logs in using credential.
     *
     * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:
     * ```
     * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }
     * ```
     * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).
     *
     * - Optional
     * - Default: false
     */
    autologging: boolean;
    /**
     * Minimum message severity to log.
     * - Optional
     * - Default: LogSeverity.Info
     */
    globalLogLevel: LogSeverity;
    /**
     * Time in milliseconds, determines the period of API requests for logging.
     * - Optional
     * - Default: 30_000 ms
     */
    debounceTime: number;
    /**
     * Log queue capacity
     *
     * If reached, API request is sent with all logs in log queue, and queue is cleared out.
     * - Optional
     * - Default: 10
     */
    capacity: number;
    /**
     * Creates instance of _LogConfig_ class.
     * @param endpoint API endpoint for logging.
     * @param targetName Name of the database in which logs will be stored
     * @param appName Name of the application that uses the logging service
     * @param version Version of the application that uses the logging service
     * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false
     * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info
     * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms
     * @param capacity Log queue capacity. Default: 10
     */
    constructor(endpoint: string, targetName: string, appName: string, version: string, autologging?: boolean, globalLogLevel?: LogSeverity, debounceTime?: number, capacity?: number);
}
/**
 * @ignore
 */
export interface Log {
    readonly appName?: string;
    readonly componentName?: string;
    readonly severity?: string;
    readonly message?: string;
    readonly procId?: string;
    readonly timestamp?: string;
    readonly version?: string;
    readonly AVLRequestId?: string;
}
