import { HttpClient } from '@angular/common/http';
import { OnDestroy } from '@angular/core';
import { AvlAuthService } from '@avl-ng-controls/auth';
import { Observable } from 'rxjs';
import { Log, LogConfig, LogSeverity } from './logging.model';
export declare class LoggingService implements OnDestroy {
    private http;
    private config;
    private authService;
    private logs;
    private headers;
    private isLogging;
    private debounceTime$;
    private logs$;
    private stopLogging$;
    private postLogs$;
    private destroyed$;
    /**
     * @ignore
     */
    constructor(http: HttpClient, config: LogConfig, authService: AvlAuthService);
    /**
     * @ignore
     */
    ngOnDestroy(): void;
    /**
     * Starts periodical logging process.
     *
     * Depends on _debounceTime_ and _capacity_ properties.
     */
    startLogging(): void;
    /**
     * Stops logging process.
     */
    stopLogging(): void;
    /**
     * Gets all currently queued logs as an observable value.
     * @returns All currently queued logs as an observable value
     */
    getLogs$(): Observable<Log[]>;
    /**
     * Logs message with debug severity.
     * @param message Message used for constructing a debug log
     * @param componentName Name of the component which called this method
     */
    debug(message: string, componentName?: string): void;
    /**
     * Logs message with info severity.
     * @param message Message used for constructing a info log
     * @param componentName Name of the component which called this method
     */
    info(message: string, componentName?: string): void;
    /**
     * Logs message with warning severity.
     * @param message Message used for constructing a warning log
     * @param componentName Name of the component which called this method
     */
    warn(message: string, componentName?: string): void;
    /**
     * Logs message with error severity.
     * @param message Message used for constructing a error log
     * @param componentName Name of the component which called this method
     */
    error(message: string, componentName?: string): void;
    /**
     * Logs message with fatal severity.
     * @param message Message used for constructing a fatal log
     * @param componentName Name of the component which called this method
     */
    fatal(message: string, componentName?: string): void;
    /**
     * Setter for debounce time (log period).
     * @param debounceTime Time in milliseconds; determines the period of API requests for logging
     */
    setLoggingDebounceTime(debounceTime: number): void;
    /**
     * Setter for global log level.
     * @param globalLogLevel Minimum message severity to log
     */
    setGlobalLogLevel(globalLogLevel: LogSeverity): void;
    /**
     * Setter for log queue capacity.
     * @param capacity Log queue capacity
     */
    setLogCapacity(capacity: number): void;
    private log;
    private createAndStoreLog;
    private isFullCapacity;
    private clearLogs;
    private onPostMessages;
    private postLogs;
    private periodicalLogging;
    private postMessages;
    private dispatchLogs;
    private decideOnLogging;
}
