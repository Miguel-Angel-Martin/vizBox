(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/router'),require('@avl-ng-controls/auth'),require('@ngx-translate/core'),require('@avl-controls/ng-binders'),require('@angular/common/http'),exports, require('@angular/core'), require('@angular/router'), require('rxjs'), require('uuid'), require('@avl-ng-controls/auth'), require('@ngx-translate/core'), require('@avl-controls/ng-binders'), require('@avl-controls/core/dist/avl-localization-service/avl-localization-service'), require('@angular/common/http'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@avl-services/ng-services', ['@angular/core','@angular/router','@avl-ng-controls/auth','@ngx-translate/core','@avl-controls/ng-binders','@angular/common/http','exports', '@angular/core', '@angular/router', 'rxjs', 'uuid', '@avl-ng-controls/auth', '@ngx-translate/core', '@avl-controls/ng-binders', '@avl-controls/core/dist/avl-localization-service/avl-localization-service', '@angular/common/http', 'rxjs/operators'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.router,global.avlNgControls.auth,global.ngxTranslate.core,global.avlControls.ngBinders,global.ng.common.http,(global['avl-services'] = global['avl-services'] || {}, global['avl-services']['ng-services'] = {}), global.ng.core, global.ng.router, global.rxjs, global.uuid, global['@avl-ng-controls/auth'], global['@ngx-translate/core'], global['@avl-controls/ng-binders'], null, global.ng.common.http, global.rxjs.operators));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,exports, core, router, rxjs, uuid, auth, core$1, ngBinders, avlLocalizationService, http, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    (function (MessageType) {
        MessageType["action"] = "action";
        MessageType["colorScheme"] = "colorScheme";
        MessageType["language"] = "language";
        MessageType["locale"] = "locale";
        MessageType["navigation"] = "navigation";
        MessageType["registration"] = "registration";
        MessageType["theme"] = "theme";
        MessageType["login"] = "login";
        MessageType["authentication"] = "authentication";
        MessageType["redirectedFromLogIn"] = "redirectedFromLogIn";
    })(exports.MessageType || (exports.MessageType = {}));

    var ShellCommunicationService = /** @class */ (function () {
        function ShellCommunicationService(router, authService) {
            var _a;
            var _this = this;
            this.router = router;
            this.authService = authService;
            this.handlers = (_a = {},
                _a[exports.MessageType.theme] = function (theme) { return _this.handleTheme(theme); },
                _a[exports.MessageType.locale] = function (locale) { return _this.handleLocale(locale); },
                _a[exports.MessageType.language] = function (language) { return _this.handleLanguage(language); },
                _a[exports.MessageType.colorScheme] = function (colorScheme) { return _this.handleColorScheme(colorScheme); },
                _a[exports.MessageType.navigation] = function (url) { return _this.handleNavigation(url); },
                _a[exports.MessageType.action] = function (action) { return _this.handleAction(action); },
                _a[exports.MessageType.authentication] = function (user) { return _this.handleAuthentication(user); },
                _a[exports.MessageType.redirectedFromLogIn] = function (redirected) { return _this.handleRedirectedFromLogIn(redirected); },
                _a);
            this.themeSubject = new rxjs.Subject();
            this.languageSubject = new rxjs.Subject();
            this.actionSubject = new rxjs.Subject();
            this.localeSubject = new rxjs.Subject();
            this.colorSchemeSubject = new rxjs.Subject();
            /**
            * Observable tracking theme
            * Emits "dark" if dark theme selected, "light" otherwise
            */
            this.theme$ = this.themeSubject;
            /**
            * Observable tracking language
            */
            this.language$ = this.languageSubject;
            this.action$ = this.actionSubject;
            /**
            * Observable tracking country changes
            */
            this.locale$ = this.localeSubject;
            /**
            * Observable tracking color scheme changes
            */
            this.colorScheme$ = this.colorSchemeSubject;
            /**
             * Observable tracking if redirected from idb
             * Resolves to true on redirection, false otherwise
             */
            this.redirectedFromLogIn = new rxjs.BehaviorSubject(undefined);
            /**
             * If current application is inside shell application
             * True if current application is inside shell application, false otherwise.
             */
            this.isChild = window.location !== window.parent.location;
            window.addEventListener('message', function (event) { return _this.onMessage(event); });
            this.id = uuid.v4();
        }
        ShellCommunicationService.prototype.notifyShellAboutAction = function (action) {
            this.postMessageToShell(exports.MessageType.action, action);
        };
        /**
         * Sends message to shell that it needs to navigate to login page
         */
        ShellCommunicationService.prototype.notifyShellAboutLogin = function (url) {
            this.postMessageToShell(exports.MessageType.login, url);
        };
        /**
         * Sends message to shell that it needs to navigate to @url
         */
        ShellCommunicationService.prototype.notifyShellAboutNavigation = function (url) {
            this.postMessageToShell(exports.MessageType.navigation, url);
        };
        /**
         * Sends registration message to shell
         */
        ShellCommunicationService.prototype.registerToShell = function () {
            this.postMessageToShell(exports.MessageType.registration, this.id);
        };
        ShellCommunicationService.prototype.onMessage = function (event) {
            var _a = event.data, payload = _a.payload, messageType = _a.messageType;
            var handlers = __assign(__assign({}, this.handlers), { default: function () { return console.log('Unrecognized message for the shell.', event); } });
            (handlers[messageType] || handlers.default)(payload);
        };
        ShellCommunicationService.prototype.postMessageToShell = function (messageType, payload) {
            var message = { messageType: messageType, payload: payload };
            window.parent.window.postMessage(message, '*');
        };
        ShellCommunicationService.prototype.handleColorScheme = function (colorScheme) {
            this.colorSchemeSubject.next(colorScheme);
        };
        ShellCommunicationService.prototype.handleLanguage = function (language) {
            this.languageSubject.next(language);
        };
        ShellCommunicationService.prototype.handleLocale = function (locale) {
            this.localeSubject.next(locale);
        };
        ShellCommunicationService.prototype.handleTheme = function (theme) {
            this.themeSubject.next(theme);
        };
        ShellCommunicationService.prototype.handleNavigation = function (url) {
            this.router.navigateByUrl(url);
        };
        ShellCommunicationService.prototype.handleAction = function (action) {
            this.actionSubject.next(action);
        };
        ShellCommunicationService.prototype.handleAuthentication = function (user) {
            if (user === null || user === void 0 ? void 0 : user.access_token) {
                this.setUserToSessionStorage(user);
            }
            else {
                this.removeUserFromSessionStorage();
            }
            this.authService.reloadPersistedUserData();
        };
        ShellCommunicationService.prototype.handleRedirectedFromLogIn = function (redirected) {
            this.redirectedFromLogIn.next(redirected);
        };
        ShellCommunicationService.prototype.setUserToSessionStorage = function (user) {
            sessionStorage.setItem('refresh_token', user.refresh_token);
            sessionStorage.setItem('access_token', user.access_token);
            sessionStorage.setItem('id_token', user.id_token);
            sessionStorage.setItem('refresh_token_expires_at', String(user.refresh_token_expires_at));
            sessionStorage.setItem('access_token_expires_at', String(user.access_token_expires_at));
            sessionStorage.setItem('access_token_stored_at', String(user.access_token_stored_at));
            sessionStorage.setItem('username', user.username);
            sessionStorage.setItem('name', user.name);
            sessionStorage.setItem('roles', JSON.stringify(user.roles));
        };
        ShellCommunicationService.prototype.removeUserFromSessionStorage = function () {
            sessionStorage.removeItem('refresh_token');
            sessionStorage.removeItem('access_token');
            sessionStorage.removeItem('id_token');
            sessionStorage.removeItem('refresh_token_expires_at');
            sessionStorage.removeItem('access_token_expires_at');
            sessionStorage.removeItem('access_token_stored_at');
            sessionStorage.removeItem('username');
            sessionStorage.removeItem('name');
            sessionStorage.removeItem('roles');
        };
        ShellCommunicationService.ctorParameters = function () { return [
            { type: router.Router },
            { type: auth.AvlAuthService }
        ]; };
        ShellCommunicationService.ɵprov = core.ɵɵdefineInjectable({ factory: function ShellCommunicationService_Factory() { return new ShellCommunicationService(core.ɵɵinject(router.Router), core.ɵɵinject(auth.AvlAuthService)); }, token: ShellCommunicationService, providedIn: "root" });
ShellCommunicationService.ɵfac = function ShellCommunicationService_Factory(t) { return new (t || ShellCommunicationService)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.AvlAuthService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShellCommunicationService, [{
        type: core.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.AvlAuthService }]; }, null); })();
        return ShellCommunicationService;
    }());

    var TranslationManagementService = /** @class */ (function () {
        function TranslationManagementService(translateService, translationService) {
            this.translateService = translateService;
            this.translationService = translationService;
            this.languages = [
                { code: 'en', label: 'English' },
                { code: 'hr', label: 'Croatian' },
            ];
        }
        TranslationManagementService.prototype.initializeTranslations = function () {
            var _this = this;
            return function () {
                AvlLocalizationService.translationService = _this.translationService;
                var lang = localStorage.getItem('lang');
                if (lang == null) {
                    lang = _this.languages[0].code;
                    localStorage.setItem('lang', lang);
                }
                return _this.translateService.use(lang).toPromise();
            };
        };
        Object.defineProperty(TranslationManagementService.prototype, "language", {
            get: function () {
                return localStorage.getItem('lang');
            },
            enumerable: true,
            configurable: true
        });
        TranslationManagementService.prototype.changeLanguage = function (lang) {
            var oldLang = localStorage.getItem('lang');
            if (!oldLang || oldLang !== lang) {
                localStorage.setItem('lang', lang);
                location.reload();
            }
        };
        TranslationManagementService.ctorParameters = function () { return [
            { type: core$1.TranslateService },
            { type: ngBinders.NgxTranslateTranslationService }
        ]; };
        TranslationManagementService.ɵprov = core.ɵɵdefineInjectable({ factory: function TranslationManagementService_Factory() { return new TranslationManagementService(core.ɵɵinject(core$1.TranslateService), core.ɵɵinject(ngBinders.NgxTranslateTranslationService)); }, token: TranslationManagementService, providedIn: "root" });
TranslationManagementService.ɵfac = function TranslationManagementService_Factory(t) { return new (t || TranslationManagementService)(ɵngcc0.ɵɵinject(ɵngcc3.TranslateService), ɵngcc0.ɵɵinject(ɵngcc4.NgxTranslateTranslationService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslationManagementService, [{
        type: core.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc3.TranslateService }, { type: ɵngcc4.NgxTranslateTranslationService }]; }, null); })();
        return TranslationManagementService;
    }());

    var ThemeService = /** @class */ (function () {
        function ThemeService() {
            this.themeChangedSubject = new rxjs.Subject();
            this.themeChanged = this.themeChangedSubject.asObservable();
            this.changeTheme();
        }
        Object.defineProperty(ThemeService.prototype, "isDarkTheme", {
            get: function () {
                if (this._isDarkTheme == null) {
                    this._isDarkTheme = localStorage.getItem('theme') === 'dark' || false;
                }
                return this._isDarkTheme;
            },
            set: function (newValue) {
                this._isDarkTheme = newValue;
                localStorage.setItem('theme', newValue === true ? 'dark' : 'light');
                this.themeChangedSubject.next(this.getCurrentTheme());
                this.changeTheme();
            },
            enumerable: true,
            configurable: true
        });
        ThemeService.prototype.getCurrentTheme = function () {
            return this.isDarkTheme ? 'dark' : 'light';
        };
        ThemeService.prototype.changeTheme = function () {
            document.body.setAttribute('theme', this.getCurrentTheme());
        };
        ThemeService.ɵprov = core.ɵɵdefineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(); }, token: ThemeService, providedIn: "root" });
ThemeService.ɵfac = function ThemeService_Factory(t) { return new (t || ThemeService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThemeService, [{
        type: core.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
        return ThemeService;
    }());

    var ChildCommunicationService = /** @class */ (function () {
        function ChildCommunicationService(translationManagementService, themeService) {
            var _a;
            var _this = this;
            this.translationManagementService = translationManagementService;
            this.themeService = themeService;
            this.handlers = (_a = {},
                _a[exports.MessageType.login] = function (url) { return _this.handleLogin(url); },
                _a[exports.MessageType.navigation] = function (url) { return _this.handleNavigation(url); },
                _a[exports.MessageType.action] = function (action) { return _this.handleAction(action); },
                _a[exports.MessageType.registration] = function (_) { return _this.handleRegistration(); },
                _a);
            this.actionSubject = new rxjs.Subject();
            this.navigationSubject = new rxjs.Subject();
            this.loginSubject = new rxjs.Subject();
            this.registrationCompletedSubject = new rxjs.Subject();
            this.action$ = this.actionSubject;
            /**
             * Observable tracking url to navigate to
             */
            this.navigation$ = this.navigationSubject;
            /**
             * Observable tracking url for login
             * Url for login provided by child application
             */
            this.login$ = this.loginSubject;
            /**
             * Observable tracking child registration
             * Emits true if registration was successful, false otherwise
             */
            this.registrationCompleted$ = this
                .registrationCompletedSubject;
            window.addEventListener("message", function (event) { return _this.onMessage(event); });
            this.themeService.themeChanged.subscribe(function () { return _this.postThemeToChildren(); });
        }
        /**
         * Sends message to child about locale
         */
        ChildCommunicationService.prototype.notifyChildAboutLocale = function (country) {
            this.postMessageToChild(exports.MessageType.locale, country);
        };
        /**
         * Sends message to child about language
         */
        ChildCommunicationService.prototype.notifyChildAboutLanguage = function (language) {
            this.postMessageToChild(exports.MessageType.language, language);
        };
        /**
         * Sends message to child about action
         */
        ChildCommunicationService.prototype.notifyChildAboutAction = function (action) {
            this.postMessageToChild(exports.MessageType.action, action);
        };
        /**
         * Sends message to child about navigation
         */
        ChildCommunicationService.prototype.notifyChildAboutNavigation = function (url) {
            this.postMessageToChild(exports.MessageType.navigation, url);
        };
        /**
         * Sends messages to children about current user
         */
        ChildCommunicationService.prototype.postAuthenticationDataToChildren = function () {
            var payload = {
                refresh_token: sessionStorage.getItem("refresh_token"),
                access_token: sessionStorage.getItem("access_token"),
                id_token: sessionStorage.getItem("id_token"),
                refresh_token_expires_at: Number(sessionStorage.getItem("refresh_token_expires_at")),
                access_token_expires_at: Number(sessionStorage.getItem("access_token_expires_at")),
                access_token_stored_at: Number(sessionStorage.getItem("access_token_stored_at")),
                username: sessionStorage.getItem("username"),
                name: sessionStorage.getItem("name"),
                roles: JSON.parse(sessionStorage.getItem("roles")),
            };
            this.postMessageToChild(exports.MessageType.authentication, payload);
        };
        /**
         * Sends messages to children about selected application theme
         */
        ChildCommunicationService.prototype.postThemeToChildren = function () {
            var theme = this.themeService.getCurrentTheme();
            this.postMessageToChild(exports.MessageType.theme, theme);
        };
        /**
         * Sends messages to children about selected language
         */
        ChildCommunicationService.prototype.postLanguageToChildren = function () {
            this.postMessageToChild(exports.MessageType.language, this.translationManagementService.language);
        };
        /**
         * Sends messages to children about selected country
         */
        ChildCommunicationService.prototype.postLocaleToChildren = function () {
            var country = localStorage.getItem("country");
            this.postMessageToChild(exports.MessageType.locale, country);
        };
        /**
         * Sends message to child about redirection from idb
         */
        ChildCommunicationService.prototype.postRedirectedFromLogIn = function (payload) {
            this.postMessageToChild(exports.MessageType.redirectedFromLogIn, payload);
        };
        /**
         * Sends message to children about color scheme
         */
        ChildCommunicationService.prototype.postColorSchemeToChildren = function () {
            var computedStyle = window.getComputedStyle(document.body);
            var productColor = computedStyle.getPropertyValue("--avl-product-color");
            var productHoverColor = computedStyle.getPropertyValue("--avl-product-hover-color");
            var productFocusColor = computedStyle.getPropertyValue("--avl-product-focus-color");
            var colorScheme = {
                "--avl-product-color": productColor,
                "--avl-product-hover-color": productHoverColor,
                "--avl-product-focus-color": productFocusColor,
            };
            this.postMessageToChild(exports.MessageType.colorScheme, colorScheme);
        };
        ChildCommunicationService.prototype.handleAction = function (action) {
            this.actionSubject.next(action);
        };
        ChildCommunicationService.prototype.handleNavigation = function (navigation) {
            this.navigationSubject.next(navigation);
        };
        ChildCommunicationService.prototype.handleLogin = function (login) {
            this.loginSubject.next(login);
        };
        // when child started its registration iframe is loaded and shell gets a message that he can send messages to iframe
        ChildCommunicationService.prototype.handleRegistration = function () {
            this.iframeEl = document.getElementsByTagName("iframe")[0];
            this.postThemeToChildren();
            this.postColorSchemeToChildren();
            this.postLanguageToChildren();
            this.postLocaleToChildren();
            this.registrationCompletedSubject.next(true);
        };
        ChildCommunicationService.prototype.onMessage = function (event) {
            var _a = event.data, payload = _a.payload, messageType = _a.messageType;
            var handlers = __assign(__assign({}, this.handlers), { default: function () { return console.log("Unrecognized message for the child.", event); } });
            (handlers[messageType] || handlers.default)(payload);
        };
        ChildCommunicationService.prototype.postMessageToChild = function (messageType, payload) {
            var _a;
            if (!this.iframeEl) {
                return;
            }
            var message = { messageType: messageType, payload: payload };
            (_a = this.iframeEl.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, "*");
        };
        ChildCommunicationService.ctorParameters = function () { return [
            { type: TranslationManagementService },
            { type: ThemeService }
        ]; };
        ChildCommunicationService.ɵprov = core.ɵɵdefineInjectable({ factory: function ChildCommunicationService_Factory() { return new ChildCommunicationService(core.ɵɵinject(TranslationManagementService), core.ɵɵinject(ThemeService)); }, token: ChildCommunicationService, providedIn: "root" });
ChildCommunicationService.ɵfac = function ChildCommunicationService_Factory(t) { return new (t || ChildCommunicationService)(ɵngcc0.ɵɵinject(TranslationManagementService), ɵngcc0.ɵɵinject(ThemeService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChildCommunicationService, [{
        type: core.Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: TranslationManagementService }, { type: ThemeService }]; }, null); })();
        return ChildCommunicationService;
    }());

    /**
     * List of all types of messages that can be logged.
     */

    (function (LogSeverity) {
        LogSeverity[LogSeverity["Debug"] = 0] = "Debug";
        LogSeverity[LogSeverity["Info"] = 1] = "Info";
        LogSeverity[LogSeverity["Warning"] = 2] = "Warning";
        LogSeverity[LogSeverity["Error"] = 3] = "Error";
        LogSeverity[LogSeverity["Fatal"] = 4] = "Fatal";
    })(exports.LogSeverity || (exports.LogSeverity = {}));
    /**
     * **LogConfig** class is required by the _LoggingModule_.
     *
     * An instance of this class should be passed into _forRoot_ method of _LoggingModule_
     * when importing module in the Angular application.
     * ```
     * import logConfig from 'logging.config.ts;
     * import LoggingModule from '@avl-services/ng-services';
     *  ....
     *  @NgModule({
     *    imports: [
     *      LoggingModule.forRoot(logConfig),
     *      ...
     *    ],
     *    ...
     *  }) export class AppModule {}
     * ```
     */
    var LogConfig = /** @class */ (function () {
        /**
         * Creates instance of _LogConfig_ class.
         * @param endpoint API endpoint for logging.
         * @param targetName Name of the database in which logs will be stored
         * @param appName Name of the application that uses the logging service
         * @param version Version of the application that uses the logging service
         * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false
         * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info
         * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms
         * @param capacity Log queue capacity. Default: 10
         */
        function LogConfig(endpoint, targetName, appName, version, autologging, globalLogLevel, debounceTime, capacity) {
            if (autologging === void 0) { autologging = false; }
            if (globalLogLevel === void 0) { globalLogLevel = exports.LogSeverity.Info; }
            if (debounceTime === void 0) { debounceTime = 30000; }
            if (capacity === void 0) { capacity = 10; }
            /**
             * Flag that indicates whether logging starts automatically once the user logs in using credential.
             *
             * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:
             * ```
             * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }
             * ```
             * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).
             *
             * - Optional
             * - Default: false
             */
            this.autologging = false;
            /**
             * Minimum message severity to log.
             * - Optional
             * - Default: LogSeverity.Info
             */
            this.globalLogLevel = exports.LogSeverity.Info;
            /**
             * Time in milliseconds, determines the period of API requests for logging.
             * - Optional
             * - Default: 30_000 ms
             */
            this.debounceTime = 30000;
            /**
             * Log queue capacity
             *
             * If reached, API request is sent with all logs in log queue, and queue is cleared out.
             * - Optional
             * - Default: 10
             */
            this.capacity = 10;
            this.endpoint = endpoint;
            this.targetName = targetName;
            this.appName = appName;
            this.version = version;
            this.autologging = autologging;
            this.globalLogLevel = globalLogLevel;
            this.debounceTime = debounceTime;
            this.capacity = capacity;
        }
        return LogConfig;
    }());

    var LoggingService = /** @class */ (function () {
        /**
         * @ignore
         */
        function LoggingService(http$1, config, authService) {
            var _this = this;
            var _a;
            this.http = http$1;
            this.config = config;
            this.authService = authService;
            this.logs = [];
            this.isLogging = false;
            this.debounceTime$ = new rxjs.Subject();
            this.logs$ = new rxjs.Subject();
            this.stopLogging$ = new rxjs.Subject();
            this.postLogs$ = new rxjs.Subject();
            this.destroyed$ = new rxjs.Subject();
            this.headers = new http.HttpHeaders({
                targetName: this.config.targetName,
            });
            if (config.autologging) {
                (_a = this.authService) === null || _a === void 0 ? void 0 : _a.isLoggedIn$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (isLoggedIn) { return _this.decideOnLogging(isLoggedIn); });
            }
        }
        /**
         * @ignore
         */
        LoggingService.prototype.ngOnDestroy = function () {
            this.postLogs$.complete();
            this.debounceTime$.complete();
            this.logs$.complete();
            this.stopLogging$.next();
            this.stopLogging$.complete();
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        /**
         * Starts periodical logging process.
         *
         * Depends on _debounceTime_ and _capacity_ properties.
         */
        LoggingService.prototype.startLogging = function () {
            var _this = this;
            this.isLogging = true;
            console.log('Start logging');
            this.debounceTime$
                .pipe(operators.takeUntil(this.stopLogging$), operators.switchMap(function (debounceTime) { return _this.periodicalLogging(debounceTime); }))
                .subscribe(function () { return _this.onPostMessages(); });
            this.postLogs$
                .pipe(operators.takeUntil(this.stopLogging$), operators.switchMap(function () { return _this.postMessages(); }))
                .subscribe(function () { return _this.onPostMessages(); });
            this.setLoggingDebounceTime(this.config.debounceTime);
        };
        /**
         * Stops logging process.
         */
        LoggingService.prototype.stopLogging = function () {
            this.isLogging = false;
            console.log('Stop logging');
            this.postLogs();
            this.stopLogging$.next();
        };
        /**
         * Gets all currently queued logs as an observable value.
         * @returns All currently queued logs as an observable value
         */
        LoggingService.prototype.getLogs$ = function () {
            return this.logs$.asObservable();
        };
        /**
         * Logs message with debug severity.
         * @param message Message used for constructing a debug log
         * @param componentName Name of the component which called this method
         */
        LoggingService.prototype.debug = function (message, componentName) {
            if (componentName === void 0) { componentName = ''; }
            this.log(message, exports.LogSeverity.Debug, componentName);
        };
        /**
         * Logs message with info severity.
         * @param message Message used for constructing a info log
         * @param componentName Name of the component which called this method
         */
        LoggingService.prototype.info = function (message, componentName) {
            if (componentName === void 0) { componentName = ''; }
            this.log(message, exports.LogSeverity.Info, componentName);
        };
        /**
         * Logs message with warning severity.
         * @param message Message used for constructing a warning log
         * @param componentName Name of the component which called this method
         */
        LoggingService.prototype.warn = function (message, componentName) {
            if (componentName === void 0) { componentName = ''; }
            this.log(message, exports.LogSeverity.Warning, componentName);
        };
        /**
         * Logs message with error severity.
         * @param message Message used for constructing a error log
         * @param componentName Name of the component which called this method
         */
        LoggingService.prototype.error = function (message, componentName) {
            if (componentName === void 0) { componentName = ''; }
            this.log(message, exports.LogSeverity.Error, componentName);
        };
        /**
         * Logs message with fatal severity.
         * @param message Message used for constructing a fatal log
         * @param componentName Name of the component which called this method
         */
        LoggingService.prototype.fatal = function (message, componentName) {
            if (componentName === void 0) { componentName = ''; }
            this.log(message, exports.LogSeverity.Fatal, componentName);
        };
        /**
         * Setter for debounce time (log period).
         * @param debounceTime Time in milliseconds; determines the period of API requests for logging
         */
        LoggingService.prototype.setLoggingDebounceTime = function (debounceTime) {
            console.log('New debounce time: ', debounceTime);
            this.config.debounceTime = debounceTime;
            this.debounceTime$.next(debounceTime);
        };
        /**
         * Setter for global log level.
         * @param globalLogLevel Minimum message severity to log
         */
        LoggingService.prototype.setGlobalLogLevel = function (globalLogLevel) {
            console.log('New global log level: ', globalLogLevel);
            this.config.globalLogLevel = globalLogLevel;
        };
        /**
         * Setter for log queue capacity.
         * @param capacity Log queue capacity
         */
        LoggingService.prototype.setLogCapacity = function (capacity) {
            console.log('New capacity: ', capacity);
            this.config.capacity = capacity;
        };
        // Logic, private methods
        LoggingService.prototype.log = function (message, severity, componentName) {
            if (!this.isLogging || severity < this.config.globalLogLevel) {
                return;
            }
            this.createAndStoreLog(message, severity, componentName);
            this.dispatchLogs();
            if (this.isFullCapacity()) {
                console.log('Full capacity. Logging...');
                this.postLogs$.next();
            }
        };
        LoggingService.prototype.createAndStoreLog = function (message, severityType, componentName) {
            var timestamp = new Date().toISOString();
            var _a = this.config, appName = _a.appName, version = _a.version;
            var severity = severityType.toString();
            var log = { message: message, severity: severity, timestamp: timestamp, componentName: componentName, appName: appName, version: version };
            this.logs.push(log);
        };
        LoggingService.prototype.isFullCapacity = function () {
            return this.logs.length >= this.config.capacity;
        };
        LoggingService.prototype.clearLogs = function () {
            this.logs = [];
        };
        LoggingService.prototype.onPostMessages = function () {
            this.clearLogs();
            this.dispatchLogs();
            console.log('Logs posted.');
        };
        LoggingService.prototype.postLogs = function () {
            this.postLogs$.next();
        };
        LoggingService.prototype.periodicalLogging = function (period) {
            var _this = this;
            return rxjs.interval(period).pipe(operators.tap(function () {
                if (!_this.logs.length) {
                    _this.dispatchLogs();
                    console.log('Empty logs. Nothing to send.');
                }
            }), operators.filter(function () { return !!_this.logs.length; }), operators.tap(function () { return console.log('Time expired. Logging...'); }), operators.switchMap(function () { return _this.postMessages(); }));
        };
        LoggingService.prototype.postMessages = function () {
            return this.http.post(this.config.endpoint, this.logs, {
                headers: this.headers,
            });
        };
        LoggingService.prototype.dispatchLogs = function () {
            this.logs$.next(this.logs);
        };
        LoggingService.prototype.decideOnLogging = function (isLoggedIn) {
            if (isLoggedIn) {
                this.startLogging();
            }
            else {
                this.stopLogging();
            }
        };
        LoggingService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: LogConfig, decorators: [{ type: core.Inject, args: ['loggingConfig',] }] },
            { type: auth.AvlAuthService, decorators: [{ type: core.Optional }, { type: core.Inject, args: [auth.AvlAuthService,] }] }
        ]; };
        LoggingService.ɵprov = core.ɵɵdefineInjectable({ factory: function LoggingService_Factory() { return new LoggingService(core.ɵɵinject(http.HttpClient), core.ɵɵinject("loggingConfig"), core.ɵɵinject(auth.AvlAuthService, 8)); }, token: LoggingService, providedIn: "root" });
        LoggingService = __decorate([ __param(1, core.Inject('loggingConfig')),
            __param(2, core.Optional()), __param(2, core.Inject(auth.AvlAuthService))
        ], LoggingService);
LoggingService.ɵfac = function LoggingService_Factory(t) { return new (t || LoggingService)(ɵngcc0.ɵɵinject(ɵngcc5.HttpClient), ɵngcc0.ɵɵinject('loggingConfig'), ɵngcc0.ɵɵinject(auth.AvlAuthService, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoggingService, [{
        type: core.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc5.HttpClient }, { type: LogConfig, decorators: [{
                type: core.Inject,
                args: ['loggingConfig']
            }] }, { type: ɵngcc2.AvlAuthService, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [auth.AvlAuthService]
            }] }]; }, null); })();
        return LoggingService;
    }());

    var LoggingModule = /** @class */ (function () {
        function LoggingModule(parentModule) {
            if (parentModule) {
                throw new Error('LoggingModule is already loaded. Import it in the AppModule only');
            }
        }
        LoggingModule_1 = LoggingModule;
        LoggingModule.forRoot = function (config) {
            return {
                ngModule: LoggingModule_1,
                providers: [LoggingService, { provide: 'loggingConfig', useValue: config }],
            };
        };
        var LoggingModule_1;
        LoggingModule.ctorParameters = function () { return [
            { type: LoggingModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        LoggingModule = LoggingModule_1 = __decorate([ __param(0, core.Optional()), __param(0, core.SkipSelf())
        ], LoggingModule);
LoggingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoggingModule });
LoggingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoggingModule_Factory(t) { return new (t || LoggingModule)(ɵngcc0.ɵɵinject(LoggingModule, 12)); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoggingModule, [{
        type: core.NgModule
    }], function () { return [{ type: LoggingModule, decorators: [{
                type: core.Optional
            }, {
                type: core.SkipSelf
            }] }]; }, null); })();
        return LoggingModule;
    }());

    exports.ChildCommunicationService = ChildCommunicationService;
    exports.LogConfig = LogConfig;
    exports.LoggingModule = LoggingModule;
    exports.LoggingService = LoggingService;
    exports.ShellCommunicationService = ShellCommunicationService;
    exports.ThemeService = ThemeService;
    exports.TranslationManagementService = TranslationManagementService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=avl-services-ng-services.umd.js.map