{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@avl-services/ng-services/lib/message.model.ts","ng://@avl-services/ng-services/lib/logging.model.ts","ng://@avl-services/ng-services/lib/shell-communication.service.ts","ng://@avl-services/ng-services/lib/translation-management.service.ts","ng://@avl-services/ng-services/lib/theme.service.ts","ng://@avl-services/ng-services/lib/child-communication.service.ts","ng://@avl-services/ng-services/lib/logging.service.ts","ng://@avl-services/ng-services/lib/logging.module.ts","ng://@avl-services/ng-services/lib/notification.service.ts"],"names":["MessageType","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","LogSeverity","ShellCommunicationService","router","authService","_this","handlers","_a","theme","handleTheme","locale","handleLocale","language","handleLanguage","colorScheme","handleColorScheme","navigation","url","handleNavigation","action","handleAction","authentication","user","handleAuthentication","redirectedFromLogIn","redirected","handleRedirectedFromLogIn","themeSubject","Subject","languageSubject","actionSubject","localeSubject","colorSchemeSubject","theme$","language$","action$","locale$","colorScheme$","BehaviorSubject","undefined","isChild","window","location","parent","addEventListener","event","onMessage","id","uuidv4","notifyShellAboutAction","postMessageToShell","notifyShellAboutLogin","login","notifyShellAboutNavigation","registerToShell","registration","updateUserToShell","readUserFromSessionStorage","data","payload","messageType","default","console","log","message","postMessage","next","navigateByUrl","access_token","storeUserToSessionStorage","clearUserFromSessionStorage","reloadPersistedUserData","Router","AvlAuthService","Injectable","providedIn","TranslationManagementService","translateService","translationService","languages","code","label","initializeTranslations","AvlLocalizationService","lang","localStorage","getItem","setItem","use","toPromise","changeLanguage","oldLang","reload","TranslateService","NgxTranslateTranslationService","ThemeService","themeChangedSubject","themeChanged","asObservable","changeTheme","_isDarkTheme","newValue","getCurrentTheme","isDarkTheme","document","body","setAttribute","ChildCommunicationService","translationManagementService","themeService","handleLogin","_","handleRegistration","handleUser","navigationSubject","loginSubject","registrationCompletedSubject","navigation$","login$","registrationCompleted$","subscribe","postThemeToChildren","notifyChildAboutLocale","country","postMessageToChild","notifyChildAboutLanguage","notifyChildAboutAction","notifyChildAboutNavigation","postAuthenticationDataToChildren","postLanguageToChildren","postLocaleToChildren","postRedirectedFromLogIn","postColorSchemeToChildren","computedStyle","getComputedStyle","--avl-product-color","getPropertyValue","--avl-product-hover-color","--avl-product-focus-color","iframeEl","getElementsByTagName","contentWindow","endpoint","targetName","appName","version","autologging","globalLogLevel","debounceTime","capacity","Info","LoggingService","http","config","logs","isLogging","debounceTime$","logs$","stopLogging$","postLogs$","destroyed$","headers","HttpHeaders","isLoggedIn$","pipe","takeUntil","isLoggedIn","decideOnLogging","ngOnDestroy","complete","startLogging","switchMap","periodicalLogging","onPostMessages","postMessages","setLoggingDebounceTime","stopLogging","postLogs","getLogs$","debug","componentName","Debug","info","warn","Warning","error","Error","fatal","Fatal","setGlobalLogLevel","setLogCapacity","severity","createAndStoreLog","dispatchLogs","isFullCapacity","severityType","timestamp","Date","toISOString","toString","push","clearLogs","period","interval","tap","filter","post","HttpClient","LogConfig","type","Inject","args","Optional","LoggingModule","parentModule","forRoot","ngModule","LoggingModule_1","providers","provide","useValue","SkipSelf","NgModule","NotificationService","hubConnections","notification","notification$","startConnection","options","connection","getConnectionByID","connectionID","buildConnection","state","HubConnectionState","Connected","start","then","startNotifications","metadata","catch","stopConnection","off","stop","removeConnection","index","findIndex","splice","updateNotifications","invoke","hubConnection","HubConnectionBuilder","configureLogging","LogLevel","None","withUrl","withAutomaticReconnect","build","onreconnected","on"],"mappings":";;;;;;;;;;;;;;oFA6BO,IC3BKA,ED2BDC,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,IAEKU,MAAMC,KAAMP,YAezB,SAASQ,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HC,EAAvHC,EAAId,UAAUC,OAAQc,EAAID,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOlB,OAAOsB,yBAAyBN,EAAQC,GAAOC,EACrH,GAAuB,iBAAZK,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAAST,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAId,EAAIW,EAAWR,OAAS,EAAGH,GAAK,EAAGA,KAASe,EAAIJ,EAAWX,MAAIiB,GAAKD,EAAI,EAAID,EAAEE,GAAKD,EAAI,EAAID,EAAEH,EAAQC,EAAKI,GAAKF,EAAEH,EAAQC,KAASI,GAChJ,OAAOD,EAAI,GAAKC,GAAKrB,OAAOyB,eAAeT,EAAQC,EAAKI,GAAIA,EAGzD,SAASK,EAAQC,EAAYC,GAChC,OAAO,SAAUZ,EAAQC,GAAOW,EAAUZ,EAAQC,EAAKU,KC1D/C7B,EAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,OAAA,SACAA,EAAA,YAAA,cACAA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,WAAA,aACAA,EAAA,aAAA,eACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,eAAA,iBACAA,EAAA,oBAAA,sBACAA,EAAA,KAAA,WCVU+B,eCmEV,SAAAC,EAAoBC,EAAwBC,SAA5CC,EAAApB,KAAoBA,KAAAkB,OAAAA,EAAwBlB,KAAAmB,YAAAA,EAzDpCnB,KAAAqB,WAAQC,EAAA,IACbrC,EAAAA,YAAYsC,OAAQ,SAACA,GAAkB,OAAAH,EAAKI,YAAYD,IACzDD,EAACrC,EAAAA,YAAYwC,QAAS,SAACA,GAAmB,OAAAL,EAAKM,aAAaD,IAC5DH,EAACrC,EAAAA,YAAY0C,UAAW,SAACA,GAAqB,OAAAP,EAAKQ,eAAeD,IAClEL,EAACrC,EAAAA,YAAY4C,aAAc,SAACA,GAA6B,OAAAT,EAAKU,kBAAkBD,IAChFP,EAACrC,EAAAA,YAAY8C,YAAa,SAACC,GAAgB,OAAAZ,EAAKa,iBAAiBD,IACjEV,EAACrC,EAAAA,YAAYiD,QAAS,SAACA,GAAmB,OAAAd,EAAKe,aAAaD,IAC5DZ,EAACrC,EAAAA,YAAYmD,gBAAiB,SAACC,GAAe,OAAAjB,EAAKkB,qBAAqBD,IACxEf,EAACrC,EAAAA,YAAYsD,qBAAsB,SAACC,GAAwB,OAAApB,EAAKqB,0BAA0BD,OAGrFxC,KAAA0C,aAAe,IAAIC,EAAAA,QACnB3C,KAAA4C,gBAAkB,IAAID,EAAAA,QACtB3C,KAAA6C,cAAgB,IAAIF,EAAAA,QACpB3C,KAAA8C,cAAgB,IAAIH,EAAAA,QACpB3C,KAAA+C,mBAAqB,IAAIJ,EAAAA,QAM1B3C,KAAAgD,OAA6BhD,KAAK0C,aAKlC1C,KAAAiD,UAAgCjD,KAAK4C,gBACrC5C,KAAAkD,QAA8BlD,KAAK6C,cAKnC7C,KAAAmD,QAA8BnD,KAAK8C,cAKnC9C,KAAAoD,aAAwCpD,KAAK+C,mBAY7C/C,KAAAuC,oBAAsB,IAAIc,EAAAA,qBAAyBC,GAMnDtD,KAAAuD,QAAUC,OAAOC,WAAaD,OAAOE,OAAOD,SAGjDD,OAAOG,iBAAiB,WAAW,SAACC,GAAU,OAAAxC,EAAKyC,UAAUD,MAE7D5D,KAAK8D,GAAKC,EAAAA,YAGL9C,EAAArB,UAAAoE,uBAAP,SAA8B9B,GAC5BlC,KAAKiE,mBAAmBhF,EAAAA,YAAYiD,OAAQA,IAMvCjB,EAAArB,UAAAsE,sBAAP,SAA6BlC,GAC3BhC,KAAKiE,mBAAmBhF,EAAAA,YAAYkF,MAAOnC,IAMtCf,EAAArB,UAAAwE,2BAAP,SAAkCpC,GAChChC,KAAKiE,mBAAmBhF,EAAAA,YAAY8C,WAAYC,IAM3Cf,EAAArB,UAAAyE,gBAAP,WACErE,KAAKiE,mBAAmBhF,EAAAA,YAAYqF,aAActE,KAAK8D,KAMlD7C,EAAArB,UAAA2E,kBAAP,WACE,IAAMlC,EAAOrC,KAAKmB,YAAYqD,6BAC9BxE,KAAKiE,mBAAmBhF,EAAAA,YAAYoD,KAAMA,IAGpCpB,EAAArB,UAAAiE,UAAR,SAAkBD,GACV,IAAAtC,EAAAsC,EAAAa,KAAEC,EAAApD,EAAAoD,QAASC,EAAArD,EAAAqD,YACXtD,EAAQnC,EAAAA,EAAA,GACTc,KAAKqB,UAAQ,CAChBuD,QAAS,WAAM,OAAAC,QAAQC,IAAI,sCAAuClB,OAGnEvC,EAASsD,IAAgBtD,EAASuD,SAASF,IAGtCzD,EAAArB,UAAAqE,mBAAR,SAA2BU,EAA0BD,GACnD,IAAMK,EAAmB,CAAEJ,YAAWA,EAAED,QAAOA,GAC/ClB,OAAOE,OAAOF,OAAOwB,YAAYD,EAAS,MAGpC9D,EAAArB,UAAAkC,kBAAR,SAA0BD,GACxB7B,KAAK+C,mBAAmBkC,KAAKpD,IAGvBZ,EAAArB,UAAAgC,eAAR,SAAuBD,GACrB3B,KAAK4C,gBAAgBqC,KAAKtD,IAGpBV,EAAArB,UAAA8B,aAAR,SAAqBD,GACnBzB,KAAK8C,cAAcmC,KAAKxD,IAGlBR,EAAArB,UAAA4B,YAAR,SAAoBD,GAClBvB,KAAK0C,aAAauC,KAAK1D,IAGjBN,EAAArB,UAAAqC,iBAAR,SAAyBD,GACvBhC,KAAKkB,OAAOgE,cAAclD,IAGpBf,EAAArB,UAAAuC,aAAR,SAAqBD,GACnBlC,KAAK6C,cAAcoC,KAAK/C,IAGlBjB,EAAArB,UAAA0C,qBAAR,SAA6BD,IACvBA,MAAAA,OAAI,EAAJA,EAAM8C,cACRnF,KAAKmB,YAAYiE,0BAA0B/C,GAE3CrC,KAAKmB,YAAYkE,8BAGnBrF,KAAKmB,YAAYmE,2BAGXrE,EAAArB,UAAA6C,0BAAR,SAAkCD,GAChCxC,KAAKuC,oBAAoB0C,KAAKzC,6CAzFJ+C,EAAAA,cAA6BC,EAAAA,gKA5D9CvE,EAAyBhB,EAAA,CAHrCwF,EAAAA,WAAW,CACVC,WAAY,UAEDzE,mBCCX,SAAA0E,EAAoBC,EAA4CC,GAA5C7F,KAAA4F,iBAAAA,EAA4C5F,KAAA6F,mBAAAA,EAGzD7F,KAAA8F,UAAY,CACjB,CAAEC,KAAM,KAAMC,MAAO,WACrB,CAAED,KAAM,KAAMC,MAAO,oBAGhBL,EAAA/F,UAAAqG,uBAAP,WAAA,IAAA7E,EAAApB,KACE,OAAO,WACLkG,uBAAuBL,mBAAqBzE,EAAKyE,mBACjD,IAAIM,EAAOC,aAAaC,QAAQ,QAKhC,OAJY,MAARF,IACFA,EAAO/E,EAAK0E,UAAU,GAAGC,KACzBK,aAAaE,QAAQ,OAAQH,IAExB/E,EAAKwE,iBAAiBW,IAAIJ,GAAMK,cAG3CrH,OAAAyB,eAAW+E,EAAA/F,UAAA,WAAQ,KAAnB,WACE,OAAOwG,aAAaC,QAAQ,yCAGvBV,EAAA/F,UAAA6G,eAAP,SAAsBN,GACpB,IAAMO,EAAUN,aAAaC,QAAQ,QAChCK,GAAWA,IAAYP,IAC1BC,aAAaE,QAAQ,OAAQH,GAC7B1C,SAASkD,oDA3ByBC,EAAAA,wBAA8CC,EAAAA,0MADzElB,EAA4B1F,EAAA,CAHxCwF,EAAAA,WAAW,CACVC,WAAY,UAEDC,mBCwBX,SAAAmB,IAXQ9G,KAAA+G,oBAAsB,IAAIpE,EAAAA,QAClB3C,KAAAgH,aAAehH,KAAK+G,oBAAoBE,eAWtDjH,KAAKkH,qBAzBP/H,OAAAyB,eAAWkG,EAAAlH,UAAA,cAAW,KAAtB,WAIE,OAHyB,MAArBI,KAAKmH,eACPnH,KAAKmH,aAAiD,SAAlCf,aAAaC,QAAQ,WAAuB,GAE3DrG,KAAKmH,kBAEd,SAAuBC,GACrBpH,KAAKmH,aAAeC,EACpBhB,aAAaE,QAAQ,SAAsB,IAAbc,EAAoB,OAAS,SAC3DpH,KAAK+G,oBAAoB9B,KAAKjF,KAAKqH,mBACnCrH,KAAKkH,+CAMAJ,EAAAlH,UAAAyH,gBAAP,WACE,OAAOrH,KAAKsH,YAAc,OAAS,SAG7BR,EAAAlH,UAAAsH,YAAR,WACEK,SAASC,KAAKC,aAAa,QAASzH,KAAKqH,+GAzBhCP,EAAY7G,EAAA,CAHxBwF,EAAAA,WAAW,CACVC,WAAY,UAEDoB,mBC8CX,SAAAY,EACUC,EACAC,EACAzG,SAHVC,EAAApB,KACUA,KAAA2H,6BAAAA,EACA3H,KAAA4H,aAAAA,EACA5H,KAAAmB,YAAAA,EAtCFnB,KAAAqB,WAAQC,EAAA,IACbrC,EAAAA,YAAYkF,OAAQ,SAACnC,GAAgB,OAAAZ,EAAKyG,YAAY7F,IACvDV,EAACrC,EAAAA,YAAY8C,YAAa,SAACC,GAAgB,OAAAZ,EAAKa,iBAAiBD,IACjEV,EAACrC,EAAAA,YAAYiD,QAAS,SAACA,GAAmB,OAAAd,EAAKe,aAAaD,IAC5DZ,EAACrC,EAAAA,YAAYqF,cAAe,SAACwD,GAAM,OAAA1G,EAAK2G,sBACxCzG,EAACrC,EAAAA,YAAYoD,MAAO,SAACA,GAAe,OAAAjB,EAAK4G,WAAW3F,OAG9CrC,KAAA6C,cAAgB,IAAIF,EAAAA,QACpB3C,KAAAiI,kBAAoB,IAAItF,EAAAA,QACxB3C,KAAAkI,aAAe,IAAIvF,EAAAA,QACnB3C,KAAAmI,6BAA+B,IAAIxF,EAAAA,QAIpC3C,KAAAkD,QAA8BlD,KAAK6C,cAKnC7C,KAAAoI,YAAkCpI,KAAKiI,kBAMvCjI,KAAAqI,OAA6BrI,KAAKkI,aAMlClI,KAAAsI,uBAA8CtI,KAClDmI,6BAOD3E,OAAOG,iBAAiB,WAAW,SAACC,GAAU,OAAAxC,EAAKyC,UAAUD,MAC7D5D,KAAK4H,aAAaZ,aAAauB,WAAU,WAAM,OAAAnH,EAAKoH,gCAM/Cd,EAAA9H,UAAA6I,uBAAP,SAA8BC,GAC5B1I,KAAK2I,mBAAmB1J,EAAAA,YAAYwC,OAAQiH,IAMvChB,EAAA9H,UAAAgJ,yBAAP,SAAgCjH,GAC9B3B,KAAK2I,mBAAmB1J,EAAAA,YAAY0C,SAAUA,IAMzC+F,EAAA9H,UAAAiJ,uBAAP,SAA8B3G,GAC5BlC,KAAK2I,mBAAmB1J,EAAAA,YAAYiD,OAAQA,IAMvCwF,EAAA9H,UAAAkJ,2BAAP,SAAkC9G,GAChChC,KAAK2I,mBAAmB1J,EAAAA,YAAY8C,WAAYC,IAM3C0F,EAAA9H,UAAAmJ,iCAAP,WACE,IAAMrE,EAAgB1E,KAAKmB,YAAYqD,6BACvCxE,KAAK2I,mBAAmB1J,EAAAA,YAAYmD,eAAgBsC,IAM/CgD,EAAA9H,UAAA4I,oBAAP,WACE,IAAMjH,EAAQvB,KAAK4H,aAAaP,kBAChCrH,KAAK2I,mBAAmB1J,EAAAA,YAAYsC,MAAOA,IAMtCmG,EAAA9H,UAAAoJ,uBAAP,WACEhJ,KAAK2I,mBACH1J,EAAAA,YAAY0C,SACZ3B,KAAK2H,6BAA6BhG,WAO/B+F,EAAA9H,UAAAqJ,qBAAP,WACE,IAAMP,EAAUtC,aAAaC,QAAQ,WACrCrG,KAAK2I,mBAAmB1J,EAAAA,YAAYwC,OAAQiH,IAMvChB,EAAA9H,UAAAsJ,wBAAP,SAA+BxE,GAC7B1E,KAAK2I,mBAAmB1J,EAAAA,YAAYsD,oBAAqBmC,IAMpDgD,EAAA9H,UAAAuJ,0BAAP,WACE,IAAMC,EAAgB5F,OAAO6F,iBAAiB9B,SAASC,MASjD3F,EAA2B,CAC/ByH,sBATmBF,EAAcG,iBAAiB,uBAUlDC,4BATwBJ,EAAcG,iBACtC,6BASAE,4BAPwBL,EAAcG,iBACtC,8BASFvJ,KAAK2I,mBAAmB1J,EAAAA,YAAY4C,YAAaA,IAG3C6F,EAAA9H,UAAAuC,aAAR,SAAqBD,GACnBlC,KAAK6C,cAAcoC,KAAK/C,IAGlBwF,EAAA9H,UAAAqC,iBAAR,SAAyBF,GACvB/B,KAAKiI,kBAAkBhD,KAAKlD,IAGtB2F,EAAA9H,UAAAiI,YAAR,SAAoB1D,GAClBnE,KAAKkI,aAAajD,KAAKd,IAIjBuD,EAAA9H,UAAAmI,mBAAR,WACE/H,KAAK0J,SAAWnC,SAASoC,qBACvB,UACA,GAEF3J,KAAKwI,sBACLxI,KAAKmJ,4BACLnJ,KAAKgJ,yBACLhJ,KAAKiJ,uBAELjJ,KAAKmI,6BAA6BlD,MAAK,IAGjCyC,EAAA9H,UAAAiE,UAAR,SAAkBD,GACV,IAAAtC,EAAAsC,EAAAa,KAAEC,EAAApD,EAAAoD,QAASC,EAAArD,EAAAqD,YACXtD,EAAQnC,EAAAA,EAAA,GACTc,KAAKqB,UAAQ,CAChBuD,QAAS,WAAM,OAAAC,QAAQC,IAAI,sCAAuClB,OAGnEvC,EAASsD,IAAgBtD,EAASuD,SAASF,IAGtCgD,EAAA9H,UAAA+I,mBAAR,SAA2BhE,EAA0BD,SACnD,GAAK1E,KAAK0J,SAAV,CAIA,IAAM3E,EAAmB,CAAEJ,YAAWA,EAAED,QAAOA,GACpB,QAA3BpD,EAAAtB,KAAK0J,SAASE,qBAAa,IAAAtI,GAAAA,EAAE0D,YAAYD,EAAS,OAI5C2C,EAAA9H,UAAAoI,WAAR,SAAmB3F,IACbA,MAAAA,OAAI,EAAJA,EAAM8C,cACRnF,KAAKmB,YAAYiE,0BAA0B/C,GAE3CrC,KAAKmB,YAAYkE,8BAGnBrF,KAAKmB,YAAYmE,oEAxJqBK,SAChBmB,SACDtB,EAAAA,uKAvCZkC,EAAyBzH,EAAA,CAHrCwF,EAAAA,WAAW,CACVC,WAAY,UAEDgC,OJbD1G,EAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrBA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,cA8FA,SACE6I,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QAHA,IAAAH,IAAAA,GAAA,QACA,IAAAC,IAAAA,EAA8BlJ,EAAAA,YAAYqJ,WAC1C,IAAAF,IAAAA,EAAA,UACA,IAAAC,IAAAA,EAAA,IA5CKpK,KAAAiK,aAAuB,EAOvBjK,KAAAkK,eAA8BlJ,EAAAA,YAAYqJ,KAO1CrK,KAAAmK,aAAuB,IASvBnK,KAAAoK,SAAmB,GAuBxBpK,KAAK6J,SAAWA,EAChB7J,KAAK8J,WAAaA,EAClB9J,KAAK+J,QAAUA,EACf/J,KAAKgK,QAAUA,EACfhK,KAAKiK,YAAcA,EACnBjK,KAAKkK,eAAiBA,EACtBlK,KAAKmK,aAAeA,EACpBnK,KAAKoK,SAAWA,gBK/FlB,SAAAE,EACUC,EACyBC,EACWrJ,GAH9C,MAAAC,EAAApB,KACUA,KAAAuK,KAAAA,EACyBvK,KAAAwK,OAAAA,EACWxK,KAAAmB,YAAAA,EAhBtCnB,KAAAyK,KAAc,GAEdzK,KAAA0K,WAAY,EAEZ1K,KAAA2K,cAAiC,IAAIhI,EAAAA,QACrC3C,KAAA4K,MAAwB,IAAIjI,EAAAA,QAC5B3C,KAAA6K,aAA8B,IAAIlI,EAAAA,QAClC3C,KAAA8K,UAA2B,IAAInI,EAAAA,QAC/B3C,KAAA+K,WAA4B,IAAIpI,EAAAA,QAUtC3C,KAAKgL,QAAU,IAAIC,EAAAA,YAAY,CAC7BnB,WAAY9J,KAAKwK,OAAOV,aAGtBU,EAAOP,cACO,QAAhB3I,EAAAtB,KAAKmB,mBAAW,IAAAG,GAAAA,EAAE4J,YAAYC,KAAKC,EAAAA,UAAUpL,KAAK+K,aAAaxC,WAAU,SAAC8C,GAAe,OAAAjK,EAAKkK,gBAAgBD,cAOlHf,EAAA1K,UAAA2L,YAAA,WACEvL,KAAK8K,UAAUU,WACfxL,KAAK2K,cAAca,WACnBxL,KAAK4K,MAAMY,WACXxL,KAAK6K,aAAa5F,OAClBjF,KAAK6K,aAAaW,WAClBxL,KAAK+K,WAAW9F,OAChBjF,KAAK+K,WAAWS,YAOXlB,EAAA1K,UAAA6L,aAAP,WAAA,IAAArK,EAAApB,KACEA,KAAK0K,WAAY,EACjB1K,KAAK2K,cACFQ,KACCC,EAAAA,UAAUpL,KAAK6K,cACfa,EAAAA,WAAU,SAACvB,GAAiB,OAAA/I,EAAKuK,kBAAkBxB,OAEpD5B,WAAU,WAAM,OAAAnH,EAAKwK,oBAExB5L,KAAK8K,UACFK,KACCC,EAAAA,UAAUpL,KAAK6K,cACfa,EAAAA,WAAU,WAAM,OAAAtK,EAAKyK,mBAEtBtD,WAAU,WAAM,OAAAnH,EAAKwK,oBAExB5L,KAAK8L,uBAAuB9L,KAAKwK,OAAOL,eAMnCG,EAAA1K,UAAAmM,YAAP,WACE/L,KAAK0K,WAAY,EACjB1K,KAAKgM,WACLhM,KAAK6K,aAAa5F,QAObqF,EAAA1K,UAAAqM,SAAP,WACE,OAAOjM,KAAK4K,MAAM3D,gBAQbqD,EAAA1K,UAAAsM,MAAP,SAAanH,EAAiBoH,QAAA,IAAAA,IAAAA,EAAA,IAC5BnM,KAAK8E,IAAIC,EAAS/D,EAAAA,YAAYoL,MAAOD,IAQhC7B,EAAA1K,UAAAyM,KAAP,SAAYtH,EAAiBoH,QAAA,IAAAA,IAAAA,EAAA,IAC3BnM,KAAK8E,IAAIC,EAAS/D,EAAAA,YAAYqJ,KAAM8B,IAQ/B7B,EAAA1K,UAAA0M,KAAP,SAAYvH,EAAiBoH,QAAA,IAAAA,IAAAA,EAAA,IAC3BnM,KAAK8E,IAAIC,EAAS/D,EAAAA,YAAYuL,QAASJ,IAQlC7B,EAAA1K,UAAA4M,MAAP,SAAazH,EAAiBoH,QAAA,IAAAA,IAAAA,EAAA,IAC5BnM,KAAK8E,IAAIC,EAAS/D,EAAAA,YAAYyL,MAAON,IAQhC7B,EAAA1K,UAAA8M,MAAP,SAAa3H,EAAiBoH,QAAA,IAAAA,IAAAA,EAAA,IAC5BnM,KAAK8E,IAAIC,EAAS/D,EAAAA,YAAY2L,MAAOR,IAOhC7B,EAAA1K,UAAAkM,uBAAP,SAA8B3B,GAC5BnK,KAAKwK,OAAOL,aAAeA,EAC3BnK,KAAK2K,cAAc1F,KAAKkF,IAOnBG,EAAA1K,UAAAgN,kBAAP,SAAyB1C,GACvBlK,KAAKwK,OAAON,eAAiBA,GAOxBI,EAAA1K,UAAAiN,eAAP,SAAsBzC,GACpBpK,KAAKwK,OAAOJ,SAAWA,GAKjBE,EAAA1K,UAAAkF,IAAR,SAAYC,EAAiB+H,EAAuBX,IAC7CnM,KAAK0K,WAAaoC,EAAW9M,KAAKwK,OAAON,iBAI9ClK,KAAK+M,kBAAkBhI,EAAS+H,EAAUX,GAC1CnM,KAAKgN,eAEDhN,KAAKiN,kBACPjN,KAAK8K,UAAU7F,SAIXqF,EAAA1K,UAAAmN,kBAAR,SAA0BhI,EAAiBmI,EAA2Bf,GACpE,IAAMgB,GAAY,IAAIC,MAAOC,cACvB/L,EAAAtB,KAAAwK,OAAET,EAAAzI,EAAAyI,QAASC,EAAA1I,EAAA0I,QAEXlF,EAAW,CAAEC,QAAOA,EAAE+H,SADXI,EAAaI,WACQH,UAASA,EAAEhB,cAAaA,EAAEpC,QAAOA,EAAEC,QAAOA,GAChFhK,KAAKyK,KAAK8C,KAAKzI,IAGTwF,EAAA1K,UAAAqN,eAAR,WACE,OAAOjN,KAAKyK,KAAK/K,QAAUM,KAAKwK,OAAOJ,UAGjCE,EAAA1K,UAAA4N,UAAR,WACExN,KAAKyK,KAAO,IAGNH,EAAA1K,UAAAgM,eAAR,WACE5L,KAAKwN,YACLxN,KAAKgN,gBAGC1C,EAAA1K,UAAAoM,SAAR,WACEhM,KAAK8K,UAAU7F,QAGTqF,EAAA1K,UAAA+L,kBAAR,SAA0B8B,GAA1B,IAAArM,EAAApB,KACE,OAAO0N,EAAAA,SAASD,GAAQtC,KACtBwC,EAAAA,KAAI,WACGvM,EAAKqJ,KAAK/K,QACb0B,EAAK4L,kBAGTY,EAAAA,QAAO,WAAM,QAAExM,EAAKqJ,KAAK/K,UACzBgM,EAAAA,WAAU,WAAM,OAAAtK,EAAKyK,oBAIjBvB,EAAA1K,UAAAiM,aAAR,WACE,OAAO7L,KAAKuK,KAAKsD,KAAW7N,KAAKwK,OAAOX,SAAU7J,KAAKyK,KAAM,CAC3DO,QAAShL,KAAKgL,WAIVV,EAAA1K,UAAAoN,aAAR,WACEhN,KAAK4K,MAAM3F,KAAKjF,KAAKyK,OAGfH,EAAA1K,UAAA0L,gBAAR,SAAwBD,GAClBA,EACFrL,KAAKyL,eAELzL,KAAK+L,wDA1MO+B,EAAAA,kBAC2BC,EAAS7N,WAAA,CAAA,CAAA8N,KAAjDC,EAAAA,OAAMC,KAAA,CAAC,0BACiD1I,EAAAA,eAActF,WAAA,CAAA,CAAA8N,KAAtEG,EAAAA,UAAQ,CAAAH,KAAIC,EAAAA,OAAMC,KAAA,CAAC1I,EAAAA,qMAjBX8E,EAAcrK,EAAA,CAH1BwF,EAAAA,WAAW,CACVC,WAAY,SAkBT7E,EAAA,EAAAoN,EAAAA,OAAO,kBACPpN,EAAA,EAAAsN,EAAAA,YAAYtN,EAAA,EAAAoN,EAAAA,OAAOzI,EAAAA,kBAjBX8E,mBCJX,SAAA8D,EAAoCC,GAClC,GAAIA,EACF,MAAM,IAAI5B,MAAM,0EAStB,SAZa2B,EAMJA,EAAAE,QAAP,SAAe9D,GACb,MAAO,CACL+D,SAAUC,EACVC,UAAW,CAACnE,EAAgB,CAAEoE,QAAS,gBAAiBC,SAAUnE,+CARnB4D,EAAalO,WAAA,CAAA,CAAA8N,KAAnDG,EAAAA,UAAQ,CAAAH,KAAIY,EAAAA,cADdR,EAAaI,EAAAvO,EAAA,CADzB4O,EAAAA,WAEchO,EAAA,EAAAsN,EAAAA,YAAYtN,EAAA,EAAA+N,EAAAA,aADdR,mBCsBb,SAAAU,IACU9O,KAAA+O,eAA0C,GAC1C/O,KAAAgP,aAAyC,IAAIrM,EAAAA,QAK9C3C,KAAAiP,cAA6CjP,KAAKgP,aAmG3D,OA3FSF,EAAAlP,UAAAsP,gBAAP,SAAuBrF,EAAkBsF,GAAzC,IAAA/N,EAAApB,KACMoP,EAAapP,KAAKqP,kBAAkBF,EAAQG,cAC3CF,IACHA,EAAapP,KAAKuP,gBAAgB1F,EAAUsF,IAG1CC,EAAWI,QAAUC,EAAAA,mBAAmBC,WAI5CN,EACGO,QACAC,MAAK,WAAM,OAAAxO,EAAKyO,mBAAmBT,EAAYD,EAAQW,aACvDC,OAAM,WAAM,OAAAlL,QAAQyH,KAAK,6DAOvBwC,EAAAlP,UAAAoQ,eAAP,SAAsBV,GACpB,IAAMF,EAAapP,KAAKqP,kBAAkBC,GAErCF,IAILA,EAAWa,IAAI,wBACfb,EAAWc,SAONpB,EAAAlP,UAAAuQ,iBAAP,SAAwBb,GACtBtP,KAAKgQ,eAAeV,GAEpB,IAAMc,EAAQpQ,KAAK+O,eAAesB,WAAU,SAAAjB,GAAc,OAAAA,EAAWtL,KAAOwL,MAC7D,IAAXc,GACFpQ,KAAK+O,eAAeuB,OAAOF,EAAO,IAS/BtB,EAAAlP,UAAA2Q,oBAAP,SAA2BjB,EAAsBQ,GAC/C,IAAMV,EAAapP,KAAKqP,kBAAkBC,GACrCF,GAILpP,KAAK6P,mBAAmBT,EAAYU,IAK9BhB,EAAAlP,UAAAiQ,mBAAR,SAA2BT,EAA2BU,GACpDV,EAAWoB,OAAO,qBAAsBV,IAGlChB,EAAAlP,UAAAyP,kBAAR,SAA0BC,SAClBc,EAAQpQ,KAAK+O,eAAesB,WAAU,SAAAjB,GAAc,OAAAA,EAAWtL,KAAOwL,KAC5E,OAAiC,QAAjChO,EAAOtB,KAAK+O,eAAeqB,UAAM,IAAA9O,OAAA,EAAAA,EAAE8N,YAG7BN,EAAAlP,UAAA2P,gBAAR,SACE1F,EACAsF,GAFF,IAAA/N,EAAApB,KAIQyQ,GAAgB,IAAIC,EAAAA,sBACvBC,iBAAiBC,EAAAA,SAASC,MAC1BC,QAAQjH,GACRkH,yBACAC,QAYH,OAVAP,EAAcQ,eAAc,WAAM,OAAA7P,EAAKyO,mBAAmBY,EAAetB,EAAQW,aACjFW,EAAcS,GAAG,wBAAwB,SAAClC,GACxC5N,EAAK4N,aAAa/J,KAAK+J,MAGzBhP,KAAK+O,eAAexB,KAAK,CACvBzJ,GAAIqL,EAAQG,aACZF,WAAYqB,IAGPA,GAxGE3B,EAAmB7O,EAAA,CAD/BwF,EAAAA,cACYqJ","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { User } from '@avl-ng-controls/auth';\r\n\r\nexport enum MessageType {\r\n  action = 'action',\r\n  colorScheme = 'colorScheme',\r\n  language = 'language',\r\n  locale = 'locale',\r\n  navigation = 'navigation',\r\n  registration = 'registration',\r\n  theme = 'theme',\r\n  login = 'login',\r\n  authentication = 'authentication',\r\n  redirectedFromLogIn = 'redirectedFromLogIn',\r\n  user = 'user'\r\n}\r\n\r\nexport interface Message {\r\n  messageType: MessageType;\r\n  payload: Payload;\r\n}\r\n\r\nexport type Payload = string | ColorScheme | User | boolean;\r\n\r\nexport interface MessageHandlers {\r\n  [key: string]: (payload: Payload) => void;\r\n}\r\nexport interface ColorScheme {\r\n  '--avl-product-color': string;\r\n  '--avl-product-hover-color': string;\r\n  '--avl-product-focus-color': string;\r\n}\r\n","/**\r\n * List of all types of messages that can be logged.\r\n */\r\nexport enum LogSeverity {\r\n  Debug,\r\n  Info,\r\n  Warning,\r\n  Error,\r\n  Fatal,\r\n}\r\n\r\n/**\r\n * **LogConfig** class is required by the _LoggingModule_.\r\n * \r\n * An instance of this class should be passed into _forRoot_ method of _LoggingModule_\r\n * when importing module in the Angular application.\r\n * ```\r\n * import logConfig from 'logging.config.ts;\r\n * import LoggingModule from '@avl-services/ng-services';\r\n *  ....\r\n *  @NgModule({\r\n *    imports: [\r\n *      LoggingModule.forRoot(logConfig),\r\n *      ...\r\n *    ],\r\n *    ...\r\n *  }) export class AppModule {}\r\n * ```\r\n */\r\nexport class LogConfig {\r\n  /**\r\n   * API endpoint for logging (e.g. https://vizbox.avl.com/api/theia/logs).\r\n   * - Mandatory\r\n   */\r\n  public readonly endpoint: string;\r\n\r\n  /**\r\n   * Name of the database in which logs will be stored.\r\n   * - Mandatory\r\n   */\r\n  public readonly targetName: string;\r\n\r\n  /**\r\n   * Name of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly appName: string;\r\n\r\n  /**\r\n   * Version of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly version: string;\r\n\r\n  /**\r\n   * Flag that indicates whether logging starts automatically once the user logs in using credential.\r\n   * \r\n   * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:\r\n   * ```\r\n   * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }\r\n   * ```\r\n   * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).\r\n   * \r\n   * - Optional\r\n   * - Default: false\r\n   */\r\n  public autologging: boolean = false;\r\n\r\n  /**\r\n   * Minimum message severity to log.\r\n   * - Optional\r\n   * - Default: LogSeverity.Info\r\n   */\r\n  public globalLogLevel: LogSeverity = LogSeverity.Info;\r\n\r\n  /**\r\n   * Time in milliseconds, determines the period of API requests for logging.\r\n   * - Optional\r\n   * - Default: 30_000 ms\r\n   */\r\n  public debounceTime: number = 30_000;\r\n\r\n  /**\r\n   * Log queue capacity  \r\n   * \r\n   * If reached, API request is sent with all logs in log queue, and queue is cleared out.\r\n   * - Optional\r\n   * - Default: 10\r\n   */\r\n  public capacity: number = 10;\r\n\r\n  /**\r\n   * Creates instance of _LogConfig_ class.\r\n   * @param endpoint API endpoint for logging.\r\n   * @param targetName Name of the database in which logs will be stored\r\n   * @param appName Name of the application that uses the logging service\r\n   * @param version Version of the application that uses the logging service\r\n   * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false\r\n   * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info\r\n   * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms\r\n   * @param capacity Log queue capacity. Default: 10\r\n   */\r\n  constructor(\r\n    endpoint: string,\r\n    targetName: string,\r\n    appName: string,\r\n    version: string,\r\n    autologging: boolean = false,\r\n    globalLogLevel: LogSeverity = LogSeverity.Info,\r\n    debounceTime: number = 30_000,\r\n    capacity: number = 10\r\n  ) {\r\n    this.endpoint = endpoint;\r\n    this.targetName = targetName;\r\n    this.appName = appName;\r\n    this.version = version;\r\n    this.autologging = autologging;\r\n    this.globalLogLevel = globalLogLevel;\r\n    this.debounceTime = debounceTime;\r\n    this.capacity = capacity;\r\n  }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface Log {\r\n  readonly appName?: string;\r\n  readonly componentName?: string;\r\n  readonly severity?: string;\r\n  readonly message?: string;\r\n  readonly procId?: string;\r\n  readonly timestamp?: string;\r\n  readonly version?: string;\r\n  readonly AVLRequestId?: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ColorScheme, Message, MessageHandlers, MessageType, Payload } from './message.model';\r\nimport { AvlAuthService, User } from '@avl-ng-controls/auth';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShellCommunicationService {\r\n  private readonly id: string;\r\n\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.theme]: (theme: string) => this.handleTheme(theme),\r\n    [MessageType.locale]: (locale: string) => this.handleLocale(locale),\r\n    [MessageType.language]: (language: string) => this.handleLanguage(language),\r\n    [MessageType.colorScheme]: (colorScheme: ColorScheme) => this.handleColorScheme(colorScheme),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.authentication]: (user: User) => this.handleAuthentication(user),\r\n    [MessageType.redirectedFromLogIn]: (redirected: boolean) => this.handleRedirectedFromLogIn(redirected),\r\n  };\r\n\r\n  private themeSubject = new Subject<string>();\r\n  private languageSubject = new Subject<string>();\r\n  private actionSubject = new Subject<string>();\r\n  private localeSubject = new Subject<string>();\r\n  private colorSchemeSubject = new Subject<ColorScheme>();\r\n\r\n  /**\r\n  * Observable tracking theme\r\n  * Emits \"dark\" if dark theme selected, \"light\" otherwise \r\n  */\r\n  public theme$: Observable<string> = this.themeSubject;\r\n\r\n  /**\r\n  * Observable tracking language\r\n  */\r\n  public language$: Observable<string> = this.languageSubject;\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n  * Observable tracking country changes\r\n  */\r\n  public locale$: Observable<string> = this.localeSubject;\r\n\r\n  /**\r\n  * Observable tracking color scheme changes\r\n  */\r\n  public colorScheme$: Observable<ColorScheme> = this.colorSchemeSubject;\r\n\r\n  /**\r\n  * Observable tracking login state\r\n  * Resolves to true on successful login, false otherwise\r\n  */\r\n  public isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n  \r\n  /**\r\n   * If current application is inside shell application \r\n   * True if current application is inside shell application, false otherwise.\r\n   */\r\n  public isChild = window.location !== window.parent.location;\r\n  \r\n  constructor(private router: Router, private authService: AvlAuthService) {\r\n    window.addEventListener('message', (event) => this.onMessage(event));\r\n    \r\n    this.id = uuidv4();\r\n  }\r\n  \r\n  public notifyShellAboutAction(action: string): void {\r\n    this.postMessageToShell(MessageType.action, action);\r\n  }\r\n  \r\n  /**\r\n   * Sends message to shell that it needs to navigate to login page\r\n   */\r\n  public notifyShellAboutLogin(url: string): void {\r\n    this.postMessageToShell(MessageType.login, url);\r\n  }\r\n  \r\n  /**\r\n   * Sends message to shell that it needs to navigate to @url\r\n   */\r\n  public notifyShellAboutNavigation(url: string): void {\r\n    this.postMessageToShell(MessageType.navigation, url);\r\n  }\r\n  \r\n  /**\r\n   * Sends registration message to shell \r\n   */\r\n  public registerToShell(): void {\r\n    this.postMessageToShell(MessageType.registration, this.id);\r\n  }\r\n\r\n  /**\r\n  * Send updated user data to shell\r\n  */\r\n  public updateUserToShell(): void {\r\n    const user = this.authService.readUserFromSessionStorage();\r\n    this.postMessageToShell(MessageType.user, user);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    const { payload, messageType }: Message = event.data;\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log('Unrecognized message for the shell.', event)\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToShell(messageType: MessageType, payload: Payload): void {\r\n    const message: Message = { messageType, payload };\r\n    window.parent.window.postMessage(message, '*');\r\n  }\r\n\r\n  private handleColorScheme(colorScheme: ColorScheme): void {\r\n    this.colorSchemeSubject.next(colorScheme);\r\n  }\r\n\r\n  private handleLanguage(language: string): void {\r\n    this.languageSubject.next(language);\r\n  }\r\n\r\n  private handleLocale(locale: string): void {\r\n    this.localeSubject.next(locale);\r\n  }\r\n\r\n  private handleTheme(theme: string): void {\r\n    this.themeSubject.next(theme);\r\n  }\r\n\r\n  private handleNavigation(url: string): void {\r\n    this.router.navigateByUrl(url);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleAuthentication(user: User): void {\r\n    if (user?.access_token) {\r\n      this.authService.storeUserToSessionStorage(user);\r\n    } else {\r\n      this.authService.clearUserFromSessionStorage();\r\n    }\r\n\r\n    this.authService.reloadPersistedUserData();\r\n  }\r\n\r\n  private handleRedirectedFromLogIn(redirected: boolean) {\r\n    this.redirectedFromLogIn.next(redirected);\r\n  }\r\n}\r\n","/// <reference types=\"@avl-controls/core\" />\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgxTranslateTranslationService } from '@avl-controls/ng-binders';\r\nimport '@avl-controls/core/dist/avl-localization-service/avl-localization-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationManagementService {\r\n  constructor(private translateService: TranslateService, private translationService: NgxTranslateTranslationService) {\r\n  }\r\n\r\n  public languages = [\r\n    { code: 'en', label: 'English' },\r\n    { code: 'hr', label: 'Croatian' },\r\n  ];\r\n\r\n  public initializeTranslations(): () => Promise<any> {\r\n    return () => {\r\n      AvlLocalizationService.translationService = this.translationService;\r\n      let lang = localStorage.getItem('lang');\r\n      if (lang == null) {\r\n        lang = this.languages[0].code;\r\n        localStorage.setItem('lang', lang);\r\n      }\r\n      return this.translateService.use(lang).toPromise();\r\n    };\r\n  }\r\n  public get language(): string {\r\n    return localStorage.getItem('lang');\r\n  }\r\n\r\n  public changeLanguage(lang: string) {\r\n    const oldLang = localStorage.getItem('lang');\r\n    if (!oldLang || oldLang !== lang) {\r\n      localStorage.setItem('lang', lang);\r\n      location.reload();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n\r\n  private _isDarkTheme: boolean;\r\n\r\n  public get isDarkTheme(): boolean {\r\n    if (this._isDarkTheme == null) {\r\n      this._isDarkTheme = localStorage.getItem('theme') === 'dark' || false;\r\n    }\r\n    return this._isDarkTheme;\r\n  }\r\n  public set isDarkTheme(newValue: boolean) {\r\n    this._isDarkTheme = newValue;\r\n    localStorage.setItem('theme', newValue === true ? 'dark' : 'light');\r\n    this.themeChangedSubject.next(this.getCurrentTheme());\r\n    this.changeTheme();\r\n  }\r\n\r\n  private themeChangedSubject = new Subject<string>();\r\n  public readonly themeChanged = this.themeChangedSubject.asObservable();\r\n\r\n  public getCurrentTheme(): string {\r\n    return this.isDarkTheme ? 'dark' : 'light';\r\n  }\r\n\r\n  private changeTheme() {\r\n    document.body.setAttribute('theme', this.getCurrentTheme());\r\n  }\r\n\r\n  constructor() {\r\n    this.changeTheme();\r\n  }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { TranslationManagementService } from \"./translation-management.service\";\r\nimport { ThemeService } from \"./theme.service\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport {\r\n  ColorScheme,\r\n  Message,\r\n  MessageHandlers,\r\n  MessageType,\r\n  Payload,\r\n} from \"./message.model\";\r\nimport { AvlAuthService, User } from '@avl-ng-controls/auth';\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ChildCommunicationService {\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.login]: (url: string) => this.handleLogin(url),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.registration]: (_) => this.handleRegistration(),\r\n    [MessageType.user]: (user: User) => this.handleUser(user),\r\n  };\r\n\r\n  private actionSubject = new Subject<string>();\r\n  private navigationSubject = new Subject<string>();\r\n  private loginSubject = new Subject<string>();\r\n  private registrationCompletedSubject = new Subject<boolean>();\r\n\r\n  protected iframeEl: HTMLIFrameElement;\r\n\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n   * Observable tracking url to navigate to\r\n   */\r\n  public navigation$: Observable<string> = this.navigationSubject;\r\n\r\n  /**\r\n   * Observable tracking url for login\r\n   * Url for login provided by child application\r\n   */\r\n  public login$: Observable<string> = this.loginSubject;\r\n\r\n  /**\r\n   * Observable tracking child registration\r\n   * Emits true if registration was successful, false otherwise\r\n   */\r\n  public registrationCompleted$: Observable<boolean> = this\r\n    .registrationCompletedSubject;\r\n\r\n  constructor(\r\n    private translationManagementService: TranslationManagementService,\r\n    private themeService: ThemeService,\r\n    private authService: AvlAuthService\r\n  ) {\r\n    window.addEventListener(\"message\", (event) => this.onMessage(event));\r\n    this.themeService.themeChanged.subscribe(() => this.postThemeToChildren());\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about locale\r\n   */\r\n  public notifyChildAboutLocale(country: string): void {\r\n    this.postMessageToChild(MessageType.locale, country);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about language\r\n   */\r\n  public notifyChildAboutLanguage(language: string): void {\r\n    this.postMessageToChild(MessageType.language, language);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about action\r\n   */\r\n  public notifyChildAboutAction(action: string): void {\r\n    this.postMessageToChild(MessageType.action, action);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about navigation\r\n   */\r\n  public notifyChildAboutNavigation(url: string): void {\r\n    this.postMessageToChild(MessageType.navigation, url);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about current user\r\n   */\r\n  public postAuthenticationDataToChildren() {\r\n    const payload: User = this.authService.readUserFromSessionStorage();\r\n    this.postMessageToChild(MessageType.authentication, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected application theme\r\n   */\r\n  public postThemeToChildren(): void {\r\n    const theme = this.themeService.getCurrentTheme();\r\n    this.postMessageToChild(MessageType.theme, theme);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected language\r\n   */\r\n  public postLanguageToChildren(): void {\r\n    this.postMessageToChild(\r\n      MessageType.language,\r\n      this.translationManagementService.language\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected country\r\n   */\r\n  public postLocaleToChildren(): void {\r\n    const country = localStorage.getItem(\"country\");\r\n    this.postMessageToChild(MessageType.locale, country);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about redirection from idb\r\n   */\r\n  public postRedirectedFromLogIn(payload: boolean): void {\r\n    this.postMessageToChild(MessageType.redirectedFromLogIn, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends message to children about color scheme\r\n   */\r\n  public postColorSchemeToChildren(): void {\r\n    const computedStyle = window.getComputedStyle(document.body);\r\n    const productColor = computedStyle.getPropertyValue(\"--avl-product-color\");\r\n    const productHoverColor = computedStyle.getPropertyValue(\r\n      \"--avl-product-hover-color\"\r\n    );\r\n    const productFocusColor = computedStyle.getPropertyValue(\r\n      \"--avl-product-focus-color\"\r\n    );\r\n\r\n    const colorScheme: ColorScheme = {\r\n      \"--avl-product-color\": productColor,\r\n      \"--avl-product-hover-color\": productHoverColor,\r\n      \"--avl-product-focus-color\": productFocusColor,\r\n    };\r\n\r\n    this.postMessageToChild(MessageType.colorScheme, colorScheme);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleNavigation(navigation: string): void {\r\n    this.navigationSubject.next(navigation);\r\n  }\r\n\r\n  private handleLogin(login: string): void {\r\n    this.loginSubject.next(login);\r\n  }\r\n\r\n  // when child started its registration iframe is loaded and shell gets a message that he can send messages to iframe\r\n  private handleRegistration(): void {\r\n    this.iframeEl = document.getElementsByTagName(\r\n      \"iframe\"\r\n    )[0] as HTMLIFrameElement;\r\n\r\n    this.postThemeToChildren();\r\n    this.postColorSchemeToChildren();\r\n    this.postLanguageToChildren();\r\n    this.postLocaleToChildren();\r\n\r\n    this.registrationCompletedSubject.next(true);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    const { payload, messageType }: Message = event.data;\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log(\"Unrecognized message for the child.\", event),\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToChild(messageType: MessageType, payload: Payload): void {\r\n    if (!this.iframeEl) {\r\n      return;\r\n    }\r\n\r\n    const message: Message = { messageType, payload };\r\n    this.iframeEl.contentWindow?.postMessage(message, \"*\");\r\n  }\r\n\r\n  // when child updates user data, it has to reflect in user data in shell\r\n  private handleUser(user: User) {\r\n    if (user?.access_token) {\r\n      this.authService.storeUserToSessionStorage(user);\r\n    } else {\r\n      this.authService.clearUserFromSessionStorage();\r\n    }\r\n\r\n    this.authService.reloadPersistedUserData();\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\r\nimport { AvlAuthService } from '@avl-ng-controls/auth';\r\nimport { interval, Observable, Subject } from 'rxjs';\r\nimport { filter, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { Log, LogConfig, LogSeverity } from './logging.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoggingService implements OnDestroy {\r\n  private logs: Log[] = [];\r\n  private headers: HttpHeaders;\r\n  private isLogging = false;\r\n\r\n  private debounceTime$: Subject<number> = new Subject();\r\n  private logs$: Subject<Log[]> = new Subject();\r\n  private stopLogging$: Subject<void> = new Subject();\r\n  private postLogs$: Subject<void> = new Subject();\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('loggingConfig') private config: LogConfig,\r\n    @Optional() @Inject(AvlAuthService) private authService: AvlAuthService\r\n  ) {\r\n    this.headers = new HttpHeaders({\r\n      targetName: this.config.targetName,\r\n    });\r\n\r\n    if (config.autologging) {\r\n      this.authService?.isLoggedIn$.pipe(takeUntil(this.destroyed$)).subscribe((isLoggedIn) => this.decideOnLogging(isLoggedIn));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.postLogs$.complete();\r\n    this.debounceTime$.complete();\r\n    this.logs$.complete();\r\n    this.stopLogging$.next();\r\n    this.stopLogging$.complete();\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n  /**\r\n   * Starts periodical logging process.\r\n   * \r\n   * Depends on _debounceTime_ and _capacity_ properties.\r\n   */\r\n  public startLogging(): void {\r\n    this.isLogging = true;\r\n    this.debounceTime$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap((debounceTime) => this.periodicalLogging(debounceTime))\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.postLogs$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap(() => this.postMessages())\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.setLoggingDebounceTime(this.config.debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Stops logging process.\r\n   */\r\n  public stopLogging(): void {\r\n    this.isLogging = false;\r\n    this.postLogs();\r\n    this.stopLogging$.next();\r\n  }\r\n\r\n  /**\r\n   * Gets all currently queued logs as an observable value.\r\n   * @returns All currently queued logs as an observable value\r\n   */\r\n  public getLogs$(): Observable<Log[]> {\r\n    return this.logs$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Logs message with debug severity.\r\n   * @param message Message used for constructing a debug log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public debug(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Debug, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with info severity.\r\n   * @param message Message used for constructing a info log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public info(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Info, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with warning severity.\r\n   * @param message Message used for constructing a warning log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public warn(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Warning, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with error severity.\r\n   * @param message Message used for constructing a error log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public error(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Error, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with fatal severity.\r\n   * @param message Message used for constructing a fatal log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public fatal(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Fatal, componentName);\r\n  }\r\n\r\n  /**\r\n   * Setter for debounce time (log period).\r\n   * @param debounceTime Time in milliseconds; determines the period of API requests for logging\r\n   */\r\n  public setLoggingDebounceTime(debounceTime: number): void {\r\n    this.config.debounceTime = debounceTime;\r\n    this.debounceTime$.next(debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Setter for global log level.\r\n   * @param globalLogLevel Minimum message severity to log\r\n   */\r\n  public setGlobalLogLevel(globalLogLevel: LogSeverity): void {\r\n    this.config.globalLogLevel = globalLogLevel;\r\n  }\r\n\r\n  /**\r\n   * Setter for log queue capacity.\r\n   * @param capacity Log queue capacity\r\n   */\r\n  public setLogCapacity(capacity: number): void {\r\n    this.config.capacity = capacity;\r\n  }\r\n\r\n  // Logic, private methods\r\n\r\n  private log(message: string, severity: LogSeverity, componentName: string): void {\r\n    if (!this.isLogging || severity < this.config.globalLogLevel) {\r\n      return;\r\n    }\r\n\r\n    this.createAndStoreLog(message, severity, componentName);\r\n    this.dispatchLogs();\r\n\r\n    if (this.isFullCapacity()) {\r\n      this.postLogs$.next();\r\n    }\r\n  }\r\n\r\n  private createAndStoreLog(message: string, severityType: LogSeverity, componentName: string): void {\r\n    const timestamp = new Date().toISOString();\r\n    const { appName, version } = this.config;\r\n    const severity = severityType.toString();\r\n    const log: Log = { message, severity, timestamp, componentName, appName, version };\r\n    this.logs.push(log);\r\n  }\r\n\r\n  private isFullCapacity(): boolean {\r\n    return this.logs.length >= this.config.capacity;\r\n  }\r\n\r\n  private clearLogs(): void {\r\n    this.logs = [];\r\n  }\r\n\r\n  private onPostMessages(): void {\r\n    this.clearLogs();\r\n    this.dispatchLogs();\r\n  }\r\n\r\n  private postLogs(): void {\r\n    this.postLogs$.next();\r\n  }\r\n\r\n  private periodicalLogging(period: number): Observable<void> {\r\n    return interval(period).pipe(\r\n      tap(() => {\r\n        if (!this.logs.length) {\r\n          this.dispatchLogs();\r\n        }\r\n      }),\r\n      filter(() => !!this.logs.length),\r\n      switchMap(() => this.postMessages())\r\n    );\r\n  }\r\n\r\n  private postMessages(): Observable<void> {\r\n    return this.http.post<void>(this.config.endpoint, this.logs, {\r\n      headers: this.headers,\r\n    });\r\n  }\r\n\r\n  private dispatchLogs(): void {\r\n    this.logs$.next(this.logs);\r\n  }\r\n\r\n  private decideOnLogging(isLoggedIn: boolean): void {\r\n    if (isLoggedIn) {\r\n      this.startLogging();\r\n    } else {\r\n      this.stopLogging();\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { LogConfig } from './logging.model';\r\nimport { LoggingService } from './logging.service';\r\n\r\n@NgModule()\r\nexport class LoggingModule {\r\n  constructor(@Optional() @SkipSelf() parentModule?: LoggingModule) {\r\n    if (parentModule) {\r\n      throw new Error('LoggingModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n  static forRoot(config: LogConfig): ModuleWithProviders<LoggingModule> {\r\n    return {\r\n      ngModule: LoggingModule,\r\n      providers: [LoggingService, { provide: 'loggingConfig', useValue: config }],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport {\r\n  HubConnection,\r\n  HubConnectionBuilder,\r\n  HubConnectionState,\r\n  LogLevel\r\n} from '@microsoft/signalr';\r\n\r\nimport {\r\n  AvlNotification,\r\n  AvlNotificationConnectionOptions,\r\n  AvlNotificationMetadata\r\n} from '@avl-controls/interfaces';\r\n\r\ninterface ApplicationConnection {\r\n  /** Connection identifier */\r\n  readonly id: string;\r\n\r\n  /**\r\n   * Connection to the backend hub.\r\n   */\r\n  readonly connection: HubConnection;\r\n}\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n  private hubConnections: ApplicationConnection[] = [];\r\n  private notification: Subject<AvlNotification> = new Subject();\r\n\r\n  /**\r\n   * Observable which emits newly arrived notifications.\r\n   */\r\n  public notification$: Observable<AvlNotification> = this.notification;\r\n\r\n  /**\r\n   * Builds and starts signalR hub connection with the server.\r\n   * If connection already exists and is not connected, restarts the connection.\r\n   * @param endpoint server endpoint\r\n   * @param options options of the connection\r\n   */\r\n  public startConnection(endpoint: string, options: AvlNotificationConnectionOptions): void {\r\n    let connection = this.getConnectionByID(options.connectionID);\r\n    if (!connection) {\r\n      connection = this.buildConnection(endpoint, options);\r\n    }\r\n\r\n    if (connection.state === HubConnectionState.Connected) {\r\n      return;\r\n    }\r\n\r\n    connection\r\n      .start()\r\n      .then(() => this.startNotifications(connection, options.metadata))\r\n      .catch(() => console.warn('Notification service: Failed to establish connection.'));\r\n  }\r\n\r\n  /**\r\n   * Stops connection with the server\r\n   * @param connectionID connection identifier\r\n   */\r\n  public stopConnection(connectionID: string): void {\r\n    const connection = this.getConnectionByID(connectionID);\r\n\r\n    if (!connection) {\r\n      return;\r\n    }\r\n\r\n    connection.off('transferNotification');\r\n    connection.stop();\r\n  }\r\n\r\n  /**\r\n   * Removes connection entirely\r\n   * @param connectionID connection identifier\r\n   */\r\n  public removeConnection(connectionID: string): void {\r\n    this.stopConnection(connectionID);\r\n\r\n    const index = this.hubConnections.findIndex(connection => connection.id === connectionID);\r\n    if (index !== -1) {\r\n      this.hubConnections.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates notifications metadata for specific connection. Notifies server about it.\r\n   * @param connectionID connection identifier\r\n   * @param metadata notification metadata, (e.g language)\r\n   */\r\n  public updateNotifications(connectionID: string, metadata: AvlNotificationMetadata): void {\r\n    const connection = this.getConnectionByID(connectionID);\r\n    if (!connection) {\r\n      return;\r\n    }\r\n\r\n    this.startNotifications(connection, metadata);\r\n  }\r\n\r\n  // Private methods\r\n\r\n  private startNotifications(connection: HubConnection, metadata: AvlNotificationMetadata): void {\r\n    connection.invoke('startNotifications', metadata);\r\n  }\r\n\r\n  private getConnectionByID(connectionID: string): HubConnection {\r\n    const index = this.hubConnections.findIndex(connection => connection.id === connectionID);\r\n    return this.hubConnections[index]?.connection;\r\n  }\r\n\r\n  private buildConnection(\r\n    endpoint: string,\r\n    options: AvlNotificationConnectionOptions\r\n  ): HubConnection {\r\n    const hubConnection = new HubConnectionBuilder()\r\n      .configureLogging(LogLevel.None)\r\n      .withUrl(endpoint)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    hubConnection.onreconnected(() => this.startNotifications(hubConnection, options.metadata));\r\n    hubConnection.on('transferNotification', (notification: AvlNotification) => {\r\n      this.notification.next(notification);\r\n    });\r\n\r\n    this.hubConnections.push({\r\n      id: options.connectionID,\r\n      connection: hubConnection\r\n    });\r\n\r\n    return hubConnection;\r\n  }\r\n}\r\n"]}