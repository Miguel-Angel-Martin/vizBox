{"version":3,"file":"avl-services-ng-services.js","sources":["ng:/@avl-services/ng-services/lib/message.model.ts","ng:/@avl-services/ng-services/lib/shell-communication.service.ts","ng:/@avl-services/ng-services/lib/translation-management.service.ts","ng:/@avl-services/ng-services/lib/theme.service.ts","ng:/@avl-services/ng-services/lib/child-communication.service.ts","ng:/@avl-services/ng-services/lib/logging.model.ts","ng:/@avl-services/ng-services/lib/logging.service.ts","ng:/@avl-services/ng-services/lib/logging.module.ts","ng:/@avl-services/ng-services/lib/notification.service.ts","ng:/@avl-services/ng-services/public-api.ts","ng:/@avl-services/ng-services/avl-services-ng-services.ts"],"names":["uuidv4"],"mappings":"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","sourcesContent":["import { User } from '@avl-ng-controls/auth';\r\n\r\nexport enum MessageType {\r\n  action = 'action',\r\n  colorScheme = 'colorScheme',\r\n  language = 'language',\r\n  locale = 'locale',\r\n  navigation = 'navigation',\r\n  registration = 'registration',\r\n  theme = 'theme',\r\n  login = 'login',\r\n  authentication = 'authentication',\r\n  redirectedFromLogIn = 'redirectedFromLogIn',\r\n  user = 'user'\r\n}\r\n\r\nexport interface Message {\r\n  messageType: MessageType;\r\n  payload: Payload;\r\n}\r\n\r\nexport type Payload = string | ColorScheme | User | boolean;\r\n\r\nexport interface MessageHandlers {\r\n  [key: string]: (payload: Payload) => void;\r\n}\r\nexport interface ColorScheme {\r\n  '--avl-product-color': string;\r\n  '--avl-product-hover-color': string;\r\n  '--avl-product-focus-color': string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ColorScheme, Message, MessageHandlers, MessageType, Payload } from './message.model';\r\nimport { AvlAuthService, User } from '@avl-ng-controls/auth';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShellCommunicationService {\r\n  private readonly id: string;\r\n\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.theme]: (theme: string) => this.handleTheme(theme),\r\n    [MessageType.locale]: (locale: string) => this.handleLocale(locale),\r\n    [MessageType.language]: (language: string) => this.handleLanguage(language),\r\n    [MessageType.colorScheme]: (colorScheme: ColorScheme) => this.handleColorScheme(colorScheme),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.authentication]: (user: User) => this.handleAuthentication(user),\r\n    [MessageType.redirectedFromLogIn]: (redirected: boolean) => this.handleRedirectedFromLogIn(redirected),\r\n  };\r\n\r\n  private themeSubject = new Subject<string>();\r\n  private languageSubject = new Subject<string>();\r\n  private actionSubject = new Subject<string>();\r\n  private localeSubject = new Subject<string>();\r\n  private colorSchemeSubject = new Subject<ColorScheme>();\r\n\r\n  /**\r\n  * Observable tracking theme\r\n  * Emits \"dark\" if dark theme selected, \"light\" otherwise \r\n  */\r\n  public theme$: Observable<string> = this.themeSubject;\r\n\r\n  /**\r\n  * Observable tracking language\r\n  */\r\n  public language$: Observable<string> = this.languageSubject;\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n  * Observable tracking country changes\r\n  */\r\n  public locale$: Observable<string> = this.localeSubject;\r\n\r\n  /**\r\n  * Observable tracking color scheme changes\r\n  */\r\n  public colorScheme$: Observable<ColorScheme> = this.colorSchemeSubject;\r\n\r\n  /**\r\n  * Observable tracking login state\r\n  * Resolves to true on successful login, false otherwise\r\n  */\r\n  public isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n  \r\n  /**\r\n   * If current application is inside shell application \r\n   * True if current application is inside shell application, false otherwise.\r\n   */\r\n  public isChild = window.location !== window.parent.location;\r\n  \r\n  constructor(private router: Router, private authService: AvlAuthService) {\r\n    window.addEventListener('message', (event) => this.onMessage(event));\r\n    \r\n    this.id = uuidv4();\r\n  }\r\n  \r\n  public notifyShellAboutAction(action: string): void {\r\n    this.postMessageToShell(MessageType.action, action);\r\n  }\r\n  \r\n  /**\r\n   * Sends message to shell that it needs to navigate to login page\r\n   */\r\n  public notifyShellAboutLogin(url: string): void {\r\n    this.postMessageToShell(MessageType.login, url);\r\n  }\r\n  \r\n  /**\r\n   * Sends message to shell that it needs to navigate to @url\r\n   */\r\n  public notifyShellAboutNavigation(url: string): void {\r\n    this.postMessageToShell(MessageType.navigation, url);\r\n  }\r\n  \r\n  /**\r\n   * Sends registration message to shell \r\n   */\r\n  public registerToShell(): void {\r\n    this.postMessageToShell(MessageType.registration, this.id);\r\n  }\r\n\r\n  /**\r\n  * Send updated user data to shell\r\n  */\r\n  public updateUserToShell(): void {\r\n    const user = this.authService.readUserFromSessionStorage();\r\n    this.postMessageToShell(MessageType.user, user);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    const { payload, messageType }: Message = event.data;\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log('Unrecognized message for the shell.', event)\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToShell(messageType: MessageType, payload: Payload): void {\r\n    const message: Message = { messageType, payload };\r\n    window.parent.window.postMessage(message, '*');\r\n  }\r\n\r\n  private handleColorScheme(colorScheme: ColorScheme): void {\r\n    this.colorSchemeSubject.next(colorScheme);\r\n  }\r\n\r\n  private handleLanguage(language: string): void {\r\n    this.languageSubject.next(language);\r\n  }\r\n\r\n  private handleLocale(locale: string): void {\r\n    this.localeSubject.next(locale);\r\n  }\r\n\r\n  private handleTheme(theme: string): void {\r\n    this.themeSubject.next(theme);\r\n  }\r\n\r\n  private handleNavigation(url: string): void {\r\n    this.router.navigateByUrl(url);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleAuthentication(user: User): void {\r\n    if (user?.access_token) {\r\n      this.authService.storeUserToSessionStorage(user);\r\n    } else {\r\n      this.authService.clearUserFromSessionStorage();\r\n    }\r\n\r\n    this.authService.reloadPersistedUserData();\r\n  }\r\n\r\n  private handleRedirectedFromLogIn(redirected: boolean) {\r\n    this.redirectedFromLogIn.next(redirected);\r\n  }\r\n}\r\n","/// <reference types=\"@avl-controls/core\" />\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgxTranslateTranslationService } from '@avl-controls/ng-binders';\r\nimport '@avl-controls/core/dist/avl-localization-service/avl-localization-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationManagementService {\r\n  constructor(private translateService: TranslateService, private translationService: NgxTranslateTranslationService) {\r\n  }\r\n\r\n  public languages = [\r\n    { code: 'en', label: 'English' },\r\n    { code: 'hr', label: 'Croatian' },\r\n  ];\r\n\r\n  public initializeTranslations(): () => Promise<any> {\r\n    return () => {\r\n      AvlLocalizationService.translationService = this.translationService;\r\n      let lang = localStorage.getItem('lang');\r\n      if (lang == null) {\r\n        lang = this.languages[0].code;\r\n        localStorage.setItem('lang', lang);\r\n      }\r\n      return this.translateService.use(lang).toPromise();\r\n    };\r\n  }\r\n  public get language(): string {\r\n    return localStorage.getItem('lang');\r\n  }\r\n\r\n  public changeLanguage(lang: string) {\r\n    const oldLang = localStorage.getItem('lang');\r\n    if (!oldLang || oldLang !== lang) {\r\n      localStorage.setItem('lang', lang);\r\n      location.reload();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n\r\n  private _isDarkTheme: boolean;\r\n\r\n  public get isDarkTheme(): boolean {\r\n    if (this._isDarkTheme == null) {\r\n      this._isDarkTheme = localStorage.getItem('theme') === 'dark' || false;\r\n    }\r\n    return this._isDarkTheme;\r\n  }\r\n  public set isDarkTheme(newValue: boolean) {\r\n    this._isDarkTheme = newValue;\r\n    localStorage.setItem('theme', newValue === true ? 'dark' : 'light');\r\n    this.themeChangedSubject.next(this.getCurrentTheme());\r\n    this.changeTheme();\r\n  }\r\n\r\n  private themeChangedSubject = new Subject<string>();\r\n  public readonly themeChanged = this.themeChangedSubject.asObservable();\r\n\r\n  public getCurrentTheme(): string {\r\n    return this.isDarkTheme ? 'dark' : 'light';\r\n  }\r\n\r\n  private changeTheme() {\r\n    document.body.setAttribute('theme', this.getCurrentTheme());\r\n  }\r\n\r\n  constructor() {\r\n    this.changeTheme();\r\n  }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { TranslationManagementService } from \"./translation-management.service\";\r\nimport { ThemeService } from \"./theme.service\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport {\r\n  ColorScheme,\r\n  Message,\r\n  MessageHandlers,\r\n  MessageType,\r\n  Payload,\r\n} from \"./message.model\";\r\nimport { AvlAuthService, User } from '@avl-ng-controls/auth';\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ChildCommunicationService {\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.login]: (url: string) => this.handleLogin(url),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.registration]: (_) => this.handleRegistration(),\r\n    [MessageType.user]: (user: User) => this.handleUser(user),\r\n  };\r\n\r\n  private actionSubject = new Subject<string>();\r\n  private navigationSubject = new Subject<string>();\r\n  private loginSubject = new Subject<string>();\r\n  private registrationCompletedSubject = new Subject<boolean>();\r\n\r\n  protected iframeEl: HTMLIFrameElement;\r\n\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n   * Observable tracking url to navigate to\r\n   */\r\n  public navigation$: Observable<string> = this.navigationSubject;\r\n\r\n  /**\r\n   * Observable tracking url for login\r\n   * Url for login provided by child application\r\n   */\r\n  public login$: Observable<string> = this.loginSubject;\r\n\r\n  /**\r\n   * Observable tracking child registration\r\n   * Emits true if registration was successful, false otherwise\r\n   */\r\n  public registrationCompleted$: Observable<boolean> = this\r\n    .registrationCompletedSubject;\r\n\r\n  constructor(\r\n    private translationManagementService: TranslationManagementService,\r\n    private themeService: ThemeService,\r\n    private authService: AvlAuthService\r\n  ) {\r\n    window.addEventListener(\"message\", (event) => this.onMessage(event));\r\n    this.themeService.themeChanged.subscribe(() => this.postThemeToChildren());\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about locale\r\n   */\r\n  public notifyChildAboutLocale(country: string): void {\r\n    this.postMessageToChild(MessageType.locale, country);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about language\r\n   */\r\n  public notifyChildAboutLanguage(language: string): void {\r\n    this.postMessageToChild(MessageType.language, language);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about action\r\n   */\r\n  public notifyChildAboutAction(action: string): void {\r\n    this.postMessageToChild(MessageType.action, action);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about navigation\r\n   */\r\n  public notifyChildAboutNavigation(url: string): void {\r\n    this.postMessageToChild(MessageType.navigation, url);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about current user\r\n   */\r\n  public postAuthenticationDataToChildren() {\r\n    const payload: User = this.authService.readUserFromSessionStorage();\r\n    this.postMessageToChild(MessageType.authentication, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected application theme\r\n   */\r\n  public postThemeToChildren(): void {\r\n    const theme = this.themeService.getCurrentTheme();\r\n    this.postMessageToChild(MessageType.theme, theme);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected language\r\n   */\r\n  public postLanguageToChildren(): void {\r\n    this.postMessageToChild(\r\n      MessageType.language,\r\n      this.translationManagementService.language\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected country\r\n   */\r\n  public postLocaleToChildren(): void {\r\n    const country = localStorage.getItem(\"country\");\r\n    this.postMessageToChild(MessageType.locale, country);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about redirection from idb\r\n   */\r\n  public postRedirectedFromLogIn(payload: boolean): void {\r\n    this.postMessageToChild(MessageType.redirectedFromLogIn, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends message to children about color scheme\r\n   */\r\n  public postColorSchemeToChildren(): void {\r\n    const computedStyle = window.getComputedStyle(document.body);\r\n    const productColor = computedStyle.getPropertyValue(\"--avl-product-color\");\r\n    const productHoverColor = computedStyle.getPropertyValue(\r\n      \"--avl-product-hover-color\"\r\n    );\r\n    const productFocusColor = computedStyle.getPropertyValue(\r\n      \"--avl-product-focus-color\"\r\n    );\r\n\r\n    const colorScheme: ColorScheme = {\r\n      \"--avl-product-color\": productColor,\r\n      \"--avl-product-hover-color\": productHoverColor,\r\n      \"--avl-product-focus-color\": productFocusColor,\r\n    };\r\n\r\n    this.postMessageToChild(MessageType.colorScheme, colorScheme);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleNavigation(navigation: string): void {\r\n    this.navigationSubject.next(navigation);\r\n  }\r\n\r\n  private handleLogin(login: string): void {\r\n    this.loginSubject.next(login);\r\n  }\r\n\r\n  // when child started its registration iframe is loaded and shell gets a message that he can send messages to iframe\r\n  private handleRegistration(): void {\r\n    this.iframeEl = document.getElementsByTagName(\r\n      \"iframe\"\r\n    )[0] as HTMLIFrameElement;\r\n\r\n    this.postThemeToChildren();\r\n    this.postColorSchemeToChildren();\r\n    this.postLanguageToChildren();\r\n    this.postLocaleToChildren();\r\n\r\n    this.registrationCompletedSubject.next(true);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    const { payload, messageType }: Message = event.data;\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log(\"Unrecognized message for the child.\", event),\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToChild(messageType: MessageType, payload: Payload): void {\r\n    if (!this.iframeEl) {\r\n      return;\r\n    }\r\n\r\n    const message: Message = { messageType, payload };\r\n    this.iframeEl.contentWindow?.postMessage(message, \"*\");\r\n  }\r\n\r\n  // when child updates user data, it has to reflect in user data in shell\r\n  private handleUser(user: User) {\r\n    if (user?.access_token) {\r\n      this.authService.storeUserToSessionStorage(user);\r\n    } else {\r\n      this.authService.clearUserFromSessionStorage();\r\n    }\r\n\r\n    this.authService.reloadPersistedUserData();\r\n  }\r\n}\r\n","/**\r\n * List of all types of messages that can be logged.\r\n */\r\nexport enum LogSeverity {\r\n  Debug,\r\n  Info,\r\n  Warning,\r\n  Error,\r\n  Fatal,\r\n}\r\n\r\n/**\r\n * **LogConfig** class is required by the _LoggingModule_.\r\n * \r\n * An instance of this class should be passed into _forRoot_ method of _LoggingModule_\r\n * when importing module in the Angular application.\r\n * ```\r\n * import logConfig from 'logging.config.ts;\r\n * import LoggingModule from '@avl-services/ng-services';\r\n *  ....\r\n *  @NgModule({\r\n *    imports: [\r\n *      LoggingModule.forRoot(logConfig),\r\n *      ...\r\n *    ],\r\n *    ...\r\n *  }) export class AppModule {}\r\n * ```\r\n */\r\nexport class LogConfig {\r\n  /**\r\n   * API endpoint for logging (e.g. https://vizbox.avl.com/api/theia/logs).\r\n   * - Mandatory\r\n   */\r\n  public readonly endpoint: string;\r\n\r\n  /**\r\n   * Name of the database in which logs will be stored.\r\n   * - Mandatory\r\n   */\r\n  public readonly targetName: string;\r\n\r\n  /**\r\n   * Name of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly appName: string;\r\n\r\n  /**\r\n   * Version of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly version: string;\r\n\r\n  /**\r\n   * Flag that indicates whether logging starts automatically once the user logs in using credential.\r\n   * \r\n   * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:\r\n   * ```\r\n   * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }\r\n   * ```\r\n   * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).\r\n   * \r\n   * - Optional\r\n   * - Default: false\r\n   */\r\n  public autologging: boolean = false;\r\n\r\n  /**\r\n   * Minimum message severity to log.\r\n   * - Optional\r\n   * - Default: LogSeverity.Info\r\n   */\r\n  public globalLogLevel: LogSeverity = LogSeverity.Info;\r\n\r\n  /**\r\n   * Time in milliseconds, determines the period of API requests for logging.\r\n   * - Optional\r\n   * - Default: 30_000 ms\r\n   */\r\n  public debounceTime: number = 30_000;\r\n\r\n  /**\r\n   * Log queue capacity  \r\n   * \r\n   * If reached, API request is sent with all logs in log queue, and queue is cleared out.\r\n   * - Optional\r\n   * - Default: 10\r\n   */\r\n  public capacity: number = 10;\r\n\r\n  /**\r\n   * Creates instance of _LogConfig_ class.\r\n   * @param endpoint API endpoint for logging.\r\n   * @param targetName Name of the database in which logs will be stored\r\n   * @param appName Name of the application that uses the logging service\r\n   * @param version Version of the application that uses the logging service\r\n   * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false\r\n   * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info\r\n   * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms\r\n   * @param capacity Log queue capacity. Default: 10\r\n   */\r\n  constructor(\r\n    endpoint: string,\r\n    targetName: string,\r\n    appName: string,\r\n    version: string,\r\n    autologging: boolean = false,\r\n    globalLogLevel: LogSeverity = LogSeverity.Info,\r\n    debounceTime: number = 30_000,\r\n    capacity: number = 10\r\n  ) {\r\n    this.endpoint = endpoint;\r\n    this.targetName = targetName;\r\n    this.appName = appName;\r\n    this.version = version;\r\n    this.autologging = autologging;\r\n    this.globalLogLevel = globalLogLevel;\r\n    this.debounceTime = debounceTime;\r\n    this.capacity = capacity;\r\n  }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface Log {\r\n  readonly appName?: string;\r\n  readonly componentName?: string;\r\n  readonly severity?: string;\r\n  readonly message?: string;\r\n  readonly procId?: string;\r\n  readonly timestamp?: string;\r\n  readonly version?: string;\r\n  readonly AVLRequestId?: string;\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\r\nimport { AvlAuthService } from '@avl-ng-controls/auth';\r\nimport { interval, Observable, Subject } from 'rxjs';\r\nimport { filter, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { Log, LogConfig, LogSeverity } from './logging.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoggingService implements OnDestroy {\r\n  private logs: Log[] = [];\r\n  private headers: HttpHeaders;\r\n  private isLogging = false;\r\n\r\n  private debounceTime$: Subject<number> = new Subject();\r\n  private logs$: Subject<Log[]> = new Subject();\r\n  private stopLogging$: Subject<void> = new Subject();\r\n  private postLogs$: Subject<void> = new Subject();\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('loggingConfig') private config: LogConfig,\r\n    @Optional() @Inject(AvlAuthService) private authService: AvlAuthService\r\n  ) {\r\n    this.headers = new HttpHeaders({\r\n      targetName: this.config.targetName,\r\n    });\r\n\r\n    if (config.autologging) {\r\n      this.authService?.isLoggedIn$.pipe(takeUntil(this.destroyed$)).subscribe((isLoggedIn) => this.decideOnLogging(isLoggedIn));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.postLogs$.complete();\r\n    this.debounceTime$.complete();\r\n    this.logs$.complete();\r\n    this.stopLogging$.next();\r\n    this.stopLogging$.complete();\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n  /**\r\n   * Starts periodical logging process.\r\n   * \r\n   * Depends on _debounceTime_ and _capacity_ properties.\r\n   */\r\n  public startLogging(): void {\r\n    this.isLogging = true;\r\n    this.debounceTime$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap((debounceTime) => this.periodicalLogging(debounceTime))\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.postLogs$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap(() => this.postMessages())\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.setLoggingDebounceTime(this.config.debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Stops logging process.\r\n   */\r\n  public stopLogging(): void {\r\n    this.isLogging = false;\r\n    this.postLogs();\r\n    this.stopLogging$.next();\r\n  }\r\n\r\n  /**\r\n   * Gets all currently queued logs as an observable value.\r\n   * @returns All currently queued logs as an observable value\r\n   */\r\n  public getLogs$(): Observable<Log[]> {\r\n    return this.logs$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Logs message with debug severity.\r\n   * @param message Message used for constructing a debug log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public debug(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Debug, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with info severity.\r\n   * @param message Message used for constructing a info log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public info(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Info, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with warning severity.\r\n   * @param message Message used for constructing a warning log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public warn(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Warning, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with error severity.\r\n   * @param message Message used for constructing a error log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public error(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Error, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with fatal severity.\r\n   * @param message Message used for constructing a fatal log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public fatal(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Fatal, componentName);\r\n  }\r\n\r\n  /**\r\n   * Setter for debounce time (log period).\r\n   * @param debounceTime Time in milliseconds; determines the period of API requests for logging\r\n   */\r\n  public setLoggingDebounceTime(debounceTime: number): void {\r\n    this.config.debounceTime = debounceTime;\r\n    this.debounceTime$.next(debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Setter for global log level.\r\n   * @param globalLogLevel Minimum message severity to log\r\n   */\r\n  public setGlobalLogLevel(globalLogLevel: LogSeverity): void {\r\n    this.config.globalLogLevel = globalLogLevel;\r\n  }\r\n\r\n  /**\r\n   * Setter for log queue capacity.\r\n   * @param capacity Log queue capacity\r\n   */\r\n  public setLogCapacity(capacity: number): void {\r\n    this.config.capacity = capacity;\r\n  }\r\n\r\n  // Logic, private methods\r\n\r\n  private log(message: string, severity: LogSeverity, componentName: string): void {\r\n    if (!this.isLogging || severity < this.config.globalLogLevel) {\r\n      return;\r\n    }\r\n\r\n    this.createAndStoreLog(message, severity, componentName);\r\n    this.dispatchLogs();\r\n\r\n    if (this.isFullCapacity()) {\r\n      this.postLogs$.next();\r\n    }\r\n  }\r\n\r\n  private createAndStoreLog(message: string, severityType: LogSeverity, componentName: string): void {\r\n    const timestamp = new Date().toISOString();\r\n    const { appName, version } = this.config;\r\n    const severity = severityType.toString();\r\n    const log: Log = { message, severity, timestamp, componentName, appName, version };\r\n    this.logs.push(log);\r\n  }\r\n\r\n  private isFullCapacity(): boolean {\r\n    return this.logs.length >= this.config.capacity;\r\n  }\r\n\r\n  private clearLogs(): void {\r\n    this.logs = [];\r\n  }\r\n\r\n  private onPostMessages(): void {\r\n    this.clearLogs();\r\n    this.dispatchLogs();\r\n  }\r\n\r\n  private postLogs(): void {\r\n    this.postLogs$.next();\r\n  }\r\n\r\n  private periodicalLogging(period: number): Observable<void> {\r\n    return interval(period).pipe(\r\n      tap(() => {\r\n        if (!this.logs.length) {\r\n          this.dispatchLogs();\r\n        }\r\n      }),\r\n      filter(() => !!this.logs.length),\r\n      switchMap(() => this.postMessages())\r\n    );\r\n  }\r\n\r\n  private postMessages(): Observable<void> {\r\n    return this.http.post<void>(this.config.endpoint, this.logs, {\r\n      headers: this.headers,\r\n    });\r\n  }\r\n\r\n  private dispatchLogs(): void {\r\n    this.logs$.next(this.logs);\r\n  }\r\n\r\n  private decideOnLogging(isLoggedIn: boolean): void {\r\n    if (isLoggedIn) {\r\n      this.startLogging();\r\n    } else {\r\n      this.stopLogging();\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { LogConfig } from './logging.model';\r\nimport { LoggingService } from './logging.service';\r\n\r\n@NgModule()\r\nexport class LoggingModule {\r\n  constructor(@Optional() @SkipSelf() parentModule?: LoggingModule) {\r\n    if (parentModule) {\r\n      throw new Error('LoggingModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n  static forRoot(config: LogConfig): ModuleWithProviders<LoggingModule> {\r\n    return {\r\n      ngModule: LoggingModule,\r\n      providers: [LoggingService, { provide: 'loggingConfig', useValue: config }],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport {\r\n  HubConnection,\r\n  HubConnectionBuilder,\r\n  HubConnectionState,\r\n  LogLevel\r\n} from '@microsoft/signalr';\r\n\r\nimport {\r\n  AvlNotification,\r\n  AvlNotificationConnectionOptions,\r\n  AvlNotificationMetadata\r\n} from '@avl-controls/interfaces';\r\n\r\ninterface ApplicationConnection {\r\n  /** Connection identifier */\r\n  readonly id: string;\r\n\r\n  /**\r\n   * Connection to the backend hub.\r\n   */\r\n  readonly connection: HubConnection;\r\n}\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n  private hubConnections: ApplicationConnection[] = [];\r\n  private notification: Subject<AvlNotification> = new Subject();\r\n\r\n  /**\r\n   * Observable which emits newly arrived notifications.\r\n   */\r\n  public notification$: Observable<AvlNotification> = this.notification;\r\n\r\n  /**\r\n   * Builds and starts signalR hub connection with the server.\r\n   * If connection already exists and is not connected, restarts the connection.\r\n   * @param endpoint server endpoint\r\n   * @param options options of the connection\r\n   */\r\n  public startConnection(endpoint: string, options: AvlNotificationConnectionOptions): void {\r\n    let connection = this.getConnectionByID(options.connectionID);\r\n    if (!connection) {\r\n      connection = this.buildConnection(endpoint, options);\r\n    }\r\n\r\n    if (connection.state === HubConnectionState.Connected) {\r\n      return;\r\n    }\r\n\r\n    connection\r\n      .start()\r\n      .then(() => this.startNotifications(connection, options.metadata))\r\n      .catch(() => console.warn('Notification service: Failed to establish connection.'));\r\n  }\r\n\r\n  /**\r\n   * Stops connection with the server\r\n   * @param connectionID connection identifier\r\n   */\r\n  public stopConnection(connectionID: string): void {\r\n    const connection = this.getConnectionByID(connectionID);\r\n\r\n    if (!connection) {\r\n      return;\r\n    }\r\n\r\n    connection.off('transferNotification');\r\n    connection.stop();\r\n  }\r\n\r\n  /**\r\n   * Removes connection entirely\r\n   * @param connectionID connection identifier\r\n   */\r\n  public removeConnection(connectionID: string): void {\r\n    this.stopConnection(connectionID);\r\n\r\n    const index = this.hubConnections.findIndex(connection => connection.id === connectionID);\r\n    if (index !== -1) {\r\n      this.hubConnections.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates notifications metadata for specific connection. Notifies server about it.\r\n   * @param connectionID connection identifier\r\n   * @param metadata notification metadata, (e.g language)\r\n   */\r\n  public updateNotifications(connectionID: string, metadata: AvlNotificationMetadata): void {\r\n    const connection = this.getConnectionByID(connectionID);\r\n    if (!connection) {\r\n      return;\r\n    }\r\n\r\n    this.startNotifications(connection, metadata);\r\n  }\r\n\r\n  // Private methods\r\n\r\n  private startNotifications(connection: HubConnection, metadata: AvlNotificationMetadata): void {\r\n    connection.invoke('startNotifications', metadata);\r\n  }\r\n\r\n  private getConnectionByID(connectionID: string): HubConnection {\r\n    const index = this.hubConnections.findIndex(connection => connection.id === connectionID);\r\n    return this.hubConnections[index]?.connection;\r\n  }\r\n\r\n  private buildConnection(\r\n    endpoint: string,\r\n    options: AvlNotificationConnectionOptions\r\n  ): HubConnection {\r\n    const hubConnection = new HubConnectionBuilder()\r\n      .configureLogging(LogLevel.None)\r\n      .withUrl(endpoint)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    hubConnection.onreconnected(() => this.startNotifications(hubConnection, options.metadata));\r\n    hubConnection.on('transferNotification', (notification: AvlNotification) => {\r\n      this.notification.next(notification);\r\n    });\r\n\r\n    this.hubConnections.push({\r\n      id: options.connectionID,\r\n      connection: hubConnection\r\n    });\r\n\r\n    return hubConnection;\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ng-services\r\n */\r\n\r\nexport * from './lib/shell-communication.service';\r\nexport * from './lib/child-communication.service';\r\nexport * from './lib/translation-management.service';\r\nexport * from './lib/theme.service';\r\nexport * from './lib/message.model';\r\nexport * from './lib/logging.module';\r\nexport * from './lib/logging.service';\r\nexport * from './lib/logging.model';\r\nexport * from './lib/notification.service';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}