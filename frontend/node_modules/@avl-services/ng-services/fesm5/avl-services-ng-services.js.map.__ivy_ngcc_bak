{"version":3,"file":"avl-services-ng-services.js","sources":["ng://@avl-services/ng-services/lib/message.model.ts","ng://@avl-services/ng-services/lib/shell-communication.service.ts","ng://@avl-services/ng-services/lib/translation-management.service.ts","ng://@avl-services/ng-services/lib/theme.service.ts","ng://@avl-services/ng-services/lib/child-communication.service.ts","ng://@avl-services/ng-services/lib/logging.model.ts","ng://@avl-services/ng-services/lib/logging.service.ts","ng://@avl-services/ng-services/lib/logging.module.ts","ng://@avl-services/ng-services/public-api.ts","ng://@avl-services/ng-services/avl-services-ng-services.ts"],"sourcesContent":["export interface User {\r\n  username: string;\r\n  name?: string;\r\n\r\n  access_token?: string;\r\n  access_token_expires_at?: number;\r\n  access_token_stored_at?: number;\r\n\r\n  refresh_token?: string;\r\n  refresh_token_expires_at?: number;\r\n\r\n  id_token?: string;\r\n  id_token_expires_at?: number;\r\n\r\n  roles?: string[];\r\n}\r\n\r\nexport enum MessageType {\r\n  action = 'action',\r\n  colorScheme = 'colorScheme',\r\n  language = 'language',\r\n  locale = 'locale',\r\n  navigation = 'navigation',\r\n  registration = 'registration',\r\n  theme = 'theme',\r\n  login = 'login',\r\n  authentication = 'authentication',\r\n  redirectedFromLogIn = 'redirectedFromLogIn'\r\n}\r\n\r\nexport interface Message {\r\n  messageType: MessageType;\r\n  payload: Payload;\r\n}\r\n\r\nexport type Payload = string | ColorScheme | User | boolean;\r\n\r\nexport interface MessageHandlers {\r\n  [key: string]: (payload: Payload) => void;\r\n}\r\nexport interface ColorScheme {\r\n  '--avl-product-color': string;\r\n  '--avl-product-hover-color': string;\r\n  '--avl-product-focus-color': string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ColorScheme, Message, MessageHandlers, MessageType, Payload, User } from './message.model';\r\nimport { AvlAuthService } from '@avl-ng-controls/auth';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShellCommunicationService {\r\n  private readonly id: string;\r\n\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.theme]: (theme: string) => this.handleTheme(theme),\r\n    [MessageType.locale]: (locale: string) => this.handleLocale(locale),\r\n    [MessageType.language]: (language: string) => this.handleLanguage(language),\r\n    [MessageType.colorScheme]: (colorScheme: ColorScheme) => this.handleColorScheme(colorScheme),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.authentication]: (user: User) => this.handleAuthentication(user),\r\n    [MessageType.redirectedFromLogIn]: (redirected: boolean) => this.handleRedirectedFromLogIn(redirected),\r\n  };\r\n\r\n  private themeSubject = new Subject<string>();\r\n  private languageSubject = new Subject<string>();\r\n  private actionSubject = new Subject<string>();\r\n  private localeSubject = new Subject<string>();\r\n  private colorSchemeSubject = new Subject<ColorScheme>();\r\n\r\n  /**\r\n  * Observable tracking theme\r\n  * Emits \"dark\" if dark theme selected, \"light\" otherwise \r\n  */\r\n  public theme$: Observable<string> = this.themeSubject;\r\n\r\n  /**\r\n  * Observable tracking language\r\n  */\r\n  public language$: Observable<string> = this.languageSubject;\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n  * Observable tracking country changes\r\n  */\r\n  public locale$: Observable<string> = this.localeSubject;\r\n\r\n  /**\r\n  * Observable tracking color scheme changes\r\n  */\r\n  public colorScheme$: Observable<ColorScheme> = this.colorSchemeSubject;\r\n\r\n  /**\r\n  * Observable tracking login state\r\n  * Resolves to true on successful login, false otherwise\r\n  */\r\n  public isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n  \r\n  /**\r\n   * If current application is inside shell application \r\n   * True if current application is inside shell application, false otherwise.\r\n   */\r\n  public isChild = window.location !== window.parent.location;\r\n  \r\n  constructor(private router: Router, private authService: AvlAuthService) {\r\n    window.addEventListener('message', (event) => this.onMessage(event));\r\n    \r\n    this.id = uuidv4();\r\n  }\r\n  \r\n  public notifyShellAboutAction(action: string): void {\r\n    this.postMessageToShell(MessageType.action, action);\r\n  }\r\n  \r\n  /**\r\n   * Sends message to shell that it needs to navigate to login page\r\n   */\r\n  public notifyShellAboutLogin(url: string): void {\r\n    this.postMessageToShell(MessageType.login, url);\r\n  }\r\n  \r\n  /**\r\n   * Sends message to shell that it needs to navigate to @url\r\n   */\r\n  public notifyShellAboutNavigation(url: string): void {\r\n    this.postMessageToShell(MessageType.navigation, url);\r\n  }\r\n  \r\n  /**\r\n   * Sends registration message to shell \r\n   */\r\n  public registerToShell(): void {\r\n    this.postMessageToShell(MessageType.registration, this.id);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    const { payload, messageType }: Message = event.data;\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log('Unrecognized message for the shell.', event)\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToShell(messageType: MessageType, payload: Payload): void {\r\n    const message: Message = { messageType, payload };\r\n    window.parent.window.postMessage(message, '*');\r\n  }\r\n\r\n  private handleColorScheme(colorScheme: ColorScheme): void {\r\n    this.colorSchemeSubject.next(colorScheme);\r\n  }\r\n\r\n  private handleLanguage(language: string): void {\r\n    this.languageSubject.next(language);\r\n  }\r\n\r\n  private handleLocale(locale: string): void {\r\n    this.localeSubject.next(locale);\r\n  }\r\n\r\n  private handleTheme(theme: string): void {\r\n    this.themeSubject.next(theme);\r\n  }\r\n\r\n  private handleNavigation(url: string): void {\r\n    this.router.navigateByUrl(url);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleAuthentication(user: User): void {\r\n    if (user?.access_token) {\r\n      this.setUserToSessionStorage(user);\r\n    } else {\r\n      this.removeUserFromSessionStorage();\r\n    }\r\n\r\n    this.authService.reloadPersistedUserData();\r\n  }\r\n\r\n  private handleRedirectedFromLogIn(redirected: boolean) {\r\n    this.redirectedFromLogIn.next(redirected);\r\n  }\r\n\r\n  private setUserToSessionStorage(user: User): void {\r\n    sessionStorage.setItem('refresh_token', user.refresh_token);\r\n    sessionStorage.setItem('access_token', user.access_token);\r\n    sessionStorage.setItem('id_token', user.id_token);\r\n    sessionStorage.setItem('refresh_token_expires_at', String(user.refresh_token_expires_at));\r\n    sessionStorage.setItem('access_token_expires_at', String(user.access_token_expires_at));\r\n    sessionStorage.setItem('access_token_stored_at', String(user.access_token_stored_at));\r\n    sessionStorage.setItem('username', user.username);\r\n    sessionStorage.setItem('name', user.name);\r\n    sessionStorage.setItem('roles', JSON.stringify(user.roles));\r\n  }\r\n\r\n  private removeUserFromSessionStorage(): void {\r\n    sessionStorage.removeItem('refresh_token');\r\n    sessionStorage.removeItem('access_token');\r\n    sessionStorage.removeItem('id_token');\r\n    sessionStorage.removeItem('refresh_token_expires_at');\r\n    sessionStorage.removeItem('access_token_expires_at');\r\n    sessionStorage.removeItem('access_token_stored_at');\r\n    sessionStorage.removeItem('username');\r\n    sessionStorage.removeItem('name');\r\n    sessionStorage.removeItem('roles');\r\n  }\r\n}\r\n","/// <reference types=\"@avl-controls/core\" />\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgxTranslateTranslationService } from '@avl-controls/ng-binders';\r\nimport '@avl-controls/core/dist/avl-localization-service/avl-localization-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationManagementService {\r\n  constructor(private translateService: TranslateService, private translationService: NgxTranslateTranslationService) {\r\n  }\r\n\r\n  public languages = [\r\n    { code: 'en', label: 'English' },\r\n    { code: 'hr', label: 'Croatian' },\r\n  ];\r\n\r\n  public initializeTranslations(): () => Promise<any> {\r\n    return () => {\r\n      AvlLocalizationService.translationService = this.translationService;\r\n      let lang = localStorage.getItem('lang');\r\n      if (lang == null) {\r\n        lang = this.languages[0].code;\r\n        localStorage.setItem('lang', lang);\r\n      }\r\n      return this.translateService.use(lang).toPromise();\r\n    };\r\n  }\r\n  public get language(): string {\r\n    return localStorage.getItem('lang');\r\n  }\r\n\r\n  public changeLanguage(lang: string) {\r\n    const oldLang = localStorage.getItem('lang');\r\n    if (!oldLang || oldLang !== lang) {\r\n      localStorage.setItem('lang', lang);\r\n      location.reload();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n\r\n  private _isDarkTheme: boolean;\r\n\r\n  public get isDarkTheme(): boolean {\r\n    if (this._isDarkTheme == null) {\r\n      this._isDarkTheme = localStorage.getItem('theme') === 'dark' || false;\r\n    }\r\n    return this._isDarkTheme;\r\n  }\r\n  public set isDarkTheme(newValue: boolean) {\r\n    this._isDarkTheme = newValue;\r\n    localStorage.setItem('theme', newValue === true ? 'dark' : 'light');\r\n    this.themeChangedSubject.next(this.getCurrentTheme());\r\n    this.changeTheme();\r\n  }\r\n\r\n  private themeChangedSubject = new Subject<string>();\r\n  public readonly themeChanged = this.themeChangedSubject.asObservable();\r\n\r\n  public getCurrentTheme(): string {\r\n    return this.isDarkTheme ? 'dark' : 'light';\r\n  }\r\n\r\n  private changeTheme() {\r\n    document.body.setAttribute('theme', this.getCurrentTheme());\r\n  }\r\n\r\n  constructor() {\r\n    this.changeTheme();\r\n  }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { TranslationManagementService } from \"./translation-management.service\";\r\nimport { ThemeService } from \"./theme.service\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport {\r\n  ColorScheme,\r\n  Message,\r\n  MessageHandlers,\r\n  MessageType,\r\n  Payload,\r\n  User,\r\n} from \"./message.model\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ChildCommunicationService {\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.login]: (url: string) => this.handleLogin(url),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.registration]: (_) => this.handleRegistration(),\r\n  };\r\n\r\n  private actionSubject = new Subject<string>();\r\n  private navigationSubject = new Subject<string>();\r\n  private loginSubject = new Subject<string>();\r\n  private registrationCompletedSubject = new Subject<boolean>();\r\n\r\n  protected iframeEl: HTMLIFrameElement;\r\n\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n   * Observable tracking url to navigate to\r\n   */\r\n  public navigation$: Observable<string> = this.navigationSubject;\r\n\r\n  /**\r\n   * Observable tracking url for login\r\n   * Url for login provided by child application\r\n   */\r\n  public login$: Observable<string> = this.loginSubject;\r\n\r\n  /**\r\n   * Observable tracking child registration\r\n   * Emits true if registration was successful, false otherwise\r\n   */\r\n  public registrationCompleted$: Observable<boolean> = this\r\n    .registrationCompletedSubject;\r\n\r\n  constructor(\r\n    private translationManagementService: TranslationManagementService,\r\n    private themeService: ThemeService\r\n  ) {\r\n    window.addEventListener(\"message\", (event) => this.onMessage(event));\r\n    this.themeService.themeChanged.subscribe(() => this.postThemeToChildren());\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about locale\r\n   */\r\n  public notifyChildAboutLocale(country: string): void {\r\n    this.postMessageToChild(MessageType.locale, country);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about language\r\n   */\r\n  public notifyChildAboutLanguage(language: string): void {\r\n    this.postMessageToChild(MessageType.language, language);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about action\r\n   */\r\n  public notifyChildAboutAction(action: string): void {\r\n    this.postMessageToChild(MessageType.action, action);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about navigation\r\n   */\r\n  public notifyChildAboutNavigation(url: string): void {\r\n    this.postMessageToChild(MessageType.navigation, url);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about current user\r\n   */\r\n  public postAuthenticationDataToChildren() {\r\n    const payload: User = {\r\n      refresh_token: sessionStorage.getItem(\"refresh_token\"),\r\n      access_token: sessionStorage.getItem(\"access_token\"),\r\n      id_token: sessionStorage.getItem(\"id_token\"),\r\n      refresh_token_expires_at: Number(\r\n        sessionStorage.getItem(\"refresh_token_expires_at\")\r\n      ),\r\n      access_token_expires_at: Number(\r\n        sessionStorage.getItem(\"access_token_expires_at\")\r\n      ),\r\n      access_token_stored_at: Number(\r\n        sessionStorage.getItem(\"access_token_stored_at\")\r\n      ),\r\n      username: sessionStorage.getItem(\"username\"),\r\n      name: sessionStorage.getItem(\"name\"),\r\n      roles: JSON.parse(sessionStorage.getItem(\"roles\")),\r\n    };\r\n\r\n    this.postMessageToChild(MessageType.authentication, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected application theme\r\n   */\r\n  public postThemeToChildren(): void {\r\n    const theme = this.themeService.getCurrentTheme();\r\n    this.postMessageToChild(MessageType.theme, theme);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected language\r\n   */\r\n  public postLanguageToChildren(): void {\r\n    this.postMessageToChild(\r\n      MessageType.language,\r\n      this.translationManagementService.language\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected country\r\n   */\r\n  public postLocaleToChildren(): void {\r\n    const country = localStorage.getItem(\"country\");\r\n    this.postMessageToChild(MessageType.locale, country);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about redirection from idb\r\n   */\r\n  public postRedirectedFromLogIn(payload: boolean): void {\r\n    this.postMessageToChild(MessageType.redirectedFromLogIn, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends message to children about color scheme\r\n   */\r\n  public postColorSchemeToChildren(): void {\r\n    const computedStyle = window.getComputedStyle(document.body);\r\n    const productColor = computedStyle.getPropertyValue(\"--avl-product-color\");\r\n    const productHoverColor = computedStyle.getPropertyValue(\r\n      \"--avl-product-hover-color\"\r\n    );\r\n    const productFocusColor = computedStyle.getPropertyValue(\r\n      \"--avl-product-focus-color\"\r\n    );\r\n\r\n    const colorScheme: ColorScheme = {\r\n      \"--avl-product-color\": productColor,\r\n      \"--avl-product-hover-color\": productHoverColor,\r\n      \"--avl-product-focus-color\": productFocusColor,\r\n    };\r\n\r\n    this.postMessageToChild(MessageType.colorScheme, colorScheme);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleNavigation(navigation: string): void {\r\n    this.navigationSubject.next(navigation);\r\n  }\r\n\r\n  private handleLogin(login: string): void {\r\n    this.loginSubject.next(login);\r\n  }\r\n\r\n  // when child started its registration iframe is loaded and shell gets a message that he can send messages to iframe\r\n  private handleRegistration(): void {\r\n    this.iframeEl = document.getElementsByTagName(\r\n      \"iframe\"\r\n    )[0] as HTMLIFrameElement;\r\n\r\n    this.postThemeToChildren();\r\n    this.postColorSchemeToChildren();\r\n    this.postLanguageToChildren();\r\n    this.postLocaleToChildren();\r\n\r\n    this.registrationCompletedSubject.next(true);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    const { payload, messageType }: Message = event.data;\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log(\"Unrecognized message for the child.\", event),\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToChild(messageType: MessageType, payload: Payload): void {\r\n    if (!this.iframeEl) {\r\n      return;\r\n    }\r\n\r\n    const message: Message = { messageType, payload };\r\n    this.iframeEl.contentWindow?.postMessage(message, \"*\");\r\n  }\r\n}\r\n","/**\r\n * List of all types of messages that can be logged.\r\n */\r\nexport enum LogSeverity {\r\n  Debug,\r\n  Info,\r\n  Warning,\r\n  Error,\r\n  Fatal,\r\n}\r\n\r\n/**\r\n * **LogConfig** class is required by the _LoggingModule_.\r\n * \r\n * An instance of this class should be passed into _forRoot_ method of _LoggingModule_\r\n * when importing module in the Angular application.\r\n * ```\r\n * import logConfig from 'logging.config.ts;\r\n * import LoggingModule from '@avl-services/ng-services';\r\n *  ....\r\n *  @NgModule({\r\n *    imports: [\r\n *      LoggingModule.forRoot(logConfig),\r\n *      ...\r\n *    ],\r\n *    ...\r\n *  }) export class AppModule {}\r\n * ```\r\n */\r\nexport class LogConfig {\r\n  /**\r\n   * API endpoint for logging (e.g. https://vizbox.avl.com/api/theia/logs).\r\n   * - Mandatory\r\n   */\r\n  public readonly endpoint: string;\r\n\r\n  /**\r\n   * Name of the database in which logs will be stored.\r\n   * - Mandatory\r\n   */\r\n  public readonly targetName: string;\r\n\r\n  /**\r\n   * Name of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly appName: string;\r\n\r\n  /**\r\n   * Version of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly version: string;\r\n\r\n  /**\r\n   * Flag that indicates whether logging starts automatically once the user logs in using credential.\r\n   * \r\n   * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:\r\n   * ```\r\n   * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }\r\n   * ```\r\n   * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).\r\n   * \r\n   * - Optional\r\n   * - Default: false\r\n   */\r\n  public autologging: boolean = false;\r\n\r\n  /**\r\n   * Minimum message severity to log.\r\n   * - Optional\r\n   * - Default: LogSeverity.Info\r\n   */\r\n  public globalLogLevel: LogSeverity = LogSeverity.Info;\r\n\r\n  /**\r\n   * Time in milliseconds, determines the period of API requests for logging.\r\n   * - Optional\r\n   * - Default: 30_000 ms\r\n   */\r\n  public debounceTime: number = 30_000;\r\n\r\n  /**\r\n   * Log queue capacity  \r\n   * \r\n   * If reached, API request is sent with all logs in log queue, and queue is cleared out.\r\n   * - Optional\r\n   * - Default: 10\r\n   */\r\n  public capacity: number = 10;\r\n\r\n  /**\r\n   * Creates instance of _LogConfig_ class.\r\n   * @param endpoint API endpoint for logging.\r\n   * @param targetName Name of the database in which logs will be stored\r\n   * @param appName Name of the application that uses the logging service\r\n   * @param version Version of the application that uses the logging service\r\n   * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false\r\n   * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info\r\n   * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms\r\n   * @param capacity Log queue capacity. Default: 10\r\n   */\r\n  constructor(\r\n    endpoint: string,\r\n    targetName: string,\r\n    appName: string,\r\n    version: string,\r\n    autologging: boolean = false,\r\n    globalLogLevel: LogSeverity = LogSeverity.Info,\r\n    debounceTime: number = 30_000,\r\n    capacity: number = 10\r\n  ) {\r\n    this.endpoint = endpoint;\r\n    this.targetName = targetName;\r\n    this.appName = appName;\r\n    this.version = version;\r\n    this.autologging = autologging;\r\n    this.globalLogLevel = globalLogLevel;\r\n    this.debounceTime = debounceTime;\r\n    this.capacity = capacity;\r\n  }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface Log {\r\n  readonly appName?: string;\r\n  readonly componentName?: string;\r\n  readonly severity?: string;\r\n  readonly message?: string;\r\n  readonly procId?: string;\r\n  readonly timestamp?: string;\r\n  readonly version?: string;\r\n  readonly AVLRequestId?: string;\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\r\nimport { AvlAuthService } from '@avl-ng-controls/auth';\r\nimport { interval, Observable, Subject } from 'rxjs';\r\nimport { filter, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { Log, LogConfig, LogSeverity } from './logging.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoggingService implements OnDestroy {\r\n  private logs: Log[] = [];\r\n  private headers: HttpHeaders;\r\n  private isLogging = false;\r\n\r\n  private debounceTime$: Subject<number> = new Subject();\r\n  private logs$: Subject<Log[]> = new Subject();\r\n  private stopLogging$: Subject<void> = new Subject();\r\n  private postLogs$: Subject<void> = new Subject();\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('loggingConfig') private config: LogConfig,\r\n    @Optional() @Inject(AvlAuthService) private authService: AvlAuthService\r\n  ) {\r\n    this.headers = new HttpHeaders({\r\n      targetName: this.config.targetName,\r\n    });\r\n\r\n    if (config.autologging) {\r\n      this.authService?.isLoggedIn$.pipe(takeUntil(this.destroyed$)).subscribe((isLoggedIn) => this.decideOnLogging(isLoggedIn));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.postLogs$.complete();\r\n    this.debounceTime$.complete();\r\n    this.logs$.complete();\r\n    this.stopLogging$.next();\r\n    this.stopLogging$.complete();\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n  /**\r\n   * Starts periodical logging process.\r\n   * \r\n   * Depends on _debounceTime_ and _capacity_ properties.\r\n   */\r\n  public startLogging(): void {\r\n    this.isLogging = true;\r\n    console.log('Start logging');\r\n    this.debounceTime$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap((debounceTime) => this.periodicalLogging(debounceTime))\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.postLogs$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap(() => this.postMessages())\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.setLoggingDebounceTime(this.config.debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Stops logging process.\r\n   */\r\n  public stopLogging(): void {\r\n    this.isLogging = false;\r\n    console.log('Stop logging');\r\n    this.postLogs();\r\n    this.stopLogging$.next();\r\n  }\r\n\r\n  /**\r\n   * Gets all currently queued logs as an observable value.\r\n   * @returns All currently queued logs as an observable value\r\n   */\r\n  public getLogs$(): Observable<Log[]> {\r\n    return this.logs$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Logs message with debug severity.\r\n   * @param message Message used for constructing a debug log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public debug(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Debug, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with info severity.\r\n   * @param message Message used for constructing a info log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public info(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Info, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with warning severity.\r\n   * @param message Message used for constructing a warning log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public warn(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Warning, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with error severity.\r\n   * @param message Message used for constructing a error log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public error(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Error, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with fatal severity.\r\n   * @param message Message used for constructing a fatal log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public fatal(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Fatal, componentName);\r\n  }\r\n\r\n  /**\r\n   * Setter for debounce time (log period).\r\n   * @param debounceTime Time in milliseconds; determines the period of API requests for logging\r\n   */\r\n  public setLoggingDebounceTime(debounceTime: number): void {\r\n    console.log('New debounce time: ', debounceTime);\r\n    this.config.debounceTime = debounceTime;\r\n    this.debounceTime$.next(debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Setter for global log level.\r\n   * @param globalLogLevel Minimum message severity to log\r\n   */\r\n  public setGlobalLogLevel(globalLogLevel: LogSeverity): void {\r\n    console.log('New global log level: ', globalLogLevel);\r\n    this.config.globalLogLevel = globalLogLevel;\r\n  }\r\n\r\n  /**\r\n   * Setter for log queue capacity.\r\n   * @param capacity Log queue capacity\r\n   */\r\n  public setLogCapacity(capacity: number): void {\r\n    console.log('New capacity: ', capacity);\r\n    this.config.capacity = capacity;\r\n  }\r\n\r\n  // Logic, private methods\r\n\r\n  private log(message: string, severity: LogSeverity, componentName: string): void {\r\n    if (!this.isLogging || severity < this.config.globalLogLevel) {\r\n      return;\r\n    }\r\n\r\n    this.createAndStoreLog(message, severity, componentName);\r\n    this.dispatchLogs();\r\n\r\n    if (this.isFullCapacity()) {\r\n      console.log('Full capacity. Logging...');\r\n      this.postLogs$.next();\r\n    }\r\n  }\r\n\r\n  private createAndStoreLog(message: string, severityType: LogSeverity, componentName: string): void {\r\n    const timestamp = new Date().toISOString();\r\n    const { appName, version } = this.config;\r\n    const severity = severityType.toString();\r\n    const log: Log = { message, severity, timestamp, componentName, appName, version };\r\n    this.logs.push(log);\r\n  }\r\n\r\n  private isFullCapacity(): boolean {\r\n    return this.logs.length >= this.config.capacity;\r\n  }\r\n\r\n  private clearLogs(): void {\r\n    this.logs = [];\r\n  }\r\n\r\n  private onPostMessages(): void {\r\n    this.clearLogs();\r\n    this.dispatchLogs();\r\n    console.log('Logs posted.');\r\n  }\r\n\r\n  private postLogs(): void {\r\n    this.postLogs$.next();\r\n  }\r\n\r\n  private periodicalLogging(period: number): Observable<void> {\r\n    return interval(period).pipe(\r\n      tap(() => {\r\n        if (!this.logs.length) {\r\n          this.dispatchLogs();\r\n          console.log('Empty logs. Nothing to send.');\r\n        }\r\n      }),\r\n      filter(() => !!this.logs.length),\r\n      tap(() => console.log('Time expired. Logging...')),\r\n      switchMap(() => this.postMessages())\r\n    );\r\n  }\r\n\r\n  private postMessages(): Observable<void> {\r\n    return this.http.post<void>(this.config.endpoint, this.logs, {\r\n      headers: this.headers,\r\n    });\r\n  }\r\n\r\n  private dispatchLogs(): void {\r\n    this.logs$.next(this.logs);\r\n  }\r\n\r\n  private decideOnLogging(isLoggedIn: boolean): void {\r\n    if (isLoggedIn) {\r\n      this.startLogging();\r\n    } else {\r\n      this.stopLogging();\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { LogConfig } from './logging.model';\r\nimport { LoggingService } from './logging.service';\r\n\r\n@NgModule()\r\nexport class LoggingModule {\r\n  constructor(@Optional() @SkipSelf() parentModule?: LoggingModule) {\r\n    if (parentModule) {\r\n      throw new Error('LoggingModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n  static forRoot(config: LogConfig): ModuleWithProviders<LoggingModule> {\r\n    return {\r\n      ngModule: LoggingModule,\r\n      providers: [LoggingService, { provide: 'loggingConfig', useValue: config }],\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ng-services\r\n */\r\n\r\nexport * from './lib/shell-communication.service';\r\nexport * from './lib/child-communication.service';\r\nexport * from './lib/translation-management.service';\r\nexport * from './lib/theme.service';\r\nexport * from './lib/message.model';\r\nexport * from './lib/logging.module';\r\nexport * from './lib/logging.service';\r\nexport * from './lib/logging.model';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["uuidv4"],"mappings":"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"}