import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { HubConnectionBuilder, HubConnectionState, LogLevel } from '@microsoft/signalr';
import * as ɵngcc0 from '@angular/core';
var NotificationService = /** @class */ (function () {
    function NotificationService() {
        this.hubConnections = [];
        this.notification = new Subject();
        /**
         * Observable which emits newly arrived notifications.
         */
        this.notification$ = this.notification;
    }
    /**
     * Builds and starts signalR hub connection with the server.
     * If connection already exists and is not connected, restarts the connection.
     * @param endpoint server endpoint
     * @param options options of the connection
     */
    NotificationService.prototype.startConnection = function (endpoint, options) {
        var _this = this;
        var connection = this.getConnectionByID(options.connectionID);
        if (!connection) {
            connection = this.buildConnection(endpoint, options);
        }
        if (connection.state === HubConnectionState.Connected) {
            return;
        }
        connection
            .start()
            .then(function () { return _this.startNotifications(connection, options.metadata); })
            .catch(function () { return console.warn('Notification service: Failed to establish connection.'); });
    };
    /**
     * Stops connection with the server
     * @param connectionID connection identifier
     */
    NotificationService.prototype.stopConnection = function (connectionID) {
        var connection = this.getConnectionByID(connectionID);
        if (!connection) {
            return;
        }
        connection.off('transferNotification');
        connection.stop();
    };
    /**
     * Removes connection entirely
     * @param connectionID connection identifier
     */
    NotificationService.prototype.removeConnection = function (connectionID) {
        this.stopConnection(connectionID);
        var index = this.hubConnections.findIndex(function (connection) { return connection.id === connectionID; });
        if (index !== -1) {
            this.hubConnections.splice(index, 1);
        }
    };
    /**
     * Updates notifications metadata for specific connection. Notifies server about it.
     * @param connectionID connection identifier
     * @param metadata notification metadata, (e.g language)
     */
    NotificationService.prototype.updateNotifications = function (connectionID, metadata) {
        var connection = this.getConnectionByID(connectionID);
        if (!connection) {
            return;
        }
        this.startNotifications(connection, metadata);
    };
    // Private methods
    NotificationService.prototype.startNotifications = function (connection, metadata) {
        connection.invoke('startNotifications', metadata);
    };
    NotificationService.prototype.getConnectionByID = function (connectionID) {
        var _a;
        var index = this.hubConnections.findIndex(function (connection) { return connection.id === connectionID; });
        return (_a = this.hubConnections[index]) === null || _a === void 0 ? void 0 : _a.connection;
    };
    NotificationService.prototype.buildConnection = function (endpoint, options) {
        var _this = this;
        var hubConnection = new HubConnectionBuilder()
            .configureLogging(LogLevel.None)
            .withUrl(endpoint)
            .withAutomaticReconnect()
            .build();
        hubConnection.onreconnected(function () { return _this.startNotifications(hubConnection, options.metadata); });
        hubConnection.on('transferNotification', function (notification) {
            _this.notification.next(notification);
        });
        this.hubConnections.push({
            id: options.connectionID,
            connection: hubConnection
        });
        return hubConnection;
    };
NotificationService.ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(); };
NotificationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotificationService, factory: function (t) { return NotificationService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NotificationService;
}());
export { NotificationService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,