import { __decorate } from "tslib";
/// <reference types="@avl-controls/core" />
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { NgxTranslateTranslationService } from '@avl-controls/ng-binders';
import '@avl-controls/core/dist/avl-localization-service/avl-localization-service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@avl-controls/ng-binders";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '@avl-controls/ng-binders';
var TranslationManagementService = /** @class */ (function () {
    function TranslationManagementService(translateService, translationService) {
        this.translateService = translateService;
        this.translationService = translationService;
        this.languages = [
            { code: 'en', label: 'English' },
            { code: 'hr', label: 'Croatian' },
        ];
    }
    TranslationManagementService.prototype.initializeTranslations = function () {
        var _this = this;
        return function () {
            AvlLocalizationService.translationService = _this.translationService;
            var lang = localStorage.getItem('lang');
            if (lang == null) {
                lang = _this.languages[0].code;
                localStorage.setItem('lang', lang);
            }
            return _this.translateService.use(lang).toPromise();
        };
    };
    Object.defineProperty(TranslationManagementService.prototype, "language", {
        get: function () {
            return localStorage.getItem('lang');
        },
        enumerable: true,
        configurable: true
    });
    TranslationManagementService.prototype.changeLanguage = function (lang) {
        var oldLang = localStorage.getItem('lang');
        if (!oldLang || oldLang !== lang) {
            localStorage.setItem('lang', lang);
            location.reload();
        }
    };
    TranslationManagementService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: NgxTranslateTranslationService }
    ]; };
    TranslationManagementService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslationManagementService_Factory() { return new TranslationManagementService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.NgxTranslateTranslationService)); }, token: TranslationManagementService, providedIn: "root" });
TranslationManagementService.ɵfac = function TranslationManagementService_Factory(t) { return new (t || TranslationManagementService)(ɵngcc0.ɵɵinject(ɵngcc1.TranslateService), ɵngcc0.ɵɵinject(ɵngcc2.NgxTranslateTranslationService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslationManagementService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.TranslateService }, { type: ɵngcc2.NgxTranslateTranslationService }]; }, null); })();
    return TranslationManagementService;
}());
export { TranslationManagementService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb24tbWFuYWdlbWVudC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1zZXJ2aWNlcy9uZy1zZXJ2aWNlcy9saWIvdHJhbnNsYXRpb24tbWFuYWdlbWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBNEM7QUFFNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRSxPQUFPLDJFQUEyRSxDQUFDO0FBQ25GO0FBR0M7QUFDd0M7Ozs7QUFBekM7QUFDb0IsSUFBbEIsc0NBQW9CLGdCQUFrQyxFQUFVLGtCQUFrRDtBQUNwSCxRQURzQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFBUyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWdDO0FBQUMsUUFHNUcsY0FBUyxHQUFHO0FBQ3JCLFlBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDcEMsWUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRTtBQUNyQyxTQUFHLENBQUM7QUFDSixJQU5FLENBQUM7QUFDSCxJQU1TLDZEQUFzQixHQUE3QjtBQUFjLFFBQWQsaUJBVUM7QUFDSCxRQVZJLE9BQU87QUFDTCxZQUFBLHNCQUFzQixDQUFDLGtCQUFrQixHQUFHLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQztBQUMxRSxZQUFNLElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMsWUFBTSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDeEIsZ0JBQVEsSUFBSSxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3RDLGdCQUFRLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLGFBQU87QUFDUCxZQUFNLE9BQU8sS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6RCxRQUFJLENBQUMsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNGLElBQUMsc0JBQVcsa0RBQVE7QUFBSSxhQUF2QjtBQUFjLFlBQ1osT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ2IsT0FIVjtBQUNILElBQ1MscURBQWMsR0FBckIsVUFBc0IsSUFBWTtBQUNwQyxRQUFJLElBQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsUUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDdEMsWUFBTSxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6QyxZQUFNLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN4QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0Y7QUFDdUUsZ0JBL0JoQyxnQkFBZ0I7QUFBSSxnQkFBMEIsOEJBQThCO0FBQUc7QUFHbkg7SUFKUyw0QkFBNEIsd0JBSHhDLFVBQVUsQ0FBQyxjQUNWLFVBQVUsRUFBRSxNQUFNLFVBQ25CLENBQUMsUUFDVyw0QkFBNEIsQ0ErQnhDOzs7Ozs7a0lBQ0Q7QUFBQyx1Q0ExQ0Q7QUFBRSxDQXlDRCxBQS9CRCxJQStCQzs7QUF6Q0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUxBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBVEEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUE3QkEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQStCQSxBQXpDQSxBQXlDQSxBQS9CQSxBQStCQSxBQS9CQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJAYXZsLWNvbnRyb2xzL2NvcmVcIiAvPlxyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcbmltcG9ydCB7IE5neFRyYW5zbGF0ZVRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJ0BhdmwtY29udHJvbHMvbmctYmluZGVycyc7XHJcbmltcG9ydCAnQGF2bC1jb250cm9scy9jb3JlL2Rpc3QvYXZsLWxvY2FsaXphdGlvbi1zZXJ2aWNlL2F2bC1sb2NhbGl6YXRpb24tc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvbk1hbmFnZW1lbnRTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBOZ3hUcmFuc2xhdGVUcmFuc2xhdGlvblNlcnZpY2UpIHtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBsYW5ndWFnZXMgPSBbXHJcbiAgICB7IGNvZGU6ICdlbicsIGxhYmVsOiAnRW5nbGlzaCcgfSxcclxuICAgIHsgY29kZTogJ2hyJywgbGFiZWw6ICdDcm9hdGlhbicgfSxcclxuICBdO1xyXG5cclxuICBwdWJsaWMgaW5pdGlhbGl6ZVRyYW5zbGF0aW9ucygpOiAoKSA9PiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgQXZsTG9jYWxpemF0aW9uU2VydmljZS50cmFuc2xhdGlvblNlcnZpY2UgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZTtcclxuICAgICAgbGV0IGxhbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZycpO1xyXG4gICAgICBpZiAobGFuZyA9PSBudWxsKSB7XHJcbiAgICAgICAgbGFuZyA9IHRoaXMubGFuZ3VhZ2VzWzBdLmNvZGU7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhbmcnLCBsYW5nKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLnVzZShsYW5nKS50b1Byb21pc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZycpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNoYW5nZUxhbmd1YWdlKGxhbmc6IHN0cmluZykge1xyXG4gICAgY29uc3Qgb2xkTGFuZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5nJyk7XHJcbiAgICBpZiAoIW9sZExhbmcgfHwgb2xkTGFuZyAhPT0gbGFuZykge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFuZycsIGxhbmcpO1xyXG4gICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19