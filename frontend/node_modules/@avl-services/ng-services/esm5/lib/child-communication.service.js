import { __assign, __decorate } from "tslib";
import { Injectable } from "@angular/core";
import { TranslationManagementService } from "./translation-management.service";
import { ThemeService } from "./theme.service";
import { Subject } from "rxjs";
import { MessageType, } from "./message.model";
import { AvlAuthService, User } from '@avl-ng-controls/auth';
import * as i0 from "@angular/core";
import * as i1 from "./translation-management.service";
import * as i2 from "./theme.service";
import * as i3 from "@avl-ng-controls/auth";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@avl-ng-controls/auth';
var ChildCommunicationService = /** @class */ (function () {
    function ChildCommunicationService(translationManagementService, themeService, authService) {
        var _a;
        var _this = this;
        this.translationManagementService = translationManagementService;
        this.themeService = themeService;
        this.authService = authService;
        this.handlers = (_a = {},
            _a[MessageType.login] = function (url) { return _this.handleLogin(url); },
            _a[MessageType.navigation] = function (url) { return _this.handleNavigation(url); },
            _a[MessageType.action] = function (action) { return _this.handleAction(action); },
            _a[MessageType.registration] = function (_) { return _this.handleRegistration(); },
            _a[MessageType.user] = function (user) { return _this.handleUser(user); },
            _a);
        this.actionSubject = new Subject();
        this.navigationSubject = new Subject();
        this.loginSubject = new Subject();
        this.registrationCompletedSubject = new Subject();
        this.action$ = this.actionSubject;
        /**
         * Observable tracking url to navigate to
         */
        this.navigation$ = this.navigationSubject;
        /**
         * Observable tracking url for login
         * Url for login provided by child application
         */
        this.login$ = this.loginSubject;
        /**
         * Observable tracking child registration
         * Emits true if registration was successful, false otherwise
         */
        this.registrationCompleted$ = this
            .registrationCompletedSubject;
        window.addEventListener("message", function (event) { return _this.onMessage(event); });
        this.themeService.themeChanged.subscribe(function () { return _this.postThemeToChildren(); });
    }
    /**
     * Sends message to child about locale
     */
    ChildCommunicationService.prototype.notifyChildAboutLocale = function (country) {
        this.postMessageToChild(MessageType.locale, country);
    };
    /**
     * Sends message to child about language
     */
    ChildCommunicationService.prototype.notifyChildAboutLanguage = function (language) {
        this.postMessageToChild(MessageType.language, language);
    };
    /**
     * Sends message to child about action
     */
    ChildCommunicationService.prototype.notifyChildAboutAction = function (action) {
        this.postMessageToChild(MessageType.action, action);
    };
    /**
     * Sends message to child about navigation
     */
    ChildCommunicationService.prototype.notifyChildAboutNavigation = function (url) {
        this.postMessageToChild(MessageType.navigation, url);
    };
    /**
     * Sends messages to children about current user
     */
    ChildCommunicationService.prototype.postAuthenticationDataToChildren = function () {
        var payload = this.authService.readUserFromSessionStorage();
        this.postMessageToChild(MessageType.authentication, payload);
    };
    /**
     * Sends messages to children about selected application theme
     */
    ChildCommunicationService.prototype.postThemeToChildren = function () {
        var theme = this.themeService.getCurrentTheme();
        this.postMessageToChild(MessageType.theme, theme);
    };
    /**
     * Sends messages to children about selected language
     */
    ChildCommunicationService.prototype.postLanguageToChildren = function () {
        this.postMessageToChild(MessageType.language, this.translationManagementService.language);
    };
    /**
     * Sends messages to children about selected country
     */
    ChildCommunicationService.prototype.postLocaleToChildren = function () {
        var country = localStorage.getItem("country");
        this.postMessageToChild(MessageType.locale, country);
    };
    /**
     * Sends message to child about redirection from idb
     */
    ChildCommunicationService.prototype.postRedirectedFromLogIn = function (payload) {
        this.postMessageToChild(MessageType.redirectedFromLogIn, payload);
    };
    /**
     * Sends message to children about color scheme
     */
    ChildCommunicationService.prototype.postColorSchemeToChildren = function () {
        var computedStyle = window.getComputedStyle(document.body);
        var productColor = computedStyle.getPropertyValue("--avl-product-color");
        var productHoverColor = computedStyle.getPropertyValue("--avl-product-hover-color");
        var productFocusColor = computedStyle.getPropertyValue("--avl-product-focus-color");
        var colorScheme = {
            "--avl-product-color": productColor,
            "--avl-product-hover-color": productHoverColor,
            "--avl-product-focus-color": productFocusColor,
        };
        this.postMessageToChild(MessageType.colorScheme, colorScheme);
    };
    ChildCommunicationService.prototype.handleAction = function (action) {
        this.actionSubject.next(action);
    };
    ChildCommunicationService.prototype.handleNavigation = function (navigation) {
        this.navigationSubject.next(navigation);
    };
    ChildCommunicationService.prototype.handleLogin = function (login) {
        this.loginSubject.next(login);
    };
    // when child started its registration iframe is loaded and shell gets a message that he can send messages to iframe
    ChildCommunicationService.prototype.handleRegistration = function () {
        this.iframeEl = document.getElementsByTagName("iframe")[0];
        this.postThemeToChildren();
        this.postColorSchemeToChildren();
        this.postLanguageToChildren();
        this.postLocaleToChildren();
        this.registrationCompletedSubject.next(true);
    };
    ChildCommunicationService.prototype.onMessage = function (event) {
        var _a = event.data, payload = _a.payload, messageType = _a.messageType;
        var handlers = __assign(__assign({}, this.handlers), { default: function () { return console.log("Unrecognized message for the child.", event); } });
        (handlers[messageType] || handlers.default)(payload);
    };
    ChildCommunicationService.prototype.postMessageToChild = function (messageType, payload) {
        var _a;
        if (!this.iframeEl) {
            return;
        }
        var message = { messageType: messageType, payload: payload };
        (_a = this.iframeEl.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, "*");
    };
    // when child updates user data, it has to reflect in user data in shell
    ChildCommunicationService.prototype.handleUser = function (user) {
        if (user === null || user === void 0 ? void 0 : user.access_token) {
            this.authService.storeUserToSessionStorage(user);
        }
        else {
            this.authService.clearUserFromSessionStorage();
        }
        this.authService.reloadPersistedUserData();
    };
    ChildCommunicationService.ctorParameters = function () { return [
        { type: TranslationManagementService },
        { type: ThemeService },
        { type: AvlAuthService }
    ]; };
    ChildCommunicationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ChildCommunicationService_Factory() { return new ChildCommunicationService(i0.ɵɵinject(i1.TranslationManagementService), i0.ɵɵinject(i2.ThemeService), i0.ɵɵinject(i3.AvlAuthService)); }, token: ChildCommunicationService, providedIn: "root" });
ChildCommunicationService.ɵfac = function ChildCommunicationService_Factory(t) { return new (t || ChildCommunicationService)(ɵngcc0.ɵɵinject(TranslationManagementService), ɵngcc0.ɵɵinject(ThemeService), ɵngcc0.ɵɵinject(ɵngcc1.AvlAuthService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChildCommunicationService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: TranslationManagementService }, { type: ThemeService }, { type: ɵngcc1.AvlAuthService }]; }, null); })();
    return ChildCommunicationService;
}());
export { ChildCommunicationService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,