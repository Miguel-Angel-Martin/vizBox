import { __decorate, __param } from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { AvlAuthService } from '@avl-ng-controls/auth';
import { interval, Subject } from 'rxjs';
import { filter, switchMap, takeUntil, tap } from 'rxjs/operators';
import { Log, LogConfig, LogSeverity } from './logging.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@avl-ng-controls/auth";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@avl-ng-controls/auth';
var LoggingService = /** @class */ (function () {
    /**
     * @ignore
     */
    function LoggingService(http, config, authService) {
        var _this = this;
        var _a;
        this.http = http;
        this.config = config;
        this.authService = authService;
        this.logs = [];
        this.isLogging = false;
        this.debounceTime$ = new Subject();
        this.logs$ = new Subject();
        this.stopLogging$ = new Subject();
        this.postLogs$ = new Subject();
        this.destroyed$ = new Subject();
        this.headers = new HttpHeaders({
            targetName: this.config.targetName,
        });
        if (config.autologging) {
            (_a = this.authService) === null || _a === void 0 ? void 0 : _a.isLoggedIn$.pipe(takeUntil(this.destroyed$)).subscribe(function (isLoggedIn) { return _this.decideOnLogging(isLoggedIn); });
        }
    }
    /**
     * @ignore
     */
    LoggingService.prototype.ngOnDestroy = function () {
        this.postLogs$.complete();
        this.debounceTime$.complete();
        this.logs$.complete();
        this.stopLogging$.next();
        this.stopLogging$.complete();
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    /**
     * Starts periodical logging process.
     *
     * Depends on _debounceTime_ and _capacity_ properties.
     */
    LoggingService.prototype.startLogging = function () {
        var _this = this;
        this.isLogging = true;
        this.debounceTime$
            .pipe(takeUntil(this.stopLogging$), switchMap(function (debounceTime) { return _this.periodicalLogging(debounceTime); }))
            .subscribe(function () { return _this.onPostMessages(); });
        this.postLogs$
            .pipe(takeUntil(this.stopLogging$), switchMap(function () { return _this.postMessages(); }))
            .subscribe(function () { return _this.onPostMessages(); });
        this.setLoggingDebounceTime(this.config.debounceTime);
    };
    /**
     * Stops logging process.
     */
    LoggingService.prototype.stopLogging = function () {
        this.isLogging = false;
        this.postLogs();
        this.stopLogging$.next();
    };
    /**
     * Gets all currently queued logs as an observable value.
     * @returns All currently queued logs as an observable value
     */
    LoggingService.prototype.getLogs$ = function () {
        return this.logs$.asObservable();
    };
    /**
     * Logs message with debug severity.
     * @param message Message used for constructing a debug log
     * @param componentName Name of the component which called this method
     */
    LoggingService.prototype.debug = function (message, componentName) {
        if (componentName === void 0) { componentName = ''; }
        this.log(message, LogSeverity.Debug, componentName);
    };
    /**
     * Logs message with info severity.
     * @param message Message used for constructing a info log
     * @param componentName Name of the component which called this method
     */
    LoggingService.prototype.info = function (message, componentName) {
        if (componentName === void 0) { componentName = ''; }
        this.log(message, LogSeverity.Info, componentName);
    };
    /**
     * Logs message with warning severity.
     * @param message Message used for constructing a warning log
     * @param componentName Name of the component which called this method
     */
    LoggingService.prototype.warn = function (message, componentName) {
        if (componentName === void 0) { componentName = ''; }
        this.log(message, LogSeverity.Warning, componentName);
    };
    /**
     * Logs message with error severity.
     * @param message Message used for constructing a error log
     * @param componentName Name of the component which called this method
     */
    LoggingService.prototype.error = function (message, componentName) {
        if (componentName === void 0) { componentName = ''; }
        this.log(message, LogSeverity.Error, componentName);
    };
    /**
     * Logs message with fatal severity.
     * @param message Message used for constructing a fatal log
     * @param componentName Name of the component which called this method
     */
    LoggingService.prototype.fatal = function (message, componentName) {
        if (componentName === void 0) { componentName = ''; }
        this.log(message, LogSeverity.Fatal, componentName);
    };
    /**
     * Setter for debounce time (log period).
     * @param debounceTime Time in milliseconds; determines the period of API requests for logging
     */
    LoggingService.prototype.setLoggingDebounceTime = function (debounceTime) {
        this.config.debounceTime = debounceTime;
        this.debounceTime$.next(debounceTime);
    };
    /**
     * Setter for global log level.
     * @param globalLogLevel Minimum message severity to log
     */
    LoggingService.prototype.setGlobalLogLevel = function (globalLogLevel) {
        this.config.globalLogLevel = globalLogLevel;
    };
    /**
     * Setter for log queue capacity.
     * @param capacity Log queue capacity
     */
    LoggingService.prototype.setLogCapacity = function (capacity) {
        this.config.capacity = capacity;
    };
    // Logic, private methods
    LoggingService.prototype.log = function (message, severity, componentName) {
        if (!this.isLogging || severity < this.config.globalLogLevel) {
            return;
        }
        this.createAndStoreLog(message, severity, componentName);
        this.dispatchLogs();
        if (this.isFullCapacity()) {
            this.postLogs$.next();
        }
    };
    LoggingService.prototype.createAndStoreLog = function (message, severityType, componentName) {
        var timestamp = new Date().toISOString();
        var _a = this.config, appName = _a.appName, version = _a.version;
        var severity = severityType.toString();
        var log = { message: message, severity: severity, timestamp: timestamp, componentName: componentName, appName: appName, version: version };
        this.logs.push(log);
    };
    LoggingService.prototype.isFullCapacity = function () {
        return this.logs.length >= this.config.capacity;
    };
    LoggingService.prototype.clearLogs = function () {
        this.logs = [];
    };
    LoggingService.prototype.onPostMessages = function () {
        this.clearLogs();
        this.dispatchLogs();
    };
    LoggingService.prototype.postLogs = function () {
        this.postLogs$.next();
    };
    LoggingService.prototype.periodicalLogging = function (period) {
        var _this = this;
        return interval(period).pipe(tap(function () {
            if (!_this.logs.length) {
                _this.dispatchLogs();
            }
        }), filter(function () { return !!_this.logs.length; }), switchMap(function () { return _this.postMessages(); }));
    };
    LoggingService.prototype.postMessages = function () {
        return this.http.post(this.config.endpoint, this.logs, {
            headers: this.headers,
        });
    };
    LoggingService.prototype.dispatchLogs = function () {
        this.logs$.next(this.logs);
    };
    LoggingService.prototype.decideOnLogging = function (isLoggedIn) {
        if (isLoggedIn) {
            this.startLogging();
        }
        else {
            this.stopLogging();
        }
    };
    LoggingService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LogConfig, decorators: [{ type: Inject, args: ['loggingConfig',] }] },
        { type: AvlAuthService, decorators: [{ type: Optional }, { type: Inject, args: [AvlAuthService,] }] }
    ]; };
    LoggingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoggingService_Factory() { return new LoggingService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject("loggingConfig"), i0.ɵɵinject(i2.AvlAuthService, 8)); }, token: LoggingService, providedIn: "root" });
    LoggingService = __decorate([ __param(1, Inject('loggingConfig')),
        __param(2, Optional()), __param(2, Inject(AvlAuthService))
    ], LoggingService);
LoggingService.ɵfac = function LoggingService_Factory(t) { return new (t || LoggingService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject('loggingConfig'), ɵngcc0.ɵɵinject(AvlAuthService, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoggingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: LogConfig, decorators: [{
                type: Inject,
                args: ['loggingConfig']
            }] }, { type: ɵngcc2.AvlAuthService, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [AvlAuthService]
            }] }]; }, null); })();
    return LoggingService;
}());
export { LoggingService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,