import { __decorate, __param } from "tslib";
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { LoggingService } from './logging.service';
import * as ɵngcc0 from '@angular/core';
var LoggingModule = /** @class */ (function () {
    function LoggingModule(parentModule) {
        if (parentModule) {
            throw new Error('LoggingModule is already loaded. Import it in the AppModule only');
        }
    }
    LoggingModule_1 = LoggingModule;
    LoggingModule.forRoot = function (config) {
        return {
            ngModule: LoggingModule_1,
            providers: [LoggingService, { provide: 'loggingConfig', useValue: config }],
        };
    };
    var LoggingModule_1;
    LoggingModule.ctorParameters = function () { return [
        { type: LoggingModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    LoggingModule = LoggingModule_1 = __decorate([ __param(0, Optional()), __param(0, SkipSelf())
    ], LoggingModule);
LoggingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoggingModule });
LoggingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoggingModule_Factory(t) { return new (t || LoggingModule)(ɵngcc0.ɵɵinject(LoggingModule, 12)); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoggingModule, [{
        type: NgModule
    }], function () { return [{ type: LoggingModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
    return LoggingModule;
}());
export { LoggingModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLXNlcnZpY2VzL25nLXNlcnZpY2VzL2xpYi9sb2dnaW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBR25EO0FBQ29CLElBQWxCLHVCQUFvQyxZQUE0QjtBQUNsRSxRQUFJLElBQUksWUFBWSxFQUFFO0FBQ3RCLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO0FBQzFGLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxzQkFOYSxhQUFhO0FBQUUsSUFNbkIscUJBQU8sR0FBZCxVQUFlLE1BQWlCO0FBQUksUUFDbEMsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLGVBQWE7QUFDN0IsWUFBTSxTQUFTLEVBQUUsQ0FBQyxjQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNqRixTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDRjtBQUN1QjtBQUEwRCxnQkFaN0IsYUFBYSx1QkFBbkQsUUFBUSxZQUFJLFFBQVE7QUFBTTtBQUFVLElBRHRDLGFBQWEsMENBRHpCLFFBQVEsRUFBRSxuQkFDSCxDQUNPLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLFFBQVEsRUFBRSxDQUFBO0FBQUMsT0FEekIsYUFBYSxDQVl6Qjs7Ozs7Ozs7O2tDQUNEO0FBQUMsSUFERCxvQkFBQztBQUNBLENBREEsQUFaRCxJQVlDOztBQWpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFMQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBWUEsQUFBQSxBQUFBLEFBQUEsQUFaQSxBQVlBLEFBWkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTG9nQ29uZmlnIH0gZnJvbSAnLi9sb2dnaW5nLm1vZGVsJztcclxuaW1wb3J0IHsgTG9nZ2luZ1NlcnZpY2UgfSBmcm9tICcuL2xvZ2dpbmcuc2VydmljZSc7XHJcblxyXG5ATmdNb2R1bGUoKVxyXG5leHBvcnQgY2xhc3MgTG9nZ2luZ01vZHVsZSB7XHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlPzogTG9nZ2luZ01vZHVsZSkge1xyXG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ2dpbmdNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpdCBpbiB0aGUgQXBwTW9kdWxlIG9ubHknKTtcclxuICAgIH1cclxuICB9XHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBMb2dDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPExvZ2dpbmdNb2R1bGU+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBMb2dnaW5nTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtMb2dnaW5nU2VydmljZSwgeyBwcm92aWRlOiAnbG9nZ2luZ0NvbmZpZycsIHVzZVZhbHVlOiBjb25maWcgfV0sXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=