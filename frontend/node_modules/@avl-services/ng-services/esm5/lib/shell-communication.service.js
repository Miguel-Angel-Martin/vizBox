import { __assign, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Subject, BehaviorSubject } from 'rxjs';
import { v4 as uuidv4 } from 'uuid';
import { MessageType } from './message.model';
import { AvlAuthService } from '@avl-ng-controls/auth';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@avl-ng-controls/auth";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@avl-ng-controls/auth';
var ShellCommunicationService = /** @class */ (function () {
    function ShellCommunicationService(router, authService) {
        var _a;
        var _this = this;
        this.router = router;
        this.authService = authService;
        this.handlers = (_a = {},
            _a[MessageType.theme] = function (theme) { return _this.handleTheme(theme); },
            _a[MessageType.locale] = function (locale) { return _this.handleLocale(locale); },
            _a[MessageType.language] = function (language) { return _this.handleLanguage(language); },
            _a[MessageType.colorScheme] = function (colorScheme) { return _this.handleColorScheme(colorScheme); },
            _a[MessageType.navigation] = function (url) { return _this.handleNavigation(url); },
            _a[MessageType.action] = function (action) { return _this.handleAction(action); },
            _a[MessageType.authentication] = function (user) { return _this.handleAuthentication(user); },
            _a[MessageType.redirectedFromLogIn] = function (redirected) { return _this.handleRedirectedFromLogIn(redirected); },
            _a);
        this.themeSubject = new Subject();
        this.languageSubject = new Subject();
        this.actionSubject = new Subject();
        this.localeSubject = new Subject();
        this.colorSchemeSubject = new Subject();
        /**
        * Observable tracking theme
        * Emits "dark" if dark theme selected, "light" otherwise
        */
        this.theme$ = this.themeSubject;
        /**
        * Observable tracking language
        */
        this.language$ = this.languageSubject;
        this.action$ = this.actionSubject;
        /**
        * Observable tracking country changes
        */
        this.locale$ = this.localeSubject;
        /**
        * Observable tracking color scheme changes
        */
        this.colorScheme$ = this.colorSchemeSubject;
        /**
         * Observable tracking if redirected from idb
         * Resolves to true on redirection, false otherwise
         */
        this.redirectedFromLogIn = new BehaviorSubject(undefined);
        /**
         * If current application is inside shell application
         * True if current application is inside shell application, false otherwise.
         */
        this.isChild = window.location !== window.parent.location;
        window.addEventListener('message', function (event) { return _this.onMessage(event); });
        this.id = uuidv4();
    }
    ShellCommunicationService.prototype.notifyShellAboutAction = function (action) {
        this.postMessageToShell(MessageType.action, action);
    };
    /**
     * Sends message to shell that it needs to navigate to login page
     */
    ShellCommunicationService.prototype.notifyShellAboutLogin = function (url) {
        this.postMessageToShell(MessageType.login, url);
    };
    /**
     * Sends message to shell that it needs to navigate to @url
     */
    ShellCommunicationService.prototype.notifyShellAboutNavigation = function (url) {
        this.postMessageToShell(MessageType.navigation, url);
    };
    /**
     * Sends registration message to shell
     */
    ShellCommunicationService.prototype.registerToShell = function () {
        this.postMessageToShell(MessageType.registration, this.id);
    };
    ShellCommunicationService.prototype.onMessage = function (event) {
        var _a = event.data, payload = _a.payload, messageType = _a.messageType;
        var handlers = __assign(__assign({}, this.handlers), { default: function () { return console.log('Unrecognized message for the shell.', event); } });
        (handlers[messageType] || handlers.default)(payload);
    };
    ShellCommunicationService.prototype.postMessageToShell = function (messageType, payload) {
        var message = { messageType: messageType, payload: payload };
        window.parent.window.postMessage(message, '*');
    };
    ShellCommunicationService.prototype.handleColorScheme = function (colorScheme) {
        this.colorSchemeSubject.next(colorScheme);
    };
    ShellCommunicationService.prototype.handleLanguage = function (language) {
        this.languageSubject.next(language);
    };
    ShellCommunicationService.prototype.handleLocale = function (locale) {
        this.localeSubject.next(locale);
    };
    ShellCommunicationService.prototype.handleTheme = function (theme) {
        this.themeSubject.next(theme);
    };
    ShellCommunicationService.prototype.handleNavigation = function (url) {
        this.router.navigateByUrl(url);
    };
    ShellCommunicationService.prototype.handleAction = function (action) {
        this.actionSubject.next(action);
    };
    ShellCommunicationService.prototype.handleAuthentication = function (user) {
        if (user === null || user === void 0 ? void 0 : user.access_token) {
            this.setUserToSessionStorage(user);
        }
        else {
            this.removeUserFromSessionStorage();
        }
        this.authService.reloadPersistedUserData();
    };
    ShellCommunicationService.prototype.handleRedirectedFromLogIn = function (redirected) {
        this.redirectedFromLogIn.next(redirected);
    };
    ShellCommunicationService.prototype.setUserToSessionStorage = function (user) {
        sessionStorage.setItem('refresh_token', user.refresh_token);
        sessionStorage.setItem('access_token', user.access_token);
        sessionStorage.setItem('id_token', user.id_token);
        sessionStorage.setItem('refresh_token_expires_at', String(user.refresh_token_expires_at));
        sessionStorage.setItem('access_token_expires_at', String(user.access_token_expires_at));
        sessionStorage.setItem('access_token_stored_at', String(user.access_token_stored_at));
        sessionStorage.setItem('username', user.username);
        sessionStorage.setItem('name', user.name);
        sessionStorage.setItem('roles', JSON.stringify(user.roles));
    };
    ShellCommunicationService.prototype.removeUserFromSessionStorage = function () {
        sessionStorage.removeItem('refresh_token');
        sessionStorage.removeItem('access_token');
        sessionStorage.removeItem('id_token');
        sessionStorage.removeItem('refresh_token_expires_at');
        sessionStorage.removeItem('access_token_expires_at');
        sessionStorage.removeItem('access_token_stored_at');
        sessionStorage.removeItem('username');
        sessionStorage.removeItem('name');
        sessionStorage.removeItem('roles');
    };
    ShellCommunicationService.ctorParameters = function () { return [
        { type: Router },
        { type: AvlAuthService }
    ]; };
    ShellCommunicationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShellCommunicationService_Factory() { return new ShellCommunicationService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AvlAuthService)); }, token: ShellCommunicationService, providedIn: "root" });
ShellCommunicationService.ɵfac = function ShellCommunicationService_Factory(t) { return new (t || ShellCommunicationService)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.AvlAuthService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShellCommunicationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.AvlAuthService }]; }, null); })();
    return ShellCommunicationService;
}());
export { ShellCommunicationService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,