/**
 * List of all types of messages that can be logged.
 */
export var LogSeverity;
(function (LogSeverity) {
    LogSeverity[LogSeverity["Debug"] = 0] = "Debug";
    LogSeverity[LogSeverity["Info"] = 1] = "Info";
    LogSeverity[LogSeverity["Warning"] = 2] = "Warning";
    LogSeverity[LogSeverity["Error"] = 3] = "Error";
    LogSeverity[LogSeverity["Fatal"] = 4] = "Fatal";
})(LogSeverity || (LogSeverity = {}));
/**
 * **LogConfig** class is required by the _LoggingModule_.
 *
 * An instance of this class should be passed into _forRoot_ method of _LoggingModule_
 * when importing module in the Angular application.
 * ```
 * import logConfig from 'logging.config.ts;
 * import LoggingModule from '@avl-services/ng-services';
 *  ....
 *  @NgModule({
 *    imports: [
 *      LoggingModule.forRoot(logConfig),
 *      ...
 *    ],
 *    ...
 *  }) export class AppModule {}
 * ```
 */
var LogConfig = /** @class */ (function () {
    /**
     * Creates instance of _LogConfig_ class.
     * @param endpoint API endpoint for logging.
     * @param targetName Name of the database in which logs will be stored
     * @param appName Name of the application that uses the logging service
     * @param version Version of the application that uses the logging service
     * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false
     * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info
     * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms
     * @param capacity Log queue capacity. Default: 10
     */
    function LogConfig(endpoint, targetName, appName, version, autologging, globalLogLevel, debounceTime, capacity) {
        if (autologging === void 0) { autologging = false; }
        if (globalLogLevel === void 0) { globalLogLevel = LogSeverity.Info; }
        if (debounceTime === void 0) { debounceTime = 30000; }
        if (capacity === void 0) { capacity = 10; }
        /**
         * Flag that indicates whether logging starts automatically once the user logs in using credential.
         *
         * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:
         * ```
         * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }
         * ```
         * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).
         *
         * - Optional
         * - Default: false
         */
        this.autologging = false;
        /**
         * Minimum message severity to log.
         * - Optional
         * - Default: LogSeverity.Info
         */
        this.globalLogLevel = LogSeverity.Info;
        /**
         * Time in milliseconds, determines the period of API requests for logging.
         * - Optional
         * - Default: 30_000 ms
         */
        this.debounceTime = 30000;
        /**
         * Log queue capacity
         *
         * If reached, API request is sent with all logs in log queue, and queue is cleared out.
         * - Optional
         * - Default: 10
         */
        this.capacity = 10;
        this.endpoint = endpoint;
        this.targetName = targetName;
        this.appName = appName;
        this.version = version;
        this.autologging = autologging;
        this.globalLogLevel = globalLogLevel;
        this.debounceTime = debounceTime;
        this.capacity = capacity;
    }
    return LogConfig;
}());
export { LogConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhdmwtc2VydmljZXMvbmctc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvbG9nZ2luZy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBTVg7QUFORCxXQUFZLFdBQVc7SUFDckIsK0NBQUssQ0FBQTtJQUNMLDZDQUFJLENBQUE7SUFDSixtREFBTyxDQUFBO0lBQ1AsK0NBQUssQ0FBQTtJQUNMLCtDQUFLLENBQUE7QUFDUCxDQUFDLEVBTlcsV0FBVyxLQUFYLFdBQVcsUUFNdEI7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSDtJQThERTs7Ozs7Ozs7OztPQVVHO0lBQ0gsbUJBQ0UsUUFBZ0IsRUFDaEIsVUFBa0IsRUFDbEIsT0FBZSxFQUNmLE9BQWUsRUFDZixXQUE0QixFQUM1QixjQUE4QyxFQUM5QyxZQUE2QixFQUM3QixRQUFxQjtRQUhyQiw0QkFBQSxFQUFBLG1CQUE0QjtRQUM1QiwrQkFBQSxFQUFBLGlCQUE4QixXQUFXLENBQUMsSUFBSTtRQUM5Qyw2QkFBQSxFQUFBLG9CQUE2QjtRQUM3Qix5QkFBQSxFQUFBLGFBQXFCO1FBeER2Qjs7Ozs7Ozs7Ozs7V0FXRztRQUNJLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBRXBDOzs7O1dBSUc7UUFDSSxtQkFBYyxHQUFnQixXQUFXLENBQUMsSUFBSSxDQUFDO1FBRXREOzs7O1dBSUc7UUFDSSxpQkFBWSxHQUFXLEtBQU0sQ0FBQztRQUVyQzs7Ozs7O1dBTUc7UUFDSSxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBdUIzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBNUZELElBNEZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIExpc3Qgb2YgYWxsIHR5cGVzIG9mIG1lc3NhZ2VzIHRoYXQgY2FuIGJlIGxvZ2dlZC5cclxuICovXHJcbmV4cG9ydCBlbnVtIExvZ1NldmVyaXR5IHtcclxuICBEZWJ1ZyxcclxuICBJbmZvLFxyXG4gIFdhcm5pbmcsXHJcbiAgRXJyb3IsXHJcbiAgRmF0YWwsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiAqKkxvZ0NvbmZpZyoqIGNsYXNzIGlzIHJlcXVpcmVkIGJ5IHRoZSBfTG9nZ2luZ01vZHVsZV8uXHJcbiAqIFxyXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIHNob3VsZCBiZSBwYXNzZWQgaW50byBfZm9yUm9vdF8gbWV0aG9kIG9mIF9Mb2dnaW5nTW9kdWxlX1xyXG4gKiB3aGVuIGltcG9ydGluZyBtb2R1bGUgaW4gdGhlIEFuZ3VsYXIgYXBwbGljYXRpb24uXHJcbiAqIGBgYFxyXG4gKiBpbXBvcnQgbG9nQ29uZmlnIGZyb20gJ2xvZ2dpbmcuY29uZmlnLnRzO1xyXG4gKiBpbXBvcnQgTG9nZ2luZ01vZHVsZSBmcm9tICdAYXZsLXNlcnZpY2VzL25nLXNlcnZpY2VzJztcclxuICogIC4uLi5cclxuICogIEBOZ01vZHVsZSh7XHJcbiAqICAgIGltcG9ydHM6IFtcclxuICogICAgICBMb2dnaW5nTW9kdWxlLmZvclJvb3QobG9nQ29uZmlnKSxcclxuICogICAgICAuLi5cclxuICogICAgXSxcclxuICogICAgLi4uXHJcbiAqICB9KSBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExvZ0NvbmZpZyB7XHJcbiAgLyoqXHJcbiAgICogQVBJIGVuZHBvaW50IGZvciBsb2dnaW5nIChlLmcuIGh0dHBzOi8vdml6Ym94LmF2bC5jb20vYXBpL3RoZWlhL2xvZ3MpLlxyXG4gICAqIC0gTWFuZGF0b3J5XHJcbiAgICovXHJcbiAgcHVibGljIHJlYWRvbmx5IGVuZHBvaW50OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIE5hbWUgb2YgdGhlIGRhdGFiYXNlIGluIHdoaWNoIGxvZ3Mgd2lsbCBiZSBzdG9yZWQuXHJcbiAgICogLSBNYW5kYXRvcnlcclxuICAgKi9cclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0TmFtZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBOYW1lIG9mIHRoZSBhcHBsaWNhdGlvbiB0aGF0IHVzZXMgdGhlIGxvZ2dpbmcgc2VydmljZS5cclxuICAgKiAtIE1hbmRhdG9yeVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWFkb25seSBhcHBOYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uIHRoYXQgdXNlcyB0aGUgbG9nZ2luZyBzZXJ2aWNlLlxyXG4gICAqIC0gTWFuZGF0b3J5XHJcbiAgICovXHJcbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb246IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGxvZ2dpbmcgc3RhcnRzIGF1dG9tYXRpY2FsbHkgb25jZSB0aGUgdXNlciBsb2dzIGluIHVzaW5nIGNyZWRlbnRpYWwuXHJcbiAgICogXHJcbiAgICogSWYgdHJ1ZSwgYXBwIHJlcXVpcmVzIF9BdmxBdXRoU2VydmljZV8gaW5zdGFuY2UgaW4gX0FwcE1vZHVsZV8gcHJvdmlkZXJzIGFycmF5OlxyXG4gICAqIGBgYFxyXG4gICAqIHsgcHJvdmlkZTogQXZsQXV0aFNlcnZpY2UsIHVzZUNsYXNzOiBBdmxPaWRjQ29kZUF1dGhTZXJ2aWNlIH1cclxuICAgKiBgYGBcclxuICAgKiBJZiBmYWxzZSwgdXNlciBjYW4gY29udHJvbCBsb2dnaW5nIHVzaW5nIHRoZSBzZXJ2aWNlIChfc3RhcnRMb2dnaW5nXywgX3N0b3BMb2dnaW5nXyBtZXRob2RzKS5cclxuICAgKiBcclxuICAgKiAtIE9wdGlvbmFsXHJcbiAgICogLSBEZWZhdWx0OiBmYWxzZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhdXRvbG9nZ2luZzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvKipcclxuICAgKiBNaW5pbXVtIG1lc3NhZ2Ugc2V2ZXJpdHkgdG8gbG9nLlxyXG4gICAqIC0gT3B0aW9uYWxcclxuICAgKiAtIERlZmF1bHQ6IExvZ1NldmVyaXR5LkluZm9cclxuICAgKi9cclxuICBwdWJsaWMgZ2xvYmFsTG9nTGV2ZWw6IExvZ1NldmVyaXR5ID0gTG9nU2V2ZXJpdHkuSW5mbztcclxuXHJcbiAgLyoqXHJcbiAgICogVGltZSBpbiBtaWxsaXNlY29uZHMsIGRldGVybWluZXMgdGhlIHBlcmlvZCBvZiBBUEkgcmVxdWVzdHMgZm9yIGxvZ2dpbmcuXHJcbiAgICogLSBPcHRpb25hbFxyXG4gICAqIC0gRGVmYXVsdDogMzBfMDAwIG1zXHJcbiAgICovXHJcbiAgcHVibGljIGRlYm91bmNlVGltZTogbnVtYmVyID0gMzBfMDAwO1xyXG5cclxuICAvKipcclxuICAgKiBMb2cgcXVldWUgY2FwYWNpdHkgIFxyXG4gICAqIFxyXG4gICAqIElmIHJlYWNoZWQsIEFQSSByZXF1ZXN0IGlzIHNlbnQgd2l0aCBhbGwgbG9ncyBpbiBsb2cgcXVldWUsIGFuZCBxdWV1ZSBpcyBjbGVhcmVkIG91dC5cclxuICAgKiAtIE9wdGlvbmFsXHJcbiAgICogLSBEZWZhdWx0OiAxMFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjYXBhY2l0eTogbnVtYmVyID0gMTA7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgaW5zdGFuY2Ugb2YgX0xvZ0NvbmZpZ18gY2xhc3MuXHJcbiAgICogQHBhcmFtIGVuZHBvaW50IEFQSSBlbmRwb2ludCBmb3IgbG9nZ2luZy5cclxuICAgKiBAcGFyYW0gdGFyZ2V0TmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZSBpbiB3aGljaCBsb2dzIHdpbGwgYmUgc3RvcmVkXHJcbiAgICogQHBhcmFtIGFwcE5hbWUgTmFtZSBvZiB0aGUgYXBwbGljYXRpb24gdGhhdCB1c2VzIHRoZSBsb2dnaW5nIHNlcnZpY2VcclxuICAgKiBAcGFyYW0gdmVyc2lvbiBWZXJzaW9uIG9mIHRoZSBhcHBsaWNhdGlvbiB0aGF0IHVzZXMgdGhlIGxvZ2dpbmcgc2VydmljZVxyXG4gICAqIEBwYXJhbSBhdXRvbG9nZ2luZyBGbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgbG9nZ2luZyBzdGFydHMgYXV0b21hdGljYWxseSBvbmNlIHRoZSB1c2VyIGxvZ3MgaW4gdXNpbmcgY3JlZGVudGlhbC4gRGVmYXVsdDogZmFsc2VcclxuICAgKiBAcGFyYW0gZ2xvYmFsTG9nTGV2ZWwgTWluaW11bSBtZXNzYWdlIHNldmVyaXR5IHRvIGxvZy4gRGVmYXVsdDogTG9nU2V2ZXJpdHkuSW5mb1xyXG4gICAqIEBwYXJhbSBkZWJvdW5jZVRpbWUgVGltZSBpbiBtaWxsaXNlY29uZHMsIGRldGVybWluZXMgdGhlIHBlcmlvZCBvZiBBUEkgcmVxdWVzdHMgZm9yIGxvZ2dpbmcuIERlZmF1bHQ6IDMwXzAwMCBtc1xyXG4gICAqIEBwYXJhbSBjYXBhY2l0eSBMb2cgcXVldWUgY2FwYWNpdHkuIERlZmF1bHQ6IDEwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBlbmRwb2ludDogc3RyaW5nLFxyXG4gICAgdGFyZ2V0TmFtZTogc3RyaW5nLFxyXG4gICAgYXBwTmFtZTogc3RyaW5nLFxyXG4gICAgdmVyc2lvbjogc3RyaW5nLFxyXG4gICAgYXV0b2xvZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZSxcclxuICAgIGdsb2JhbExvZ0xldmVsOiBMb2dTZXZlcml0eSA9IExvZ1NldmVyaXR5LkluZm8sXHJcbiAgICBkZWJvdW5jZVRpbWU6IG51bWJlciA9IDMwXzAwMCxcclxuICAgIGNhcGFjaXR5OiBudW1iZXIgPSAxMFxyXG4gICkge1xyXG4gICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xyXG4gICAgdGhpcy50YXJnZXROYW1lID0gdGFyZ2V0TmFtZTtcclxuICAgIHRoaXMuYXBwTmFtZSA9IGFwcE5hbWU7XHJcbiAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xyXG4gICAgdGhpcy5hdXRvbG9nZ2luZyA9IGF1dG9sb2dnaW5nO1xyXG4gICAgdGhpcy5nbG9iYWxMb2dMZXZlbCA9IGdsb2JhbExvZ0xldmVsO1xyXG4gICAgdGhpcy5kZWJvdW5jZVRpbWUgPSBkZWJvdW5jZVRpbWU7XHJcbiAgICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMb2cge1xyXG4gIHJlYWRvbmx5IGFwcE5hbWU/OiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgY29tcG9uZW50TmFtZT86IHN0cmluZztcclxuICByZWFkb25seSBzZXZlcml0eT86IHN0cmluZztcclxuICByZWFkb25seSBtZXNzYWdlPzogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IHByb2NJZD86IHN0cmluZztcclxuICByZWFkb25seSB0aW1lc3RhbXA/OiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgdmVyc2lvbj86IHN0cmluZztcclxuICByZWFkb25seSBBVkxSZXF1ZXN0SWQ/OiBzdHJpbmc7XHJcbn1cclxuIl19