import { __decorate } from "tslib";
/// <reference types="@avl-controls/core" />
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { NgxTranslateTranslationService } from '@avl-controls/ng-binders';
import '@avl-controls/core/dist/avl-localization-service/avl-localization-service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@avl-controls/ng-binders";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '@avl-controls/ng-binders';
let TranslationManagementService = class TranslationManagementService {
    constructor(translateService, translationService) {
        this.translateService = translateService;
        this.translationService = translationService;
        this.languages = [
            { code: 'en', label: 'English' },
            { code: 'hr', label: 'Croatian' },
        ];
    }
    initializeTranslations() {
        return () => {
            AvlLocalizationService.translationService = this.translationService;
            let lang = localStorage.getItem('lang');
            if (lang == null) {
                lang = this.languages[0].code;
                localStorage.setItem('lang', lang);
            }
            return this.translateService.use(lang).toPromise();
        };
    }
    get language() {
        return localStorage.getItem('lang');
    }
    changeLanguage(lang) {
        const oldLang = localStorage.getItem('lang');
        if (!oldLang || oldLang !== lang) {
            localStorage.setItem('lang', lang);
            location.reload();
        }
    }
};
TranslationManagementService.ɵfac = function TranslationManagementService_Factory(t) { return new (t || TranslationManagementService)(ɵngcc0.ɵɵinject(ɵngcc1.TranslateService), ɵngcc0.ɵɵinject(ɵngcc2.NgxTranslateTranslationService)); };
TranslationManagementService.ctorParameters = () => [
    { type: TranslateService },
    { type: NgxTranslateTranslationService }
];
TranslationManagementService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslationManagementService_Factory() { return new TranslationManagementService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.NgxTranslateTranslationService)); }, token: TranslationManagementService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslationManagementService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.TranslateService }, { type: ɵngcc2.NgxTranslateTranslationService }]; }, null); })();
export { TranslationManagementService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb24tbWFuYWdlbWVudC5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1zZXJ2aWNlcy9uZy1zZXJ2aWNlcy9saWIvdHJhbnNsYXRpb24tbWFuYWdlbWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBNEM7QUFFNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRSxPQUFPLDJFQUEyRSxDQUFDO0FBQ25GO0FBR0M7QUFDd0M7Ozs7QUFBekMsSUFBYSw0QkFBNEIsR0FBekMsTUFBYSw0QkFBNEI7QUFDekMsSUFBRSxZQUFvQixnQkFBa0MsRUFBVSxrQkFBa0Q7QUFDcEgsUUFEc0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQVMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFnQztBQUFDLFFBRzVHLGNBQVMsR0FBRztBQUNyQixZQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3BDLFlBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7QUFDckMsU0FBRyxDQUFDO0FBQ0osSUFORSxDQUFDO0FBQ0gsSUFNUyxzQkFBc0I7QUFBSyxRQUNoQyxPQUFPLEdBQUcsRUFBRTtBQUNoQixZQUFNLHNCQUFzQixDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztBQUMxRSxZQUFNLElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUMsWUFBTSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDeEIsZ0JBQVEsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3RDLGdCQUFRLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLGFBQU87QUFDUCxZQUFNLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6RCxRQUFJLENBQUMsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQUUsSUFBVyxRQUFRO0FBQUssUUFDdEIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLElBQUUsQ0FBQztBQUNILElBQ1MsY0FBYyxDQUFDLElBQVk7QUFDcEMsUUFBSSxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pELFFBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO0FBQ3RDLFlBQU0sWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekMsWUFBTSxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDeEIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILENBQUM7Mk9BQUE7QUFDRDtBQUFzRCxZQS9CZCxnQkFBZ0I7QUFBSSxZQUEwQiw4QkFBOEI7QUFBRztBQUNySDtBQUZXLDRCQUE0QixvQkFIeEMsVUFBVSxDQUFDLFVBQ1YsVUFBVSxFQUFFO0FBQU0sTUFDbkIsQ0FBQyxJQUNXO2FBQTRCLENBK0J4Qzs7O2tJQUNEOztBQTFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUxBLEFBQUEsQUFPQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQTlCQSxBQUFBLEFBQUEsQUFBQSxBQURBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBK0JBLEFBL0JBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkBhdmwtY29udHJvbHMvY29yZVwiIC8+XHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgTmd4VHJhbnNsYXRlVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGF2bC1jb250cm9scy9uZy1iaW5kZXJzJztcclxuaW1wb3J0ICdAYXZsLWNvbnRyb2xzL2NvcmUvZGlzdC9hdmwtbG9jYWxpemF0aW9uLXNlcnZpY2UvYXZsLWxvY2FsaXphdGlvbi1zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uTWFuYWdlbWVudFNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSwgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IE5neFRyYW5zbGF0ZVRyYW5zbGF0aW9uU2VydmljZSkge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxhbmd1YWdlcyA9IFtcclxuICAgIHsgY29kZTogJ2VuJywgbGFiZWw6ICdFbmdsaXNoJyB9LFxyXG4gICAgeyBjb2RlOiAnaHInLCBsYWJlbDogJ0Nyb2F0aWFuJyB9LFxyXG4gIF07XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplVHJhbnNsYXRpb25zKCk6ICgpID0+IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBBdmxMb2NhbGl6YXRpb25TZXJ2aWNlLnRyYW5zbGF0aW9uU2VydmljZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlO1xyXG4gICAgICBsZXQgbGFuZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5nJyk7XHJcbiAgICAgIGlmIChsYW5nID09IG51bGwpIHtcclxuICAgICAgICBsYW5nID0gdGhpcy5sYW5ndWFnZXNbMF0uY29kZTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFuZycsIGxhbmcpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UudXNlKGxhbmcpLnRvUHJvbWlzZSgpO1xyXG4gICAgfTtcclxuICB9XHJcbiAgcHVibGljIGdldCBsYW5ndWFnZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5nJyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2hhbmdlTGFuZ3VhZ2UobGFuZzogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBvbGRMYW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmcnKTtcclxuICAgIGlmICghb2xkTGFuZyB8fCBvbGRMYW5nICE9PSBsYW5nKSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYW5nJywgbGFuZyk7XHJcbiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=