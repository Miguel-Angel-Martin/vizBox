import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { HubConnectionBuilder, HubConnectionState, LogLevel } from '@microsoft/signalr';
import * as ɵngcc0 from '@angular/core';
let NotificationService = class NotificationService {
    constructor() {
        this.hubConnections = [];
        this.notification = new Subject();
        /**
         * Observable which emits newly arrived notifications.
         */
        this.notification$ = this.notification;
    }
    /**
     * Builds and starts signalR hub connection with the server.
     * If connection already exists and is not connected, restarts the connection.
     * @param endpoint server endpoint
     * @param options options of the connection
     */
    startConnection(endpoint, options) {
        let connection = this.getConnectionByID(options.connectionID);
        if (!connection) {
            connection = this.buildConnection(endpoint, options);
        }
        if (connection.state === HubConnectionState.Connected) {
            return;
        }
        connection
            .start()
            .then(() => this.startNotifications(connection, options.metadata))
            .catch(() => console.warn('Notification service: Failed to establish connection.'));
    }
    /**
     * Stops connection with the server
     * @param connectionID connection identifier
     */
    stopConnection(connectionID) {
        const connection = this.getConnectionByID(connectionID);
        if (!connection) {
            return;
        }
        connection.off('transferNotification');
        connection.stop();
    }
    /**
     * Removes connection entirely
     * @param connectionID connection identifier
     */
    removeConnection(connectionID) {
        this.stopConnection(connectionID);
        const index = this.hubConnections.findIndex(connection => connection.id === connectionID);
        if (index !== -1) {
            this.hubConnections.splice(index, 1);
        }
    }
    /**
     * Updates notifications metadata for specific connection. Notifies server about it.
     * @param connectionID connection identifier
     * @param metadata notification metadata, (e.g language)
     */
    updateNotifications(connectionID, metadata) {
        const connection = this.getConnectionByID(connectionID);
        if (!connection) {
            return;
        }
        this.startNotifications(connection, metadata);
    }
    // Private methods
    startNotifications(connection, metadata) {
        connection.invoke('startNotifications', metadata);
    }
    getConnectionByID(connectionID) {
        var _a;
        const index = this.hubConnections.findIndex(connection => connection.id === connectionID);
        return (_a = this.hubConnections[index]) === null || _a === void 0 ? void 0 : _a.connection;
    }
    buildConnection(endpoint, options) {
        const hubConnection = new HubConnectionBuilder()
            .configureLogging(LogLevel.None)
            .withUrl(endpoint)
            .withAutomaticReconnect()
            .build();
        hubConnection.onreconnected(() => this.startNotifications(hubConnection, options.metadata));
        hubConnection.on('transferNotification', (notification) => {
            this.notification.next(notification);
        });
        this.hubConnections.push({
            id: options.connectionID,
            connection: hubConnection
        });
        return hubConnection;
    }
};
NotificationService.ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(); };
NotificationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NotificationService, factory: NotificationService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable
    }], function () { return []; }, null); })();
export { NotificationService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,