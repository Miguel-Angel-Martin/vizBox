import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Subject, BehaviorSubject } from 'rxjs';
import { v4 as uuidv4 } from 'uuid';
import { MessageType } from './message.model';
import { AvlAuthService } from '@avl-ng-controls/auth';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@avl-ng-controls/auth";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@avl-ng-controls/auth';
let ShellCommunicationService = class ShellCommunicationService {
    constructor(router, authService) {
        this.router = router;
        this.authService = authService;
        this.handlers = {
            [MessageType.theme]: (theme) => this.handleTheme(theme),
            [MessageType.locale]: (locale) => this.handleLocale(locale),
            [MessageType.language]: (language) => this.handleLanguage(language),
            [MessageType.colorScheme]: (colorScheme) => this.handleColorScheme(colorScheme),
            [MessageType.navigation]: (url) => this.handleNavigation(url),
            [MessageType.action]: (action) => this.handleAction(action),
            [MessageType.authentication]: (user) => this.handleAuthentication(user),
            [MessageType.redirectedFromLogIn]: (redirected) => this.handleRedirectedFromLogIn(redirected),
        };
        this.themeSubject = new Subject();
        this.languageSubject = new Subject();
        this.actionSubject = new Subject();
        this.localeSubject = new Subject();
        this.colorSchemeSubject = new Subject();
        /**
        * Observable tracking theme
        * Emits "dark" if dark theme selected, "light" otherwise
        */
        this.theme$ = this.themeSubject;
        /**
        * Observable tracking language
        */
        this.language$ = this.languageSubject;
        this.action$ = this.actionSubject;
        /**
        * Observable tracking country changes
        */
        this.locale$ = this.localeSubject;
        /**
        * Observable tracking color scheme changes
        */
        this.colorScheme$ = this.colorSchemeSubject;
        /**
         * Observable tracking if redirected from idb
         * Resolves to true on redirection, false otherwise
         */
        this.redirectedFromLogIn = new BehaviorSubject(undefined);
        /**
         * If current application is inside shell application
         * True if current application is inside shell application, false otherwise.
         */
        this.isChild = window.location !== window.parent.location;
        window.addEventListener('message', (event) => this.onMessage(event));
        this.id = uuidv4();
    }
    notifyShellAboutAction(action) {
        this.postMessageToShell(MessageType.action, action);
    }
    /**
     * Sends message to shell that it needs to navigate to login page
     */
    notifyShellAboutLogin(url) {
        this.postMessageToShell(MessageType.login, url);
    }
    /**
     * Sends message to shell that it needs to navigate to @url
     */
    notifyShellAboutNavigation(url) {
        this.postMessageToShell(MessageType.navigation, url);
    }
    /**
     * Sends registration message to shell
     */
    registerToShell() {
        this.postMessageToShell(MessageType.registration, this.id);
    }
    onMessage(event) {
        const { payload, messageType } = event.data;
        const handlers = Object.assign(Object.assign({}, this.handlers), { default: () => console.log('Unrecognized message for the shell.', event) });
        (handlers[messageType] || handlers.default)(payload);
    }
    postMessageToShell(messageType, payload) {
        const message = { messageType, payload };
        window.parent.window.postMessage(message, '*');
    }
    handleColorScheme(colorScheme) {
        this.colorSchemeSubject.next(colorScheme);
    }
    handleLanguage(language) {
        this.languageSubject.next(language);
    }
    handleLocale(locale) {
        this.localeSubject.next(locale);
    }
    handleTheme(theme) {
        this.themeSubject.next(theme);
    }
    handleNavigation(url) {
        this.router.navigateByUrl(url);
    }
    handleAction(action) {
        this.actionSubject.next(action);
    }
    handleAuthentication(user) {
        if (user === null || user === void 0 ? void 0 : user.access_token) {
            this.setUserToSessionStorage(user);
        }
        else {
            this.removeUserFromSessionStorage();
        }
        this.authService.reloadPersistedUserData();
    }
    handleRedirectedFromLogIn(redirected) {
        this.redirectedFromLogIn.next(redirected);
    }
    setUserToSessionStorage(user) {
        sessionStorage.setItem('refresh_token', user.refresh_token);
        sessionStorage.setItem('access_token', user.access_token);
        sessionStorage.setItem('id_token', user.id_token);
        sessionStorage.setItem('refresh_token_expires_at', String(user.refresh_token_expires_at));
        sessionStorage.setItem('access_token_expires_at', String(user.access_token_expires_at));
        sessionStorage.setItem('access_token_stored_at', String(user.access_token_stored_at));
        sessionStorage.setItem('username', user.username);
        sessionStorage.setItem('name', user.name);
        sessionStorage.setItem('roles', JSON.stringify(user.roles));
    }
    removeUserFromSessionStorage() {
        sessionStorage.removeItem('refresh_token');
        sessionStorage.removeItem('access_token');
        sessionStorage.removeItem('id_token');
        sessionStorage.removeItem('refresh_token_expires_at');
        sessionStorage.removeItem('access_token_expires_at');
        sessionStorage.removeItem('access_token_stored_at');
        sessionStorage.removeItem('username');
        sessionStorage.removeItem('name');
        sessionStorage.removeItem('roles');
    }
};
ShellCommunicationService.ɵfac = function ShellCommunicationService_Factory(t) { return new (t || ShellCommunicationService)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.AvlAuthService)); };
ShellCommunicationService.ctorParameters = () => [
    { type: Router },
    { type: AvlAuthService }
];
ShellCommunicationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShellCommunicationService_Factory() { return new ShellCommunicationService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AvlAuthService)); }, token: ShellCommunicationService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShellCommunicationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.AvlAuthService }]; }, null); })();
export { ShellCommunicationService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,