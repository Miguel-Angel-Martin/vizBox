/**
 * List of all types of messages that can be logged.
 */
export var LogSeverity;
(function (LogSeverity) {
    LogSeverity[LogSeverity["Debug"] = 0] = "Debug";
    LogSeverity[LogSeverity["Info"] = 1] = "Info";
    LogSeverity[LogSeverity["Warning"] = 2] = "Warning";
    LogSeverity[LogSeverity["Error"] = 3] = "Error";
    LogSeverity[LogSeverity["Fatal"] = 4] = "Fatal";
})(LogSeverity || (LogSeverity = {}));
/**
 * **LogConfig** class is required by the _LoggingModule_.
 *
 * An instance of this class should be passed into _forRoot_ method of _LoggingModule_
 * when importing module in the Angular application.
 * ```
 * import logConfig from 'logging.config.ts;
 * import LoggingModule from '@avl-services/ng-services';
 *  ....
 *  @NgModule({
 *    imports: [
 *      LoggingModule.forRoot(logConfig),
 *      ...
 *    ],
 *    ...
 *  }) export class AppModule {}
 * ```
 */
export class LogConfig {
    /**
     * Creates instance of _LogConfig_ class.
     * @param endpoint API endpoint for logging.
     * @param targetName Name of the database in which logs will be stored
     * @param appName Name of the application that uses the logging service
     * @param version Version of the application that uses the logging service
     * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false
     * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info
     * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms
     * @param capacity Log queue capacity. Default: 10
     */
    constructor(endpoint, targetName, appName, version, autologging = false, globalLogLevel = LogSeverity.Info, debounceTime = 30000, capacity = 10) {
        /**
         * Flag that indicates whether logging starts automatically once the user logs in using credential.
         *
         * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:
         * ```
         * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }
         * ```
         * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).
         *
         * - Optional
         * - Default: false
         */
        this.autologging = false;
        /**
         * Minimum message severity to log.
         * - Optional
         * - Default: LogSeverity.Info
         */
        this.globalLogLevel = LogSeverity.Info;
        /**
         * Time in milliseconds, determines the period of API requests for logging.
         * - Optional
         * - Default: 30_000 ms
         */
        this.debounceTime = 30000;
        /**
         * Log queue capacity
         *
         * If reached, API request is sent with all logs in log queue, and queue is cleared out.
         * - Optional
         * - Default: 10
         */
        this.capacity = 10;
        this.endpoint = endpoint;
        this.targetName = targetName;
        this.appName = appName;
        this.version = version;
        this.autologging = autologging;
        this.globalLogLevel = globalLogLevel;
        this.debounceTime = debounceTime;
        this.capacity = capacity;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhdmwtc2VydmljZXMvbmctc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvbG9nZ2luZy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBTVg7QUFORCxXQUFZLFdBQVc7SUFDckIsK0NBQUssQ0FBQTtJQUNMLDZDQUFJLENBQUE7SUFDSixtREFBTyxDQUFBO0lBQ1AsK0NBQUssQ0FBQTtJQUNMLCtDQUFLLENBQUE7QUFDUCxDQUFDLEVBTlcsV0FBVyxLQUFYLFdBQVcsUUFNdEI7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxNQUFNLE9BQU8sU0FBUztJQThEcEI7Ozs7Ozs7Ozs7T0FVRztJQUNILFlBQ0UsUUFBZ0IsRUFDaEIsVUFBa0IsRUFDbEIsT0FBZSxFQUNmLE9BQWUsRUFDZixjQUF1QixLQUFLLEVBQzVCLGlCQUE4QixXQUFXLENBQUMsSUFBSSxFQUM5QyxlQUF1QixLQUFNLEVBQzdCLFdBQW1CLEVBQUU7UUF4RHZCOzs7Ozs7Ozs7OztXQVdHO1FBQ0ksZ0JBQVcsR0FBWSxLQUFLLENBQUM7UUFFcEM7Ozs7V0FJRztRQUNJLG1CQUFjLEdBQWdCLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFFdEQ7Ozs7V0FJRztRQUNJLGlCQUFZLEdBQVcsS0FBTSxDQUFDO1FBRXJDOzs7Ozs7V0FNRztRQUNJLGFBQVEsR0FBVyxFQUFFLENBQUM7UUF1QjNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMaXN0IG9mIGFsbCB0eXBlcyBvZiBtZXNzYWdlcyB0aGF0IGNhbiBiZSBsb2dnZWQuXHJcbiAqL1xyXG5leHBvcnQgZW51bSBMb2dTZXZlcml0eSB7XHJcbiAgRGVidWcsXHJcbiAgSW5mbyxcclxuICBXYXJuaW5nLFxyXG4gIEVycm9yLFxyXG4gIEZhdGFsLFxyXG59XHJcblxyXG4vKipcclxuICogKipMb2dDb25maWcqKiBjbGFzcyBpcyByZXF1aXJlZCBieSB0aGUgX0xvZ2dpbmdNb2R1bGVfLlxyXG4gKiBcclxuICogQW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBzaG91bGQgYmUgcGFzc2VkIGludG8gX2ZvclJvb3RfIG1ldGhvZCBvZiBfTG9nZ2luZ01vZHVsZV9cclxuICogd2hlbiBpbXBvcnRpbmcgbW9kdWxlIGluIHRoZSBBbmd1bGFyIGFwcGxpY2F0aW9uLlxyXG4gKiBgYGBcclxuICogaW1wb3J0IGxvZ0NvbmZpZyBmcm9tICdsb2dnaW5nLmNvbmZpZy50cztcclxuICogaW1wb3J0IExvZ2dpbmdNb2R1bGUgZnJvbSAnQGF2bC1zZXJ2aWNlcy9uZy1zZXJ2aWNlcyc7XHJcbiAqICAuLi4uXHJcbiAqICBATmdNb2R1bGUoe1xyXG4gKiAgICBpbXBvcnRzOiBbXHJcbiAqICAgICAgTG9nZ2luZ01vZHVsZS5mb3JSb290KGxvZ0NvbmZpZyksXHJcbiAqICAgICAgLi4uXHJcbiAqICAgIF0sXHJcbiAqICAgIC4uLlxyXG4gKiAgfSkgZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7fVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMb2dDb25maWcge1xyXG4gIC8qKlxyXG4gICAqIEFQSSBlbmRwb2ludCBmb3IgbG9nZ2luZyAoZS5nLiBodHRwczovL3ZpemJveC5hdmwuY29tL2FwaS90aGVpYS9sb2dzKS5cclxuICAgKiAtIE1hbmRhdG9yeVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWFkb25seSBlbmRwb2ludDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBOYW1lIG9mIHRoZSBkYXRhYmFzZSBpbiB3aGljaCBsb2dzIHdpbGwgYmUgc3RvcmVkLlxyXG4gICAqIC0gTWFuZGF0b3J5XHJcbiAgICovXHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldE5hbWU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTmFtZSBvZiB0aGUgYXBwbGljYXRpb24gdGhhdCB1c2VzIHRoZSBsb2dnaW5nIHNlcnZpY2UuXHJcbiAgICogLSBNYW5kYXRvcnlcclxuICAgKi9cclxuICBwdWJsaWMgcmVhZG9ubHkgYXBwTmFtZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBWZXJzaW9uIG9mIHRoZSBhcHBsaWNhdGlvbiB0aGF0IHVzZXMgdGhlIGxvZ2dpbmcgc2VydmljZS5cclxuICAgKiAtIE1hbmRhdG9yeVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEZsYWcgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBsb2dnaW5nIHN0YXJ0cyBhdXRvbWF0aWNhbGx5IG9uY2UgdGhlIHVzZXIgbG9ncyBpbiB1c2luZyBjcmVkZW50aWFsLlxyXG4gICAqIFxyXG4gICAqIElmIHRydWUsIGFwcCByZXF1aXJlcyBfQXZsQXV0aFNlcnZpY2VfIGluc3RhbmNlIGluIF9BcHBNb2R1bGVfIHByb3ZpZGVycyBhcnJheTpcclxuICAgKiBgYGBcclxuICAgKiB7IHByb3ZpZGU6IEF2bEF1dGhTZXJ2aWNlLCB1c2VDbGFzczogQXZsT2lkY0NvZGVBdXRoU2VydmljZSB9XHJcbiAgICogYGBgXHJcbiAgICogSWYgZmFsc2UsIHVzZXIgY2FuIGNvbnRyb2wgbG9nZ2luZyB1c2luZyB0aGUgc2VydmljZSAoX3N0YXJ0TG9nZ2luZ18sIF9zdG9wTG9nZ2luZ18gbWV0aG9kcykuXHJcbiAgICogXHJcbiAgICogLSBPcHRpb25hbFxyXG4gICAqIC0gRGVmYXVsdDogZmFsc2VcclxuICAgKi9cclxuICBwdWJsaWMgYXV0b2xvZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWluaW11bSBtZXNzYWdlIHNldmVyaXR5IHRvIGxvZy5cclxuICAgKiAtIE9wdGlvbmFsXHJcbiAgICogLSBEZWZhdWx0OiBMb2dTZXZlcml0eS5JbmZvXHJcbiAgICovXHJcbiAgcHVibGljIGdsb2JhbExvZ0xldmVsOiBMb2dTZXZlcml0eSA9IExvZ1NldmVyaXR5LkluZm87XHJcblxyXG4gIC8qKlxyXG4gICAqIFRpbWUgaW4gbWlsbGlzZWNvbmRzLCBkZXRlcm1pbmVzIHRoZSBwZXJpb2Qgb2YgQVBJIHJlcXVlc3RzIGZvciBsb2dnaW5nLlxyXG4gICAqIC0gT3B0aW9uYWxcclxuICAgKiAtIERlZmF1bHQ6IDMwXzAwMCBtc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBkZWJvdW5jZVRpbWU6IG51bWJlciA9IDMwXzAwMDtcclxuXHJcbiAgLyoqXHJcbiAgICogTG9nIHF1ZXVlIGNhcGFjaXR5ICBcclxuICAgKiBcclxuICAgKiBJZiByZWFjaGVkLCBBUEkgcmVxdWVzdCBpcyBzZW50IHdpdGggYWxsIGxvZ3MgaW4gbG9nIHF1ZXVlLCBhbmQgcXVldWUgaXMgY2xlYXJlZCBvdXQuXHJcbiAgICogLSBPcHRpb25hbFxyXG4gICAqIC0gRGVmYXVsdDogMTBcclxuICAgKi9cclxuICBwdWJsaWMgY2FwYWNpdHk6IG51bWJlciA9IDEwO1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGluc3RhbmNlIG9mIF9Mb2dDb25maWdfIGNsYXNzLlxyXG4gICAqIEBwYXJhbSBlbmRwb2ludCBBUEkgZW5kcG9pbnQgZm9yIGxvZ2dpbmcuXHJcbiAgICogQHBhcmFtIHRhcmdldE5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UgaW4gd2hpY2ggbG9ncyB3aWxsIGJlIHN0b3JlZFxyXG4gICAqIEBwYXJhbSBhcHBOYW1lIE5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uIHRoYXQgdXNlcyB0aGUgbG9nZ2luZyBzZXJ2aWNlXHJcbiAgICogQHBhcmFtIHZlcnNpb24gVmVyc2lvbiBvZiB0aGUgYXBwbGljYXRpb24gdGhhdCB1c2VzIHRoZSBsb2dnaW5nIHNlcnZpY2VcclxuICAgKiBAcGFyYW0gYXV0b2xvZ2dpbmcgRmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGxvZ2dpbmcgc3RhcnRzIGF1dG9tYXRpY2FsbHkgb25jZSB0aGUgdXNlciBsb2dzIGluIHVzaW5nIGNyZWRlbnRpYWwuIERlZmF1bHQ6IGZhbHNlXHJcbiAgICogQHBhcmFtIGdsb2JhbExvZ0xldmVsIE1pbmltdW0gbWVzc2FnZSBzZXZlcml0eSB0byBsb2cuIERlZmF1bHQ6IExvZ1NldmVyaXR5LkluZm9cclxuICAgKiBAcGFyYW0gZGVib3VuY2VUaW1lIFRpbWUgaW4gbWlsbGlzZWNvbmRzLCBkZXRlcm1pbmVzIHRoZSBwZXJpb2Qgb2YgQVBJIHJlcXVlc3RzIGZvciBsb2dnaW5nLiBEZWZhdWx0OiAzMF8wMDAgbXNcclxuICAgKiBAcGFyYW0gY2FwYWNpdHkgTG9nIHF1ZXVlIGNhcGFjaXR5LiBEZWZhdWx0OiAxMFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZW5kcG9pbnQ6IHN0cmluZyxcclxuICAgIHRhcmdldE5hbWU6IHN0cmluZyxcclxuICAgIGFwcE5hbWU6IHN0cmluZyxcclxuICAgIHZlcnNpb246IHN0cmluZyxcclxuICAgIGF1dG9sb2dnaW5nOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICBnbG9iYWxMb2dMZXZlbDogTG9nU2V2ZXJpdHkgPSBMb2dTZXZlcml0eS5JbmZvLFxyXG4gICAgZGVib3VuY2VUaW1lOiBudW1iZXIgPSAzMF8wMDAsXHJcbiAgICBjYXBhY2l0eTogbnVtYmVyID0gMTBcclxuICApIHtcclxuICAgIHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcclxuICAgIHRoaXMudGFyZ2V0TmFtZSA9IHRhcmdldE5hbWU7XHJcbiAgICB0aGlzLmFwcE5hbWUgPSBhcHBOYW1lO1xyXG4gICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuICAgIHRoaXMuYXV0b2xvZ2dpbmcgPSBhdXRvbG9nZ2luZztcclxuICAgIHRoaXMuZ2xvYmFsTG9nTGV2ZWwgPSBnbG9iYWxMb2dMZXZlbDtcclxuICAgIHRoaXMuZGVib3VuY2VUaW1lID0gZGVib3VuY2VUaW1lO1xyXG4gICAgdGhpcy5jYXBhY2l0eSA9IGNhcGFjaXR5O1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9nIHtcclxuICByZWFkb25seSBhcHBOYW1lPzogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IGNvbXBvbmVudE5hbWU/OiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgc2V2ZXJpdHk/OiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgbWVzc2FnZT86IHN0cmluZztcclxuICByZWFkb25seSBwcm9jSWQ/OiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgdGltZXN0YW1wPzogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IHZlcnNpb24/OiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgQVZMUmVxdWVzdElkPzogc3RyaW5nO1xyXG59XHJcbiJdfQ==