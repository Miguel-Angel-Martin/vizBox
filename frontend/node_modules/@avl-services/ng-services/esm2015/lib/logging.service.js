import { __decorate, __param } from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { AvlAuthService } from '@avl-ng-controls/auth';
import { interval, Subject } from 'rxjs';
import { filter, switchMap, takeUntil, tap } from 'rxjs/operators';
import { Log, LogConfig, LogSeverity } from './logging.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@avl-ng-controls/auth";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@avl-ng-controls/auth';
let LoggingService = class LoggingService {
    /**
     * @ignore
     */
    constructor(http, config, authService) {
        var _a;
        this.http = http;
        this.config = config;
        this.authService = authService;
        this.logs = [];
        this.isLogging = false;
        this.debounceTime$ = new Subject();
        this.logs$ = new Subject();
        this.stopLogging$ = new Subject();
        this.postLogs$ = new Subject();
        this.destroyed$ = new Subject();
        this.headers = new HttpHeaders({
            targetName: this.config.targetName,
        });
        if (config.autologging) {
            (_a = this.authService) === null || _a === void 0 ? void 0 : _a.isLoggedIn$.pipe(takeUntil(this.destroyed$)).subscribe((isLoggedIn) => this.decideOnLogging(isLoggedIn));
        }
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.postLogs$.complete();
        this.debounceTime$.complete();
        this.logs$.complete();
        this.stopLogging$.next();
        this.stopLogging$.complete();
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    /**
     * Starts periodical logging process.
     *
     * Depends on _debounceTime_ and _capacity_ properties.
     */
    startLogging() {
        this.isLogging = true;
        this.debounceTime$
            .pipe(takeUntil(this.stopLogging$), switchMap((debounceTime) => this.periodicalLogging(debounceTime)))
            .subscribe(() => this.onPostMessages());
        this.postLogs$
            .pipe(takeUntil(this.stopLogging$), switchMap(() => this.postMessages()))
            .subscribe(() => this.onPostMessages());
        this.setLoggingDebounceTime(this.config.debounceTime);
    }
    /**
     * Stops logging process.
     */
    stopLogging() {
        this.isLogging = false;
        this.postLogs();
        this.stopLogging$.next();
    }
    /**
     * Gets all currently queued logs as an observable value.
     * @returns All currently queued logs as an observable value
     */
    getLogs$() {
        return this.logs$.asObservable();
    }
    /**
     * Logs message with debug severity.
     * @param message Message used for constructing a debug log
     * @param componentName Name of the component which called this method
     */
    debug(message, componentName = '') {
        this.log(message, LogSeverity.Debug, componentName);
    }
    /**
     * Logs message with info severity.
     * @param message Message used for constructing a info log
     * @param componentName Name of the component which called this method
     */
    info(message, componentName = '') {
        this.log(message, LogSeverity.Info, componentName);
    }
    /**
     * Logs message with warning severity.
     * @param message Message used for constructing a warning log
     * @param componentName Name of the component which called this method
     */
    warn(message, componentName = '') {
        this.log(message, LogSeverity.Warning, componentName);
    }
    /**
     * Logs message with error severity.
     * @param message Message used for constructing a error log
     * @param componentName Name of the component which called this method
     */
    error(message, componentName = '') {
        this.log(message, LogSeverity.Error, componentName);
    }
    /**
     * Logs message with fatal severity.
     * @param message Message used for constructing a fatal log
     * @param componentName Name of the component which called this method
     */
    fatal(message, componentName = '') {
        this.log(message, LogSeverity.Fatal, componentName);
    }
    /**
     * Setter for debounce time (log period).
     * @param debounceTime Time in milliseconds; determines the period of API requests for logging
     */
    setLoggingDebounceTime(debounceTime) {
        this.config.debounceTime = debounceTime;
        this.debounceTime$.next(debounceTime);
    }
    /**
     * Setter for global log level.
     * @param globalLogLevel Minimum message severity to log
     */
    setGlobalLogLevel(globalLogLevel) {
        this.config.globalLogLevel = globalLogLevel;
    }
    /**
     * Setter for log queue capacity.
     * @param capacity Log queue capacity
     */
    setLogCapacity(capacity) {
        this.config.capacity = capacity;
    }
    // Logic, private methods
    log(message, severity, componentName) {
        if (!this.isLogging || severity < this.config.globalLogLevel) {
            return;
        }
        this.createAndStoreLog(message, severity, componentName);
        this.dispatchLogs();
        if (this.isFullCapacity()) {
            this.postLogs$.next();
        }
    }
    createAndStoreLog(message, severityType, componentName) {
        const timestamp = new Date().toISOString();
        const { appName, version } = this.config;
        const severity = severityType.toString();
        const log = { message, severity, timestamp, componentName, appName, version };
        this.logs.push(log);
    }
    isFullCapacity() {
        return this.logs.length >= this.config.capacity;
    }
    clearLogs() {
        this.logs = [];
    }
    onPostMessages() {
        this.clearLogs();
        this.dispatchLogs();
    }
    postLogs() {
        this.postLogs$.next();
    }
    periodicalLogging(period) {
        return interval(period).pipe(tap(() => {
            if (!this.logs.length) {
                this.dispatchLogs();
            }
        }), filter(() => !!this.logs.length), switchMap(() => this.postMessages()));
    }
    postMessages() {
        return this.http.post(this.config.endpoint, this.logs, {
            headers: this.headers,
        });
    }
    dispatchLogs() {
        this.logs$.next(this.logs);
    }
    decideOnLogging(isLoggedIn) {
        if (isLoggedIn) {
            this.startLogging();
        }
        else {
            this.stopLogging();
        }
    }
};
LoggingService.ɵfac = function LoggingService_Factory(t) { return new (t || LoggingService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject('loggingConfig'), ɵngcc0.ɵɵinject(AvlAuthService, 8)); };
LoggingService.ctorParameters = () => [
    { type: HttpClient },
    { type: LogConfig, decorators: [{ type: Inject, args: ['loggingConfig',] }] },
    { type: AvlAuthService, decorators: [{ type: Optional }, { type: Inject, args: [AvlAuthService,] }] }
];
LoggingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoggingService_Factory() { return new LoggingService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject("loggingConfig"), i0.ɵɵinject(i2.AvlAuthService, 8)); }, token: LoggingService, providedIn: "root" });
LoggingService = __decorate([ __param(1, Inject('loggingConfig')),
    __param(2, Optional()), __param(2, Inject(AvlAuthService))
], LoggingService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoggingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: LogConfig, decorators: [{
                type: Inject,
                args: ['loggingConfig']
            }] }, { type: ɵngcc2.AvlAuthService, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [AvlAuthService]
            }] }]; }, null); })();
export { LoggingService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,