import { __decorate } from "tslib";
import { Injectable } from "@angular/core";
import { TranslationManagementService } from "./translation-management.service";
import { ThemeService } from "./theme.service";
import { Subject } from "rxjs";
import { MessageType, } from "./message.model";
import { AvlAuthService, User } from '@avl-ng-controls/auth';
import * as i0 from "@angular/core";
import * as i1 from "./translation-management.service";
import * as i2 from "./theme.service";
import * as i3 from "@avl-ng-controls/auth";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@avl-ng-controls/auth';
let ChildCommunicationService = class ChildCommunicationService {
    constructor(translationManagementService, themeService, authService) {
        this.translationManagementService = translationManagementService;
        this.themeService = themeService;
        this.authService = authService;
        this.handlers = {
            [MessageType.login]: (url) => this.handleLogin(url),
            [MessageType.navigation]: (url) => this.handleNavigation(url),
            [MessageType.action]: (action) => this.handleAction(action),
            [MessageType.registration]: (_) => this.handleRegistration(),
            [MessageType.user]: (user) => this.handleUser(user),
        };
        this.actionSubject = new Subject();
        this.navigationSubject = new Subject();
        this.loginSubject = new Subject();
        this.registrationCompletedSubject = new Subject();
        this.action$ = this.actionSubject;
        /**
         * Observable tracking url to navigate to
         */
        this.navigation$ = this.navigationSubject;
        /**
         * Observable tracking url for login
         * Url for login provided by child application
         */
        this.login$ = this.loginSubject;
        /**
         * Observable tracking child registration
         * Emits true if registration was successful, false otherwise
         */
        this.registrationCompleted$ = this
            .registrationCompletedSubject;
        window.addEventListener("message", (event) => this.onMessage(event));
        this.themeService.themeChanged.subscribe(() => this.postThemeToChildren());
    }
    /**
     * Sends message to child about locale
     */
    notifyChildAboutLocale(country) {
        this.postMessageToChild(MessageType.locale, country);
    }
    /**
     * Sends message to child about language
     */
    notifyChildAboutLanguage(language) {
        this.postMessageToChild(MessageType.language, language);
    }
    /**
     * Sends message to child about action
     */
    notifyChildAboutAction(action) {
        this.postMessageToChild(MessageType.action, action);
    }
    /**
     * Sends message to child about navigation
     */
    notifyChildAboutNavigation(url) {
        this.postMessageToChild(MessageType.navigation, url);
    }
    /**
     * Sends messages to children about current user
     */
    postAuthenticationDataToChildren() {
        const payload = this.authService.readUserFromSessionStorage();
        this.postMessageToChild(MessageType.authentication, payload);
    }
    /**
     * Sends messages to children about selected application theme
     */
    postThemeToChildren() {
        const theme = this.themeService.getCurrentTheme();
        this.postMessageToChild(MessageType.theme, theme);
    }
    /**
     * Sends messages to children about selected language
     */
    postLanguageToChildren() {
        this.postMessageToChild(MessageType.language, this.translationManagementService.language);
    }
    /**
     * Sends messages to children about selected country
     */
    postLocaleToChildren() {
        const country = localStorage.getItem("country");
        this.postMessageToChild(MessageType.locale, country);
    }
    /**
     * Sends message to child about redirection from idb
     */
    postRedirectedFromLogIn(payload) {
        this.postMessageToChild(MessageType.redirectedFromLogIn, payload);
    }
    /**
     * Sends message to children about color scheme
     */
    postColorSchemeToChildren() {
        const computedStyle = window.getComputedStyle(document.body);
        const productColor = computedStyle.getPropertyValue("--avl-product-color");
        const productHoverColor = computedStyle.getPropertyValue("--avl-product-hover-color");
        const productFocusColor = computedStyle.getPropertyValue("--avl-product-focus-color");
        const colorScheme = {
            "--avl-product-color": productColor,
            "--avl-product-hover-color": productHoverColor,
            "--avl-product-focus-color": productFocusColor,
        };
        this.postMessageToChild(MessageType.colorScheme, colorScheme);
    }
    handleAction(action) {
        this.actionSubject.next(action);
    }
    handleNavigation(navigation) {
        this.navigationSubject.next(navigation);
    }
    handleLogin(login) {
        this.loginSubject.next(login);
    }
    // when child started its registration iframe is loaded and shell gets a message that he can send messages to iframe
    handleRegistration() {
        this.iframeEl = document.getElementsByTagName("iframe")[0];
        this.postThemeToChildren();
        this.postColorSchemeToChildren();
        this.postLanguageToChildren();
        this.postLocaleToChildren();
        this.registrationCompletedSubject.next(true);
    }
    onMessage(event) {
        const { payload, messageType } = event.data;
        const handlers = Object.assign(Object.assign({}, this.handlers), { default: () => console.log("Unrecognized message for the child.", event) });
        (handlers[messageType] || handlers.default)(payload);
    }
    postMessageToChild(messageType, payload) {
        var _a;
        if (!this.iframeEl) {
            return;
        }
        const message = { messageType, payload };
        (_a = this.iframeEl.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, "*");
    }
    // when child updates user data, it has to reflect in user data in shell
    handleUser(user) {
        if (user === null || user === void 0 ? void 0 : user.access_token) {
            this.authService.storeUserToSessionStorage(user);
        }
        else {
            this.authService.clearUserFromSessionStorage();
        }
        this.authService.reloadPersistedUserData();
    }
};
ChildCommunicationService.ɵfac = function ChildCommunicationService_Factory(t) { return new (t || ChildCommunicationService)(ɵngcc0.ɵɵinject(TranslationManagementService), ɵngcc0.ɵɵinject(ThemeService), ɵngcc0.ɵɵinject(ɵngcc1.AvlAuthService)); };
ChildCommunicationService.ctorParameters = () => [
    { type: TranslationManagementService },
    { type: ThemeService },
    { type: AvlAuthService }
];
ChildCommunicationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ChildCommunicationService_Factory() { return new ChildCommunicationService(i0.ɵɵinject(i1.TranslationManagementService), i0.ɵɵinject(i2.ThemeService), i0.ɵɵinject(i3.AvlAuthService)); }, token: ChildCommunicationService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChildCommunicationService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: TranslationManagementService }, { type: ThemeService }, { type: ɵngcc1.AvlAuthService }]; }, null); })();
export { ChildCommunicationService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,