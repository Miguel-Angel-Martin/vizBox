import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Subject, BehaviorSubject } from 'rxjs';
import { v4 as uuidv4 } from 'uuid';
import { MessageType } from './message.model';
import { AvlAuthService, User } from '@avl-ng-controls/auth';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@avl-ng-controls/auth";
let ShellCommunicationService = class ShellCommunicationService {
    constructor(router, authService) {
        this.router = router;
        this.authService = authService;
        this.handlers = {
            [MessageType.theme]: (theme) => this.handleTheme(theme),
            [MessageType.locale]: (locale) => this.handleLocale(locale),
            [MessageType.language]: (language) => this.handleLanguage(language),
            [MessageType.colorScheme]: (colorScheme) => this.handleColorScheme(colorScheme),
            [MessageType.navigation]: (url) => this.handleNavigation(url),
            [MessageType.action]: (action) => this.handleAction(action),
            [MessageType.authentication]: (user) => this.handleAuthentication(user),
            [MessageType.redirectedFromLogIn]: (redirected) => this.handleRedirectedFromLogIn(redirected),
        };
        this.themeSubject = new Subject();
        this.languageSubject = new Subject();
        this.actionSubject = new Subject();
        this.localeSubject = new Subject();
        this.colorSchemeSubject = new Subject();
        /**
        * Observable tracking theme
        * Emits "dark" if dark theme selected, "light" otherwise
        */
        this.theme$ = this.themeSubject;
        /**
        * Observable tracking language
        */
        this.language$ = this.languageSubject;
        this.action$ = this.actionSubject;
        /**
        * Observable tracking country changes
        */
        this.locale$ = this.localeSubject;
        /**
        * Observable tracking color scheme changes
        */
        this.colorScheme$ = this.colorSchemeSubject;
        /**
         * Observable tracking if redirected from idb
         * Resolves to true on redirection, false otherwise
         */
        this.redirectedFromLogIn = new BehaviorSubject(undefined);
        /**
         * If current application is inside shell application
         * True if current application is inside shell application, false otherwise.
         */
        this.isChild = window.location !== window.parent.location;
        window.addEventListener('message', (event) => this.onMessage(event));
        this.id = uuidv4();
    }
    notifyShellAboutAction(action) {
        this.postMessageToShell(MessageType.action, action);
    }
    /**
     * Sends message to shell that it needs to navigate to login page
     */
    notifyShellAboutLogin(url) {
        this.postMessageToShell(MessageType.login, url);
    }
    /**
     * Sends message to shell that it needs to navigate to @url
     */
    notifyShellAboutNavigation(url) {
        this.postMessageToShell(MessageType.navigation, url);
    }
    /**
     * Sends registration message to shell
     */
    registerToShell() {
        this.postMessageToShell(MessageType.registration, this.id);
    }
    /**
    * Send updated user data to shell
    */
    updateUserToShell() {
        const user = this.authService.readUserFromSessionStorage();
        this.postMessageToShell(MessageType.user, user);
    }
    onMessage(event) {
        const { payload, messageType } = event.data;
        const handlers = Object.assign(Object.assign({}, this.handlers), { default: () => console.log('Unrecognized message for the shell.', event) });
        (handlers[messageType] || handlers.default)(payload);
    }
    postMessageToShell(messageType, payload) {
        const message = { messageType, payload };
        window.parent.window.postMessage(message, '*');
    }
    handleColorScheme(colorScheme) {
        this.colorSchemeSubject.next(colorScheme);
    }
    handleLanguage(language) {
        this.languageSubject.next(language);
    }
    handleLocale(locale) {
        this.localeSubject.next(locale);
    }
    handleTheme(theme) {
        this.themeSubject.next(theme);
    }
    handleNavigation(url) {
        this.router.navigateByUrl(url);
    }
    handleAction(action) {
        this.actionSubject.next(action);
    }
    handleAuthentication(user) {
        if (user === null || user === void 0 ? void 0 : user.access_token) {
            this.authService.storeUserToSessionStorage(user);
        }
        else {
            this.authService.clearUserFromSessionStorage();
        }
        this.authService.reloadPersistedUserData();
    }
    handleRedirectedFromLogIn(redirected) {
        this.redirectedFromLogIn.next(redirected);
    }
};
ShellCommunicationService.ctorParameters = () => [
    { type: Router },
    { type: AvlAuthService }
];
ShellCommunicationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShellCommunicationService_Factory() { return new ShellCommunicationService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AvlAuthService)); }, token: ShellCommunicationService, providedIn: "root" });
ShellCommunicationService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], ShellCommunicationService);
export { ShellCommunicationService };
//# sourceMappingURL=data:application/json;base64,