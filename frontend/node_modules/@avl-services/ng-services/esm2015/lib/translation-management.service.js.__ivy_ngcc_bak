import { __decorate } from "tslib";
/// <reference types="@avl-controls/core" />
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { NgxTranslateTranslationService } from '@avl-controls/ng-binders';
import '@avl-controls/core/dist/avl-localization-service/avl-localization-service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@avl-controls/ng-binders";
let TranslationManagementService = class TranslationManagementService {
    constructor(translateService, translationService) {
        this.translateService = translateService;
        this.translationService = translationService;
        this.languages = [
            { code: 'en', label: 'English' },
            { code: 'hr', label: 'Croatian' },
        ];
    }
    initializeTranslations() {
        return () => {
            AvlLocalizationService.translationService = this.translationService;
            let lang = localStorage.getItem('lang');
            if (lang == null) {
                lang = this.languages[0].code;
                localStorage.setItem('lang', lang);
            }
            return this.translateService.use(lang).toPromise();
        };
    }
    get language() {
        return localStorage.getItem('lang');
    }
    changeLanguage(lang) {
        const oldLang = localStorage.getItem('lang');
        if (!oldLang || oldLang !== lang) {
            localStorage.setItem('lang', lang);
            location.reload();
        }
    }
};
TranslationManagementService.ctorParameters = () => [
    { type: TranslateService },
    { type: NgxTranslateTranslationService }
];
TranslationManagementService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslationManagementService_Factory() { return new TranslationManagementService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.NgxTranslateTranslationService)); }, token: TranslationManagementService, providedIn: "root" });
TranslationManagementService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], TranslationManagementService);
export { TranslationManagementService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb24tbWFuYWdlbWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1zZXJ2aWNlcy9uZy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi90cmFuc2xhdGlvbi1tYW5hZ2VtZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUE0QztBQUU1QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFFLE9BQU8sMkVBQTJFLENBQUM7Ozs7QUFLbkYsSUFBYSw0QkFBNEIsR0FBekMsTUFBYSw0QkFBNEI7SUFDdkMsWUFBb0IsZ0JBQWtDLEVBQVUsa0JBQWtEO1FBQTlGLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWdDO1FBRzNHLGNBQVMsR0FBRztZQUNqQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNoQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRTtTQUNsQyxDQUFDO0lBTEYsQ0FBQztJQU9NLHNCQUFzQjtRQUMzQixPQUFPLEdBQUcsRUFBRTtZQUNWLHNCQUFzQixDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztZQUNwRSxJQUFJLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtnQkFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUM5QixZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNwQztZQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyRCxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sY0FBYyxDQUFDLElBQVk7UUFDaEMsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDaEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBOUJ1QyxnQkFBZ0I7WUFBOEIsOEJBQThCOzs7QUFEdkcsNEJBQTRCO0lBSHhDLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7R0FDVyw0QkFBNEIsQ0ErQnhDO1NBL0JZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQGF2bC1jb250cm9scy9jb3JlXCIgLz5cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hUcmFuc2xhdGVUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICdAYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMnO1xyXG5pbXBvcnQgJ0BhdmwtY29udHJvbHMvY29yZS9kaXN0L2F2bC1sb2NhbGl6YXRpb24tc2VydmljZS9hdmwtbG9jYWxpemF0aW9uLXNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25NYW5hZ2VtZW50U2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlLCBwcml2YXRlIHRyYW5zbGF0aW9uU2VydmljZTogTmd4VHJhbnNsYXRlVHJhbnNsYXRpb25TZXJ2aWNlKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbGFuZ3VhZ2VzID0gW1xyXG4gICAgeyBjb2RlOiAnZW4nLCBsYWJlbDogJ0VuZ2xpc2gnIH0sXHJcbiAgICB7IGNvZGU6ICdocicsIGxhYmVsOiAnQ3JvYXRpYW4nIH0sXHJcbiAgXTtcclxuXHJcbiAgcHVibGljIGluaXRpYWxpemVUcmFuc2xhdGlvbnMoKTogKCkgPT4gUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIEF2bExvY2FsaXphdGlvblNlcnZpY2UudHJhbnNsYXRpb25TZXJ2aWNlID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2U7XHJcbiAgICAgIGxldCBsYW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmcnKTtcclxuICAgICAgaWYgKGxhbmcgPT0gbnVsbCkge1xyXG4gICAgICAgIGxhbmcgPSB0aGlzLmxhbmd1YWdlc1swXS5jb2RlO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYW5nJywgbGFuZyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS51c2UobGFuZykudG9Qcm9taXNlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0IGxhbmd1YWdlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmcnKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjaGFuZ2VMYW5ndWFnZShsYW5nOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IG9sZExhbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZycpO1xyXG4gICAgaWYgKCFvbGRMYW5nIHx8IG9sZExhbmcgIT09IGxhbmcpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhbmcnLCBsYW5nKTtcclxuICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==