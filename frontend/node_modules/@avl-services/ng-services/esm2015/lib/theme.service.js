import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
let ThemeService = class ThemeService {
    constructor() {
        this.themeChangedSubject = new Subject();
        this.themeChanged = this.themeChangedSubject.asObservable();
        this.changeTheme();
    }
    get isDarkTheme() {
        if (this._isDarkTheme == null) {
            this._isDarkTheme = localStorage.getItem('theme') === 'dark' || false;
        }
        return this._isDarkTheme;
    }
    set isDarkTheme(newValue) {
        this._isDarkTheme = newValue;
        localStorage.setItem('theme', newValue === true ? 'dark' : 'light');
        this.themeChangedSubject.next(this.getCurrentTheme());
        this.changeTheme();
    }
    getCurrentTheme() {
        return this.isDarkTheme ? 'dark' : 'light';
    }
    changeTheme() {
        document.body.setAttribute('theme', this.getCurrentTheme());
    }
};
ThemeService.ɵfac = function ThemeService_Factory(t) { return new (t || ThemeService)(); };
ThemeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(); }, token: ThemeService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ThemeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
export { ThemeService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0Bhdmwtc2VydmljZXMvbmctc2VydmljZXMvbGliL3RoZW1lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQjs7QUFJQSxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0FBQ3pCLElBMkJFO0FBQ0YsUUFaVSx3QkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0FBQ3RELFFBQWtCLGlCQUFZLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3pFLFFBVUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBM0JFLElBQVcsV0FBVztBQUFLLFFBQ3pCLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLEVBQUU7QUFDbkMsWUFBTSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssTUFBTSxJQUFJLEtBQUssQ0FBQztBQUM1RSxTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFXLFdBQVcsQ0FBQyxRQUFpQjtBQUMxQyxRQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDO0FBQ2pDLFFBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4RSxRQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDMUQsUUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFJUyxlQUFlO0FBQUssUUFDekIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUMvQyxJQUFFLENBQUM7QUFDSCxJQUNVLFdBQVc7QUFDckIsUUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDaEUsSUFBRSxDQUFDO0FBQ0gsQ0FLQzsyRkFBQTtBQUNEO0FBakNhLFlBQVksb0JBSHhCLFVBQVUsQ0FBQyxVQUNWLFVBQVUsRUFBRTtBQUFNLE1BQ25CLENBQUMsSUFDVyxZQUFZLENBZ0N4Qjs7OztnREFDRDs7QUF2Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUE0QkEsQUFYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBV0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTFCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBS0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQUFBLEFBaENBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBZ0NBLEFBaENBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRoZW1lU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgX2lzRGFya1RoZW1lOiBib29sZWFuO1xyXG5cclxuICBwdWJsaWMgZ2V0IGlzRGFya1RoZW1lKCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuX2lzRGFya1RoZW1lID09IG51bGwpIHtcclxuICAgICAgdGhpcy5faXNEYXJrVGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKSA9PT0gJ2RhcmsnIHx8IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX2lzRGFya1RoZW1lO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0IGlzRGFya1RoZW1lKG5ld1ZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9pc0RhcmtUaGVtZSA9IG5ld1ZhbHVlO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgbmV3VmFsdWUgPT09IHRydWUgPyAnZGFyaycgOiAnbGlnaHQnKTtcclxuICAgIHRoaXMudGhlbWVDaGFuZ2VkU3ViamVjdC5uZXh0KHRoaXMuZ2V0Q3VycmVudFRoZW1lKCkpO1xyXG4gICAgdGhpcy5jaGFuZ2VUaGVtZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB0aGVtZUNoYW5nZWRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xyXG4gIHB1YmxpYyByZWFkb25seSB0aGVtZUNoYW5nZWQgPSB0aGlzLnRoZW1lQ2hhbmdlZFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gIHB1YmxpYyBnZXRDdXJyZW50VGhlbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmlzRGFya1RoZW1lID8gJ2RhcmsnIDogJ2xpZ2h0JztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hhbmdlVGhlbWUoKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LnNldEF0dHJpYnV0ZSgndGhlbWUnLCB0aGlzLmdldEN1cnJlbnRUaGVtZSgpKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5jaGFuZ2VUaGVtZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19