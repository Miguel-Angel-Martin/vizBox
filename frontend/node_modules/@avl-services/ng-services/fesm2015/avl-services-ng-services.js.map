{"version":3,"file":"avl-services-ng-services.js","sources":["../../../projects/ng-services/lib/auth/avl-auth.service.ts","../../../projects/ng-services/lib/auth/variables.ts","../../../projects/ng-services/lib/auth/storage-names.ts","../../../projects/ng-services/lib/auth/token-storage.ts","../../../projects/ng-services/lib/auth/crypto-helper.ts","../../../projects/ng-services/lib/auth/avl-oidc-code-auth.service.ts","../../../projects/ng-services/lib/auth/avl-token.interceptor.ts","../../../projects/ng-services/lib/composite/message.model.ts","../../../projects/ng-services/lib/composite/shell-communication.service.ts","../../../projects/ng-services/lib/settings/ngx-translate-translation.service.ts","../../../projects/ng-services/lib/settings/translation-management.service.ts","../../../projects/ng-services/lib/settings/theme.service.ts","../../../projects/ng-services/lib/composite/child-communication.service.ts","../../../projects/ng-services/lib/logging/logging.model.ts","../../../projects/ng-services/lib/logging/logging.service.ts","../../../projects/ng-services/lib/logging/logging.module.ts","../../../projects/ng-services/lib/notification/notification.service.ts","../../../projects/ng-services/lib/upload/variables.ts","../../../projects/ng-services/lib/upload/upload.service.ts","../../../projects/ng-services/lib/unsaved-changes/unsaved-changes-shell.service.ts","../../../projects/ng-services/lib/unsaved-changes/unsaved-changes/unsaved-changes.service.ts","../../../projects/ng-services/lib/unsaved-changes/unsaved-changes/unsaved-changes.directive.ts","../../../projects/ng-services/lib/unsaved-changes/unsaved-changes.guard.ts","../../../projects/ng-services/lib/unsaved-changes/unsaved-changes/unsaved-changes.module.ts","../../../projects/ng-services/public-api.ts","../../../projects/ng-services/avl-services-ng-services.ts"],"sourcesContent":["import { Observable, BehaviorSubject } from 'rxjs';\r\nimport { User } from './user.model';\r\nexport abstract class AvlAuthService {\r\n  /**\r\n   * User data is held in this property\r\n   */\r\n  protected userSubject = new BehaviorSubject<User>(undefined);\r\n\r\n  /**\r\n   * Current user as Observable\r\n   */\r\n  public user$: Observable<User> = this.userSubject.asObservable();\r\n\r\n  /**\r\n   * String holding error message in case user couldn't authenticate\r\n   */\r\n  protected errorMessageSubject = new BehaviorSubject<string>(undefined);\r\n\r\n  /**\r\n   * Error messsage in case failed authentication as Observable\r\n   */\r\n  public errorMessage$: Observable<string> = this.errorMessageSubject.asObservable();\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public abstract isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public abstract redirectedFromLogIn: BehaviorSubject<boolean>;\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after succesful authentication\r\n   */\r\n  public abstract login(redirectUrl?: string): Promise<void>;\r\n\r\n  /**\r\n   * If tokens are peristed in local storage, set current user data\r\n   */\r\n  public abstract reloadPersistedUserData(): void;\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  public abstract logout(redirectUrl?: string): void;\r\n\r\n  /**\r\n   * Currently authenticated user data\r\n   */\r\n  public get currentUser(): User {\r\n    return this.userSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Current error message for fail authentication\r\n   * Undefined when user is logged in\r\n   */\r\n  public get errorMessage(): string {\r\n    return this.errorMessageSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Use to clear error message after user is informed\r\n   */\r\n  public clearErrorMessage() {\r\n    this.errorMessageSubject.next(undefined);\r\n  }\r\n\r\n  /**\r\n   * For token based authetication.\r\n   * Provide functionality to refresh tokens\r\n   */\r\n  public refreshTokens?(): Promise<any>;\r\n\r\n  /**\r\n   * For token based authetication.\r\n   * Updates user authentication with refresh tokens\r\n   */\r\n  public abstract refreshUserIfNeeded(): void;\r\n\r\n  /**\r\n   * Read user from session storage\r\n   */\r\n  public abstract readUserFromSessionStorage(): User;\r\n\r\n  /**\r\n   * Store user to session storage\r\n   */\r\n  public abstract storeUserToSessionStorage(user: User): void;\r\n\r\n  /**\r\n   * Clear user from session storage\r\n   */\r\n  public abstract clearUserFromSessionStorage(): void;\r\n\r\n  /** @hidden */\r\n  public abstract isUserInvalid(data: Partial<User>): boolean;\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface AuthConfig { \r\n  tokenUrl: string;\r\n  loginUrl: string;\r\n  refreshUrl?: string;\r\n  loginUrlParamRedirect: string;\r\n  loginUrlParamChallenge: string;\r\n  loginUrlParamNonce: string;\r\n  logoutUrl?: string;\r\n  logoutUrlParamIdToken?: string;\r\n  logoutUrlParamRedirect?: string;\r\n  requiredRole?: string;\r\n  tokenPrefix?: string;\r\n}\r\n\r\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>(undefined);\r\n\r\nexport const INTERCEPTOR_BASE_PATHS = new InjectionToken<string[]>(undefined);","export enum StorageNames {\r\n  AccessToken = 'access_token',\r\n  AccessTokenExpiresAt = 'access_token_expires_at',\r\n  AccessTokenStoredAt = 'access_token_stored_at',\r\n  RefreshToken = 'refresh_token',\r\n  RefreshTokenExpiresAt = 'refresh_token_expires_at',\r\n  IdToken = 'id_token',\r\n  Roles = 'roles',\r\n  UserName = 'username',\r\n  Name = 'name'\r\n}\r\n","import { User } from './user.model';\r\nimport { StorageNames } from './storage-names';\r\n\r\nexport class TokenStorage {\r\n  private prefix = '';\r\n\r\n  constructor(prefix: string = '') {\r\n    this.prefix = prefix;\r\n  }\r\n\r\n  readUser(): User {\r\n    const accessToken = this.getItem(StorageNames.AccessToken);\r\n    return accessToken && accessToken != null ? {\r\n      username: this.getItem(StorageNames.UserName),\r\n      name: this.getItem(StorageNames.Name),\r\n      access_token: accessToken,\r\n      access_token_expires: this.getNumber(StorageNames.AccessTokenExpiresAt),\r\n      access_token_stored: this.getNumber(StorageNames.AccessTokenStoredAt),\r\n      refresh_token: this.getItem(StorageNames.RefreshToken),\r\n      refresh_token_expires: this.getNumber(StorageNames.RefreshTokenExpiresAt),\r\n      id_token: this.getItem(StorageNames.IdToken),\r\n      roles: this.parseJson(this.getItem(StorageNames.Roles)) as string[]\r\n    } : null;\r\n  }\r\n\r\n  storeUser(user: User) {\r\n    this.setItem(StorageNames.UserName, user.username);\r\n    this.setItem(StorageNames.Name, user.name);\r\n    this.setItem(StorageNames.AccessToken, user.access_token);\r\n    this.setItem(StorageNames.AccessTokenExpiresAt, `${user.access_token_expires}`);\r\n    this.setItem(StorageNames.AccessTokenStoredAt, `${user.access_token_stored}`);\r\n    this.setItem(StorageNames.RefreshToken, user.refresh_token);\r\n    this.setItem(StorageNames.RefreshTokenExpiresAt, `${user.refresh_token_expires}`);\r\n    this.setItem(StorageNames.IdToken, user.id_token);\r\n\r\n    if (user.roles) {\r\n      const rolesStr = JSON.stringify(user.roles);\r\n      sessionStorage.setItem(StorageNames.Roles, `${rolesStr}`);\r\n    }\r\n  }\r\n\r\n  clearUser() {\r\n    for (const name in StorageNames) {\r\n      if (StorageNames.hasOwnProperty(name)) {\r\n        this.removeItem(StorageNames[name]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getNumber(key: string): number {\r\n    return parseInt(this.getItem(key), 10);\r\n  }\r\n\r\n  getItem(key: string): string {\r\n    return sessionStorage.getItem(this.prefix + key);\r\n  }\r\n\r\n  setItem(key: string, value: string): void {\r\n    sessionStorage.setItem(this.prefix + key, value);\r\n  }\r\n\r\n  removeItem(key: string): void {\r\n    sessionStorage.removeItem(this.prefix + key);\r\n  }\r\n  parseJson = (string: string): { [key: string]: any } => {\r\n    if (string?.indexOf('undefined') > -1) {\r\n      string = string.replace('undefined', null);\r\n    }\r\n    try {\r\n      return JSON.parse(string);\r\n    } catch (e) {\r\n      console.error(e);\r\n      return null;\r\n    }\r\n  };\r\n}\r\n","export class CryptoHelper {\r\n\r\n  // PKCE HELPER FUNCTIONS\r\n\r\n  // Generate a secure random string using the browser crypto functions\r\n  public generateRandomString(length: number): string {\r\n    const array = new Uint8Array(length);\r\n    window.crypto.getRandomValues(array);\r\n    return Array.from(array, dec => ('0' + dec.toString(16)).substr(-2)).join('');\r\n  }\r\n\r\n  // Base64-encodes the input string\r\n  public base64Encode(buffer: ArrayBuffer): string {\r\n    // Convert the ArrayBuffer to string using Uint8 array to convert to what btoa accepts.\r\n    // btoa accepts chars only within ascii 0-255 and base64 encodes them.\r\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)))\r\n  }\r\n\r\n  // Calculate the SHA256 hash of the input text. \r\n  // Returns a promise that resolves to base64 encoded string\r\n  public async sha256(plain: string): Promise<string> {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(plain);\r\n    const buffer = await window.crypto.subtle.digest('SHA-256', data);\r\n    return this.base64Encode(buffer);\r\n  }\r\n\r\n  // Base64-decodes the input string\r\n  public base64DecodeUnicode(str: string): string {\r\n    const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\r\n    return decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { map, skipWhile, catchError } from 'rxjs/operators';\r\n\r\nimport { User } from './user.model';\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { AUTH_CONFIG, AuthConfig } from './variables';\r\nimport { TokenStorage } from './token-storage';\r\nimport { TokenResponse } from './token-response';\r\nimport { StorageNames } from './storage-names';\r\nimport { TokenClaims } from './token-claims';\r\nimport { CryptoHelper } from './crypto-helper';\r\n\r\nconst LOGOUT_CONFIG_NOT_SET_ERROR =\r\n  'User signed out locally, but logout request towards OIDC server not initiated since logoutUrl is not set in authConfig.';\r\n\r\n@Injectable()\r\nexport class AvlOidcCodeAuthService extends AvlAuthService {\r\n  private readonly isLoggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject(undefined);\r\n\r\n  /**\r\n   * Observable tracking authenticated state\r\n   * Resolves to true on successful log in, false otherwise\r\n   */\r\n  public isLoggedIn$: Observable<boolean> = this.isLoggedInSubject\r\n    .asObservable()\r\n    .pipe(skipWhile(isLoggedIn => isLoggedIn === undefined));\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n\r\n  private http: HttpClient;\r\n  private storage: TokenStorage;\r\n  private cryptoHelper: CryptoHelper;\r\n\r\n  constructor(\r\n    private httpBackend: HttpBackend,\r\n    @Inject(AUTH_CONFIG) private authConfig: AuthConfig,\r\n    private router: Router,\r\n    private loc: Location\r\n  ) {\r\n    super();\r\n\r\n    this.http = new HttpClient(this.httpBackend);\r\n    this.storage = new TokenStorage(this.authConfig.tokenPrefix);\r\n    this.cryptoHelper = new CryptoHelper();\r\n\r\n    this.userSubject.pipe(skipWhile(value => value === undefined)).subscribe(userValue => {\r\n      this.emitLoggedIn(Boolean(userValue));\r\n    });\r\n\r\n    const user = this.storage.readUser();\r\n\r\n    if (user && !this.isUserInvalid(user)) {\r\n      this.persistUser(user);\r\n    } else if (!this.currentUser && this.pkce) {\r\n      // if user is not logged in and pkce exists handle redirect from oidc server if possible\r\n      this.handleOidcRedirect();\r\n    } else {\r\n      this.clearUser();\r\n      this.userSubject.next(null);\r\n    }\r\n    this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n  }\r\n\r\n  private readonly emitLoggedIn = (value: boolean) => {\r\n    this.isLoggedInSubject.next(value);\r\n  };\r\n\r\n  /** @hidden */\r\n  public isUserInvalid(data: Partial<User>): boolean {\r\n    return (\r\n      !data ||\r\n      data.username == null ||\r\n      data.access_token == null ||\r\n      data.access_token_expires < Date.now()\r\n    );\r\n  }\r\n\r\n  private get pkce(): string | undefined {\r\n    return this.storage.getItem('pkce') || undefined;\r\n  }\r\n  private set pkce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('pkce', c);\r\n    } else {\r\n      this.storage.removeItem('pkce');\r\n    }\r\n  }\r\n\r\n  private get nonce(): string | undefined {\r\n    return sessionStorage.getItem('nonce') || undefined;\r\n  }\r\n  private set nonce(c: string | undefined) {\r\n    if (c) {\r\n      this.storage.setItem('nonce', c);\r\n    } else {\r\n      this.storage.removeItem('nonce');\r\n    }\r\n  }\r\n\r\n  private isAccessTokenValid(): boolean {\r\n    return Date.now() < this.currentUser.access_token_expires;\r\n  }\r\n\r\n  private persistUser(user?: User): void {\r\n    if (user) {\r\n      this.storage.storeUser(user);\r\n      this.userSubject.next(user);\r\n    } else {\r\n      this.clearUser();\r\n    }\r\n  }\r\n\r\n  private clearUser(): void {\r\n    this.storage.clearUser();\r\n    this.userSubject.next(undefined);\r\n  }\r\n\r\n  /*\r\n   * Checks if current url is redirect from oidc server and gets access token from the server.\r\n   */\r\n  private async handleOidcRedirect() {\r\n    const pkce = this.pkce;\r\n    this.pkce = undefined;\r\n\r\n    const urlParts = this.loc.path(true).split('?', 2);\r\n    let urlHash: string;\r\n    let first: number;\r\n    let last: number;\r\n    let urlPartSplit: string[];\r\n\r\n    if (urlParts.length === 2) {\r\n      first = urlParts[1].lastIndexOf('#');\r\n      if (first !== -1) {\r\n        last = urlParts[1].lastIndexOf('&');\r\n        urlHash = urlParts[1].slice(first, last);\r\n        urlPartSplit = urlParts[1].split('#', 2);\r\n        urlParts[1] = urlParts[1].split('&').pop();\r\n        urlParts[1] = urlPartSplit[0].concat('&').concat(urlParts[1]);\r\n      }\r\n    }\r\n\r\n    let query = urlParts.length === 2 ? this.parseQueryString(urlParts[1]) : [];\r\n    let queryCode: string;\r\n    for (let i = query.length - 1; i >= 0; i--) {\r\n      if (query[i].key === 'code') {\r\n        queryCode = query[i].value;\r\n        query = [...query.slice(0, i), ...query.slice(i + 1)];\r\n        break;\r\n      }\r\n    }\r\n    if (urlParts.length === 2 && queryCode) {\r\n      const nonce = this.nonce;\r\n      this.nonce = undefined;\r\n\r\n      const httpOptions = {\r\n        headers: new HttpHeaders({\r\n          code: queryCode,\r\n          verifier: pkce,\r\n          nonce: nonce\r\n        })\r\n      };\r\n\r\n      try {\r\n        const user = await this.http\r\n          .post<TokenResponse>(this.authConfig.tokenUrl, {}, httpOptions)\r\n          .pipe(map(token => this.readUserFromToken(token)))\r\n          .toPromise();\r\n        this.persistUser(user);\r\n      } catch (error) {\r\n        this.errorMessageSubject.next(error.message);\r\n      }\r\n    }\r\n\r\n    if (urlHash) {\r\n      this.router.navigateByUrl(\r\n        `${urlParts[0]}${this.reconstructQueryParamString(query)}${urlHash}`,\r\n        { replaceUrl: true }\r\n      );\r\n      this.redirectedFromLogIn.next(true);\r\n    } else {\r\n      this.router.navigateByUrl(`${urlParts[0]}${this.reconstructQueryParamString(query)}`, {\r\n        replaceUrl: true\r\n      });\r\n      this.redirectedFromLogIn.next(Boolean(this.currentUser));\r\n    }\r\n  }\r\n\r\n  public reloadPersistedUserData() {\r\n    const user = this.storage.readUser();\r\n    if (this.currentUser?.access_token === user?.access_token) {\r\n      return;\r\n    }\r\n\r\n    if (this.isUserInvalid(user)) {\r\n      this.clearUser();\r\n    } else {\r\n      this.persistUser(user);\r\n    }\r\n  }\r\n  private reconstructQueryParamString(queryParams: { key: string; value: string }[]): string {\r\n    let s = '?';\r\n    if (queryParams.length === 0) {\r\n      return '';\r\n    }\r\n    for (const q of queryParams) {\r\n      if (s === '?') {\r\n        s += `${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      } else {\r\n        s += `&${encodeURIComponent(q.key)}=${encodeURIComponent(q.value)}`;\r\n      }\r\n    }\r\n    return s;\r\n  }\r\n\r\n  private readUserFromToken(token: TokenResponse): User {\r\n    const accessTokenClaims = this.readClaimsFromToken(token.accesstoken);\r\n\r\n    // Calculate actual expiry date for this machine\r\n    const accessTokenStoredAt = Date.now(); // [ms]\r\n    const accessTokenExpiresAt = accessTokenStoredAt + token.expiresIn * 1000;\r\n\r\n    const refreshTokenClaims = this.readClaimsFromToken(token.refreshtoken);\r\n    let refreshTokenExpiresAt = null;\r\n    if (refreshTokenClaims) {\r\n      // If time value is 0 token lasts indefinitely\r\n      const refreshTokenExpiresIn =\r\n        refreshTokenClaims['exp'] !== 0 ? refreshTokenClaims['exp'] - refreshTokenClaims['iat'] : 0;\r\n      const refreshTokenStoredAt = accessTokenStoredAt;\r\n      refreshTokenExpiresAt =\r\n        refreshTokenExpiresIn !== 0 ? refreshTokenStoredAt + refreshTokenExpiresIn * 1000 : 0;\r\n    }\r\n\r\n    const roles = accessTokenClaims?.roles;\r\n    if (!accessTokenClaims) {\r\n      return null;\r\n    }\r\n    return {\r\n      username: accessTokenClaims.preferred_username,\r\n      name: accessTokenClaims.name ?? accessTokenClaims.preferred_username,\r\n      access_token: token.accesstoken,\r\n      access_token_expires: accessTokenExpiresAt,\r\n      access_token_stored: accessTokenStoredAt,\r\n      refresh_token: token.refreshtoken,\r\n      refresh_token_expires: refreshTokenExpiresAt,\r\n      id_token: token.idToken,\r\n      roles: roles\r\n    } as User;\r\n  }\r\n\r\n  public async refreshUserIfNeeded() {\r\n    const accessTokenExpired = this.currentUser?.access_token_expires < Date.now();\r\n    if (accessTokenExpired) {\r\n      await this.refreshTokens();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If needed, this method can be called to refresh tokens for current user\r\n   * @returns Promise resolved with object containing new tokens\r\n   */\r\n  public async refreshTokens(): Promise<any> {\r\n    const refreshTokenValid = this.currentUser?.refresh_token_expires > Date.now();\r\n    if (!refreshTokenValid) {\r\n      this.logout();\r\n      return;\r\n    }\r\n\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        grant_type: 'refresh_token',\r\n        'refresh-token': this.storage.getItem(StorageNames.RefreshToken)\r\n      })\r\n    };\r\n\r\n    if (!this.authConfig.refreshUrl) {\r\n      throw new Error('refreshUrl missing in AuthConfig');\r\n    }\r\n\r\n    try {\r\n      const user = await this.http\r\n        .post<TokenResponse>(this.authConfig.refreshUrl, {}, httpOptions)\r\n        .pipe(map(token => this.readUserFromToken(token)))\r\n        .toPromise();\r\n      this.persistUser(user);\r\n    } catch (error) {\r\n      this.errorMessageSubject.next(error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Login user and redirect after successful authentication.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after successful authentication\r\n   */\r\n  public async login(redirectUrl?: string): Promise<void> {\r\n    location.href = await this.generateLoginUrl(redirectUrl || location.href);\r\n  }\r\n\r\n  /**\r\n   * Log out user and redirect after.\r\n   * Custom auth services need to provide implementation\r\n   * @param redirectUrl Url to redirect after logging out\r\n   */\r\n  public logout(redirectUrl?: string): void {\r\n    const { logoutUrl } = this.authConfig;\r\n\r\n    if (!logoutUrl) {\r\n      console.warn(LOGOUT_CONFIG_NOT_SET_ERROR);\r\n    }\r\n\r\n    const headers = new HttpHeaders({ 'refresh-token': this.currentUser.refresh_token });\r\n    this.http\r\n      .post(logoutUrl, {}, { headers })\r\n      .pipe(\r\n        catchError(error => {\r\n          this.onLogout(redirectUrl);\r\n          throw error;\r\n        })\r\n      )\r\n      .subscribe(() => this.onLogout(redirectUrl));\r\n  }\r\n\r\n  private onLogout(redirectUrl?: string): void {\r\n    this.clearUser();\r\n    this.redirectIfNeeded(redirectUrl);\r\n  }\r\n\r\n  private redirectIfNeeded(redirectUrl?: string): void {\r\n    if (redirectUrl) {\r\n      this.navigateTo(redirectUrl);\r\n    } else {\r\n      this.reloadPage();\r\n    }\r\n  }\r\n\r\n  private reloadPage(): void {\r\n    window.location.reload();\r\n  }\r\n\r\n  private navigateTo(redirectUrl: string): void {\r\n    this.router.navigate([redirectUrl]);\r\n  }\r\n\r\n  private async generateLoginUrl(redirectUrl: string): Promise<string> {\r\n    const encoder = new TextEncoder();\r\n    const uint8Array = encoder.encode(redirectUrl);\r\n    const redirect_b64 = this.cryptoHelper.base64Encode(uint8Array);\r\n\r\n    // Generate a session value.\r\n    const nonce = this.cryptoHelper.generateRandomString(16);\r\n\r\n    // Generate pkce\r\n    const pkce = this.cryptoHelper.generateRandomString(32);\r\n    let pkce_hash = await this.cryptoHelper.sha256(pkce);\r\n\r\n    // KeyCloak requires this - https://tools.ietf.org/html/rfc7636#appendix-A\r\n    pkce_hash = pkce_hash.replace(/=/g, '');\r\n    pkce_hash = pkce_hash.replace(/\\+/g, '-');\r\n    pkce_hash = pkce_hash.replace(/\\//g, '_');\r\n\r\n    this.pkce = pkce;\r\n    this.nonce = nonce;\r\n\r\n    let url = this.authConfig.loginUrl;\r\n    url += '?' + this.authConfig.loginUrlParamRedirect + '=' + encodeURIComponent(redirect_b64);\r\n    url += '&' + this.authConfig.loginUrlParamChallenge + '=' + encodeURIComponent(pkce_hash);\r\n    url += '&' + this.authConfig.loginUrlParamNonce + '=' + encodeURIComponent(nonce);\r\n    return url;\r\n  }\r\n\r\n  private readClaimsFromToken(token: string): TokenClaims | null {\r\n    if (!token.includes('.')) {\r\n      // Token is not a valid JWT token\r\n      return null;\r\n    }\r\n    const tokenParts = token.split('.');\r\n    const claimsString = this.cryptoHelper.base64DecodeUnicode(tokenParts[1]);\r\n    return this.storage.parseJson(claimsString) as TokenClaims;\r\n  }\r\n\r\n  private parseQueryString(queryString: string): { key: string; value: string }[] {\r\n    if (!queryString.length) {\r\n      return [];\r\n    }\r\n    const queryDict = [];\r\n    const pairs = queryString.split('&');\r\n    for (const pair of pairs) {\r\n      const index = pair.indexOf('=');\r\n      let key: string;\r\n      let value: string;\r\n      if (index === -1) {\r\n        key = pair;\r\n        value = undefined;\r\n      } else {\r\n        key = pair.substr(0, index);\r\n        value = pair.substr(index + 1);\r\n      }\r\n      queryDict.push({\r\n        key: decodeURIComponent(key),\r\n        value: decodeURIComponent(value)\r\n      });\r\n    }\r\n    return queryDict;\r\n  }\r\n\r\n  public readUserFromSessionStorage(): User {\r\n    return this.storage.readUser();\r\n  }\r\n\r\n  public storeUserToSessionStorage(user: User): void {\r\n    this.storage.storeUser(user);\r\n  }\r\n\r\n  public clearUserFromSessionStorage(): void {\r\n    this.storage.clearUser();\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, from, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { AvlAuthService } from './avl-auth.service';\r\nimport { INTERCEPTOR_BASE_PATHS } from './variables';\r\n\r\n@Injectable()\r\nexport class AvlTokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    public auth: AvlAuthService,\r\n    @Inject(INTERCEPTOR_BASE_PATHS) protected basePaths: string[]\r\n  ) {\r\n    for (const i in this.basePaths) {\r\n      if (this.basePaths.hasOwnProperty(i)) {\r\n        this.basePaths[i] = this.basePaths[i].toLowerCase();\r\n      }\r\n    }\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.isUrlInBasePaths(req)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    if (this.auth.currentUser) {\r\n      req = this.setAuthHeader(req);\r\n    }\r\n\r\n    return next\r\n      .handle(req)\r\n      .pipe(catchError((err: HttpErrorResponse) => this.handleHttpError(req, next, err)));\r\n  }\r\n\r\n  private handleHttpError(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler,\r\n    err: HttpErrorResponse\r\n  ): Observable<any> {\r\n    if (err.status === 401) {\r\n      // Unauthorized, tokens expired\r\n      return from(this.auth.refreshTokens()).pipe(\r\n        switchMap(_ => next.handle(this.setAuthHeader(req))),\r\n        catchError(_ => throwError(err))\r\n      );\r\n    }\r\n    return throwError(err);\r\n  }\r\n\r\n  /** Check if request URL is in provided basePaths\r\n   * @param request Http request instance whose URL is checked.\r\n   */\r\n  private isUrlInBasePaths(request: HttpRequest<any>): boolean {\r\n    const url = request.url.toLowerCase();\r\n    const path = this.basePaths.find(path => url.startsWith(path));\r\n    return Boolean(path);\r\n  }\r\n\r\n  /** Sets access token to authorization header of HTTP request\r\n   * @param request HTTP request instance\r\n   * @returns Cloned HTTP with adapted headers\r\n   */\r\n  private setAuthHeader(req: HttpRequest<any>): HttpRequest<any> {\r\n    const access_token = this.auth.currentUser.access_token;\r\n    const header = `Bearer ${access_token}`;\r\n    const headers = req.headers.set('Authorization', header);\r\n\r\n    return req.clone({ headers });\r\n  }\r\n}\r\n","import { User } from '../auth/user.model';\r\n\r\nexport enum MessageType {\r\n  action = 'action',\r\n  colorScheme = 'colorScheme',\r\n  language = 'language',\r\n  locale = 'locale',\r\n  navigation = 'navigation',\r\n  unsavedChanges = 'unsavedChanges',\r\n  registration = 'registration',\r\n  theme = 'theme',\r\n  login = 'login',\r\n  authentication = 'authentication',\r\n  redirectedFromLogIn = 'redirectedFromLogIn',\r\n  user = 'user',\r\n  shellInfo = 'shellInfo'\r\n}\r\n\r\nexport interface Message {\r\n  messageType: MessageType;\r\n  payload: Payload;\r\n}\r\n\r\nexport type Payload = string | ColorScheme | User | boolean | AvlLocaleSettings | ShellInfo;\r\n\r\nexport interface MessageHandlers {\r\n  [key: string]: (payload: Payload) => void;\r\n}\r\nexport interface ColorScheme {\r\n  '--avl-product-color': string;\r\n  '--avl-product-hover-color': string;\r\n  '--avl-product-focus-color': string;\r\n}\r\n\r\nexport type ShellInfo = {\r\n  url: string;\r\n  children: ChildInfo[];\r\n};\r\n\r\nexport type ChildInfo = {\r\n  url: string;\r\n  name: string;\r\n};\r\n\r\nexport interface AvlLocaleSettings {\r\n  country: string;\r\n  dateTimeFormat: string;\r\n  decimalSeparator: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  AvlLocaleSettings,\r\n  ColorScheme,\r\n  Message,\r\n  MessageHandlers,\r\n  MessageType,\r\n  Payload,\r\n  ShellInfo\r\n} from './message.model';\r\nimport { AvlAuthService } from '../auth/avl-auth.service';\r\nimport { User } from '../auth/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShellCommunicationService {\r\n  private readonly id: string;\r\n\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.theme]: (theme: string) => this.handleTheme(theme),\r\n    [MessageType.locale]: (locale: AvlLocaleSettings) => this.handleLocale(locale),\r\n    [MessageType.language]: (language: string) => this.handleLanguage(language),\r\n    [MessageType.colorScheme]: (colorScheme: ColorScheme) => this.handleColorScheme(colorScheme),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.authentication]: (user: User) => this.handleAuthentication(user),\r\n    [MessageType.redirectedFromLogIn]: (redirected: boolean) =>\r\n      this.handleRedirectedFromLogIn(redirected),\r\n    [MessageType.shellInfo]: (shellInfo: ShellInfo) => this.handleShellInfo(shellInfo)\r\n  };\r\n\r\n  private themeSubject = new Subject<string>();\r\n  private languageSubject = new Subject<string>();\r\n  private actionSubject = new Subject<string>();\r\n  private localeSubject = new Subject<AvlLocaleSettings>();\r\n  private colorSchemeSubject = new Subject<ColorScheme>();\r\n  private shellInfoSubject = new Subject<ShellInfo>();\r\n  private shellUrl = '';\r\n\r\n  public shellInfo: ShellInfo;\r\n\r\n  /**\r\n   * Observable tracking theme\r\n   * Emits 'dark' if dark theme selected, 'light' otherwise\r\n   */\r\n  public theme$: Observable<string> = this.themeSubject;\r\n\r\n  /**\r\n   * Observable tracking language\r\n   */\r\n  public language$: Observable<string> = this.languageSubject;\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n   * Observable tracking locale changes\r\n   */\r\n  public locale$: Observable<AvlLocaleSettings> = this.localeSubject;\r\n\r\n  /**\r\n   * Observable tracking color scheme changes\r\n   */\r\n  public colorScheme$: Observable<ColorScheme> = this.colorSchemeSubject;\r\n\r\n  /**\r\n   * Observable tracking login state\r\n   * Resolves to true on successful login, false otherwise\r\n   */\r\n  public isLoggedIn$: Observable<boolean>;\r\n\r\n  /**\r\n   * Observable tracking if redirected from idb\r\n   * Resolves to true on redirection, false otherwise\r\n   */\r\n  public redirectedFromLogIn = new BehaviorSubject<boolean>(undefined);\r\n\r\n  /**\r\n   * Observable tracking shell origin and list of children\r\n   */\r\n  public shellInfo$: Observable<ShellInfo> = this.shellInfoSubject;\r\n\r\n  /**\r\n   * If current application is inside shell application\r\n   * True if current application is inside shell application, false otherwise.\r\n   */\r\n  public isChild = window.location !== window.parent.location;\r\n\r\n  constructor(private router: Router, private authService: AvlAuthService) {\r\n    window.addEventListener('message', event => this.onMessage(event));\r\n\r\n    this.id = uuidv4();\r\n  }\r\n\r\n  public notifyShellAboutAction(action: string): void {\r\n    this.postMessageToShell(MessageType.action, action);\r\n  }\r\n\r\n  /**\r\n   * Sends message to shell that it needs to navigate to login page\r\n   */\r\n  public notifyShellAboutLogin(url: string): void {\r\n    this.postMessageToShell(MessageType.login, url);\r\n  }\r\n\r\n  /**\r\n   * Sends message containing information about unsaved changes in a form to shell\r\n   */\r\n\r\n  public notifyShellAboutUnsavedChanges(formDirty: boolean): void {\r\n    this.postMessageToShell(MessageType.unsavedChanges, formDirty);\r\n  }\r\n\r\n  /**\r\n   * Sends message to shell that it needs to navigate to @url\r\n   */\r\n  public notifyShellAboutNavigation(url: string): void {\r\n    this.postMessageToShell(MessageType.navigation, url);\r\n  }\r\n\r\n  /**\r\n   * Sends registration message to shell\r\n   */\r\n  public registerToShell(): void {\r\n    this.postMessageToShell(MessageType.registration, this.id);\r\n  }\r\n\r\n  /**\r\n   * Send updated user data to shell\r\n   */\r\n  public updateUserToShell(): void {\r\n    const user = this.authService.readUserFromSessionStorage();\r\n    this.postMessageToShell(MessageType.user, user);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    // if the app is used as a child in iframe, it should only accept messages\r\n    // comming from shell using shell origin\r\n    if (this.shellUrl && this.shellUrl != event.origin) {\r\n      return;\r\n    }\r\n\r\n    const { payload, messageType }: Message = event.data;\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log('Unrecognized message for the child.', event)\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToShell(messageType: MessageType, payload: Payload): void {\r\n    const message: Message = { messageType, payload };\r\n    // send to shellUrl targetOrigin as soon it is awailable (shell must provide it after registration)\r\n    if (this.shellUrl) {\r\n      window.parent.window.postMessage(message, this.shellUrl);\r\n    } else if (document.referrer && message.messageType === MessageType.registration) {\r\n      const url = new URL(document.referrer);\r\n      window.parent.window.postMessage(message, url.origin);\r\n    }\r\n  }\r\n\r\n  private handleColorScheme(colorScheme: ColorScheme): void {\r\n    this.colorSchemeSubject.next(colorScheme);\r\n  }\r\n\r\n  private handleLanguage(language: string): void {\r\n    this.languageSubject.next(language);\r\n  }\r\n\r\n  private handleLocale(locale: AvlLocaleSettings): void {\r\n    this.localeSubject.next(locale);\r\n  }\r\n\r\n  private handleTheme(theme: string): void {\r\n    this.themeSubject.next(theme);\r\n  }\r\n\r\n  private handleNavigation(url: string): void {\r\n    this.router.navigateByUrl(url);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleAuthentication(user: User): void {\r\n    if (user?.access_token) {\r\n      this.authService.storeUserToSessionStorage(user);\r\n    } else {\r\n      this.authService.clearUserFromSessionStorage();\r\n    }\r\n\r\n    this.authService.reloadPersistedUserData();\r\n  }\r\n\r\n  private handleRedirectedFromLogIn(redirected: boolean) {\r\n    this.redirectedFromLogIn.next(redirected);\r\n  }\r\n\r\n  private handleShellInfo(shellInfo: ShellInfo): void {\r\n    if (shellInfo) {\r\n      this.shellUrl = new URL(shellInfo.url).origin;\r\n    }\r\n    this.shellInfoSubject.next(shellInfo);\r\n    this.shellInfo = shellInfo;\r\n  }\r\n}\r\n","import { AvlTranslationService } from '@avl-interfaces/interfaces';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable()\r\nexport class NgxTranslateTranslationService implements AvlTranslationService {\r\n\r\n  public get language(): string {\r\n    return this.translateService.currentLang;\r\n  }\r\n\r\n  constructor(private translateService: TranslateService) { }\r\n\r\n  public translate(key: string, interpolateParams?: object): Promise<string> {\r\n    return this.translateService.get(key, interpolateParams).toPromise();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { NgxTranslateTranslationService } from './ngx-translate-translation.service';\r\nimport '@avl-services/vanilla-js-services/avl-localization-service/avl-localization-service.api';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslationManagementService {\r\n  constructor(\r\n    private readonly translateService: TranslateService,\r\n    private readonly translationService: NgxTranslateTranslationService\r\n  ) {}\r\n\r\n  public languages = [\r\n    { code: 'en', label: 'English' },\r\n    { code: 'hr', label: 'Croatian' }\r\n  ];\r\n\r\n  public initializeTranslations(): () => Promise<any> {\r\n    return () => {\r\n      AvlLocalizationService.translationService = this.translationService;\r\n      let lang = localStorage.getItem('lang');\r\n      if (lang == null) {\r\n        lang = this.languages[0].code;\r\n        localStorage.setItem('lang', lang);\r\n      }\r\n      return this.translateService.use(lang).toPromise();\r\n    };\r\n  }\r\n  public get language(): string {\r\n    return localStorage.getItem('lang');\r\n  }\r\n\r\n  public changeLanguage(lang: string) {\r\n    const oldLang = localStorage.getItem('lang');\r\n    if (!oldLang || oldLang !== lang) {\r\n      localStorage.setItem('lang', lang);\r\n      location.reload();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n  private _isDarkTheme: boolean;\r\n\r\n  /**\r\n   * Determines whether theme is dark or not\r\n   */\r\n  public get isDarkTheme(): boolean {\r\n    if (this._isDarkTheme == null) {\r\n      this._isDarkTheme = localStorage.getItem('theme') === 'dark' || false;\r\n    }\r\n    return this._isDarkTheme;\r\n  }\r\n\r\n  /**\r\n   * Sets the dark theme to true or false\r\n   * @param isDark boolean that sets theme to dark if true; light if false\r\n   */\r\n  public set isDarkTheme(isDark: boolean) {\r\n    this._isDarkTheme = isDark;\r\n    localStorage.setItem('theme', isDark === true ? 'dark' : 'light');\r\n    this.themeChangedSubject.next(this.getCurrentTheme());\r\n    this.changeTheme();\r\n  }\r\n\r\n  private themeChangedSubject = new Subject<string>();\r\n  public readonly themeChanged = this.themeChangedSubject.asObservable();\r\n\r\n  /**\r\n   * Gets current theme string\r\n   * @returns string 'dark' or 'light'\r\n   */\r\n  public getCurrentTheme(): string {\r\n    return this.isDarkTheme ? 'dark' : 'light';\r\n  }\r\n\r\n  private changeTheme() {\r\n    document.body.setAttribute('theme', this.getCurrentTheme());\r\n  }\r\n\r\n  constructor() {\r\n    this.changeTheme();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslationManagementService } from '../settings/translation-management.service';\r\nimport { ThemeService } from '../settings/theme.service';\r\nimport { Subject, Observable, BehaviorSubject } from 'rxjs';\r\nimport {\r\n  AvlLocaleSettings,\r\n  ColorScheme,\r\n  Message,\r\n  MessageHandlers,\r\n  MessageType,\r\n  Payload,\r\n  ShellInfo\r\n} from './message.model';\r\n\r\nimport { AvlAuthService } from '../auth/avl-auth.service';\r\nimport { User } from '../auth/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChildCommunicationService {\r\n  private handlers: MessageHandlers = {\r\n    [MessageType.login]: (url: string) => this.handleLogin(url),\r\n    [MessageType.navigation]: (url: string) => this.handleNavigation(url),\r\n    [MessageType.action]: (action: string) => this.handleAction(action),\r\n    [MessageType.registration]: _ => this.handleRegistration(),\r\n    [MessageType.user]: (user: User) => this.handleUser(user),\r\n    [MessageType.unsavedChanges]: (formDirty: boolean) => this.handleUnsavedChanges(formDirty)\r\n  };\r\n\r\n  private actionSubject = new Subject<string>();\r\n  private navigationSubject = new Subject<string>();\r\n  private loginSubject = new Subject<string>();\r\n  private registrationCompletedSubject = new Subject<boolean>();\r\n  private unsavedChangesSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  protected iframeEl: HTMLIFrameElement;\r\n\r\n  public action$: Observable<string> = this.actionSubject;\r\n\r\n  /**\r\n   * Observable tracking url to navigate to\r\n   */\r\n  public navigation$: Observable<string> = this.navigationSubject;\r\n\r\n  /**\r\n   * Observable tracking url for login\r\n   * Url for login provided by child application\r\n   */\r\n  public login$: Observable<string> = this.loginSubject;\r\n\r\n  /**\r\n   * Observable tracking if there are unsaved changes in a form\r\n   */\r\n\r\n  public unsavedChanges$ = this.unsavedChangesSubject.asObservable();\r\n\r\n  /**\r\n   * Observable tracking child registration\r\n   * Emits true if registration was successful, false otherwise\r\n   */\r\n  public registrationCompleted$: Observable<boolean> = this.registrationCompletedSubject;\r\n\r\n  constructor(\r\n    private translationManagementService: TranslationManagementService,\r\n    private themeService: ThemeService,\r\n    private authService: AvlAuthService\r\n  ) {\r\n    window.addEventListener('message', event => this.onMessage(event));\r\n    this.themeService.themeChanged.subscribe(() => this.postThemeToChildren());\r\n  }\r\n\r\n  /**\r\n   * Sends the new value to the unsaved changes observer\r\n   * @param value Value to send to the observer\r\n   */\r\n  public handleUnsavedChanges(formDirty: boolean): void {\r\n    this.unsavedChangesSubject.next(formDirty);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about locale\r\n   */\r\n  public notifyChildAboutLocale(locale: AvlLocaleSettings): void {\r\n    this.postMessageToChild(MessageType.locale, locale);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about language\r\n   */\r\n  public notifyChildAboutLanguage(language: string): void {\r\n    this.postMessageToChild(MessageType.language, language);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about action\r\n   */\r\n  public notifyChildAboutAction(action: string): void {\r\n    this.postMessageToChild(MessageType.action, action);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about navigation\r\n   */\r\n  public notifyChildAboutNavigation(url: string): void {\r\n    this.postMessageToChild(MessageType.navigation, url);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about current user\r\n   */\r\n  public postAuthenticationDataToChildren() {\r\n    const payload: User = this.authService.readUserFromSessionStorage();\r\n    this.postMessageToChild(MessageType.authentication, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected application theme\r\n   */\r\n  public postThemeToChildren(): void {\r\n    const theme = this.themeService.getCurrentTheme();\r\n    this.postMessageToChild(MessageType.theme, theme);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected language\r\n   */\r\n  public postLanguageToChildren(): void {\r\n    this.postMessageToChild(MessageType.language, this.translationManagementService.language);\r\n  }\r\n\r\n  /**\r\n   * Sends messages to children about selected locale\r\n   */\r\n  public postLocaleToChildren(): void {\r\n    const country = localStorage.getItem('country');\r\n    const dateTimeFormat = localStorage.getItem('dateTimeFormat');\r\n    const decimalSeparator = localStorage.getItem('decimalSeparator');\r\n    this.postMessageToChild(MessageType.locale, {\r\n      country,\r\n      dateTimeFormat,\r\n      decimalSeparator\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about redirection from idb\r\n   */\r\n  public postRedirectedFromLogIn(payload: boolean): void {\r\n    this.postMessageToChild(MessageType.redirectedFromLogIn, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends message to child about shell url (origin/solution/app name) and list of children\r\n   */\r\n  public postShellInfoToChildren(payload: ShellInfo): void {\r\n    this.postMessageToChild(MessageType.shellInfo, payload);\r\n  }\r\n\r\n  /**\r\n   * Sends message to children about color scheme\r\n   */\r\n  public postColorSchemeToChildren(): void {\r\n    const computedStyle = window.getComputedStyle(document.body);\r\n    const productColor = computedStyle.getPropertyValue('--avl-product-color');\r\n    const productHoverColor = computedStyle.getPropertyValue('--avl-product-hover-color');\r\n    const productFocusColor = computedStyle.getPropertyValue('--avl-product-focus-color');\r\n\r\n    const colorScheme: ColorScheme = {\r\n      '--avl-product-color': productColor,\r\n      '--avl-product-hover-color': productHoverColor,\r\n      '--avl-product-focus-color': productFocusColor\r\n    };\r\n\r\n    this.postMessageToChild(MessageType.colorScheme, colorScheme);\r\n  }\r\n\r\n  private handleAction(action: string): void {\r\n    this.actionSubject.next(action);\r\n  }\r\n\r\n  private handleNavigation(navigation: string): void {\r\n    this.handleUnsavedChanges(false);\r\n    this.navigationSubject.next(navigation);\r\n  }\r\n\r\n  private handleLogin(login: string): void {\r\n    this.loginSubject.next(login);\r\n  }\r\n\r\n  // when child started its registration iframe is loaded and shell gets a message that he can send messages to iframe\r\n  private handleRegistration(): void {\r\n    this.iframeEl = document.getElementsByTagName('iframe')[0] as HTMLIFrameElement;\r\n\r\n    this.postThemeToChildren();\r\n    this.postColorSchemeToChildren();\r\n    this.postLanguageToChildren();\r\n    this.postLocaleToChildren();\r\n\r\n    this.registrationCompletedSubject.next(true);\r\n  }\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    const { payload, messageType }: Message = event.data;\r\n    if (messageType !== MessageType.registration && !this.iframeEl) {\r\n      return;\r\n    }\r\n    if (this.iframeEl) {\r\n      // ignore messages that are not from iframe\r\n      const url = new URL(this.iframeEl.src);\r\n      if (url.origin !== event.origin) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const handlers = {\r\n      ...this.handlers,\r\n      default: () => console.log('Unrecognized message for the shell.', event)\r\n    };\r\n\r\n    (handlers[messageType] || handlers.default)(payload);\r\n  }\r\n\r\n  private postMessageToChild(messageType: MessageType, payload: Payload): void {\r\n    if (!this.iframeEl) {\r\n      return;\r\n    }\r\n\r\n    const message: Message = { messageType, payload };\r\n    const url = new URL(this.iframeEl.src);\r\n    this.iframeEl.contentWindow?.postMessage(message, url.origin);\r\n  }\r\n\r\n  // when child updates user data, it has to reflect in user data in shell\r\n  private handleUser(user: User) {\r\n    if (user && user?.access_token !== this.authService.currentUser?.access_token) {\r\n      this.authService.storeUserToSessionStorage(user);\r\n      this.authService.reloadPersistedUserData();\r\n    } else if (user === null && this.authService.isUserInvalid(this.authService.currentUser)) {\r\n      this.authService.clearUserFromSessionStorage();\r\n      this.authService.reloadPersistedUserData();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * List of all types of messages that can be logged.\r\n */\r\nexport enum LogSeverity {\r\n  Debug,\r\n  Info,\r\n  Warning,\r\n  Error,\r\n  Fatal,\r\n}\r\n\r\n/**\r\n * **LogConfig** class is required by the _LoggingModule_.\r\n *\r\n * An instance of this class should be passed into _forRoot_ method of _LoggingModule_\r\n * when importing module in the Angular application.\r\n * ```\r\n * import logConfig from 'logging.config.ts;\r\n * import LoggingModule from '@avl-services/ng-services';\r\n *  ....\r\n *  @NgModule({\r\n *    imports: [\r\n *      LoggingModule.forRoot(logConfig),\r\n *      ...\r\n *    ],\r\n *    ...\r\n *  }) export class AppModule {}\r\n * ```\r\n */\r\nexport class LogConfig {\r\n  /**\r\n   * API endpoint for logging (e.g. https://vizbox.avl.com/api/theia/logs).\r\n   * - Mandatory\r\n   */\r\n  public readonly endpoint: string;\r\n\r\n  /**\r\n   * Name of the database in which logs will be stored.\r\n   * - Mandatory\r\n   */\r\n  public readonly targetName: string;\r\n\r\n  /**\r\n   * Name of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly appName: string;\r\n\r\n  /**\r\n   * Version of the application that uses the logging service.\r\n   * - Mandatory\r\n   */\r\n  public readonly version: string;\r\n\r\n  /**\r\n   * Flag that indicates whether logging starts automatically once the user logs in using credential.\r\n   *\r\n   * If true, app requires _AvlAuthService_ instance in _AppModule_ providers array:\r\n   * ```\r\n   * { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }\r\n   * ```\r\n   * If false, user can control logging using the service (_startLogging_, _stopLogging_ methods).\r\n   *\r\n   * - Optional\r\n   * - Default: false\r\n   */\r\n  public autologging = false;\r\n\r\n  /**\r\n   * Minimum message severity to log.\r\n   * - Optional\r\n   * - Default: LogSeverity.Info\r\n   */\r\n  public globalLogLevel: LogSeverity = LogSeverity.Info;\r\n\r\n  /**\r\n   * Time in milliseconds, determines the period of API requests for logging.\r\n   * - Optional\r\n   * - Default: 30_000 ms\r\n   */\r\n  public debounceTime = 30_000;\r\n\r\n  /**\r\n   * Log queue capacity\r\n   *\r\n   * If reached, API request is sent with all logs in log queue, and queue is cleared out.\r\n   * - Optional\r\n   * - Default: 10\r\n   */\r\n  public capacity = 10;\r\n\r\n  /**\r\n   * Creates instance of _LogConfig_ class.\r\n   * @param endpoint API endpoint for logging.\r\n   * @param targetName Name of the database in which logs will be stored\r\n   * @param appName Name of the application that uses the logging service\r\n   * @param version Version of the application that uses the logging service\r\n   * @param autologging Flag that indicates whether logging starts automatically once the user logs in using credential. Default: false\r\n   * @param globalLogLevel Minimum message severity to log. Default: LogSeverity.Info\r\n   * @param debounceTime Time in milliseconds, determines the period of API requests for logging. Default: 30_000 ms\r\n   * @param capacity Log queue capacity. Default: 10\r\n   */\r\n  constructor(\r\n    endpoint: string,\r\n    targetName: string,\r\n    appName: string,\r\n    version: string,\r\n    autologging: boolean = false,\r\n    globalLogLevel: LogSeverity = LogSeverity.Info,\r\n    debounceTime: number = 30_000,\r\n    capacity: number = 10\r\n  ) {\r\n    this.endpoint = endpoint;\r\n    this.targetName = targetName;\r\n    this.appName = appName;\r\n    this.version = version;\r\n    this.autologging = autologging;\r\n    this.globalLogLevel = globalLogLevel;\r\n    this.debounceTime = debounceTime;\r\n    this.capacity = capacity;\r\n  }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface Log {\r\n  readonly appName?: string;\r\n  readonly componentName?: string;\r\n  readonly severity?: string;\r\n  readonly message?: string;\r\n  readonly procId?: string;\r\n  readonly timestamp?: string;\r\n  readonly version?: string;\r\n  readonly AVLRequestId?: string;\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\r\nimport { AvlAuthService } from '../auth/avl-auth.service';\r\nimport { interval, Observable, Subject } from 'rxjs';\r\nimport { filter, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { Log, LogConfig, LogSeverity } from './logging.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoggingService implements OnDestroy {\r\n  private logs: Log[] = [];\r\n  private headers: HttpHeaders;\r\n  private isLogging = false;\r\n\r\n  private debounceTime$: Subject<number> = new Subject();\r\n  private logs$: Subject<Log[]> = new Subject();\r\n  private stopLogging$: Subject<void> = new Subject();\r\n  private postLogs$: Subject<void> = new Subject();\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('loggingConfig') private config: LogConfig,\r\n    @Optional() @Inject(AvlAuthService) private authService: AvlAuthService\r\n  ) {\r\n    this.headers = new HttpHeaders({\r\n      targetName: this.config.targetName,\r\n    });\r\n\r\n    if (config.autologging) {\r\n      this.authService?.isLoggedIn$.pipe(takeUntil(this.destroyed$)).subscribe((isLoggedIn) => this.decideOnLogging(isLoggedIn));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.postLogs$.complete();\r\n    this.debounceTime$.complete();\r\n    this.logs$.complete();\r\n    this.stopLogging$.next();\r\n    this.stopLogging$.complete();\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n  /**\r\n   * Starts periodical logging process.\r\n   *\r\n   * Depends on _debounceTime_ and _capacity_ properties.\r\n   */\r\n  public startLogging(): void {\r\n    this.isLogging = true;\r\n    this.debounceTime$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap((debounceTime) => this.periodicalLogging(debounceTime))\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.postLogs$\r\n      .pipe(\r\n        takeUntil(this.stopLogging$),\r\n        switchMap(() => this.postMessages())\r\n      )\r\n      .subscribe(() => this.onPostMessages());\r\n\r\n    this.setLoggingDebounceTime(this.config.debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Stops logging process.\r\n   */\r\n  public stopLogging(): void {\r\n    this.isLogging = false;\r\n    this.postLogs();\r\n    this.stopLogging$.next();\r\n  }\r\n\r\n  /**\r\n   * Gets all currently queued logs as an observable value.\r\n   * @returns All currently queued logs as an observable value\r\n   */\r\n  public getLogs$(): Observable<Log[]> {\r\n    return this.logs$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Logs message with debug severity.\r\n   * @param message Message used for constructing a debug log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public debug(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Debug, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with info severity.\r\n   * @param message Message used for constructing a info log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public info(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Info, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with warning severity.\r\n   * @param message Message used for constructing a warning log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public warn(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Warning, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with error severity.\r\n   * @param message Message used for constructing a error log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public error(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Error, componentName);\r\n  }\r\n\r\n  /**\r\n   * Logs message with fatal severity.\r\n   * @param message Message used for constructing a fatal log\r\n   * @param componentName Name of the component which called this method\r\n   */\r\n  public fatal(message: string, componentName: string = ''): void {\r\n    this.log(message, LogSeverity.Fatal, componentName);\r\n  }\r\n\r\n  /**\r\n   * Setter for debounce time (log period).\r\n   * @param debounceTime Time in milliseconds; determines the period of API requests for logging\r\n   */\r\n  public setLoggingDebounceTime(debounceTime: number): void {\r\n    this.config.debounceTime = debounceTime;\r\n    this.debounceTime$.next(debounceTime);\r\n  }\r\n\r\n  /**\r\n   * Setter for global log level.\r\n   * @param globalLogLevel Minimum message severity to log\r\n   */\r\n  public setGlobalLogLevel(globalLogLevel: LogSeverity): void {\r\n    this.config.globalLogLevel = globalLogLevel;\r\n  }\r\n\r\n  /**\r\n   * Setter for log queue capacity.\r\n   * @param capacity Log queue capacity\r\n   */\r\n  public setLogCapacity(capacity: number): void {\r\n    this.config.capacity = capacity;\r\n  }\r\n\r\n  // Logic, private methods\r\n\r\n  private log(message: string, severity: LogSeverity, componentName: string): void {\r\n    if (!this.isLogging || severity < this.config.globalLogLevel) {\r\n      return;\r\n    }\r\n\r\n    this.createAndStoreLog(message, severity, componentName);\r\n    this.dispatchLogs();\r\n\r\n    if (this.isFullCapacity()) {\r\n      this.postLogs$.next();\r\n    }\r\n  }\r\n\r\n  private createAndStoreLog(message: string, severityType: LogSeverity, componentName: string): void {\r\n    const timestamp = new Date().toISOString();\r\n    const { appName, version } = this.config;\r\n    const severity = severityType.toString();\r\n    const log: Log = { message, severity, timestamp, componentName, appName, version };\r\n    this.logs.push(log);\r\n  }\r\n\r\n  private isFullCapacity(): boolean {\r\n    return this.logs.length >= this.config.capacity;\r\n  }\r\n\r\n  private clearLogs(): void {\r\n    this.logs = [];\r\n  }\r\n\r\n  private onPostMessages(): void {\r\n    this.clearLogs();\r\n    this.dispatchLogs();\r\n  }\r\n\r\n  private postLogs(): void {\r\n    this.postLogs$.next();\r\n  }\r\n\r\n  private periodicalLogging(period: number): Observable<void> {\r\n    return interval(period).pipe(\r\n      tap(() => {\r\n        if (!this.logs.length) {\r\n          this.dispatchLogs();\r\n        }\r\n      }),\r\n      filter(() => !!this.logs.length),\r\n      switchMap(() => this.postMessages())\r\n    );\r\n  }\r\n\r\n  private postMessages(): Observable<void> {\r\n    return this.http.post<void>(this.config.endpoint, this.logs, {\r\n      headers: this.headers,\r\n    });\r\n  }\r\n\r\n  private dispatchLogs(): void {\r\n    this.logs$.next(this.logs);\r\n  }\r\n\r\n  private decideOnLogging(isLoggedIn: boolean): void {\r\n    if (isLoggedIn) {\r\n      this.startLogging();\r\n    } else {\r\n      this.stopLogging();\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { LogConfig } from './logging.model';\r\nimport { LoggingService } from './logging.service';\r\n\r\n@NgModule()\r\nexport class LoggingModule {\r\n  constructor(@Optional() @SkipSelf() parentModule?: LoggingModule) {\r\n    if (parentModule) {\r\n      throw new Error('LoggingModule is already loaded. Import it in the AppModule only');\r\n    }\r\n  }\r\n  static forRoot(config: LogConfig): ModuleWithProviders<LoggingModule> {\r\n    return {\r\n      ngModule: LoggingModule,\r\n      providers: [LoggingService, { provide: 'loggingConfig', useValue: config }],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport {\r\n  HubConnection,\r\n  HubConnectionBuilder,\r\n  HubConnectionState,\r\n  LogLevel\r\n} from '@microsoft/signalr';\r\n\r\nimport {\r\n  AvlNotification,\r\n  AvlNotificationConnectionOptions,\r\n  AvlNotificationMetadata\r\n} from '@avl-interfaces/interfaces';\r\n\r\ninterface ApplicationConnection {\r\n  /** Connection identifier */\r\n  readonly id: string;\r\n\r\n  /**\r\n   * Connection to the backend hub.\r\n   */\r\n  readonly connection: HubConnection;\r\n}\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n  private hubConnections: ApplicationConnection[] = [];\r\n  private notification: Subject<AvlNotification> = new Subject();\r\n\r\n  /**\r\n   * Observable which emits newly arrived notifications.\r\n   */\r\n  public notification$: Observable<AvlNotification> = this.notification;\r\n\r\n  /**\r\n   * Builds and starts signalR hub connection with the server.\r\n   * If connection already exists and is not connected, restarts the connection.\r\n   * @param endpoint server endpoint\r\n   * @param options options of the connection\r\n   */\r\n  public startConnection(endpoint: string, options: AvlNotificationConnectionOptions): void {\r\n    let connection = this.getConnectionByID(options.connectionID);\r\n    if (!connection) {\r\n      connection = this.buildConnection(endpoint, options);\r\n    }\r\n\r\n    if (connection.state === HubConnectionState.Connected) {\r\n      return;\r\n    }\r\n\r\n    connection\r\n      .start()\r\n      .then(() => this.startNotifications(connection, options.metadata))\r\n      .catch(() => console.warn('Notification service: Failed to establish connection.'));\r\n  }\r\n\r\n  /**\r\n   * Stops connection with the server\r\n   * @param connectionID connection identifier\r\n   */\r\n  public stopConnection(connectionID: string): void {\r\n    const connection = this.getConnectionByID(connectionID);\r\n\r\n    if (!connection) {\r\n      return;\r\n    }\r\n\r\n    connection.off('transferNotification');\r\n    connection.stop();\r\n  }\r\n\r\n  /**\r\n   * Removes connection entirely\r\n   * @param connectionID connection identifier\r\n   */\r\n  public removeConnection(connectionID: string): void {\r\n    this.stopConnection(connectionID);\r\n\r\n    const index = this.hubConnections.findIndex(connection => connection.id === connectionID);\r\n    if (index !== -1) {\r\n      this.hubConnections.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates notifications metadata for specific connection. Notifies server about it.\r\n   * @param connectionID connection identifier\r\n   * @param metadata notification metadata, (e.g language)\r\n   */\r\n  public updateNotifications(connectionID: string, metadata: AvlNotificationMetadata): void {\r\n    const connection = this.getConnectionByID(connectionID);\r\n    if (!connection) {\r\n      return;\r\n    }\r\n\r\n    this.startNotifications(connection, metadata);\r\n  }\r\n\r\n  // Private methods\r\n\r\n  private startNotifications(connection: HubConnection, metadata: AvlNotificationMetadata): void {\r\n    connection.invoke('startNotifications', metadata);\r\n  }\r\n\r\n  private getConnectionByID(connectionID: string): HubConnection {\r\n    const index = this.hubConnections.findIndex(connection => connection.id === connectionID);\r\n    return this.hubConnections[index]?.connection;\r\n  }\r\n\r\n  private buildConnection(\r\n    endpoint: string,\r\n    options: AvlNotificationConnectionOptions\r\n  ): HubConnection {\r\n    const hubConnection = new HubConnectionBuilder()\r\n      .configureLogging(LogLevel.None)\r\n      .withUrl(endpoint, { accessTokenFactory: () => options.accessToken })\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    hubConnection.onreconnected(() => this.startNotifications(hubConnection, options.metadata));\r\n    hubConnection.on('transferNotification', (notification: AvlNotification) => {\r\n      this.notification.next(notification);\r\n    });\r\n\r\n    this.hubConnections.push({\r\n      id: options.connectionID,\r\n      connection: hubConnection\r\n    });\r\n\r\n    return hubConnection;\r\n  }\r\n}\r\n","import { AvlUploadService } from '@avl-interfaces/interfaces';\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport const UPLOAD_SERVICE = new InjectionToken<AvlUploadService>('UPLOAD_SERVICE');\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';\r\nimport { AvlUploadService, AvlFile, AvlAbortUploadAction, AvlUploadProgressEvent, AvlHttpErrorResponse } from '@avl-interfaces/interfaces';\r\n\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class UploadService implements AvlUploadService {\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  downloadFile(\r\n    url: string,\r\n    progressCallback?: (progress: AvlUploadProgressEvent) => void,\r\n    completeCallback?: (blob: Blob) => void,\r\n    failCallback?: (errorResponse: AvlHttpErrorResponse) => void\r\n  ): AvlAbortUploadAction {\r\n    const req: Observable<any> = this.httpClient.get(url, { reportProgress: true, responseType: 'blob', observe: 'events' })\r\n      .pipe(map(event => {\r\n        if (event.type === HttpEventType.DownloadProgress) {\r\n          progressCallback?.(event);\r\n        }\r\n        if (event.type === HttpEventType.Response && event.body != null) {\r\n          completeCallback?.(event.body);\r\n        }\r\n      }), catchError((err: HttpErrorResponse) => {\r\n        const response = err.error instanceof Event ? (<XMLHttpRequest>err.error.target).response : err.error;\r\n        if (failCallback) {\r\n          failCallback({\r\n            status: err.status,\r\n            response: response\r\n          });\r\n        }\r\n        return of(null);\r\n      }));\r\n    const subscription = req.subscribe();\r\n    return subscription.unsubscribe.bind(subscription);\r\n  }\r\n\r\n  uploadFile(\r\n    file: AvlFile,\r\n    target: string,\r\n    progressCallback?: (progress: AvlUploadProgressEvent) => void,\r\n    completeCallback?: (downloadUrl?: string) => void,\r\n    failCallback?: (errorResponse: AvlHttpErrorResponse) => void\r\n  ): AvlAbortUploadAction {\r\n    const formData = new FormData();\r\n    formData.append('file', file.file);\r\n    const uploadReq: Observable<any> = this.httpClient.post<{downloadUrl?: string}>(target, formData, { reportProgress: true, observe: 'events' } )\r\n      .pipe(map(event => {\r\n        if (event.type === HttpEventType.UploadProgress) {\r\n          progressCallback?.(event);\r\n        }\r\n        if(event.type === HttpEventType.Response) {\r\n          if (event.body != null && event.body.downloadUrl) {\r\n            completeCallback?.(event.body.downloadUrl);\r\n          } else {\r\n            completeCallback?.();\r\n          }\r\n        }\r\n      }), catchError( (err: HttpErrorResponse, caught) => {\r\n        const response = err.error instanceof Event ? (<XMLHttpRequest>err.error.target).response : err.error;\r\n        if(failCallback) {\r\n          failCallback({\r\n            status: err.status,\r\n            response: response\r\n          });\r\n        }\r\n        return of(null);\r\n      }));\r\n      const subscription = uploadReq.subscribe();\r\n      return subscription.unsubscribe.bind(subscription);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UnsavedChangesShellService {\r\n  /**\r\n   * Boolean value for opening and closing of the unsaved changes warning dialog\r\n   */\r\n  public isDialogOpen: boolean = false;\r\n\r\n  /**\r\n   * Boolean value indicating if there are unsaved changes in the application\r\n   */\r\n  public hasUnsavedChanges: boolean = false;\r\n\r\n  /**\r\n   * If current application is inside shell application\r\n   * True if current application is inside shell application, false otherwise.\r\n   */\r\n  private isChild = window.location !== window.parent.location;\r\n\r\n  /**\r\n   * Subject tracking if the user can navigate in application, default value is true\r\n   */\r\n  public canNavigateSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\r\n\r\n  constructor() {\r\n    this.preventRefresh();\r\n  }\r\n\r\n  /**\r\n   * Called when user clicks the 'Leave' button, allows navigation and closes the dialog\r\n   */\r\n  public onProceed(): void {\r\n    this.hasUnsavedChanges = false;\r\n    this.canNavigateSubject.next(true);\r\n    this.closeDialog();\r\n  }\r\n\r\n  /**\r\n   * Called when user clicks the 'Stay' button, keeps the state, doesn't allow navigation\r\n   * and closes the dialog\r\n   */\r\n  public onAbort(): void {\r\n    this.canNavigateSubject.next(false);\r\n    this.closeDialog();\r\n  }\r\n\r\n  private preventRefresh(): void {\r\n    window.onbeforeunload = (event: Event) => {\r\n      if (this.hasUnsavedChanges) {\r\n        if (this.isChild && !this.isDialogOpen) {\r\n          event.preventDefault();\r\n        } else if (!this.isChild) {\r\n          event.returnValue = true;\r\n        }\r\n      } else {\r\n        event.preventDefault();\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Opens the unsaved changes warning dialog\r\n   */\r\n  public openDialog(): void {\r\n    this.isDialogOpen = true;\r\n  }\r\n\r\n  /**\r\n   * Closes the unsaved changes warning dialog\r\n   */\r\n  public closeDialog(): void {\r\n    this.isDialogOpen = false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { UnsavedChangesShellService } from '../unsaved-changes-shell.service';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { ShellCommunicationService } from '../../composite';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UnsavedChangesService extends UnsavedChangesShellService {\r\n  /**\r\n   * Boolean value for opening and closing of the unsaved changes warning dialog\r\n   */\r\n  public isDialogOpen: boolean = false;\r\n\r\n  private formArray: FormGroup[] = [];\r\n\r\n  constructor(private shellCommunicationService: ShellCommunicationService) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Adds the form to the form array and notifies shell if there are any unsaved changes in forms\r\n   * @param form Form to be registered\r\n   */\r\n  public registerForm(form: FormGroup) {\r\n    this.formArray.push(form);\r\n\r\n    form.valueChanges.pipe(debounceTime(300)).subscribe(() => {\r\n      super.hasUnsavedChanges = this.isAnyFormDirty();\r\n      this.shellCommunicationService.notifyShellAboutUnsavedChanges(this.isAnyFormDirty());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the form from the form array and notifies shell and child\r\n   * @hidden\r\n   * @param form Form to be unregistered\r\n   */\r\n  public unregisterForm(form: FormGroup) {\r\n    this.formArray.splice(this.formArray.indexOf(form), 1);\r\n    super.hasUnsavedChanges = this.isAnyFormDirty();\r\n    this.shellCommunicationService.notifyShellAboutUnsavedChanges(this.isAnyFormDirty());\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   * @returns Array of forms registered to the service\r\n   */\r\n  public getRegisteredForms() {\r\n    return this.formArray;\r\n  }\r\n\r\n  /**\r\n   * Method checking if there are unsaved changes in any of the forms\r\n   * @returns Boolean value indicating is there a 'dirty' form\r\n   */\r\n  public isAnyFormDirty() {\r\n    return this.formArray.some(form => {\r\n      if (!form) {\r\n        return false;\r\n      }\r\n      let formGroupValues: string[] = Object.values(form.value);\r\n      return formGroupValues.some((value: string) => Boolean(value));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates observers, closes the unsaved changes dialog, allows the user to navigate away\r\n   * and notifies shell\r\n   */\r\n  public onProceed() {\r\n    super.onProceed();\r\n    this.shellCommunicationService.notifyShellAboutUnsavedChanges(false);\r\n  }\r\n\r\n  /**\r\n   * Updates observers, closes the unsaved changes dialog and keeps the user on the same page\r\n   */\r\n  public onAbort() {\r\n    super.onAbort();\r\n  }\r\n}\r\n","import { Directive, Input, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { UnsavedChangesService } from './unsaved-changes.service';\r\n\r\n@Directive({\r\n  selector: 'form[detectUnsavedChanges]'\r\n})\r\nexport class UnsavedChangesDirective implements OnDestroy, OnInit {\r\n  @Input() formGroup: FormGroup;\r\n\r\n  constructor(private unsavedChangesService: UnsavedChangesService) {}\r\n\r\n  ngOnInit() {\r\n    this.unsavedChangesService.registerForm(this.formGroup);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unsavedChangesService.unregisterForm(this.formGroup);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.formGroup.previousValue !== changes.formGroup.currentValue && changes.formGroup.firstChange === false) {\r\n        this.unsavedChangesService.unregisterForm(this.formGroup);\r\n        this.unsavedChangesService.registerForm(changes.formGroup.currentValue);\r\n    }\r\n    if (this.formGroup === undefined) {\r\n        throw new Error(\"Attribute 'formGroup' is required\");\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanDeactivate } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\nimport { UnsavedChangesService } from './unsaved-changes/unsaved-changes.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UnsavedChangesGuard implements CanDeactivate<any> {\r\n  constructor(private unsavedChangesService: UnsavedChangesService) {}\r\n\r\n  canDeactivate(): boolean | Observable<boolean> {\r\n    if (this.unsavedChangesService.isAnyFormDirty()) {\r\n      this.unsavedChangesService.openDialog();\r\n      return this.unsavedChangesService.canNavigateSubject.pipe(skip(1));\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders } from '@angular/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { UnsavedChangesShellService } from '../unsaved-changes-shell.service';\r\nimport { UnsavedChangesGuard } from '../unsaved-changes.guard';\r\nimport { UnsavedChangesDirective } from './unsaved-changes.directive';\r\nimport { UnsavedChangesService } from './unsaved-changes.service';\r\n\r\n@NgModule({\r\n  declarations: [UnsavedChangesDirective],\r\n  exports: [UnsavedChangesDirective]\r\n})\r\nexport class UnsavedChangesModule {\r\n  static forRoot(): ModuleWithProviders<UnsavedChangesModule> {\r\n    return {\r\n      ngModule: UnsavedChangesModule,\r\n      providers: [UnsavedChangesGuard, UnsavedChangesShellService, UnsavedChangesService]\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ng-services\r\n */\r\n\r\nexport * from './lib/auth/index';\r\nexport * from './lib/composite/index';\r\nexport * from './lib/logging/index';\r\nexport * from './lib/settings/index';\r\nexport * from './lib/notification/index';\r\nexport * from './lib/upload/index';\r\nexport * from './lib/unsaved-changes/index';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["uuidv4"],"mappings":"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"}