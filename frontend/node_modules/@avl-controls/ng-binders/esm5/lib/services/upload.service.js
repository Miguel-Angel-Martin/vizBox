import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { of } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
var UploadService = /** @class */ (function () {
    function UploadService(httpClient) {
        this.httpClient = httpClient;
    }
    UploadService.prototype.downloadFile = function (url, progressCallback, completeCallback, failCallback) {
        var req = this.httpClient.get(url, { reportProgress: true, responseType: "blob", observe: 'events' })
            .pipe(map(function (event) {
            if (event.type === HttpEventType.DownloadProgress) {
                progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(event);
            }
            if (event.type === HttpEventType.Response && event.body != null) {
                completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback(event.body);
            }
        }), catchError(function (err) {
            var response = err.error instanceof Event ? err.error.target.response : err.error;
            if (failCallback)
                failCallback({
                    status: err.status,
                    response: response
                });
            return of(null);
        }));
        var subscription = req.subscribe();
        return subscription.unsubscribe.bind(subscription);
    };
    UploadService.prototype.uploadFile = function (file, target, progressCallback, completeCallback, failCallback) {
        var formData = new FormData();
        formData.append('file', file.file);
        var uploadReq = this.httpClient.post(target, formData, { reportProgress: true, observe: 'events' })
            .pipe(map(function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(event);
            }
            if (event.type === HttpEventType.Response) {
                if (event.body != null && event.body.downloadUrl) {
                    completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback(event.body.downloadUrl);
                }
                else {
                    completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback();
                }
            }
        }), catchError(function (err, caught) {
            var response = err.error instanceof Event ? err.error.target.response : err.error;
            if (failCallback)
                failCallback({
                    status: err.status,
                    response: response
                });
            return of(null);
        }));
        var subscription = uploadReq.subscribe();
        return subscription.unsubscribe.bind(subscription);
    };
    UploadService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    UploadService = __decorate([ __metadata("design:paramtypes", [HttpClient])
    ], UploadService);
UploadService.ɵfac = function UploadService_Factory(t) { return new (t || UploadService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
UploadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UploadService, factory: function (t) { return UploadService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
    return UploadService;
}());
export { UploadService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,