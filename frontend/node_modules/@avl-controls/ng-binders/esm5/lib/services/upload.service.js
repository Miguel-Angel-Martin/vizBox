import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
var UploadService = /** @class */ (function () {
    function UploadService(httpClient) {
        this.httpClient = httpClient;
    }
    UploadService.prototype.downloadFile = function (url) {
        return this.httpClient.get(url, { responseType: "blob" }).toPromise();
    };
    UploadService.prototype.uploadFile = function (file, target, progressCallback, completeCallback, failCallback) {
        var formData = new FormData();
        formData.append('file', file.file);
        var uploadReq = this.httpClient.post(target, formData, { reportProgress: true, observe: 'events' })
            .pipe(map(function (event) {
            if (event.type === HttpEventType.UploadProgress && progressCallback) {
                progressCallback(event);
            }
            if (event.type === HttpEventType.Response) {
                if (completeCallback && event.body != null && event.body.downloadUrl) {
                    completeCallback(event.body.downloadUrl);
                }
                else if (completeCallback)
                    completeCallback();
            }
        }), catchError(function (err, caught) {
            var response = err.error instanceof Event ? err.error.target.response : err.error;
            if (failCallback)
                failCallback({
                    status: err.status,
                    response: response
                });
            return new Observable(null);
        }));
        var subscription = uploadReq.subscribe();
        return subscription.unsubscribe.bind(subscription);
    };
    UploadService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    UploadService = __decorate([ __metadata("design:paramtypes", [HttpClient])
    ], UploadService);
UploadService.ɵfac = function UploadService_Factory(t) { return new (t || UploadService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
UploadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UploadService, factory: function (t) { return UploadService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
    return UploadService;
}());
export { UploadService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvbGliL3NlcnZpY2VzL3VwbG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHcEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFHbEM7QUFBaUQsSUFDL0MsdUJBQW9CLFVBQXNCO0FBQUksUUFBMUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLElBQUcsQ0FBQztBQUNqRCxJQUNFLG9DQUFZLEdBQVosVUFBYSxHQUFXO0FBQUksUUFDMUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxRSxJQUFFLENBQUM7QUFFSCxJQUFFLGtDQUFVLEdBQVYsVUFBVyxJQUFhLEVBQUUsTUFBYyxFQUFFLGdCQUE2RCxFQUFFLGdCQUFpRCxFQUFFLFlBQTREO0FBQ3hOLFFBQ0UsSUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUNwQyxRQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxRQUFJLElBQU0sU0FBUyxHQUFvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBeUIsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFFO0FBQ25KLGFBQU8sSUFB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QUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBL0JBLEFBQUEsQUFEQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQURBLEFBQUEsQUFpQ0EsQUFBQSxBQUFBLEFBQUEsQUFqQ0EsQUFpQ0EsQUFqQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEV2ZW50VHlwZSwgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEF2bFVwbG9hZFNlcnZpY2UsIEF2bEZpbGUsIEF2bEFib3J0VXBsb2FkQWN0aW9uLCBBdmxVcGxvYWRQcm9ncmVzc0V2ZW50LCBBdmxIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0BhdmwtY29udHJvbHMvaW50ZXJmYWNlcyc7XHJcblxyXG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFVwbG9hZFNlcnZpY2UgaW1wbGVtZW50cyBBdmxVcGxvYWRTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICBkb3dubG9hZEZpbGUodXJsOiBzdHJpbmcpOiBQcm9taXNlPEJsb2I+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KHVybCwgeyByZXNwb25zZVR5cGU6IFwiYmxvYlwiIH0pLnRvUHJvbWlzZSgpO1xyXG4gIH1cclxuXHJcbiAgdXBsb2FkRmlsZShmaWxlOiBBdmxGaWxlLCB0YXJnZXQ6IHN0cmluZywgcHJvZ3Jlc3NDYWxsYmFjaz86IChwcm9ncmVzczogQXZsVXBsb2FkUHJvZ3Jlc3NFdmVudCkgPT4gdm9pZCwgY29tcGxldGVDYWxsYmFjaz86IChkb3dubG9hZFVybD86IHN0cmluZykgPT4gdm9pZCwgZmFpbENhbGxiYWNrPzogKGVycm9yUmVzcG9uc2U6IEF2bEh0dHBFcnJvclJlc3BvbnNlKSA9PiB2b2lkKVxyXG4gIDogQXZsQWJvcnRVcGxvYWRBY3Rpb24ge1xyXG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUuZmlsZSk7XHJcbiAgICBjb25zdCB1cGxvYWRSZXE6IE9ic2VydmFibGU8YW55PiA9IHRoaXMuaHR0cENsaWVudC5wb3N0PHtkb3dubG9hZFVybD86IHN0cmluZ30+KHRhcmdldCwgZm9ybURhdGEsIHsgcmVwb3J0UHJvZ3Jlc3M6IHRydWUsIG9ic2VydmU6ICdldmVudHMnIH0gKVxyXG4gICAgICAucGlwZShtYXAoZXZlbnQgPT4ge1xyXG4gICAgICAgIGlmKGV2ZW50LnR5cGUgPT09IEh0dHBFdmVudFR5cGUuVXBsb2FkUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3NDYWxsYmFjaykge1xyXG4gICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayhldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGV2ZW50LnR5cGUgPT09IEh0dHBFdmVudFR5cGUuUmVzcG9uc2UpIHtcclxuICAgICAgICAgIGlmKGNvbXBsZXRlQ2FsbGJhY2sgJiYgZXZlbnQuYm9keSAhPSBudWxsICYmIGV2ZW50LmJvZHkuZG93bmxvYWRVcmwpIHtcclxuICAgICAgICAgICAgY29tcGxldGVDYWxsYmFjayhldmVudC5ib2R5LmRvd25sb2FkVXJsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoY29tcGxldGVDYWxsYmFjaykgY29tcGxldGVDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSksIGNhdGNoRXJyb3IoIChlcnI6IEh0dHBFcnJvclJlc3BvbnNlLCBjYXVnaHQpID0+IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGVyci5lcnJvciBpbnN0YW5jZW9mIEV2ZW50ID8gKDxYTUxIdHRwUmVxdWVzdD5lcnIuZXJyb3IudGFyZ2V0KS5yZXNwb25zZSA6IGVyci5lcnJvcjtcclxuICAgICAgICBpZihmYWlsQ2FsbGJhY2spIGZhaWxDYWxsYmFjayh7XHJcbiAgICAgICAgICBzdGF0dXM6IGVyci5zdGF0dXMsXHJcbiAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2VcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUobnVsbCk7XHJcbiAgICAgIH0pKTtcclxuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdXBsb2FkUmVxLnN1YnNjcmliZSgpO1xyXG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlLmJpbmQoc3Vic2NyaXB0aW9uKTtcclxuICB9XHJcbn1cclxuIl19