import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Observable } from 'rxjs';
var UploadService = /** @class */ (function () {
    function UploadService(httpClient) {
        this.httpClient = httpClient;
    }
    UploadService.prototype.downloadFile = function (url) {
        return this.httpClient.get(url, { responseType: "blob" }).toPromise();
    };
    UploadService.prototype.uploadFile = function (file, target, progressCallback, completeCallback, failCallback) {
        var formData = new FormData();
        formData.append('file', file.file);
        var uploadReq = this.httpClient.post(target, formData, { reportProgress: true, observe: 'events' })
            .pipe(map(function (event) {
            if (event.type === HttpEventType.UploadProgress && progressCallback) {
                progressCallback(event);
            }
            if (event.type === HttpEventType.Response) {
                if (completeCallback && event.body != null && event.body.downloadUrl) {
                    completeCallback(event.body.downloadUrl);
                }
                else if (completeCallback)
                    completeCallback();
            }
        }), catchError(function (err, caught) {
            var response = err.error instanceof Event ? err.error.target.response : err.error;
            if (failCallback)
                failCallback({
                    status: err.status,
                    response: response
                });
            return new Observable(null);
        }));
        var subscription = uploadReq.subscribe();
        return subscription.unsubscribe.bind(subscription);
    };
    UploadService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    UploadService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], UploadService);
    return UploadService;
}());
export { UploadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdXBsb2FkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdwRixPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHbEM7SUFDRSx1QkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFJLENBQUM7SUFFL0Msb0NBQVksR0FBWixVQUFhLEdBQVc7UUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN4RSxDQUFDO0lBRUQsa0NBQVUsR0FBVixVQUFXLElBQWEsRUFBRSxNQUFjLEVBQUUsZ0JBQTZELEVBQUUsZ0JBQWlELEVBQUUsWUFBNEQ7UUFFdE4sSUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNoQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBTSxTQUFTLEdBQW9CLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUF5QixNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUU7YUFDNUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtBQUs7WUFDYixJQUFHLEtBQUssQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLGNBQWMsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDbEUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekI7WUFDRCxJQUFHLEtBQUssQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLFFBQVEsRUFBRTtnQkFDeEMsSUFBRyxnQkFBZ0IsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtvQkFDbkUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDMUM7cUJBQ0ksSUFBRyxnQkFBZ0I7b0JBQUUsZ0JBQWdCLEVBQUUsQ0FBQzthQUM5QztRQUNILENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBRSxVQUFDLEdBQXNCLEVBQUUsTUFBTTtZQUM3QyxJQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQWtCLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUN0RyxJQUFHLFlBQVk7Z0JBQUUsWUFBWSxDQUFDO29CQUM1QixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07b0JBQ2xCLFFBQVEsRUFBRSxRQUFRO2lCQUNuQixDQUFDLENBQUM7WUFDSCxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDSixJQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsT0FBTyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2RCxDQUFDOztnQkEvQitCLFVBQVU7O0lBRC9CLGFBQWE7UUFEekIsVUFBVSxFQUFFO3lDQUVxQixVQUFVO09BRC9CLGFBQWEsQ0FpQ3pCO0lBQUQsb0JBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWpDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXZlbnRUeXBlLCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgQXZsVXBsb2FkU2VydmljZSwgQXZsRmlsZSwgQXZsQWJvcnRVcGxvYWRBY3Rpb24sIEF2bFVwbG9hZFByb2dyZXNzRXZlbnQsIEF2bEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGF2bC1jb250cm9scy9pbnRlcmZhY2VzJztcclxuXHJcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXBsb2FkU2VydmljZSBpbXBsZW1lbnRzIEF2bFVwbG9hZFNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIGRvd25sb2FkRmlsZSh1cmw6IHN0cmluZyk6IFByb21pc2U8QmxvYj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQodXJsLCB7IHJlc3BvbnNlVHlwZTogXCJibG9iXCIgfSkudG9Qcm9taXNlKCk7XHJcbiAgfVxyXG5cclxuICB1cGxvYWRGaWxlKGZpbGU6IEF2bEZpbGUsIHRhcmdldDogc3RyaW5nLCBwcm9ncmVzc0NhbGxiYWNrPzogKHByb2dyZXNzOiBBdmxVcGxvYWRQcm9ncmVzc0V2ZW50KSA9PiB2b2lkLCBjb21wbGV0ZUNhbGxiYWNrPzogKGRvd25sb2FkVXJsPzogc3RyaW5nKSA9PiB2b2lkLCBmYWlsQ2FsbGJhY2s/OiAoZXJyb3JSZXNwb25zZTogQXZsSHR0cEVycm9yUmVzcG9uc2UpID0+IHZvaWQpXHJcbiAgOiBBdmxBYm9ydFVwbG9hZEFjdGlvbiB7XHJcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZS5maWxlKTtcclxuICAgIGNvbnN0IHVwbG9hZFJlcTogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5odHRwQ2xpZW50LnBvc3Q8e2Rvd25sb2FkVXJsPzogc3RyaW5nfT4odGFyZ2V0LCBmb3JtRGF0YSwgeyByZXBvcnRQcm9ncmVzczogdHJ1ZSwgb2JzZXJ2ZTogJ2V2ZW50cycgfSApXHJcbiAgICAgIC5waXBlKG1hcChldmVudCA9PiB7XHJcbiAgICAgICAgaWYoZXZlbnQudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5VcGxvYWRQcm9ncmVzcyAmJiBwcm9ncmVzc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoZXZlbnQudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5SZXNwb25zZSkge1xyXG4gICAgICAgICAgaWYoY29tcGxldGVDYWxsYmFjayAmJiBldmVudC5ib2R5ICE9IG51bGwgJiYgZXZlbnQuYm9keS5kb3dubG9hZFVybCkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZUNhbGxiYWNrKGV2ZW50LmJvZHkuZG93bmxvYWRVcmwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihjb21wbGV0ZUNhbGxiYWNrKSBjb21wbGV0ZUNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSwgY2F0Y2hFcnJvciggKGVycjogSHR0cEVycm9yUmVzcG9uc2UsIGNhdWdodCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gZXJyLmVycm9yIGluc3RhbmNlb2YgRXZlbnQgPyAoPFhNTEh0dHBSZXF1ZXN0PmVyci5lcnJvci50YXJnZXQpLnJlc3BvbnNlIDogZXJyLmVycm9yO1xyXG4gICAgICAgIGlmKGZhaWxDYWxsYmFjaykgZmFpbENhbGxiYWNrKHtcclxuICAgICAgICAgIHN0YXR1czogZXJyLnN0YXR1cyxcclxuICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShudWxsKTtcclxuICAgICAgfSkpO1xyXG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB1cGxvYWRSZXEuc3Vic2NyaWJlKCk7XHJcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUuYmluZChzdWJzY3JpcHRpb24pO1xyXG4gIH1cclxufVxyXG4iXX0=