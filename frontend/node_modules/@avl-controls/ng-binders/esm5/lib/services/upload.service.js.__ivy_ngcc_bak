import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { of } from 'rxjs';
var UploadService = /** @class */ (function () {
    function UploadService(httpClient) {
        this.httpClient = httpClient;
    }
    UploadService.prototype.downloadFile = function (url, progressCallback, completeCallback, failCallback) {
        var req = this.httpClient.get(url, { reportProgress: true, responseType: "blob", observe: 'events' })
            .pipe(map(function (event) {
            if (event.type === HttpEventType.DownloadProgress) {
                progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(event);
            }
            if (event.type === HttpEventType.Response && event.body != null) {
                completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback(event.body);
            }
        }), catchError(function (err) {
            var response = err.error instanceof Event ? err.error.target.response : err.error;
            if (failCallback)
                failCallback({
                    status: err.status,
                    response: response
                });
            return of(null);
        }));
        var subscription = req.subscribe();
        return subscription.unsubscribe.bind(subscription);
    };
    UploadService.prototype.uploadFile = function (file, target, progressCallback, completeCallback, failCallback) {
        var formData = new FormData();
        formData.append('file', file.file);
        var uploadReq = this.httpClient.post(target, formData, { reportProgress: true, observe: 'events' })
            .pipe(map(function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(event);
            }
            if (event.type === HttpEventType.Response) {
                if (event.body != null && event.body.downloadUrl) {
                    completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback(event.body.downloadUrl);
                }
                else {
                    completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback();
                }
            }
        }), catchError(function (err, caught) {
            var response = err.error instanceof Event ? err.error.target.response : err.error;
            if (failCallback)
                failCallback({
                    status: err.status,
                    response: response
                });
            return of(null);
        }));
        var subscription = uploadReq.subscribe();
        return subscription.unsubscribe.bind(subscription);
    };
    UploadService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    UploadService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], UploadService);
    return UploadService;
}());
export { UploadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdXBsb2FkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdwRixPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHdEM7SUFDRSx1QkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFJLENBQUM7SUFFL0Msb0NBQVksR0FBWixVQUNFLEdBQVcsRUFDWCxnQkFBNkQsRUFDN0QsZ0JBQXVDLEVBQ3ZDLFlBQTREO1FBRTVELElBQU0sR0FBRyxHQUFvQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDO2FBQ3JILElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO1lBQ2IsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDakQsZ0JBQWdCLGFBQWhCLGdCQUFnQix1QkFBaEIsZ0JBQWdCLENBQUcsS0FBSyxFQUFFO2FBQzNCO1lBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0JBQy9ELGdCQUFnQixhQUFoQixnQkFBZ0IsdUJBQWhCLGdCQUFnQixDQUFHLEtBQUssQ0FBQyxJQUFJ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ci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEV2ZW50VHlwZSwgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEF2bFVwbG9hZFNlcnZpY2UsIEF2bEZpbGUsIEF2bEFib3J0VXBsb2FkQWN0aW9uLCBBdmxVcGxvYWRQcm9ncmVzc0V2ZW50LCBBdmxIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0BhdmwtY29udHJvbHMvaW50ZXJmYWNlcyc7XHJcblxyXG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBVcGxvYWRTZXJ2aWNlIGltcGxlbWVudHMgQXZsVXBsb2FkU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgZG93bmxvYWRGaWxlKFxyXG4gICAgdXJsOiBzdHJpbmcsXHJcbiAgICBwcm9ncmVzc0NhbGxiYWNrPzogKHByb2dyZXNzOiBBdmxVcGxvYWRQcm9ncmVzc0V2ZW50KSA9PiB2b2lkLFxyXG4gICAgY29tcGxldGVDYWxsYmFjaz86IChibG9iOiBCbG9iKSA9PiB2b2lkLFxyXG4gICAgZmFpbENhbGxiYWNrPzogKGVycm9yUmVzcG9uc2U6IEF2bEh0dHBFcnJvclJlc3BvbnNlKSA9PiB2b2lkXHJcbiAgKTogQXZsQWJvcnRVcGxvYWRBY3Rpb24ge1xyXG4gICAgY29uc3QgcmVxOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLmh0dHBDbGllbnQuZ2V0KHVybCwgeyByZXBvcnRQcm9ncmVzczogdHJ1ZSwgcmVzcG9uc2VUeXBlOiBcImJsb2JcIiwgb2JzZXJ2ZTogJ2V2ZW50cycgfSlcclxuICAgICAgLnBpcGUobWFwKGV2ZW50ID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5Eb3dubG9hZFByb2dyZXNzKSB7XHJcbiAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrPy4oZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5SZXNwb25zZSAmJiBldmVudC5ib2R5ICE9IG51bGwpIHtcclxuICAgICAgICAgIGNvbXBsZXRlQ2FsbGJhY2s/LihldmVudC5ib2R5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLCBjYXRjaEVycm9yKChlcnI6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBlcnIuZXJyb3IgaW5zdGFuY2VvZiBFdmVudCA/ICg8WE1MSHR0cFJlcXVlc3Q+ZXJyLmVycm9yLnRhcmdldCkucmVzcG9uc2UgOiBlcnIuZXJyb3I7XHJcbiAgICAgICAgaWYgKGZhaWxDYWxsYmFjaykgZmFpbENhbGxiYWNrKHtcclxuICAgICAgICAgIHN0YXR1czogZXJyLnN0YXR1cyxcclxuICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgfSkpO1xyXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gcmVxLnN1YnNjcmliZSgpO1xyXG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZS5iaW5kKHN1YnNjcmlwdGlvbik7XHJcbiAgfVxyXG5cclxuICB1cGxvYWRGaWxlKFxyXG4gICAgZmlsZTogQXZsRmlsZSxcclxuICAgIHRhcmdldDogc3RyaW5nLFxyXG4gICAgcHJvZ3Jlc3NDYWxsYmFjaz86IChwcm9ncmVzczogQXZsVXBsb2FkUHJvZ3Jlc3NFdmVudCkgPT4gdm9pZCxcclxuICAgIGNvbXBsZXRlQ2FsbGJhY2s/OiAoZG93bmxvYWRVcmw/OiBzdHJpbmcpID0+IHZvaWQsXHJcbiAgICBmYWlsQ2FsbGJhY2s/OiAoZXJyb3JSZXNwb25zZTogQXZsSHR0cEVycm9yUmVzcG9uc2UpID0+IHZvaWRcclxuICApOiBBdmxBYm9ydFVwbG9hZEFjdGlvbiB7XHJcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZS5maWxlKTtcclxuICAgIGNvbnN0IHVwbG9hZFJlcTogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5odHRwQ2xpZW50LnBvc3Q8e2Rvd25sb2FkVXJsPzogc3RyaW5nfT4odGFyZ2V0LCBmb3JtRGF0YSwgeyByZXBvcnRQcm9ncmVzczogdHJ1ZSwgb2JzZXJ2ZTogJ2V2ZW50cycgfSApXHJcbiAgICAgIC5waXBlKG1hcChldmVudCA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IEh0dHBFdmVudFR5cGUuVXBsb2FkUHJvZ3Jlc3MpIHtcclxuICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2s/LihldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGV2ZW50LnR5cGUgPT09IEh0dHBFdmVudFR5cGUuUmVzcG9uc2UpIHtcclxuICAgICAgICAgIGlmIChldmVudC5ib2R5ICE9IG51bGwgJiYgZXZlbnQuYm9keS5kb3dubG9hZFVybCkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZUNhbGxiYWNrPy4oZXZlbnQuYm9keS5kb3dubG9hZFVybCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29tcGxldGVDYWxsYmFjaz8uKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSwgY2F0Y2hFcnJvciggKGVycjogSHR0cEVycm9yUmVzcG9uc2UsIGNhdWdodCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gZXJyLmVycm9yIGluc3RhbmNlb2YgRXZlbnQgPyAoPFhNTEh0dHBSZXF1ZXN0PmVyci5lcnJvci50YXJnZXQpLnJlc3BvbnNlIDogZXJyLmVycm9yO1xyXG4gICAgICAgIGlmKGZhaWxDYWxsYmFjaykgZmFpbENhbGxiYWNrKHtcclxuICAgICAgICAgIHN0YXR1czogZXJyLnN0YXR1cyxcclxuICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgfSkpO1xyXG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB1cGxvYWRSZXEuc3Vic2NyaWJlKCk7XHJcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUuYmluZChzdWJzY3JpcHRpb24pO1xyXG4gIH1cclxufVxyXG4iXX0=