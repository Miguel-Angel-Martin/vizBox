import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
var AvlStepProgressDirective = /** @class */ (function () {
    function AvlStepProgressDirective(elementRef) {
        this.activeChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'active-changed', this.activeChange);
    }
    AvlStepProgressDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlStepProgressDirective.prototype, "activeChange", void 0);
    AvlStepProgressDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlStepProgressDirective);
AvlStepProgressDirective.ɵfac = function AvlStepProgressDirective_Factory(t) { return new (t || AvlStepProgressDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlStepProgressDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlStepProgressDirective, selectors: [["avl-step-progress"]], outputs: { activeChange: "activeChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlStepProgressDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-step-progress'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { activeChange: [{
            type: Output
        }] }); })();
    return AvlStepProgressDirective;
}());
export { AvlStepProgressDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXN0ZXAtcHJvZ3Jlc3MuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtc3RlcC1wcm9ncmVzcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBTTVFO0FBQ29CLElBRWxCLGtDQUFZLFVBQXNCO0FBQ3BDLFFBSFksaUJBQVksR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNyRSxRQUVJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUYsSUFBRSxDQUFDO0FBQ0g7QUFDbUUsZ0JBSnpDLFVBQVU7QUFBRztBQUM5QixJQUhHO0FBQWEsUUFBdEIsTUFBTSxFQUFFO0FBQUUsa0NBQWEsWUFBWTtBQUFFLGtFQUE2QjtBQUVyRSxJQUhhLHdCQUF3Qix3QkFIcEMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLDNDQUVKLGtDQUdrQixVQUFVO2VBTEwsVUFDOUIsQ0FBQywxQkFJcUMsT0FIMUIsd0JBQXdCLENBTXBDOzs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCwrQkFBQztBQUNBLENBREEsQUFORCxJQU1DOztBQWJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFHQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFGQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQU5BLEFBTUEsQUFOQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtc3RlcC1wcm9ncmVzcydcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bFN0ZXBQcm9ncmVzc0RpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIGFjdGl2ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdhY3RpdmUtY2hhbmdlZCcsIHRoaXMuYWN0aXZlQ2hhbmdlKTtcclxuICB9XHJcbn1cclxuIl19