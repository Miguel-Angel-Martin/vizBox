import { __decorate, __extends, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Output, Renderer2, Input } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
var AvlComboBoxDirective = /** @class */ (function (_super) {
    __extends(AvlComboBoxDirective, _super);
    function AvlComboBoxDirective(elementRef, renderer) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.invalidChange = new EventEmitter();
        _this.valueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', _this.focusedChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', _this.valueChange);
        return _this;
    }
    AvlComboBoxDirective_1 = AvlComboBoxDirective;
    Object.defineProperty(AvlComboBoxDirective.prototype, "readonly", {
        // Angular writes readonly attributes to a readOnly property,
        // because that's how it's called on the native input element.
        set: function (value) {
            this.elementRef.nativeElement.readonly = value;
        },
        enumerable: true,
        configurable: true
    });
    AvlComboBoxDirective.prototype.valueChanged = function (e) {
        if (this.onChangeCallback && this.isAllowNewValues()) {
            this.onChangeCallback(e.detail.value);
        }
    };
    AvlComboBoxDirective.prototype.selectedValueChanged = function (e) {
        if (this.onChangeCallback && !this.isAllowNewValues()) {
            this.onChangeCallback(e.detail.value);
        }
    };
    AvlComboBoxDirective.prototype.writeValue = function (value) {
        var property = this.isAllowNewValues() ? 'value' : 'selectedValue';
        this.renderer.setProperty(this.elementRef.nativeElement, property, value);
    };
    AvlComboBoxDirective.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    // Since avl-combo-box doesn't have validate-on-leave, there's no touching
    AvlComboBoxDirective.prototype.registerOnTouched = function (fn) { };
    AvlComboBoxDirective.prototype.setDisabledState = function (isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    };
    AvlComboBoxDirective.prototype.isAllowNewValues = function () {
        return (this.elementRef.nativeElement && this.elementRef.nativeElement.allowNewValues === true);
    };
    //#region Validator
    AvlComboBoxDirective.prototype.validate = function (control) {
        var formControl = this.elementRef.nativeElement;
        if (formControl.invalid) {
            return { invalid: formControl.errorMessage };
        }
        else {
            return null;
        }
    };
    var AvlComboBoxDirective_1;
    AvlComboBoxDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlComboBoxDirective.prototype, "invalidChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlComboBoxDirective.prototype, "valueChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AvlComboBoxDirective.prototype, "readonly", null);
    __decorate([
        HostListener('value-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlComboBoxDirective.prototype, "valueChanged", null);
    __decorate([
        HostListener('selected-value-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlComboBoxDirective.prototype, "selectedValueChanged", null);
    AvlComboBoxDirective = AvlComboBoxDirective_1 = __decorate([
        Directive({
            selector: 'avl-combo-box',
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return AvlComboBoxDirective_1; }), multi: true },
                { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return AvlComboBoxDirective_1; }), multi: true }]
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], AvlComboBoxDirective);
    return AvlComboBoxDirective;
}(AvlInteractionControlDirective));
export { AvlComboBoxDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWNvbWJvLWJveC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvIiwic291cmNlcyI6WyJsaWIvY29udHJvbHMvYXZsLWNvbWJvLWJveC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBeUMsYUFBYSxFQUFFLGlCQUFpQixFQUErQixNQUFNLGdCQUFnQixDQUFDO0FBRXRJLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ2hHLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTzVFO0lBQTBDLHdDQUE4QjtJQU10RSw4QkFBb0IsVUFBc0IsRUFBVSxRQUFtQjtRQUF2RSxZQUNFLGtCQUFNLFVBQVUsQ0FBQyxTQUdsQjtRQUptQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLGNBQVEsR0FBUixRQUFRLENBQVc7UUFMN0QsbUJBQWEsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN0RCxpQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBTTVELHdDQUF3QyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUYsd0NBQXdDLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7O0lBQzFGLENBQUM7NkJBVlUsb0JBQW9CO0lBZS9CLHNCQUFXLDBDQUFRO1FBSG5CLDZEQUE2RDtRQUM3RCw4REFBOEQ7YUFFOUQsVUFBb0IsS0FBYztZQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pELENBQUM7OztPQUFBO0lBR0QsMkNBQVksR0FBWixVQUFhLENBQWM7UUFDekIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDcEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDO0lBR0QsbURBQW9CLEdBQXBCLFVBQXFCLENBQWM7UUFDakMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUNyRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFFRCx5Q0FBVSxHQUFWLFVBQVcsS0FBVTtRQUNuQixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFDckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCwrQ0FBZ0IsR0FBaEIsVUFBaUIsRUFBd0I7UUFDdkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsMEVBQTBFO0lBQzFFLGdEQUFpQixHQUFqQixVQUFrQixFQUFPLElBQUksQ0FBQztJQUU5QiwrQ0FBZ0IsR0FBaEIsVUFBaUIsVUFBbUI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFTywrQ0FBZ0IsR0FBeEI7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFFRCxtQkFBbUI7SUFDbkIsdUNBQVEsR0FBUixVQUFTLE9BQXdCO1FBQy9CLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBK0IsQ0FBQztRQUNwRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDOUM7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDOzs7Z0JBdkQrQixVQUFVO2dCQUFvQixTQUFTOztJQUw3RDtRQUFULE1BQU0sRUFBRTtrQ0FBZ0IsWUFBWTsrREFBMkI7SUFDdEQ7UUFBVCxNQUFNLEVBQUU7a0NBQWMsWUFBWTs2REFBMkI7SUFhOUQ7UUFEQyxLQUFLLEVBQUU7Ozt3REFHUDtJQUdEO1FBREMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzt5Q0FDMUIsV0FBVzs7NERBSTFCO0lBR0Q7UUFEQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7eUNBQzNCLFdBQVc7O29FQUlsQztJQS9CVSxvQkFBb0I7UUFMaEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGVBQWU7WUFDekIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsc0JBQW9CLEVBQXBCLENBQW9CLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUM1RyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsc0JBQW9CLEVBQXBCLENBQW9CLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDOUYsQ0FBQzt5Q0FPZ0MsVUFBVSxFQUFvQixTQUFTO09BTjVELG9CQUFvQixDQStEaEM7SUFBRCwyQkFBQztDQUFBLEFBL0RELENBQTBDLDhCQUE4QixHQStEdkU7U0EvRFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBSZW5kZXJlcjIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTElEQVRPUlMsIE5HX1ZBTFVFX0FDQ0VTU09SLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEF2bEZvcm1Db250cm9sIH0gZnJvbSAnQGF2bC1jb250cm9scy9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgQXZsSW50ZXJhY3Rpb25Db250cm9sRGlyZWN0aXZlIH0gZnJvbSAnLi4vaW50ZXJmYWNlL2F2bC1pbnRlcmFjdGlvbi1jb250cm9sLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMgfSBmcm9tICcuLi9iaW5kaW5nLXV0aWxzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWNvbWJvLWJveCcsXHJcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQXZsQ29tYm9Cb3hEaXJlY3RpdmUpLCBtdWx0aTogdHJ1ZSB9LFxyXG4gIHsgcHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQXZsQ29tYm9Cb3hEaXJlY3RpdmUpLCBtdWx0aTogdHJ1ZSB9XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsQ29tYm9Cb3hEaXJlY3RpdmUgZXh0ZW5kcyBBdmxJbnRlcmFjdGlvbkNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcclxuICBAT3V0cHV0KCkgaW52YWxpZENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICAgIHN1cGVyKGVsZW1lbnRSZWYpO1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyhlbGVtZW50UmVmLCAnaW52YWxpZC1jaGFuZ2VkJywgdGhpcy5mb2N1c2VkQ2hhbmdlKTtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ3ZhbHVlLWNoYW5nZWQnLCB0aGlzLnZhbHVlQ2hhbmdlKTtcclxuICB9XHJcblxyXG4gIC8vIEFuZ3VsYXIgd3JpdGVzIHJlYWRvbmx5IGF0dHJpYnV0ZXMgdG8gYSByZWFkT25seSBwcm9wZXJ0eSxcclxuICAvLyBiZWNhdXNlIHRoYXQncyBob3cgaXQncyBjYWxsZWQgb24gdGhlIG5hdGl2ZSBpbnB1dCBlbGVtZW50LlxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucmVhZG9ubHkgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3ZhbHVlLWNoYW5nZWQnLCBbJyRldmVudCddKVxyXG4gIHZhbHVlQ2hhbmdlZChlOiBDdXN0b21FdmVudCkge1xyXG4gICAgaWYgKHRoaXMub25DaGFuZ2VDYWxsYmFjayAmJiB0aGlzLmlzQWxsb3dOZXdWYWx1ZXMoKSkge1xyXG4gICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soZS5kZXRhaWwudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignc2VsZWN0ZWQtdmFsdWUtY2hhbmdlZCcsIFsnJGV2ZW50J10pXHJcbiAgc2VsZWN0ZWRWYWx1ZUNoYW5nZWQoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgJiYgIXRoaXMuaXNBbGxvd05ld1ZhbHVlcygpKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayhlLmRldGFpbC52YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgIGNvbnN0IHByb3BlcnR5ID0gdGhpcy5pc0FsbG93TmV3VmFsdWVzKCkgPyAndmFsdWUnIDogJ3NlbGVjdGVkVmFsdWUnO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgcHJvcGVydHksIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBmbjtcclxuICB9XHJcblxyXG4gIC8vIFNpbmNlIGF2bC1jb21iby1ib3ggZG9lc24ndCBoYXZlIHZhbGlkYXRlLW9uLWxlYXZlLCB0aGVyZSdzIG5vIHRvdWNoaW5nXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkgeyB9XHJcblxyXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc2FibGVkJywgaXNEaXNhYmxlZCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzQWxsb3dOZXdWYWx1ZXMoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50ICYmIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmFsbG93TmV3VmFsdWVzID09PSB0cnVlKTtcclxuICB9XHJcblxyXG4gIC8vI3JlZ2lvbiBWYWxpZGF0b3JcclxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XHJcbiAgICBjb25zdCBmb3JtQ29udHJvbCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEF2bEZvcm1Db250cm9sO1xyXG4gICAgaWYgKGZvcm1Db250cm9sLmludmFsaWQpIHtcclxuICAgICAgcmV0dXJuIHsgaW52YWxpZDogZm9ybUNvbnRyb2wuZXJyb3JNZXNzYWdlIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbiAgLy8jZW5kcmVnaW9uXHJcbn1cclxuIl19