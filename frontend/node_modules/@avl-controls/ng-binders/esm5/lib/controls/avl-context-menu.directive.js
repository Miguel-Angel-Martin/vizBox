import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var AvlContextMenuDirective = /** @class */ (function () {
    function AvlContextMenuDirective() {
        this.itemClicked = new EventEmitter();
    }
    AvlContextMenuDirective.prototype.itemClickedListener = function (e) {
        this.itemClicked.emit(e.detail.value);
    };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlContextMenuDirective.prototype, "itemClicked", void 0);
    __decorate([
        HostListener('item-clicked', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlContextMenuDirective.prototype, "itemClickedListener", null);
AvlContextMenuDirective.ɵfac = function AvlContextMenuDirective_Factory(t) { return new (t || AvlContextMenuDirective)(); };
AvlContextMenuDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlContextMenuDirective, selectors: [["avl-context-menu"]], hostBindings: function AvlContextMenuDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("item-clicked", function AvlContextMenuDirective_item_clicked_HostBindingHandler($event) { return ctx.itemClickedListener($event); });
    } }, outputs: { itemClicked: "itemClicked" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlContextMenuDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-context-menu'
            }]
    }], function () { return []; }, { itemClicked: [{
            type: Output
        }], itemClickedListener: [{
            type: HostListener,
            args: ['item-clicked', ['$event']]
        }] }); })();
    return AvlContextMenuDirective;
}());
export { AvlContextMenuDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWNvbnRleHQtbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvbGliL2NvbnRyb2xzL2F2bC1jb250ZXh0LW1lbnUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUs5RTtBQUNvQixJQURwQjtBQUFxQyxRQUN6QixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2hFLElBS0EsQ0FBQztBQUNELElBSkUscURBQW1CLEdBQW5CLFVBQW9CLENBQWM7QUFDcEMsUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLElBQUUsQ0FBQztBQUNGLElBTlc7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBRSxrQ0FBWSxZQUFZO0FBQUUsZ0VBQXlCO0FBRWhFLElBQ0U7QUFBYSxRQURaLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQztBQUNLLHlDQURtQixXQUFXO0FBQ3BDO0FBRUMsc0VBREU7SUFOVSx1QkFBdUIsd0JBSG5DLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSxrQkFBa0IsVUFDN0IsQ0FBQyxRQUNXO29CQUF1QixDQU9uQzs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsOEJBQUM7QUFDQSxDQURBLEFBUEQsSUFPQzs7QUFaQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUxBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFOQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBUEEsQUFPQSxBQVBBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWNvbnRleHQtbWVudSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bENvbnRleHRNZW51RGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgaXRlbUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBASG9zdExpc3RlbmVyKCdpdGVtLWNsaWNrZWQnLCBbJyRldmVudCddKVxyXG4gIGl0ZW1DbGlja2VkTGlzdGVuZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuaXRlbUNsaWNrZWQuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==