import { __awaiter, __decorate, __generator, __metadata } from "tslib";
import { Directive, ElementRef, Output, EventEmitter } from '@angular/core';
var AvlTabBarDirective = /** @class */ (function () {
    function AvlTabBarDirective(el) {
        var _this = this;
        this.el = el;
        this.selectedIndexChange = new EventEmitter();
        this.selectedValueChange = new EventEmitter();
        this.tabBar = this.el.nativeElement;
        Promise.resolve().then(function () {
            _this.setEventListeners(el.nativeElement);
        });
    }
    AvlTabBarDirective.prototype.setEventListeners = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                el.addEventListener('selected-value-changed', function (event) {
                    Promise.resolve().then(function () {
                        _this.selectedValueChange.emit(event.detail.value);
                    });
                });
                el.addEventListener('selected-index-changed', function (event) {
                    Promise.resolve().then(function () {
                        _this.selectedIndexChange.emit(event.detail.value);
                    });
                });
                return [2 /*return*/];
            });
        });
    };
    AvlTabBarDirective.prototype.setTab = function (index, value) {
        var tabs = this.tabBar.tabs;
        for (var prop in value) {
            if (value.hasOwnProperty(prop)) {
                tabs[index][prop] = value[prop];
                this.tabBar.notifyPath("tabs." + index + "." + prop);
            }
        }
    };
    AvlTabBarDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlTabBarDirective.prototype, "selectedIndexChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlTabBarDirective.prototype, "selectedValueChange", void 0);
    AvlTabBarDirective = __decorate([
        Directive({
            selector: 'avl-tab-bar',
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], AvlTabBarDirective);
    return AvlTabBarDirective;
}());
export { AvlTabBarDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXRhYi1iYXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1jb250cm9scy9uZy1iaW5kZXJzLyIsInNvdXJjZXMiOlsibGliL2NvbnRyb2xzL2F2bC10YWItYmFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUs1RTtJQW1CRSw0QkFBb0IsRUFBYztRQUFsQyxpQkFLQztRQUxtQixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBbEJ4Qix3QkFBbUIsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvRCx3QkFBbUIsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQWtCcEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUNwQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBbEJhLDhDQUFpQixHQUEvQixVQUFnQyxFQUFPOzs7O2dCQUNyQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLEVBQUUsVUFBQyxLQUFLO29CQUNsRCxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO3dCQUNyQixLQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3BELENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFDO2dCQUNILEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsRUFBRSxVQUFDLEtBQUs7b0JBQ2xELE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7d0JBQ3JCLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEQsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Ozs7S0FDSjtJQVNELG1DQUFNLEdBQU4sVUFBTyxLQUFhLEVBQUUsS0FBZ0U7UUFDcEYsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDOUIsS0FBSyxJQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFRLEtBQUssU0FBSSxJQUFNLENBQUMsQ0FBQzthQUNqRDtTQUNGO0lBQ0gsQ0FBQzs7Z0JBZnVCLFVBQVU7O0lBbEJ4QjtRQUFULE1BQU0sRUFBRTtrQ0FBc0IsWUFBWTttRUFBOEI7SUFDL0Q7UUFBVCxNQUFNLEVBQUU7a0NBQXNCLFlBQVk7bUVBQTJCO0lBRjNELGtCQUFrQjtRQUg5QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsYUFBYTtTQUN4QixDQUFDO3lDQW9Cd0IsVUFBVTtPQW5CdkIsa0JBQWtCLENBbUM5QjtJQUFELHlCQUFDO0NBQUEsQUFuQ0QsSUFtQ0M7U0FuQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtdGFiLWJhcicsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxUYWJCYXJEaXJlY3RpdmUge1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZEluZGV4Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRWYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIHByaXZhdGUgdGFiQmFyOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgc2V0RXZlbnRMaXN0ZW5lcnMoZWw6IGFueSkge1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWQtdmFsdWUtY2hhbmdlZCcsIChldmVudCkgPT4ge1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVDaGFuZ2UuZW1pdChldmVudC5kZXRhaWwudmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWQtaW5kZXgtY2hhbmdlZCcsIChldmVudCkgPT4ge1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2UuZW1pdChldmVudC5kZXRhaWwudmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy50YWJCYXIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcclxuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVycyhlbC5uYXRpdmVFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0VGFiKGluZGV4OiBudW1iZXIsIHZhbHVlOiB7IGxhYmVsOiBzdHJpbmcsIGRpc2FibGVkPzogYm9vbGVhbiwgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYkJhci50YWJzO1xyXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHZhbHVlKSB7XHJcbiAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgIHRhYnNbaW5kZXhdW3Byb3BdID0gdmFsdWVbcHJvcF07XHJcbiAgICAgICAgdGhpcy50YWJCYXIubm90aWZ5UGF0aChgdGFicy4ke2luZGV4fS4ke3Byb3B9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19