import { __awaiter, __decorate, __generator, __metadata } from "tslib";
import { Directive, ElementRef, Output, EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var AvlTabBarDirective = /** @class */ (function () {
    function AvlTabBarDirective(el) {
        var _this = this;
        this.el = el;
        this.selectedIndexChange = new EventEmitter();
        this.selectedValueChange = new EventEmitter();
        this.tabBar = this.el.nativeElement;
        Promise.resolve().then(function () {
            _this.setEventListeners(el.nativeElement);
        });
    }
    AvlTabBarDirective.prototype.setEventListeners = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                el.addEventListener('selected-value-changed', function (event) {
                    Promise.resolve().then(function () {
                        _this.selectedValueChange.emit(event.detail.value);
                    });
                });
                el.addEventListener('selected-index-changed', function (event) {
                    Promise.resolve().then(function () {
                        _this.selectedIndexChange.emit(event.detail.value);
                    });
                });
                return [2 /*return*/];
            });
        });
    };
    AvlTabBarDirective.prototype.setTab = function (index, value) {
        var tabs = this.tabBar.tabs;
        for (var prop in value) {
            if (value.hasOwnProperty(prop)) {
                tabs[index][prop] = value[prop];
                this.tabBar.notifyPath("tabs." + index + "." + prop);
            }
        }
    };
    AvlTabBarDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlTabBarDirective.prototype, "selectedIndexChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlTabBarDirective.prototype, "selectedValueChange", void 0);
    AvlTabBarDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlTabBarDirective);
AvlTabBarDirective.ɵfac = function AvlTabBarDirective_Factory(t) { return new (t || AvlTabBarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlTabBarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlTabBarDirective, selectors: [["avl-tab-bar"]], outputs: { selectedIndexChange: "selectedIndexChange", selectedValueChange: "selectedValueChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlTabBarDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-tab-bar'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { selectedIndexChange: [{
            type: Output
        }], selectedValueChange: [{
            type: Output
        }] }); })();
    return AvlTabBarDirective;
}());
export { AvlTabBarDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXRhYi1iYXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtdGFiLWJhci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzVFO0FBQ29CLElBa0JsQiw0QkFBb0IsRUFBYztBQUNwQyxRQURFLGlCQUtDO0FBQ0gsUUFOc0IsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBbEJ6Qix3QkFBbUIsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUMzRSxRQUFZLHdCQUFtQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3hFLFFBaUJJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDeEMsUUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ3JCLFlBQUEsS0FBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMvQyxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFuQmdCLDhDQUFpQixHQUEvQixVQUFnQyxFQUFPO0FBQ3pDO0FBQTZEO0FBQ2pDO0FBQ2dCLGdCQUZ4QyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLEVBQUUsVUFBQyxLQUFLO0FBQUksb0JBQ3RELE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDdkIsd0JBQUUsS0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFELG9CQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsZ0JBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxnQkFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLEVBQUUsVUFBQyxLQUFLO0FBQUksb0JBQ3RELE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDdkIsd0JBQUUsS0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFELG9CQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsZ0JBQUksQ0FBQyxDQUFDLENBQUM7QUFDUDtBQUVrQztBQUN4QjtBQUFZLEtBSG5CO0FBRUgsSUFPRSxtQ0FBTSxHQUFOLFVBQU8sS0FBYSxFQUFFLEtBQWdFO0FBQ3hGLFFBQUksSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDbEMsUUFBSSxLQUFLLElBQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtBQUM5QixZQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN0QyxnQkFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hDLGdCQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVEsS0FBSyxTQUFJLElBQU0sQ0FBQyxDQUFDO0FBQ3hELGFBQU87QUFDUCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0Y7QUFDNkQsZ0JBakJwQyxVQUFVO0FBQUc7QUFDOUIsSUFuQkc7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBRSxrQ0FBb0IsWUFBWTtBQUFFLG1FQUE0QjtBQUMxRSxJQUFXO0FBQWEsUUFBdEIsTUFBTSxFQUFFO0FBQUUsa0NBQW9CLFlBQVk7QUFBRSxtRUFBeUI7QUFFeEUsSUFKYSxrQkFBa0Isd0JBSDlCLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSwzQ0FFSixrQ0FtQmtCLFVBQVU7U0FyQlgsV0FDeEIsQ0FBQyxyQkFvQnFDLE9BbkIxQixrQkFBa0IsQ0FtQzlCOzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELHlCQUFDO0FBQ0EsQ0FEQSxBQW5DRCxJQW1DQzs7QUF4Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBbUJBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFMQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBbEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFrQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWxCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFTQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQWZBLEFBQUEsQUFsQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFvQkEsQUFBQSxBQW5CQSxBQUFBLEFBbUNBLEFBQUEsQUFBQSxBQUFBLEFBbkNBLEFBbUNBLEFBbkNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2F2bC10YWItYmFyJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bFRhYkJhckRpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZFZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgcHJpdmF0ZSB0YWJCYXI6IGFueTtcclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBzZXRFdmVudExpc3RlbmVycyhlbDogYW55KSB7XHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RlZC12YWx1ZS1jaGFuZ2VkJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZUNoYW5nZS5lbWl0KGV2ZW50LmRldGFpbC52YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RlZC1pbmRleC1jaGFuZ2VkJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleENoYW5nZS5lbWl0KGV2ZW50LmRldGFpbC52YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLnRhYkJhciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcclxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXJzKGVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRUYWIoaW5kZXg6IG51bWJlciwgdmFsdWU6IHsgbGFiZWw6IHN0cmluZywgZGlzYWJsZWQ/OiBib29sZWFuLCBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgY29uc3QgdGFicyA9IHRoaXMudGFiQmFyLnRhYnM7XHJcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gdmFsdWUpIHtcclxuICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgdGFic1tpbmRleF1bcHJvcF0gPSB2YWx1ZVtwcm9wXTtcclxuICAgICAgICB0aGlzLnRhYkJhci5ub3RpZnlQYXRoKGB0YWJzLiR7aW5kZXh9LiR7cHJvcH1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=