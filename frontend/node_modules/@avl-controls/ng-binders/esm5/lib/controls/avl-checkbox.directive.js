import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
var AvlCheckboxDirective = /** @class */ (function () {
    function AvlCheckboxDirective(elementRef) {
        this.indeterminateChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'indeterminate-changed', this.indeterminateChange);
    }
    AvlCheckboxDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlCheckboxDirective.prototype, "indeterminateChange", void 0);
    AvlCheckboxDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlCheckboxDirective);
AvlCheckboxDirective.ɵfac = function AvlCheckboxDirective_Factory(t) { return new (t || AvlCheckboxDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlCheckboxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlCheckboxDirective, selectors: [["avl-checkbox"]], outputs: { indeterminateChange: "indeterminateChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlCheckboxDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-checkbox'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { indeterminateChange: [{
            type: Output
        }] }); })();
    return AvlCheckboxDirective;
}());
export { AvlCheckboxDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWNoZWNrYm94LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvY29udHJvbHMvYXZsLWNoZWNrYm94LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFNNUU7QUFDb0IsSUFFbEIsOEJBQVksVUFBc0I7QUFDcEMsUUFIWSx3QkFBbUIsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUM1RSxRQUVJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUM1RyxJQUFFLENBQUM7QUFDSDtBQUMrRCxnQkFKckMsVUFBVTtBQUFHO0FBQzlCLElBSEc7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBRSxrQ0FBb0IsWUFBWTtBQUFFLHFFQUE2QjtBQUU1RSxJQUhhLG9CQUFvQix3QkFIaEMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLDNDQUVKLGtDQUdrQixVQUFVO1VBTFYsVUFDekIsQ0FBQyxyQkFJcUMsT0FIMUIsb0JBQW9CLENBTWhDOzs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCwyQkFBQztBQUNBLENBREEsQUFORCxJQU1DOztBQWJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFHQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFGQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQU5BLEFBTUEsQUFOQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtY2hlY2tib3gnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxDaGVja2JveERpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIGluZGV0ZXJtaW5hdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyhlbGVtZW50UmVmLCAnaW5kZXRlcm1pbmF0ZS1jaGFuZ2VkJywgdGhpcy5pbmRldGVybWluYXRlQ2hhbmdlKTtcclxuICB9XHJcbn1cclxuIl19