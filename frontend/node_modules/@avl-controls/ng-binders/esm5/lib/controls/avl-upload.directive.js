import { __decorate, __metadata, __param } from "tslib";
import { Directive, ElementRef, OnInit, HostListener, Output, EventEmitter, Inject } from '@angular/core';
import { UPLOAD_SERVICE } from '../services/variables';
import * as ɵngcc0 from '@angular/core';
var AvlUploadDirective = /** @class */ (function () {
    function AvlUploadDirective(element, uploadService) {
        this.element = element;
        this.uploadService = uploadService;
        this.uploadComplete = new EventEmitter();
        this.uploadAbort = new EventEmitter();
        this.uploadFail = new EventEmitter();
        this.uploadStart = new EventEmitter();
        this.filesChanged = new EventEmitter();
        this.fileRejected = new EventEmitter();
        this.menuItemClicked = new EventEmitter();
    }
    AvlUploadDirective.prototype.ngOnInit = function () {
        var element = this.element.nativeElement;
        element.uploadService = this.uploadService;
    };
    AvlUploadDirective.prototype.uploadCompleteHandler = function (e) {
        this.uploadComplete.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.uploadCanceledHandler = function (e) {
        this.uploadAbort.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.uploadStartedHandler = function (e) {
        this.uploadStart.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.uploadFailedHandler = function (e) {
        this.uploadFail.emit(e.detail);
    };
    AvlUploadDirective.prototype.filesChangedHandler = function (e) {
        this.filesChanged.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.fileRejectedHandler = function (e) {
        this.fileRejected.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.menuItemClickedHandler = function (e) {
        this.menuItemClicked.emit(e.detail);
    };
    AvlUploadDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [UPLOAD_SERVICE,] }] }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadComplete", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadAbort", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadFail", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "filesChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "fileRejected", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "menuItemClicked", void 0);
    __decorate([
        HostListener('upload-complete', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadCompleteHandler", null);
    __decorate([
        HostListener('upload-abort', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadCanceledHandler", null);
    __decorate([
        HostListener('upload-start', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadStartedHandler", null);
    __decorate([
        HostListener('upload-fail', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadFailedHandler", null);
    __decorate([
        HostListener('files-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "filesChangedHandler", null);
    __decorate([
        HostListener('file-rejected', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "fileRejectedHandler", null);
    __decorate([
        HostListener('menu-item-clicked', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "menuItemClickedHandler", null);
    AvlUploadDirective = __decorate([ __param(1, Inject(UPLOAD_SERVICE)),
        __metadata("design:paramtypes", [ElementRef, Object])
    ], AvlUploadDirective);
AvlUploadDirective.ɵfac = function AvlUploadDirective_Factory(t) { return new (t || AvlUploadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(UPLOAD_SERVICE)); };
AvlUploadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlUploadDirective, selectors: [["avl-upload"]], hostBindings: function AvlUploadDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("upload-complete", function AvlUploadDirective_upload_complete_HostBindingHandler($event) { return ctx.uploadCompleteHandler($event); })("upload-abort", function AvlUploadDirective_upload_abort_HostBindingHandler($event) { return ctx.uploadCanceledHandler($event); })("upload-start", function AvlUploadDirective_upload_start_HostBindingHandler($event) { return ctx.uploadStartedHandler($event); })("upload-fail", function AvlUploadDirective_upload_fail_HostBindingHandler($event) { return ctx.uploadFailedHandler($event); })("files-changed", function AvlUploadDirective_files_changed_HostBindingHandler($event) { return ctx.filesChangedHandler($event); })("file-rejected", function AvlUploadDirective_file_rejected_HostBindingHandler($event) { return ctx.fileRejectedHandler($event); })("menu-item-clicked", function AvlUploadDirective_menu_item_clicked_HostBindingHandler($event) { return ctx.menuItemClickedHandler($event); });
    } }, outputs: { uploadComplete: "uploadComplete", uploadAbort: "uploadAbort", uploadFail: "uploadFail", uploadStart: "uploadStart", filesChanged: "filesChanged", fileRejected: "fileRejected", menuItemClicked: "menuItemClicked" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlUploadDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-upload'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [UPLOAD_SERVICE]
            }] }]; }, { uploadComplete: [{
            type: Output
        }], uploadAbort: [{
            type: Output
        }], uploadFail: [{
            type: Output
        }], uploadStart: [{
            type: Output
        }], filesChanged: [{
            type: Output
        }], fileRejected: [{
            type: Output
        }], menuItemClicked: [{
            type: Output
        }], uploadCompleteHandler: [{
            type: HostListener,
            args: ['upload-complete', ['$event']]
        }], uploadCanceledHandler: [{
            type: HostListener,
            args: ['upload-abort', ['$event']]
        }], uploadStartedHandler: [{
            type: HostListener,
            args: ['upload-start', ['$event']]
        }], uploadFailedHandler: [{
            type: HostListener,
            args: ['upload-fail', ['$event']]
        }], filesChangedHandler: [{
            type: HostListener,
            args: ['files-changed', ['$event']]
        }], fileRejectedHandler: [{
            type: HostListener,
            args: ['file-rejected', ['$event']]
        }], menuItemClickedHandler: [{
            type: HostListener,
            args: ['menu-item-clicked', ['$event']]
        }] }); })();
    return AvlUploadDirective;
}());
export { AvlUploadDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,