import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
var AvlIconButtonDirective = /** @class */ (function () {
    function AvlIconButtonDirective(elementRef) {
        this.badgeChange = new EventEmitter();
        this.badgeValueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'badge-changed', this.badgeChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'badge-value-changed', this.badgeValueChange);
    }
    AvlIconButtonDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlIconButtonDirective.prototype, "badgeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlIconButtonDirective.prototype, "badgeValueChange", void 0);
    AvlIconButtonDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlIconButtonDirective);
AvlIconButtonDirective.ɵfac = function AvlIconButtonDirective_Factory(t) { return new (t || AvlIconButtonDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlIconButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlIconButtonDirective, selectors: [["avl-icon-button"]], outputs: { badgeChange: "badgeChange", badgeValueChange: "badgeValueChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlIconButtonDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-icon-button'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { badgeChange: [{
            type: Output
        }], badgeValueChange: [{
            type: Output
        }] }); })();
    return AvlIconButtonDirective;
}());
export { AvlIconButtonDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWljb24tYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvY29udHJvbHMvYXZsLWljb24tYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFNNUU7QUFDb0IsSUFHbEIsZ0NBQVksVUFBc0I7QUFDcEMsUUFKWSxnQkFBVyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3BFLFFBQVkscUJBQWdCLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDeEUsUUFFSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUM1RixRQUFJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2RyxJQUFFLENBQUM7QUFDSDtBQUNpRSxnQkFMdkMsVUFBVTtBQUFHO0FBQzlCLElBSkc7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBRSxrQ0FBWSxZQUFZO0FBQUUsK0RBQTZCO0FBQ25FLElBQVc7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBRSxrQ0FBaUIsWUFBWTtBQUFFLG9FQUE0QjtBQUV4RSxJQUphLHNCQUFzQix3QkFIbEMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLDNDQUVKLGtDQUlrQixVQUFVO2FBTlAsVUFDNUIsQ0FBQyx4QkFLcUMsT0FKMUIsc0JBQXNCLENBUWxDOzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELDZCQUFDO0FBQ0EsQ0FEQSxBQVJELElBUUM7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUlBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBS0EsQUFBQSxBQUpBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBUUEsQUFSQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtaWNvbi1idXR0b24nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxJY29uQnV0dG9uRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgYmFkZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgYmFkZ2VWYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ2JhZGdlLWNoYW5nZWQnLCB0aGlzLmJhZGdlQ2hhbmdlKTtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ2JhZGdlLXZhbHVlLWNoYW5nZWQnLCB0aGlzLmJhZGdlVmFsdWVDaGFuZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=