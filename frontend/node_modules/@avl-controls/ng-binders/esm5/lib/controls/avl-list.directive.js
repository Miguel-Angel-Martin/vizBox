import { __decorate, __extends, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Output, Renderer2, Input } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
var AvlListDirective = /** @class */ (function (_super) {
    __extends(AvlListDirective, _super);
    function AvlListDirective(elementRef, renderer) {
        var _this = _super.call(this, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.invalidChange = new EventEmitter();
        _this.overflowMenuItemClicked = new EventEmitter();
        _this.rightCheckboxChanged = new EventEmitter();
        _this.activeRowChanged = new EventEmitter();
        _this.rowReordered = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', _this.focusedChange);
        return _this;
    }
    AvlListDirective_1 = AvlListDirective;
    Object.defineProperty(AvlListDirective.prototype, "readonly", {
        // Angular writes readonly attributes to a readOnly property,
        // because that's how it's called on the native input element.
        set: function (value) {
            this.elementRef.nativeElement.readonly = value;
        },
        enumerable: true,
        configurable: true
    });
    AvlListDirective.prototype.selectedValueChanged = function (e) {
        if (this.onChangeCallback && !this.isMulti()) {
            this.onChangeCallback(e.detail.value);
        }
    };
    AvlListDirective.prototype.selectedValuesChanged = function (e) {
        if (this.onChangeCallback && this.isMulti()) {
            this.onChangeCallback(e.detail.value);
        }
    };
    AvlListDirective.prototype.overflowMenuItemClickListener = function (e) {
        this.overflowMenuItemClicked.emit(e.detail);
    };
    AvlListDirective.prototype.rightCheckboxChangeListener = function (e) {
        this.rightCheckboxChanged.emit(e.detail);
    };
    AvlListDirective.prototype.activatedRowChangeListener = function (e) {
        this.activeRowChanged.emit(e.detail.value);
    };
    AvlListDirective.prototype.rowReorderedListener = function (e) {
        this.rowReordered.emit(e.detail);
    };
    AvlListDirective.prototype.writeValue = function (value) {
        var property = this.isMulti() ? 'selectedValues' : 'selectedValue';
        this.renderer.setProperty(this.elementRef.nativeElement, property, value);
    };
    AvlListDirective.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    // Since avl-list doesn't have validate-on-leave, there's no touching
    AvlListDirective.prototype.registerOnTouched = function (fn) { };
    AvlListDirective.prototype.setDisabledState = function (isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    };
    AvlListDirective.prototype.isMulti = function () {
        return (this.elementRef.nativeElement && this.elementRef.nativeElement.multi === true);
    };
    //#region Validator
    AvlListDirective.prototype.validate = function (control) {
        var formControl = this.elementRef.nativeElement;
        if (formControl.invalid) {
            return { invalid: formControl.errorMessage };
        }
        else {
            return null;
        }
    };
    var AvlListDirective_1;
    AvlListDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlListDirective.prototype, "invalidChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlListDirective.prototype, "overflowMenuItemClicked", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlListDirective.prototype, "rightCheckboxChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlListDirective.prototype, "activeRowChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlListDirective.prototype, "rowReordered", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AvlListDirective.prototype, "readonly", null);
    __decorate([
        HostListener('selected-value-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlListDirective.prototype, "selectedValueChanged", null);
    __decorate([
        HostListener('selected-values-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlListDirective.prototype, "selectedValuesChanged", null);
    __decorate([
        HostListener('overflow-menu-item-clicked', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlListDirective.prototype, "overflowMenuItemClickListener", null);
    __decorate([
        HostListener('right-checkbox-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlListDirective.prototype, "rightCheckboxChangeListener", null);
    __decorate([
        HostListener('active-row-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlListDirective.prototype, "activatedRowChangeListener", null);
    __decorate([
        HostListener('row-reordered', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlListDirective.prototype, "rowReorderedListener", null);
    AvlListDirective = AvlListDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], AvlListDirective);
AvlListDirective.ɵfac = function AvlListDirective_Factory(t) { return new (t || AvlListDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AvlListDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlListDirective, selectors: [["avl-list"]], hostBindings: function AvlListDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("selected-value-changed", function AvlListDirective_selected_value_changed_HostBindingHandler($event) { return ctx.selectedValueChanged($event); })("selected-values-changed", function AvlListDirective_selected_values_changed_HostBindingHandler($event) { return ctx.selectedValuesChanged($event); })("overflow-menu-item-clicked", function AvlListDirective_overflow_menu_item_clicked_HostBindingHandler($event) { return ctx.overflowMenuItemClickListener($event); })("right-checkbox-changed", function AvlListDirective_right_checkbox_changed_HostBindingHandler($event) { return ctx.rightCheckboxChangeListener($event); })("active-row-changed", function AvlListDirective_active_row_changed_HostBindingHandler($event) { return ctx.activatedRowChangeListener($event); })("row-reordered", function AvlListDirective_row_reordered_HostBindingHandler($event) { return ctx.rowReorderedListener($event); });
    } }, inputs: { readonly: "readonly" }, outputs: { invalidChange: "invalidChange", overflowMenuItemClicked: "overflowMenuItemClicked", rightCheckboxChanged: "rightCheckboxChanged", activeRowChanged: "activeRowChanged", rowReordered: "rowReordered" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return AvlListDirective_1; }), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return AvlListDirective_1; }), multi: true }]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlListDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-list',
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return AvlListDirective_1; }), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return AvlListDirective_1; }), multi: true }]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { readonly: [{
            type: Input
        }], selectedValueChanged: [{
            type: HostListener,
            args: ['selected-value-changed', ['$event']]
        }], selectedValuesChanged: [{
            type: HostListener,
            args: ['selected-values-changed', ['$event']]
        }], overflowMenuItemClickListener: [{
            type: HostListener,
            args: ['overflow-menu-item-clicked', ['$event']]
        }], rightCheckboxChangeListener: [{
            type: HostListener,
            args: ['right-checkbox-changed', ['$event']]
        }], activatedRowChangeListener: [{
            type: HostListener,
            args: ['active-row-changed', ['$event']]
        }], rowReorderedListener: [{
            type: HostListener,
            args: ['row-reordered', ['$event']]
        }], invalidChange: [{
            type: Output
        }], overflowMenuItemClicked: [{
            type: Output
        }], rightCheckboxChanged: [{
            type: Output
        }], activeRowChanged: [{
            type: Output
        }], rowReordered: [{
            type: Output
        }] }); })();
    return AvlListDirective;
}(AvlInteractionControlDirective));
export { AvlListDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,