import { __decorate, __metadata, __param } from "tslib";
import { Directive, ElementRef, OnInit, HostListener, Output, EventEmitter, Inject } from '@angular/core';
import { UPLOAD_SERVICE } from '../services/variables';
var AvlUploadDirective = /** @class */ (function () {
    function AvlUploadDirective(element, uploadService) {
        this.element = element;
        this.uploadService = uploadService;
        this.uploadComplete = new EventEmitter();
        this.uploadAbort = new EventEmitter();
        this.uploadFail = new EventEmitter();
        this.uploadStart = new EventEmitter();
        this.filesChanged = new EventEmitter();
        this.fileRejected = new EventEmitter();
        this.menuItemClicked = new EventEmitter();
        this.downloadFail = new EventEmitter();
        this.downloadAbort = new EventEmitter();
    }
    AvlUploadDirective.prototype.ngOnInit = function () {
        var element = this.element.nativeElement;
        element.uploadService = this.uploadService;
    };
    AvlUploadDirective.prototype.uploadCompleteHandler = function (e) {
        this.uploadComplete.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.uploadCanceledHandler = function (e) {
        this.uploadAbort.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.uploadStartedHandler = function (e) {
        this.uploadStart.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.uploadFailedHandler = function (e) {
        this.uploadFail.emit(e.detail);
    };
    AvlUploadDirective.prototype.filesChangedHandler = function (e) {
        this.filesChanged.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.fileRejectedHandler = function (e) {
        this.fileRejected.emit(e.detail.value);
    };
    AvlUploadDirective.prototype.menuItemClickedHandler = function (e) {
        this.menuItemClicked.emit(e.detail);
    };
    AvlUploadDirective.prototype.downloadFailedHandler = function (e) {
        this.downloadFail.emit(e.detail);
    };
    AvlUploadDirective.prototype.downloadCanceledHandler = function (e) {
        this.downloadAbort.emit(e.detail.value);
    };
    AvlUploadDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [UPLOAD_SERVICE,] }] }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadComplete", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadAbort", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadFail", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "uploadStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "filesChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "fileRejected", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "menuItemClicked", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "downloadFail", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlUploadDirective.prototype, "downloadAbort", void 0);
    __decorate([
        HostListener('upload-complete', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadCompleteHandler", null);
    __decorate([
        HostListener('upload-abort', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadCanceledHandler", null);
    __decorate([
        HostListener('upload-start', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadStartedHandler", null);
    __decorate([
        HostListener('upload-fail', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "uploadFailedHandler", null);
    __decorate([
        HostListener('files-changed', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "filesChangedHandler", null);
    __decorate([
        HostListener('file-rejected', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "fileRejectedHandler", null);
    __decorate([
        HostListener('menu-item-clicked', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "menuItemClickedHandler", null);
    __decorate([
        HostListener('download-fail', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "downloadFailedHandler", null);
    __decorate([
        HostListener('download-abort', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlUploadDirective.prototype, "downloadCanceledHandler", null);
    AvlUploadDirective = __decorate([
        Directive({
            selector: 'avl-upload',
        }),
        __param(1, Inject(UPLOAD_SERVICE)),
        __metadata("design:paramtypes", [ElementRef, Object])
    ], AvlUploadDirective);
    return AvlUploadDirective;
}());
export { AvlUploadDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXVwbG9hZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvIiwic291cmNlcyI6WyJsaWIvY29udHJvbHMvYXZsLXVwbG9hZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBS3ZEO0lBV0UsNEJBQW9CLE9BQW1CLEVBQWtDLGFBQStCO1FBQXBGLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBa0Msa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBVjlGLG1CQUFjLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0QsZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4RCxlQUFVLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbkQsZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4RCxpQkFBWSxHQUE0QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNELGlCQUFZLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDekQsb0JBQWUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4RCxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JELGtCQUFhLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7SUFFdUMsQ0FBQztJQUU1RyxxQ0FBUSxHQUFSO1FBQ0UsSUFBTSxPQUFPLEdBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDaEQsT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzdDLENBQUM7SUFHRCxrREFBcUIsR0FBckIsVUFBc0Is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LFFBQVEsQ0FBQyxDQUFDOzt5Q0FDcEIsV0FBVzs7b0VBRXBDO0lBR0Q7UUFEQyxZQUFZLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3lDQUNqQixXQUFXOzttRUFFbkM7SUFHRDtRQURDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzt5Q0FDaEIsV0FBVzs7cUVBRXJDO0lBN0RVLGtCQUFrQjtRQUg5QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsWUFBWTtTQUN2QixDQUFDO1FBWTBDLFdBQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO3lDQUFuQyxVQUFVO09BWDVCLGtCQUFrQixDQThEOUI7SUFBRCx5QkFBQztDQUFBLEFBOURELElBOERDO1NBOURZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBIb3N0TGlzdGVuZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXZsRmlsZSwgQXZsVXBsb2FkU2VydmljZSB9IGZyb20gJ0BhdmwtY29udHJvbHMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFVQTE9BRF9TRVJWSUNFIH0gZnJvbSAnLi4vc2VydmljZXMvdmFyaWFibGVzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLXVwbG9hZCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxVcGxvYWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRDb21wbGV0ZTogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRBYm9ydDogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRGYWlsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdXBsb2FkU3RhcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZVtdPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZVJlamVjdGVkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG1lbnVJdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkRmFpbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkQWJvcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KFVQTE9BRF9TRVJWSUNFKSBwcml2YXRlIHVwbG9hZFNlcnZpY2U6IEF2bFVwbG9hZFNlcnZpY2UpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IDxhbnk+dGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICBlbGVtZW50LnVwbG9hZFNlcnZpY2UgPSB0aGlzLnVwbG9hZFNlcnZpY2U7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCd1cGxvYWQtY29tcGxldGUnLCBbJyRldmVudCddKVxyXG4gIHVwbG9hZENvbXBsZXRlSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRDb21wbGV0ZS5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1hYm9ydCcsIFsnJGV2ZW50J10pXHJcbiAgdXBsb2FkQ2FuY2VsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZEFib3J0LmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndXBsb2FkLXN0YXJ0JywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRTdGFydGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRTdGFydC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1mYWlsJywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRGYWlsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZEZhaWwuZW1pdChlLmRldGFpbCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdmaWxlcy1jaGFuZ2VkJywgWyckZXZlbnQnXSlcclxuICBmaWxlc0NoYW5nZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmZpbGVzQ2hhbmdlZC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2ZpbGUtcmVqZWN0ZWQnLCBbJyRldmVudCddKVxyXG4gIGZpbGVSZWplY3RlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuZmlsZVJlamVjdGVkLmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbWVudS1pdGVtLWNsaWNrZWQnLCBbJyRldmVudCddKVxyXG4gIG1lbnVJdGVtQ2xpY2tlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMubWVudUl0ZW1DbGlja2VkLmVtaXQoZS5kZXRhaWwpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZG93bmxvYWQtZmFpbCcsIFsnJGV2ZW50J10pXHJcbiAgZG93bmxvYWRGYWlsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmRvd25sb2FkRmFpbC5lbWl0KGUuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2Rvd25sb2FkLWFib3J0JywgWyckZXZlbnQnXSlcclxuICBkb3dubG9hZENhbmNlbGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5kb3dubG9hZEFib3J0LmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxufVxyXG4iXX0=