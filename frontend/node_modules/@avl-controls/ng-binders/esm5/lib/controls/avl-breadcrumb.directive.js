import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var AvlBreadcrumbDirective = /** @class */ (function () {
    function AvlBreadcrumbDirective() {
        this.itemClicked = new EventEmitter();
    }
    AvlBreadcrumbDirective.prototype.itemClickedListener = function (e) {
        this.itemClicked.emit(e.detail.item);
    };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlBreadcrumbDirective.prototype, "itemClicked", void 0);
    __decorate([
        HostListener('item-clicked', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [CustomEvent]),
        __metadata("design:returntype", void 0)
    ], AvlBreadcrumbDirective.prototype, "itemClickedListener", null);
AvlBreadcrumbDirective.ɵfac = function AvlBreadcrumbDirective_Factory(t) { return new (t || AvlBreadcrumbDirective)(); };
AvlBreadcrumbDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlBreadcrumbDirective, selectors: [["avl-breadcrumb"]], hostBindings: function AvlBreadcrumbDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("item-clicked", function AvlBreadcrumbDirective_item_clicked_HostBindingHandler($event) { return ctx.itemClickedListener($event); });
    } }, outputs: { itemClicked: "itemClicked" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlBreadcrumbDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-breadcrumb'
            }]
    }], function () { return []; }, { itemClicked: [{
            type: Output
        }], itemClickedListener: [{
            type: HostListener,
            args: ['item-clicked', ['$event']]
        }] }); })();
    return AvlBreadcrumbDirective;
}());
export { AvlBreadcrumbDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWJyZWFkY3J1bWIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtYnJlYWRjcnVtYi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlFO0FBQ29CLElBRHBCO0FBQW9DLFFBQ3hCLGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDaEUsSUFLQSxDQUFDO0FBQ0QsSUFKRSxvREFBbUIsR0FBbkIsVUFBb0IsQ0FBYztBQUNwQyxRQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsSUFBRSxDQUFDO0FBQ0YsSUFOVztBQUFhLFFBQXRCLE1BQU0sRUFBRTtBQUFFLGtDQUFZLFlBQVk7QUFBRSwrREFBeUI7QUFFaEUsSUFDRTtBQUFhLFFBRFosWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFDO0FBQ0sseUNBRG1CLFdBQVc7QUFDcEM7QUFHQSxxRUFGRztJQU5VLHNCQUFzQix3QkFIbEMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLGdCQUFnQixVQUMzQixDQUFDLFFBQ1c7bUJBQXNCLENBT2xDOzs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCw2QkFBQztBQUNBLENBREEsQUFQRCxJQU9DOztBQVpBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQU5BLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFQQSxBQU9BLEFBUEEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtYnJlYWRjcnVtYidcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bEJyZWFkY3J1bWJEaXJlY3RpdmUge1xyXG4gIEBPdXRwdXQoKSBpdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2l0ZW0tY2xpY2tlZCcsIFsnJGV2ZW50J10pXHJcbiAgaXRlbUNsaWNrZWRMaXN0ZW5lcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5pdGVtQ2xpY2tlZC5lbWl0KGUuZGV0YWlsLml0ZW0pO1xyXG4gIH1cclxufVxyXG4gICJdfQ==