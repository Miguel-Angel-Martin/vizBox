import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
var AvlOverflowMenuDirective = /** @class */ (function () {
    function AvlOverflowMenuDirective(elementRef) {
        this.itemClicked = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'item-clicked', this.itemClicked);
    }
    AvlOverflowMenuDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlOverflowMenuDirective.prototype, "itemClicked", void 0);
    AvlOverflowMenuDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlOverflowMenuDirective);
AvlOverflowMenuDirective.ɵfac = function AvlOverflowMenuDirective_Factory(t) { return new (t || AvlOverflowMenuDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlOverflowMenuDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlOverflowMenuDirective, selectors: [["avl-overflow-menu"]], outputs: { itemClicked: "itemClicked" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlOverflowMenuDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-overflow-menu'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { itemClicked: [{
            type: Output
        }] }); })();
    return AvlOverflowMenuDirective;
}());
export { AvlOverflowMenuDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW92ZXJmbG93LW1lbnUuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtb3ZlcmZsb3ctbWVudS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBSzVFO0FBQ29CLElBRWxCLGtDQUFZLFVBQXNCO0FBQ3BDLFFBSFksZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNoRSxRQUVJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNGLElBQUUsQ0FBQztBQUNIO0FBQ21FLGdCQUp6QyxVQUFVO0FBQUc7QUFDOUIsSUFIRztBQUFhLFFBQXRCLE1BQU0sRUFBRTtBQUFFLGtDQUFZLFlBQVk7QUFBRSxpRUFBeUI7QUFFaEUsSUFIYSx3QkFBd0Isd0JBSHBDLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSwzQ0FFSixrQ0FHa0IsVUFBVTtlQUxMLFVBQzlCLENBQUMsMUJBSXFDLE9BSDFCLHdCQUF3QixDQU1wQzs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsK0JBQUM7QUFDQSxDQURBLEFBTkQsSUFNQzs7QUFaQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBR0EsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRkEsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFOQSxBQU1BLEFBTkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtb3ZlcmZsb3ctbWVudSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bE92ZXJmbG93TWVudURpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIGl0ZW1DbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyhlbGVtZW50UmVmLCAnaXRlbS1jbGlja2VkJywgdGhpcy5pdGVtQ2xpY2tlZCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==