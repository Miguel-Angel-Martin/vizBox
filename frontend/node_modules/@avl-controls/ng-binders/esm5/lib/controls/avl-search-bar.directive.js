import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
var AvlSearchBarDirective = /** @class */ (function () {
    function AvlSearchBarDirective(elementRef) {
        this.queryChange = new EventEmitter();
        this.openChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'query-changed', this.queryChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'open-changed', this.openChange);
    }
    AvlSearchBarDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlSearchBarDirective.prototype, "queryChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlSearchBarDirective.prototype, "openChange", void 0);
    AvlSearchBarDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlSearchBarDirective);
AvlSearchBarDirective.ɵfac = function AvlSearchBarDirective_Factory(t) { return new (t || AvlSearchBarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlSearchBarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlSearchBarDirective, selectors: [["avl-search-bar"]], outputs: { queryChange: "queryChange", openChange: "openChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlSearchBarDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-search-bar'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { queryChange: [{
            type: Output
        }], openChange: [{
            type: Output
        }] }); })();
    return AvlSearchBarDirective;
}());
export { AvlSearchBarDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNlYXJjaC1iYXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtc2VhcmNoLWJhci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBSzVFO0FBQ29CLElBR2xCLCtCQUFZLFVBQXNCO0FBQ3BDLFFBSlksZ0JBQVcsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuRSxRQUFZLGVBQVUsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuRSxRQUVJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVGLFFBQUksd0NBQXdDLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDMUYsSUFBRSxDQUFDO0FBQ0g7QUFDZ0UsZ0JBTHRDLFVBQVU7QUFBRztBQUM5QixJQUpHO0FBQWEsUUFBdEIsTUFBTSxFQUFFO0FBQUUsa0NBQVksWUFBWTtBQUFFLDhEQUE0QjtBQUNsRSxJQUFXO0FBQWEsUUFBdEIsTUFBTSxFQUFFO0FBQUUsa0NBQVcsWUFBWTtBQUFFLDZEQUE2QjtBQUVuRSxJQUphLHFCQUFxQix3QkFIakMsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLDNDQUVKLGtDQUlrQixVQUFVO1lBTlIsVUFDM0IsQ0FBQyx2QkFLcUMsT0FKMUIscUJBQXFCLENBUWpDOzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELDRCQUFDO0FBQ0EsQ0FEQSxBQVJELElBUUM7O0FBZEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUlBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBS0EsQUFBQSxBQUpBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBUUEsQUFSQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2F2bC1zZWFyY2gtYmFyJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsU2VhcmNoQmFyRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgcXVlcnlDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvcGVuQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ3F1ZXJ5LWNoYW5nZWQnLCB0aGlzLnF1ZXJ5Q2hhbmdlKTtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ29wZW4tY2hhbmdlZCcsIHRoaXMub3BlbkNoYW5nZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==