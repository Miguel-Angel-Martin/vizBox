import { __decorate, __read, __spread } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AvlContextMenuDirective } from './controls/avl-context-menu.directive';
import { AvlDateDirective } from './controls/avl-date.directive';
import { AvlDropdownDirective } from './controls/avl-dropdown.directive';
import { AvlListDirective } from './controls/avl-list.directive';
import { AvlOverflowMenuDirective } from './controls/avl-overflow-menu.directive';
import { AvlSearchBarDirective } from './controls/avl-search-bar.directive';
import { AvlTextareaDirective } from './controls/avl-textarea.directive';
import { AvlSideSheetDirective } from './controls/avl-side-sheet.directive';
import { AvlTimeDirective } from './controls/avl-time.directive';
import { AvlTextfieldDirective } from './controls/avl-textfield.directive';
import { AvlTimespanDirective } from './controls/avl-timespan.directive';
import { AvlUploadDirective } from './controls/avl-upload.directive';
import { AvlCheckableControlDirective } from './interface/avl-checkable-control.directive';
import { AvlControlDirective } from './interface/avl-control.directive';
import { AvlFormControlDirective } from './interface/avl-form-control.directive';
import { AvlInteractionControlDirective } from './interface/avl-interaction-control.directive';
import { AvlMultiSelectControlDirective } from './interface/avl-multi-select-control.directive';
import { AvlSingleSelectControlDirective } from './interface/avl-single-select-control.directive';
import { AvlNumberfieldDirective } from './controls/avl-numberfield.directive';
import { AvlIconButtonDirective } from './controls/avl-icon-button.directive';
import { AvlCheckboxDirective } from './controls/avl-checkbox.directive';
import { AvlDatatableDirective } from './controls/avl-datatable.directive';
import { AvlComboBoxDirective } from './controls/avl-combo-box.directive';
import { AvlBreadcrumbDirective } from './controls/avl-breadcrumb.directive';
import { UPLOAD_SERVICE } from './services/variables';
import { UploadService } from './services/upload.service';
import { AvlTabBarDirective } from './controls/avl-tab-bar.directive';
import { AvlSnackbarDirective } from './controls/avl-snackbar.directive';
import { AvlStepProgressDirective } from './controls/avl-step-progress.directive';
import * as ɵngcc0 from '@angular/core';
var binders = [
    AvlBreadcrumbDirective,
    AvlOverflowMenuDirective,
    AvlSearchBarDirective,
    AvlTextareaDirective,
    AvlDateDirective,
    AvlSideSheetDirective,
    AvlTextfieldDirective,
    AvlTimespanDirective,
    AvlCheckableControlDirective,
    AvlControlDirective,
    AvlFormControlDirective,
    AvlInteractionControlDirective,
    AvlMultiSelectControlDirective,
    AvlSingleSelectControlDirective,
    AvlDropdownDirective,
    AvlTimeDirective,
    AvlListDirective,
    AvlUploadDirective,
    AvlContextMenuDirective,
    AvlNumberfieldDirective,
    AvlCheckboxDirective,
    AvlDatatableDirective,
    AvlComboBoxDirective,
    AvlTabBarDirective,
    AvlSnackbarDirective,
    AvlStepProgressDirective,
    AvlIconButtonDirective,
];
var AvlNgBindersModule = /** @class */ (function () {
    function AvlNgBindersModule() {
    }
AvlNgBindersModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AvlNgBindersModule });
AvlNgBindersModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AvlNgBindersModule_Factory(t) { return new (t || AvlNgBindersModule)(); }, providers: [
        { provide: UPLOAD_SERVICE, useClass: UploadService }
    ], imports: [[
            CommonModule,
            FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AvlNgBindersModule, { declarations: function () { return [AvlBreadcrumbDirective,
        AvlOverflowMenuDirective,
        AvlSearchBarDirective,
        AvlTextareaDirective,
        AvlDateDirective,
        AvlSideSheetDirective,
        AvlTextfieldDirective,
        AvlTimespanDirective,
        AvlCheckableControlDirective,
        AvlControlDirective,
        AvlFormControlDirective,
        AvlInteractionControlDirective,
        AvlMultiSelectControlDirective,
        AvlSingleSelectControlDirective,
        AvlDropdownDirective,
        AvlTimeDirective,
        AvlListDirective,
        AvlUploadDirective,
        AvlContextMenuDirective,
        AvlNumberfieldDirective,
        AvlCheckboxDirective,
        AvlDatatableDirective,
        AvlComboBoxDirective,
        AvlTabBarDirective,
        AvlSnackbarDirective,
        AvlStepProgressDirective,
        AvlIconButtonDirective]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [AvlBreadcrumbDirective,
        AvlOverflowMenuDirective,
        AvlSearchBarDirective,
        AvlTextareaDirective,
        AvlDateDirective,
        AvlSideSheetDirective,
        AvlTextfieldDirective,
        AvlTimespanDirective,
        AvlCheckableControlDirective,
        AvlControlDirective,
        AvlFormControlDirective,
        AvlInteractionControlDirective,
        AvlMultiSelectControlDirective,
        AvlSingleSelectControlDirective,
        AvlDropdownDirective,
        AvlTimeDirective,
        AvlListDirective,
        AvlUploadDirective,
        AvlContextMenuDirective,
        AvlNumberfieldDirective,
        AvlCheckboxDirective,
        AvlDatatableDirective,
        AvlComboBoxDirective,
        AvlTabBarDirective,
        AvlSnackbarDirective,
        AvlStepProgressDirective,
        AvlIconButtonDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlNgBindersModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: __spread(binders),
                exports: __spread(binders),
                providers: [
                    { provide: UPLOAD_SERVICE, useClass: UploadService }
                ]
            }]
    }], function () { return []; }, null); })();
    return AvlNgBindersModule;
}());
export { AvlNgBindersModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,