import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlSingleSelectControl]. */
import * as ɵngcc0 from '@angular/core';
var AvlSingleSelectControlDirective = /** @class */ (function () {
    function AvlSingleSelectControlDirective(elementRef) {
        this.selectedIndexChange = new EventEmitter();
        this.selectedValueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-index-changed', this.selectedIndexChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-value-changed', this.selectedValueChange);
    }
    AvlSingleSelectControlDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlSingleSelectControlDirective.prototype, "selectedIndexChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlSingleSelectControlDirective.prototype, "selectedValueChange", void 0);
    AvlSingleSelectControlDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlSingleSelectControlDirective);
AvlSingleSelectControlDirective.ɵfac = function AvlSingleSelectControlDirective_Factory(t) { return new (t || AvlSingleSelectControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlSingleSelectControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlSingleSelectControlDirective, selectors: [["avl-datatable"], ["avl-dropdown"], ["avl-list"], ["avl-radio-group"], ["avl-app-switcher"], ["avl-chip-list"], ["avl-combo-box"]], outputs: { selectedIndexChange: "selectedIndexChange", selectedValueChange: "selectedValueChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlSingleSelectControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { selectedIndexChange: [{
            type: Output
        }], selectedValueChange: [{
            type: Output
        }] }); })();
    return AvlSingleSelectControlDirective;
}());
export { AvlSingleSelectControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNpbmdsZS1zZWxlY3QtY29udHJvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvbGliL2ludGVyZmFjZS9hdmwtc2luZ2xlLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU1RSxvRUFBb0U7O0FBSXBFO0FBQ29CLElBR2xCLHlDQUFZLFVBQXNCO0FBQ3BDLFFBSlksd0JBQW1CLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDM0UsUUFBWSx3QkFBbUIsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUN4RSxRQUVJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUM3RyxRQUFJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUM3RyxJQUFFLENBQUM7QUFDSDtBQUMwRSxnQkFMaEQsVUFBVTtBQUFHO0FBQzlCLElBSkc7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBRSxrQ0FBb0IsWUFBWTtBQUFFLGdGQUE0QjtBQUMxRSxJQUFXO0FBQWEsUUFBdEIsTUFBTSxFQUFFO0FBQUUsa0NBQW9CLFlBQVk7QUFBRSxnRkFBeUI7QUFFeEUsSUFKYSwrQkFBK0Isd0JBSDNDLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSwzQ0FFSixrQ0FJa0IsVUFBVTtBQUFHLE9BSjFCLCtCQUErQixDQVEzQztxREFWNkcsVUFDN0csQ0FBQzs7Ozs7Ozs7Ozs7b0JBVUY7QUFBQyxJQURELHNDQUFDO0FBQ0EsQ0FEQSxBQVJELElBUUM7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBSUEsQUFJQSxBQUFBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUtBLEFBQUEsQUFKQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQVFBLEFBUkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5cclxuLyoqIERpcmVjdGl2ZSBmb3IgY29udHJvbHMgaW1wbGVtZW50aW5nIFtBdmxTaW5nbGVTZWxlY3RDb250cm9sXS4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtZGF0YXRhYmxlLGF2bC1kcm9wZG93bixhdmwtbGlzdCxhdmwtcmFkaW8tZ3JvdXAsYXZsLWFwcC1zd2l0Y2hlcixhdmwtY2hpcC1saXN0LGF2bC1jb21iby1ib3gnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxTaW5nbGVTZWxlY3RDb250cm9sRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdzZWxlY3RlZC1pbmRleC1jaGFuZ2VkJywgdGhpcy5zZWxlY3RlZEluZGV4Q2hhbmdlKTtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ3NlbGVjdGVkLXZhbHVlLWNoYW5nZWQnLCB0aGlzLnNlbGVjdGVkVmFsdWVDaGFuZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=