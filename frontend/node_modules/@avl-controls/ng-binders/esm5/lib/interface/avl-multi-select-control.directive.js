import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlMultiSelectControl]. */
import * as ɵngcc0 from '@angular/core';
var AvlMultiSelectControlDirective = /** @class */ (function () {
    function AvlMultiSelectControlDirective(elementRef) {
        this.selectedIndexesChange = new EventEmitter();
        this.selectedValuesChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-indexes-changed', this.selectedIndexesChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-values-changed', this.selectedValuesChange);
    }
    AvlMultiSelectControlDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlMultiSelectControlDirective.prototype, "selectedIndexesChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlMultiSelectControlDirective.prototype, "selectedValuesChange", void 0);
    AvlMultiSelectControlDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlMultiSelectControlDirective);
AvlMultiSelectControlDirective.ɵfac = function AvlMultiSelectControlDirective_Factory(t) { return new (t || AvlMultiSelectControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlMultiSelectControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlMultiSelectControlDirective, selectors: [["avl-datatable"], ["avl-list"], ["avl-chip-list"], ["avl-chip-input"]], outputs: { selectedIndexesChange: "selectedIndexesChange", selectedValuesChange: "selectedValuesChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlMultiSelectControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-datatable,avl-list,avl-chip-list, avl-chip-input'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { selectedIndexesChange: [{
            type: Output
        }], selectedValuesChange: [{
            type: Output
        }] }); })();
    return AvlMultiSelectControlDirective;
}());
export { AvlMultiSelectControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW11bHRpLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvaW50ZXJmYWNlL2F2bC1tdWx0aS1zZWxlY3QtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFNUUsbUVBQW1FOztBQUluRTtBQUNvQixJQUdsQix3Q0FBWSxVQUFzQjtBQUNwQyxRQUpZLDBCQUFxQixHQUFnQyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3BGLFFBQVkseUJBQW9CLEdBQTZCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDaEYsUUFFSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDakgsUUFBSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUseUJBQXlCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDL0csSUFBRSxDQUFDO0FBQ0g7QUFDeUUsZ0JBTC9DLFVBQVU7QUFBRztBQUM5QixJQUpHO0FBQWEsUUFBdEIsTUFBTSxFQUFFO0FBQUUsa0NBQXNCLFlBQVk7QUFBRSxpRkFBbUM7QUFDbkYsSUFBVztBQUFhLFFBQXRCLE1BQU0sRUFBRTtBQUFFLGtDQUFxQixZQUFZO0FBQUUsZ0ZBQWdDO0FBRWhGLElBSmEsOEJBQThCLHdCQUgxQyxTQUFTLENBQUMsY0FDVCxRQUFRLEVBQUUsM0NBRUosa0NBSWtCLFVBQVU7QUFBRyxPQUoxQiw4QkFBOEIsQ0FRMUM7VUFWaUUsVUFDakUsQ0FBQzs7Ozs7Ozs7Ozs7b0JBVUY7QUFBQyxJQURELHFDQUFDO0FBQ0EsQ0FEQSxBQVJELElBUUM7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBSUEsQUFJQSxBQUFBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUtBLEFBQUEsQUFKQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQVFBLEFBUkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5cclxuLyoqIERpcmVjdGl2ZSBmb3IgY29udHJvbHMgaW1wbGVtZW50aW5nIFtBdmxNdWx0aVNlbGVjdENvbnRyb2xdLiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2F2bC1kYXRhdGFibGUsYXZsLWxpc3QsYXZsLWNoaXAtbGlzdCwgYXZsLWNoaXAtaW5wdXQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxNdWx0aVNlbGVjdENvbnRyb2xEaXJlY3RpdmUge1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZEluZGV4ZXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxBcnJheTxudW1iZXI+PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRWYWx1ZXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxBcnJheTxhbnk+PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyhlbGVtZW50UmVmLCAnc2VsZWN0ZWQtaW5kZXhlcy1jaGFuZ2VkJywgdGhpcy5zZWxlY3RlZEluZGV4ZXNDaGFuZ2UpO1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyhlbGVtZW50UmVmLCAnc2VsZWN0ZWQtdmFsdWVzLWNoYW5nZWQnLCB0aGlzLnNlbGVjdGVkVmFsdWVzQ2hhbmdlKTtcclxuICB9XHJcbn1cclxuIl19