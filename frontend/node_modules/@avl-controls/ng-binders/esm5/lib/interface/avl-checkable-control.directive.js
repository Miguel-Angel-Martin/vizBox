import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlCheckableControl]. */
import * as ɵngcc0 from '@angular/core';
var AvlCheckableControlDirective = /** @class */ (function () {
    function AvlCheckableControlDirective(elementRef) {
        this.checkedChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'checked-changed', this.checkedChange);
    }
    AvlCheckableControlDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], AvlCheckableControlDirective.prototype, "checkedChange", void 0);
    AvlCheckableControlDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], AvlCheckableControlDirective);
AvlCheckableControlDirective.ɵfac = function AvlCheckableControlDirective_Factory(t) { return new (t || AvlCheckableControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlCheckableControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlCheckableControlDirective, selectors: [["avl-checkbox"], ["avl-radio-button"], ["avl-icon-toggle"], ["avl-switch"]], outputs: { checkedChange: "checkedChange" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlCheckableControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-checkbox,avl-radio-button, avl-icon-toggle, avl-switch'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { checkedChange: [{
            type: Output
        }] }); })();
    return AvlCheckableControlDirective;
}());
export { AvlCheckableControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWNoZWNrYWJsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvaW50ZXJmYWNlL2F2bC1jaGVja2FibGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFNUUsaUVBQWlFOztBQUlqRTtBQUNvQixJQUVsQixzQ0FBWSxVQUFzQjtBQUNwQyxRQUhZLGtCQUFhLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDbEUsUUFFSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2hHLElBQUUsQ0FBQztBQUNIO0FBQ3VFLGdCQUo3QyxVQUFVO0FBQUc7QUFDOUIsSUFIRztBQUFhLFFBQXRCLE1BQU0sRUFBRTtBQUFFLGtDQUFjLFlBQVk7QUFBRSx1RUFBeUI7QUFFbEUsSUFIYSw0QkFBNEIsd0JBSHhDLFNBQVMsQ0FBQyxjQUNULFFBQVEsRUFBRSwzQ0FFSixrQ0FHa0IsVUFBVTtBQUFHLE9BSDFCLDRCQUE0QixDQU14QztrQkFSdUUsVUFDdkUsQ0FBQzs7Ozs7Ozs7O29CQVFGO0FBQUMsSUFERCxtQ0FBQztBQUNBLENBREEsQUFORCxJQU1DOztBQWJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUlBLEFBR0EsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRkEsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFIQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFOQSxBQU1BLEFBTkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5cclxuLyoqIERpcmVjdGl2ZSBmb3IgY29udHJvbHMgaW1wbGVtZW50aW5nIFtBdmxDaGVja2FibGVDb250cm9sXS4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtY2hlY2tib3gsYXZsLXJhZGlvLWJ1dHRvbiwgYXZsLWljb24tdG9nZ2xlLCBhdmwtc3dpdGNoJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsQ2hlY2thYmxlQ29udHJvbERpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIGNoZWNrZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdjaGVja2VkLWNoYW5nZWQnLCB0aGlzLmNoZWNrZWRDaGFuZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=