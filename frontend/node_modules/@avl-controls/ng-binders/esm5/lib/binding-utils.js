import { __awaiter, __generator } from "tslib";
/**
 * Maps Polymer 'changed' events to Angular 'change' events so it can be used in 2-way binding.
 * HostListener can't be used because when a polymer control has a default value polymer will emit a changed event
 * which will overwrite the value in the bound angular variable. So the event listener is added after the constructor
 * so the default value changed event will be skipped.
 * TODO: There is still a problem if the bound variable is not set. If the default changed event is skipped the variable
 * will not get the default value so the control and the variable will have missmatching values.
 */
export function addEventListenerForEmittingChangedEvents(elementRef, polymerEventName, angularEventEmmiter) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            Promise.resolve().then(function () {
                var nativeElement = elementRef.nativeElement;
                return nativeElement.addEventListener(polymerEventName, function (e) {
                    angularEventEmmiter.emit(e.detail.value);
                });
            });
            return [2 /*return*/];
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtY29udHJvbHMvbmctYmluZGVycy8iLCJzb3VyY2VzIjpbImxpYi9iaW5kaW5nLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFnQix3Q0FBd0MsQ0FBUyxVQUFzQixFQUFFLGdCQUF3QixFQUNySCxtQkFBeUM7OztZQUN6QyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO2dCQUNyQixJQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBNEIsQ0FBQztnQkFDOUQsT0FBTyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsVUFBQyxDQUFjO29CQUNyRSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQTs7OztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipcclxuICogTWFwcyBQb2x5bWVyICdjaGFuZ2VkJyBldmVudHMgdG8gQW5ndWxhciAnY2hhbmdlJyBldmVudHMgc28gaXQgY2FuIGJlIHVzZWQgaW4gMi13YXkgYmluZGluZy5cclxuICogSG9zdExpc3RlbmVyIGNhbid0IGJlIHVzZWQgYmVjYXVzZSB3aGVuIGEgcG9seW1lciBjb250cm9sIGhhcyBhIGRlZmF1bHQgdmFsdWUgcG9seW1lciB3aWxsIGVtaXQgYSBjaGFuZ2VkIGV2ZW50XHJcbiAqIHdoaWNoIHdpbGwgb3ZlcndyaXRlIHRoZSB2YWx1ZSBpbiB0aGUgYm91bmQgYW5ndWxhciB2YXJpYWJsZS4gU28gdGhlIGV2ZW50IGxpc3RlbmVyIGlzIGFkZGVkIGFmdGVyIHRoZSBjb25zdHJ1Y3RvclxyXG4gKiBzbyB0aGUgZGVmYXVsdCB2YWx1ZSBjaGFuZ2VkIGV2ZW50IHdpbGwgYmUgc2tpcHBlZC5cclxuICogVE9ETzogVGhlcmUgaXMgc3RpbGwgYSBwcm9ibGVtIGlmIHRoZSBib3VuZCB2YXJpYWJsZSBpcyBub3Qgc2V0LiBJZiB0aGUgZGVmYXVsdCBjaGFuZ2VkIGV2ZW50IGlzIHNraXBwZWQgdGhlIHZhcmlhYmxlXHJcbiAqIHdpbGwgbm90IGdldCB0aGUgZGVmYXVsdCB2YWx1ZSBzbyB0aGUgY29udHJvbCBhbmQgdGhlIHZhcmlhYmxlIHdpbGwgaGF2ZSBtaXNzbWF0Y2hpbmcgdmFsdWVzLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHM8VEV2ZW50PihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwb2x5bWVyRXZlbnROYW1lOiBzdHJpbmcsXHJcbiAgYW5ndWxhckV2ZW50RW1taXRlcjogRXZlbnRFbWl0dGVyPFRFdmVudD4pIHtcclxuICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+e1xyXG4gICAgY29uc3QgbmF0aXZlRWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcclxuICAgIHJldHVybiBuYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIocG9seW1lckV2ZW50TmFtZSwgKGU6IEN1c3RvbUV2ZW50KSA9PiB7XHJcbiAgICAgIGFuZ3VsYXJFdmVudEVtbWl0ZXIuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgICB9KTtcclxuICB9KVxyXG59XHJcbiJdfQ==