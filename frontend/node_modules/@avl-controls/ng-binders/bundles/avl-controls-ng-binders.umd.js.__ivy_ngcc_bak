(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('@angular/common/http'), require('rxjs/operators'), require('rxjs'), require('@ngx-translate/core')) :
    typeof define === 'function' && define.amd ? define('@avl-controls/ng-binders', ['exports', '@angular/core', '@angular/forms', '@angular/common', '@angular/common/http', 'rxjs/operators', 'rxjs', '@ngx-translate/core'], factory) :
    (global = global || self, factory((global['avl-controls'] = global['avl-controls'] || {}, global['avl-controls']['ng-binders'] = {}), global.ng.core, global.ng.forms, global.ng.common, global.ng.common.http, global.rxjs.operators, global.rxjs, global.core$1));
}(this, (function (exports, core, forms, common, http, operators, rxjs, core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var AvlBreadcrumbDirective = /** @class */ (function () {
        function AvlBreadcrumbDirective() {
            this.itemClicked = new core.EventEmitter();
        }
        AvlBreadcrumbDirective.prototype.itemClickedListener = function (e) {
            this.itemClicked.emit(e.detail.item);
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlBreadcrumbDirective.prototype, "itemClicked", void 0);
        __decorate([
            core.HostListener('item-clicked', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlBreadcrumbDirective.prototype, "itemClickedListener", null);
        AvlBreadcrumbDirective = __decorate([
            core.Directive({
                selector: 'avl-breadcrumb'
            })
        ], AvlBreadcrumbDirective);
        return AvlBreadcrumbDirective;
    }());

    /**
     * Maps Polymer 'changed' events to Angular 'change' events so it can be used in 2-way binding.
     * HostListener can't be used because when a polymer control has a default value polymer will emit a changed event
     * which will overwrite the value in the bound angular variable. So the event listener is added after the constructor
     * so the default value changed event will be skipped.
     * TODO: There is still a problem if the bound variable is not set. If the default changed event is skipped the variable
     * will not get the default value so the control and the variable will have missmatching values.
     */
    function addEventListenerForEmittingChangedEvents(elementRef, polymerEventName, angularEventEmmiter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                Promise.resolve().then(function () {
                    var nativeElement = elementRef.nativeElement;
                    return nativeElement.addEventListener(polymerEventName, function (e) {
                        angularEventEmmiter.emit(e.detail.value);
                    });
                });
                return [2 /*return*/];
            });
        });
    }

    var AvlCheckboxDirective = /** @class */ (function () {
        function AvlCheckboxDirective(elementRef) {
            this.indeterminateChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'indeterminate-changed', this.indeterminateChange);
        }
        AvlCheckboxDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlCheckboxDirective.prototype, "indeterminateChange", void 0);
        AvlCheckboxDirective = __decorate([
            core.Directive({
                selector: 'avl-checkbox'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlCheckboxDirective);
        return AvlCheckboxDirective;
    }());

    /** Directive for controls implementing [AvlControl]. */
    var AvlControlDirective = /** @class */ (function () {
        function AvlControlDirective(elementRef) {
            this.disabledChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'disabled-changed', this.disabledChange);
        }
        AvlControlDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlControlDirective.prototype, "disabledChange", void 0);
        AvlControlDirective = __decorate([
            core.Directive({
                selector: 'avl-breadcrumb,avl-context-menu,avl-header-bar,avl-menu-button,avl-user-info'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlControlDirective);
        return AvlControlDirective;
    }());

    /** Directive for controls implementing [AvlInteractionControl]. */
    var AvlInteractionControlDirective = /** @class */ (function (_super) {
        __extends(AvlInteractionControlDirective, _super);
        function AvlInteractionControlDirective(elementRef) {
            var _this = _super.call(this, elementRef) || this;
            _this.focusedChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'focused-changed', _this.focusedChange);
            return _this;
        }
        AvlInteractionControlDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlInteractionControlDirective.prototype, "focusedChange", void 0);
        AvlInteractionControlDirective = __decorate([
            core.Directive({
                selector: 'avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlInteractionControlDirective);
        return AvlInteractionControlDirective;
    }(AvlControlDirective));

    var AvlComboBoxDirective = /** @class */ (function (_super) {
        __extends(AvlComboBoxDirective, _super);
        function AvlComboBoxDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.invalidChange = new core.EventEmitter();
            _this.valueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', _this.focusedChange);
            addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', _this.valueChange);
            return _this;
        }
        AvlComboBoxDirective_1 = AvlComboBoxDirective;
        Object.defineProperty(AvlComboBoxDirective.prototype, "readonly", {
            // Angular writes readonly attributes to a readOnly property,
            // because that's how it's called on the native input element.
            set: function (value) {
                this.elementRef.nativeElement.readonly = value;
            },
            enumerable: true,
            configurable: true
        });
        AvlComboBoxDirective.prototype.valueChanged = function (e) {
            if (this.onChangeCallback && this.isAllowNewValues()) {
                this.onChangeCallback(e.detail.value);
            }
        };
        AvlComboBoxDirective.prototype.selectedValueChanged = function (e) {
            if (this.onChangeCallback && !this.isAllowNewValues()) {
                this.onChangeCallback(e.detail.value);
            }
        };
        AvlComboBoxDirective.prototype.writeValue = function (value) {
            var property = this.isAllowNewValues() ? 'value' : 'selectedValue';
            this.renderer.setProperty(this.elementRef.nativeElement, property, value);
        };
        AvlComboBoxDirective.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        // Since avl-combo-box doesn't have validate-on-leave, there's no touching
        AvlComboBoxDirective.prototype.registerOnTouched = function (fn) { };
        AvlComboBoxDirective.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
        };
        AvlComboBoxDirective.prototype.isAllowNewValues = function () {
            return (this.elementRef.nativeElement && this.elementRef.nativeElement.allowNewValues === true);
        };
        //#region Validator
        AvlComboBoxDirective.prototype.validate = function (control) {
            var formControl = this.elementRef.nativeElement;
            if (formControl.invalid) {
                return { invalid: formControl.errorMessage };
            }
            else {
                return null;
            }
        };
        var AvlComboBoxDirective_1;
        AvlComboBoxDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlComboBoxDirective.prototype, "invalidChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlComboBoxDirective.prototype, "valueChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], AvlComboBoxDirective.prototype, "readonly", null);
        __decorate([
            core.HostListener('value-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlComboBoxDirective.prototype, "valueChanged", null);
        __decorate([
            core.HostListener('selected-value-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlComboBoxDirective.prototype, "selectedValueChanged", null);
        AvlComboBoxDirective = AvlComboBoxDirective_1 = __decorate([
            core.Directive({
                selector: 'avl-combo-box',
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AvlComboBoxDirective_1; }), multi: true },
                    { provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AvlComboBoxDirective_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], AvlComboBoxDirective);
        return AvlComboBoxDirective;
    }(AvlInteractionControlDirective));

    var AvlOverflowMenuDirective = /** @class */ (function () {
        function AvlOverflowMenuDirective(elementRef) {
            this.itemClicked = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'item-clicked', this.itemClicked);
        }
        AvlOverflowMenuDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlOverflowMenuDirective.prototype, "itemClicked", void 0);
        AvlOverflowMenuDirective = __decorate([
            core.Directive({
                selector: 'avl-overflow-menu'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlOverflowMenuDirective);
        return AvlOverflowMenuDirective;
    }());

    var AvlSearchBarDirective = /** @class */ (function () {
        function AvlSearchBarDirective(elementRef) {
            this.queryChange = new core.EventEmitter();
            this.openChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'query-changed', this.queryChange);
            addEventListenerForEmittingChangedEvents(elementRef, 'open-changed', this.openChange);
        }
        AvlSearchBarDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlSearchBarDirective.prototype, "queryChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlSearchBarDirective.prototype, "openChange", void 0);
        AvlSearchBarDirective = __decorate([
            core.Directive({
                selector: 'avl-search-bar'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlSearchBarDirective);
        return AvlSearchBarDirective;
    }());

    var AvlTextareaDirective = /** @class */ (function () {
        function AvlTextareaDirective(elementRef) {
            this.valueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
        }
        AvlTextareaDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlTextareaDirective.prototype, "valueChange", void 0);
        AvlTextareaDirective = __decorate([
            core.Directive({
                selector: 'avl-textarea'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlTextareaDirective);
        return AvlTextareaDirective;
    }());

    var AvlDateDirective = /** @class */ (function () {
        function AvlDateDirective(elementRef) {
            this.valueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
        }
        AvlDateDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlDateDirective.prototype, "valueChange", void 0);
        AvlDateDirective = __decorate([
            core.Directive({
                selector: 'avl-date'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlDateDirective);
        return AvlDateDirective;
    }());

    var AvlSideSheetDirective = /** @class */ (function () {
        function AvlSideSheetDirective(elementRef) {
            this.openChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'open-changed', this.openChange);
        }
        AvlSideSheetDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlSideSheetDirective.prototype, "openChange", void 0);
        AvlSideSheetDirective = __decorate([
            core.Directive({
                selector: 'avl-side-sheet'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlSideSheetDirective);
        return AvlSideSheetDirective;
    }());

    var AvlTextfieldDirective = /** @class */ (function () {
        function AvlTextfieldDirective(elementRef) {
            this.valueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
        }
        AvlTextfieldDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlTextfieldDirective.prototype, "valueChange", void 0);
        AvlTextfieldDirective = __decorate([
            core.Directive({
                selector: 'avl-textfield'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlTextfieldDirective);
        return AvlTextfieldDirective;
    }());

    var AvlTimespanDirective = /** @class */ (function () {
        function AvlTimespanDirective(elementRef) {
            this.valueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
        }
        AvlTimespanDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlTimespanDirective.prototype, "valueChange", void 0);
        AvlTimespanDirective = __decorate([
            core.Directive({
                selector: 'avl-timespan'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlTimespanDirective);
        return AvlTimespanDirective;
    }());

    var UPLOAD_SERVICE = new core.InjectionToken('UPLOAD_SERVICE');

    var AvlUploadDirective = /** @class */ (function () {
        function AvlUploadDirective(element, uploadService) {
            this.element = element;
            this.uploadService = uploadService;
            this.uploadComplete = new core.EventEmitter();
            this.uploadAbort = new core.EventEmitter();
            this.uploadFail = new core.EventEmitter();
            this.uploadStart = new core.EventEmitter();
            this.filesChanged = new core.EventEmitter();
            this.fileRejected = new core.EventEmitter();
            this.menuItemClicked = new core.EventEmitter();
            this.downloadFail = new core.EventEmitter();
            this.downloadAbort = new core.EventEmitter();
        }
        AvlUploadDirective.prototype.ngOnInit = function () {
            var element = this.element.nativeElement;
            element.uploadService = this.uploadService;
        };
        AvlUploadDirective.prototype.uploadCompleteHandler = function (e) {
            this.uploadComplete.emit(e.detail.value);
        };
        AvlUploadDirective.prototype.uploadCanceledHandler = function (e) {
            this.uploadAbort.emit(e.detail.value);
        };
        AvlUploadDirective.prototype.uploadStartedHandler = function (e) {
            this.uploadStart.emit(e.detail.value);
        };
        AvlUploadDirective.prototype.uploadFailedHandler = function (e) {
            this.uploadFail.emit(e.detail);
        };
        AvlUploadDirective.prototype.filesChangedHandler = function (e) {
            this.filesChanged.emit(e.detail.value);
        };
        AvlUploadDirective.prototype.fileRejectedHandler = function (e) {
            this.fileRejected.emit(e.detail.value);
        };
        AvlUploadDirective.prototype.menuItemClickedHandler = function (e) {
            this.menuItemClicked.emit(e.detail);
        };
        AvlUploadDirective.prototype.downloadFailedHandler = function (e) {
            this.downloadFail.emit(e.detail);
        };
        AvlUploadDirective.prototype.downloadCanceledHandler = function (e) {
            this.downloadAbort.emit(e.detail.value);
        };
        AvlUploadDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [UPLOAD_SERVICE,] }] }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "uploadComplete", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "uploadAbort", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "uploadFail", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "uploadStart", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "filesChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "fileRejected", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "menuItemClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "downloadFail", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlUploadDirective.prototype, "downloadAbort", void 0);
        __decorate([
            core.HostListener('upload-complete', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "uploadCompleteHandler", null);
        __decorate([
            core.HostListener('upload-abort', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "uploadCanceledHandler", null);
        __decorate([
            core.HostListener('upload-start', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "uploadStartedHandler", null);
        __decorate([
            core.HostListener('upload-fail', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "uploadFailedHandler", null);
        __decorate([
            core.HostListener('files-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "filesChangedHandler", null);
        __decorate([
            core.HostListener('file-rejected', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "fileRejectedHandler", null);
        __decorate([
            core.HostListener('menu-item-clicked', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "menuItemClickedHandler", null);
        __decorate([
            core.HostListener('download-fail', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "downloadFailedHandler", null);
        __decorate([
            core.HostListener('download-abort', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlUploadDirective.prototype, "downloadCanceledHandler", null);
        AvlUploadDirective = __decorate([
            core.Directive({
                selector: 'avl-upload',
            }),
            __param(1, core.Inject(UPLOAD_SERVICE)),
            __metadata("design:paramtypes", [core.ElementRef, Object])
        ], AvlUploadDirective);
        return AvlUploadDirective;
    }());

    var AvlTabBarDirective = /** @class */ (function () {
        function AvlTabBarDirective(el) {
            var _this = this;
            this.el = el;
            this.selectedIndexChange = new core.EventEmitter();
            this.selectedValueChange = new core.EventEmitter();
            this.tabBar = this.el.nativeElement;
            Promise.resolve().then(function () {
                _this.setEventListeners(el.nativeElement);
            });
        }
        AvlTabBarDirective.prototype.setEventListeners = function (el) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    el.addEventListener('selected-value-changed', function (event) {
                        Promise.resolve().then(function () {
                            _this.selectedValueChange.emit(event.detail.value);
                        });
                    });
                    el.addEventListener('selected-index-changed', function (event) {
                        Promise.resolve().then(function () {
                            _this.selectedIndexChange.emit(event.detail.value);
                        });
                    });
                    return [2 /*return*/];
                });
            });
        };
        AvlTabBarDirective.prototype.setTab = function (index, value) {
            var tabs = this.tabBar.tabs;
            for (var prop in value) {
                if (value.hasOwnProperty(prop)) {
                    tabs[index][prop] = value[prop];
                    this.tabBar.notifyPath("tabs." + index + "." + prop);
                }
            }
        };
        AvlTabBarDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlTabBarDirective.prototype, "selectedIndexChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlTabBarDirective.prototype, "selectedValueChange", void 0);
        AvlTabBarDirective = __decorate([
            core.Directive({
                selector: 'avl-tab-bar',
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlTabBarDirective);
        return AvlTabBarDirective;
    }());

    var AvlDropdownDirective = /** @class */ (function () {
        function AvlDropdownDirective(elementRef) {
            this.openChanged = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'open-changed', this.openChanged);
        }
        AvlDropdownDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlDropdownDirective.prototype, "openChanged", void 0);
        AvlDropdownDirective = __decorate([
            core.Directive({
                selector: 'avl-dropdown'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlDropdownDirective);
        return AvlDropdownDirective;
    }());

    var AvlTimeDirective = /** @class */ (function () {
        function AvlTimeDirective(elementRef) {
            this.valueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
        }
        AvlTimeDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlTimeDirective.prototype, "valueChange", void 0);
        AvlTimeDirective = __decorate([
            core.Directive({
                selector: 'avl-time'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlTimeDirective);
        return AvlTimeDirective;
    }());

    var AvlListDirective = /** @class */ (function (_super) {
        __extends(AvlListDirective, _super);
        function AvlListDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.invalidChange = new core.EventEmitter();
            _this.overflowMenuItemClicked = new core.EventEmitter();
            _this.rightCheckboxChanged = new core.EventEmitter();
            _this.activeRowChanged = new core.EventEmitter();
            _this.rowReordered = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', _this.focusedChange);
            return _this;
        }
        AvlListDirective_1 = AvlListDirective;
        Object.defineProperty(AvlListDirective.prototype, "readonly", {
            // Angular writes readonly attributes to a readOnly property,
            // because that's how it's called on the native input element.
            set: function (value) {
                this.elementRef.nativeElement.readonly = value;
            },
            enumerable: true,
            configurable: true
        });
        AvlListDirective.prototype.selectedValueChanged = function (e) {
            if (this.onChangeCallback && !this.isMulti()) {
                this.onChangeCallback(e.detail.value);
            }
        };
        AvlListDirective.prototype.selectedValuesChanged = function (e) {
            if (this.onChangeCallback && this.isMulti()) {
                this.onChangeCallback(e.detail.value);
            }
        };
        AvlListDirective.prototype.overflowMenuItemClickListener = function (e) {
            this.overflowMenuItemClicked.emit(e.detail);
        };
        AvlListDirective.prototype.rightCheckboxChangeListener = function (e) {
            this.rightCheckboxChanged.emit(e.detail);
        };
        AvlListDirective.prototype.activatedRowChangeListener = function (e) {
            this.activeRowChanged.emit(e.detail.value);
        };
        AvlListDirective.prototype.rowReorderedListener = function (e) {
            this.rowReordered.emit(e.detail);
        };
        AvlListDirective.prototype.writeValue = function (value) {
            var property = this.isMulti() ? 'selectedValues' : 'selectedValue';
            this.renderer.setProperty(this.elementRef.nativeElement, property, value);
        };
        AvlListDirective.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        // Since avl-list doesn't have validate-on-leave, there's no touching
        AvlListDirective.prototype.registerOnTouched = function (fn) { };
        AvlListDirective.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
        };
        AvlListDirective.prototype.isMulti = function () {
            return (this.elementRef.nativeElement && this.elementRef.nativeElement.multi === true);
        };
        //#region Validator
        AvlListDirective.prototype.validate = function (control) {
            var formControl = this.elementRef.nativeElement;
            if (formControl.invalid) {
                return { invalid: formControl.errorMessage };
            }
            else {
                return null;
            }
        };
        var AvlListDirective_1;
        AvlListDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlListDirective.prototype, "invalidChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlListDirective.prototype, "overflowMenuItemClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlListDirective.prototype, "rightCheckboxChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlListDirective.prototype, "activeRowChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlListDirective.prototype, "rowReordered", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], AvlListDirective.prototype, "readonly", null);
        __decorate([
            core.HostListener('selected-value-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlListDirective.prototype, "selectedValueChanged", null);
        __decorate([
            core.HostListener('selected-values-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlListDirective.prototype, "selectedValuesChanged", null);
        __decorate([
            core.HostListener('overflow-menu-item-clicked', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlListDirective.prototype, "overflowMenuItemClickListener", null);
        __decorate([
            core.HostListener('right-checkbox-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlListDirective.prototype, "rightCheckboxChangeListener", null);
        __decorate([
            core.HostListener('active-row-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlListDirective.prototype, "activatedRowChangeListener", null);
        __decorate([
            core.HostListener('row-reordered', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlListDirective.prototype, "rowReorderedListener", null);
        AvlListDirective = AvlListDirective_1 = __decorate([
            core.Directive({
                selector: 'avl-list',
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AvlListDirective_1; }), multi: true },
                    { provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AvlListDirective_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], AvlListDirective);
        return AvlListDirective;
    }(AvlInteractionControlDirective));

    var AvlContextMenuDirective = /** @class */ (function () {
        function AvlContextMenuDirective() {
            this.itemClicked = new core.EventEmitter();
        }
        AvlContextMenuDirective.prototype.itemClickedListener = function (e) {
            this.itemClicked.emit(e.detail.value);
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlContextMenuDirective.prototype, "itemClicked", void 0);
        __decorate([
            core.HostListener('item-clicked', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlContextMenuDirective.prototype, "itemClickedListener", null);
        AvlContextMenuDirective = __decorate([
            core.Directive({
                selector: 'avl-context-menu'
            })
        ], AvlContextMenuDirective);
        return AvlContextMenuDirective;
    }());

    var AvlNumberfieldDirective = /** @class */ (function () {
        function AvlNumberfieldDirective(elementRef) {
            this.valueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
        }
        AvlNumberfieldDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlNumberfieldDirective.prototype, "valueChange", void 0);
        AvlNumberfieldDirective = __decorate([
            core.Directive({
                selector: 'avl-numberfield'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlNumberfieldDirective);
        return AvlNumberfieldDirective;
    }());

    var AvlIconButtonDirective = /** @class */ (function () {
        function AvlIconButtonDirective(elementRef) {
            this.badgeChange = new core.EventEmitter();
            this.badgeValueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'badge-changed', this.badgeChange);
            addEventListenerForEmittingChangedEvents(elementRef, 'badge-value-changed', this.badgeValueChange);
        }
        AvlIconButtonDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlIconButtonDirective.prototype, "badgeChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlIconButtonDirective.prototype, "badgeValueChange", void 0);
        AvlIconButtonDirective = __decorate([
            core.Directive({
                selector: 'avl-icon-button'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlIconButtonDirective);
        return AvlIconButtonDirective;
    }());

    var AvlDatatableDirective = /** @class */ (function () {
        function AvlDatatableDirective(elementRef) {
            this.buttonClick = new core.EventEmitter();
            this.overflowMenuItemClick = new core.EventEmitter();
            this.linkClick = new core.EventEmitter();
            this.pageSizeChange = new core.EventEmitter();
            this.selectedPageChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'page-size-changed', this.pageSizeChange);
            addEventListenerForEmittingChangedEvents(elementRef, 'selected-page-changed', this.selectedPageChange);
        }
        AvlDatatableDirective.prototype.buttonClickListener = function (e) {
            this.buttonClick.emit(e.detail);
        };
        AvlDatatableDirective.prototype.overflowMenuItemClickListener = function (e) {
            this.overflowMenuItemClick.emit(e.detail);
        };
        AvlDatatableDirective.prototype.linkClickListener = function (e) {
            this.linkClick.emit(e.detail);
        };
        AvlDatatableDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlDatatableDirective.prototype, "buttonClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlDatatableDirective.prototype, "overflowMenuItemClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlDatatableDirective.prototype, "linkClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlDatatableDirective.prototype, "pageSizeChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlDatatableDirective.prototype, "selectedPageChange", void 0);
        __decorate([
            core.HostListener('button-click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlDatatableDirective.prototype, "buttonClickListener", null);
        __decorate([
            core.HostListener('overflow-menu-item-click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlDatatableDirective.prototype, "overflowMenuItemClickListener", null);
        __decorate([
            core.HostListener('link-click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlDatatableDirective.prototype, "linkClickListener", null);
        AvlDatatableDirective = __decorate([
            core.Directive({
                selector: 'avl-datatable'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlDatatableDirective);
        return AvlDatatableDirective;
    }());

    var AvlSnackbarDirective = /** @class */ (function () {
        function AvlSnackbarDirective() {
            this.buttonClicked = new core.EventEmitter();
            this.displayedChange = new core.EventEmitter();
        }
        AvlSnackbarDirective.prototype.buttonClickedHandler = function (e) {
            this.buttonClicked.emit(e.detail.value);
        };
        AvlSnackbarDirective.prototype.displayedChangeHandler = function (e) {
            this.displayedChange.emit(e.detail.value);
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlSnackbarDirective.prototype, "buttonClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlSnackbarDirective.prototype, "displayedChange", void 0);
        __decorate([
            core.HostListener('button-clicked', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlSnackbarDirective.prototype, "buttonClickedHandler", null);
        __decorate([
            core.HostListener('displayed-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlSnackbarDirective.prototype, "displayedChangeHandler", null);
        AvlSnackbarDirective = __decorate([
            core.Directive({
                selector: 'avl-snackbar'
            })
        ], AvlSnackbarDirective);
        return AvlSnackbarDirective;
    }());

    /** Directive for controls implementing [AvlCheckableControl]. */
    var AvlCheckableControlDirective = /** @class */ (function () {
        function AvlCheckableControlDirective(elementRef) {
            this.checkedChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'checked-changed', this.checkedChange);
        }
        AvlCheckableControlDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlCheckableControlDirective.prototype, "checkedChange", void 0);
        AvlCheckableControlDirective = __decorate([
            core.Directive({
                selector: 'avl-checkbox,avl-radio-button, avl-icon-toggle, avl-switch'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlCheckableControlDirective);
        return AvlCheckableControlDirective;
    }());

    /** Directive for controls implementing [AvlMultiSelectControl]. */
    var AvlMultiSelectControlDirective = /** @class */ (function () {
        function AvlMultiSelectControlDirective(elementRef) {
            this.selectedIndexesChange = new core.EventEmitter();
            this.selectedValuesChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'selected-indexes-changed', this.selectedIndexesChange);
            addEventListenerForEmittingChangedEvents(elementRef, 'selected-values-changed', this.selectedValuesChange);
        }
        AvlMultiSelectControlDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlMultiSelectControlDirective.prototype, "selectedIndexesChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlMultiSelectControlDirective.prototype, "selectedValuesChange", void 0);
        AvlMultiSelectControlDirective = __decorate([
            core.Directive({
                selector: 'avl-datatable,avl-list,avl-chip-list, avl-chip-input'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlMultiSelectControlDirective);
        return AvlMultiSelectControlDirective;
    }());

    /** Directive for controls implementing [AvlSingleSelectControl]. */
    var AvlSingleSelectControlDirective = /** @class */ (function () {
        function AvlSingleSelectControlDirective(elementRef) {
            this.selectedIndexChange = new core.EventEmitter();
            this.selectedValueChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'selected-index-changed', this.selectedIndexChange);
            addEventListenerForEmittingChangedEvents(elementRef, 'selected-value-changed', this.selectedValueChange);
        }
        AvlSingleSelectControlDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlSingleSelectControlDirective.prototype, "selectedIndexChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlSingleSelectControlDirective.prototype, "selectedValueChange", void 0);
        AvlSingleSelectControlDirective = __decorate([
            core.Directive({
                selector: 'avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlSingleSelectControlDirective);
        return AvlSingleSelectControlDirective;
    }());

    // Defines which property is used as the 'value' for the ControlValueAccessor
    var valuePropertyNameMap = {
        // TODO: is there a nameof function is typescript?
        'avl-checkbox': 'checked',
        'avl-date': 'value',
        'avl-dropdown': 'selectedValue',
        'avl-time': 'value',
        'avl-numberfield': 'value',
        'avl-radio-group': 'selectedValue',
        'avl-slider': 'value',
        'avl-textarea': 'value',
        'avl-textfield': 'value',
        'avl-timespan': 'value',
        'avl-chip-list': 'selectedValue',
        'avl-chip-input': 'selectedValues',
        'avl-upload': 'files',
        'avl-search-bar': 'query',
        'avl-icon-toggle': 'checked',
        'avl-switch': 'checked'
    };
    /** Directive for controls implementing [AvlFormControl]. */
    var AvlFormControlDirective = /** @class */ (function (_super) {
        __extends(AvlFormControlDirective, _super);
        function AvlFormControlDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.writeValueAlreadyCalled = false;
            //#endregion
            //#region AvlFormControl
            // tslint:disable-next-line:member-ordering
            _this.invalidChange = new core.EventEmitter();
            var controlTag = _this.elementRef.nativeElement.tagName.toLowerCase();
            _this.valuePropertyName = valuePropertyNameMap[controlTag];
            return _this;
        }
        AvlFormControlDirective_1 = AvlFormControlDirective;
        Object.defineProperty(AvlFormControlDirective.prototype, "readonly", {
            // Angular writes readonly attributes to a readOnly property,
            // because that's how it's called on the native input element.
            set: function (value) {
                if (typeof value === 'boolean') {
                    this.elementRef.nativeElement.readonly = value;
                }
                else {
                    this.elementRef.nativeElement.readonly = value != null;
                }
            },
            enumerable: true,
            configurable: true
        });
        AvlFormControlDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.unlistenPropertyChangedEvent =
                this.renderer.listen(this.elementRef.nativeElement, this.toKebabCase(this.valuePropertyName) + "-changed", function (e) {
                    if (_this.onChangeCallback) {
                        _this.onChangeCallback(e.detail.value);
                    }
                });
        };
        AvlFormControlDirective.prototype.ngOnDestroy = function () {
            if (this.unlistenPropertyChangedEvent) {
                this.unlistenPropertyChangedEvent();
            }
        };
        AvlFormControlDirective.prototype.writeValue = function (value) {
            // Because of a bug in Angular writeValue sometimes gets called with a null before being called with the real value,
            // so the null is discarded.
            // TODO: remove when issue is fixed: https://github.com/angular/angular/issues/14988
            if (!this.writeValueAlreadyCalled && value == null) {
                this.writeValueAlreadyCalled = true;
                return;
            }
            this.renderer.setProperty(this.elementRef.nativeElement, this.valuePropertyName, value);
            this.writeValueAlreadyCalled = true;
        };
        AvlFormControlDirective.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        AvlFormControlDirective.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        AvlFormControlDirective.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
        };
        AvlFormControlDirective.prototype.onBlur = function () {
            if (this.onTouchedCallback) {
                this.onTouchedCallback();
            }
        };
        AvlFormControlDirective.prototype.onFocusedChanged = function (focused) {
            if (!focused && this.onTouchedCallback) {
                this.onTouchedCallback();
            }
        };
        AvlFormControlDirective.prototype.toKebabCase = function (camelCaseString) {
            return camelCaseString.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
        };
        AvlFormControlDirective.prototype.invalidChanged = function (e) {
            this.invalidChange.emit(e.detail.value);
            // Trigger validation
            if (this.onChangeCallback) {
                this.onChangeCallback(this.elementRef.nativeElement[this.valuePropertyName]);
            }
        };
        //#endregion
        //#region Validator
        AvlFormControlDirective.prototype.validate = function (control) {
            var formControl = this.elementRef.nativeElement;
            if (formControl.invalid) {
                return { invalid: formControl.errorMessage };
            }
            else {
                return null;
            }
        };
        var AvlFormControlDirective_1;
        AvlFormControlDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], AvlFormControlDirective.prototype, "readonly", null);
        __decorate([
            core.HostListener('blur'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], AvlFormControlDirective.prototype, "onBlur", null);
        __decorate([
            core.HostListener('focused-changed', ['$event.detail.value']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], AvlFormControlDirective.prototype, "onFocusedChanged", null);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlFormControlDirective.prototype, "invalidChange", void 0);
        __decorate([
            core.HostListener('invalid-changed', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [CustomEvent]),
            __metadata("design:returntype", void 0)
        ], AvlFormControlDirective.prototype, "invalidChanged", null);
        AvlFormControlDirective = AvlFormControlDirective_1 = __decorate([
            core.Directive({
                selector: 'avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input',
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return AvlFormControlDirective_1; }), multi: true },
                    { provide: forms.NG_VALIDATORS, useExisting: core.forwardRef(function () { return AvlFormControlDirective_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], AvlFormControlDirective);
        return AvlFormControlDirective;
    }(AvlInteractionControlDirective));

    var UploadService = /** @class */ (function () {
        function UploadService(httpClient) {
            this.httpClient = httpClient;
        }
        UploadService.prototype.downloadFile = function (url, progressCallback, completeCallback, failCallback) {
            var req = this.httpClient.get(url, { reportProgress: true, responseType: "blob", observe: 'events' })
                .pipe(operators.map(function (event) {
                if (event.type === http.HttpEventType.DownloadProgress) {
                    progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(event);
                }
                if (event.type === http.HttpEventType.Response && event.body != null) {
                    completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback(event.body);
                }
            }), operators.catchError(function (err) {
                var response = err.error instanceof Event ? err.error.target.response : err.error;
                if (failCallback)
                    failCallback({
                        status: err.status,
                        response: response
                    });
                return rxjs.of(null);
            }));
            var subscription = req.subscribe();
            return subscription.unsubscribe.bind(subscription);
        };
        UploadService.prototype.uploadFile = function (file, target, progressCallback, completeCallback, failCallback) {
            var formData = new FormData();
            formData.append('file', file.file);
            var uploadReq = this.httpClient.post(target, formData, { reportProgress: true, observe: 'events' })
                .pipe(operators.map(function (event) {
                if (event.type === http.HttpEventType.UploadProgress) {
                    progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(event);
                }
                if (event.type === http.HttpEventType.Response) {
                    if (event.body != null && event.body.downloadUrl) {
                        completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback(event.body.downloadUrl);
                    }
                    else {
                        completeCallback === null || completeCallback === void 0 ? void 0 : completeCallback();
                    }
                }
            }), operators.catchError(function (err, caught) {
                var response = err.error instanceof Event ? err.error.target.response : err.error;
                if (failCallback)
                    failCallback({
                        status: err.status,
                        response: response
                    });
                return rxjs.of(null);
            }));
            var subscription = uploadReq.subscribe();
            return subscription.unsubscribe.bind(subscription);
        };
        UploadService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        UploadService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], UploadService);
        return UploadService;
    }());

    var AvlStepProgressDirective = /** @class */ (function () {
        function AvlStepProgressDirective(elementRef) {
            this.activeChange = new core.EventEmitter();
            addEventListenerForEmittingChangedEvents(elementRef, 'active-changed', this.activeChange);
        }
        AvlStepProgressDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AvlStepProgressDirective.prototype, "activeChange", void 0);
        AvlStepProgressDirective = __decorate([
            core.Directive({
                selector: 'avl-step-progress'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], AvlStepProgressDirective);
        return AvlStepProgressDirective;
    }());

    var binders = [
        AvlBreadcrumbDirective,
        AvlOverflowMenuDirective,
        AvlSearchBarDirective,
        AvlTextareaDirective,
        AvlDateDirective,
        AvlSideSheetDirective,
        AvlTextfieldDirective,
        AvlTimespanDirective,
        AvlCheckableControlDirective,
        AvlControlDirective,
        AvlFormControlDirective,
        AvlInteractionControlDirective,
        AvlMultiSelectControlDirective,
        AvlSingleSelectControlDirective,
        AvlDropdownDirective,
        AvlTimeDirective,
        AvlListDirective,
        AvlUploadDirective,
        AvlContextMenuDirective,
        AvlNumberfieldDirective,
        AvlCheckboxDirective,
        AvlDatatableDirective,
        AvlComboBoxDirective,
        AvlTabBarDirective,
        AvlSnackbarDirective,
        AvlStepProgressDirective,
        AvlIconButtonDirective,
    ];
    var AvlNgBindersModule = /** @class */ (function () {
        function AvlNgBindersModule() {
        }
        AvlNgBindersModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule
                ],
                declarations: __spread(binders),
                exports: __spread(binders),
                providers: [
                    { provide: UPLOAD_SERVICE, useClass: UploadService }
                ]
            })
        ], AvlNgBindersModule);
        return AvlNgBindersModule;
    }());

    var NgxTranslateTranslationService = /** @class */ (function () {
        function NgxTranslateTranslationService(translateService) {
            this.translateService = translateService;
        }
        Object.defineProperty(NgxTranslateTranslationService.prototype, "language", {
            get: function () {
                return this.translateService.currentLang;
            },
            enumerable: true,
            configurable: true
        });
        NgxTranslateTranslationService.prototype.translate = function (key, interpolateParams) {
            return this.translateService.get(key, interpolateParams).toPromise();
        };
        NgxTranslateTranslationService.ctorParameters = function () { return [
            { type: core$1.TranslateService }
        ]; };
        NgxTranslateTranslationService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [core$1.TranslateService])
        ], NgxTranslateTranslationService);
        return NgxTranslateTranslationService;
    }());

    exports.AvlBreadcrumbDirective = AvlBreadcrumbDirective;
    exports.AvlCheckableControlDirective = AvlCheckableControlDirective;
    exports.AvlCheckboxDirective = AvlCheckboxDirective;
    exports.AvlComboBoxDirective = AvlComboBoxDirective;
    exports.AvlContextMenuDirective = AvlContextMenuDirective;
    exports.AvlControlDirective = AvlControlDirective;
    exports.AvlDatatableDirective = AvlDatatableDirective;
    exports.AvlDateDirective = AvlDateDirective;
    exports.AvlDropdownDirective = AvlDropdownDirective;
    exports.AvlFormControlDirective = AvlFormControlDirective;
    exports.AvlIconButtonDirective = AvlIconButtonDirective;
    exports.AvlInteractionControlDirective = AvlInteractionControlDirective;
    exports.AvlListDirective = AvlListDirective;
    exports.AvlMultiSelectControlDirective = AvlMultiSelectControlDirective;
    exports.AvlNgBindersModule = AvlNgBindersModule;
    exports.AvlNumberfieldDirective = AvlNumberfieldDirective;
    exports.AvlOverflowMenuDirective = AvlOverflowMenuDirective;
    exports.AvlSearchBarDirective = AvlSearchBarDirective;
    exports.AvlSideSheetDirective = AvlSideSheetDirective;
    exports.AvlSingleSelectControlDirective = AvlSingleSelectControlDirective;
    exports.AvlSnackbarDirective = AvlSnackbarDirective;
    exports.AvlTabBarDirective = AvlTabBarDirective;
    exports.AvlTextareaDirective = AvlTextareaDirective;
    exports.AvlTextfieldDirective = AvlTextfieldDirective;
    exports.AvlTimeDirective = AvlTimeDirective;
    exports.AvlTimespanDirective = AvlTimespanDirective;
    exports.AvlUploadDirective = AvlUploadDirective;
    exports.NgxTranslateTranslationService = NgxTranslateTranslationService;
    exports.UPLOAD_SERVICE = UPLOAD_SERVICE;
    exports.UploadService = UploadService;
    exports.ɵa = AvlStepProgressDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=avl-controls-ng-binders.umd.js.map
