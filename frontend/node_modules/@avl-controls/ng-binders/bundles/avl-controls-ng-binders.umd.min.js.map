{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@avl-controls/ng-binders/lib/controls/avl-breadcrumb.directive.ts","ng://@avl-controls/ng-binders/lib/binding-utils.ts","ng://@avl-controls/ng-binders/lib/controls/avl-checkbox.directive.ts","ng://@avl-controls/ng-binders/lib/interface/avl-control.directive.ts","ng://@avl-controls/ng-binders/lib/interface/avl-interaction-control.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-combo-box.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-overflow-menu.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-search-bar.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-textarea.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-date.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-side-sheet.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-textfield.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-timespan.directive.ts","ng://@avl-controls/ng-binders/lib/services/variables.ts","ng://@avl-controls/ng-binders/lib/controls/avl-upload.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-tab-bar.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-dropdown.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-time.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-list.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-context-menu.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-numberfield.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-icon-button.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-datatable.directive.ts","ng://@avl-controls/ng-binders/lib/controls/avl-snackbar.directive.ts","ng://@avl-controls/ng-binders/lib/interface/avl-checkable-control.directive.ts","ng://@avl-controls/ng-binders/lib/interface/avl-multi-select-control.directive.ts","ng://@avl-controls/ng-binders/lib/interface/avl-single-select-control.directive.ts","ng://@avl-controls/ng-binders/lib/interface/avl-form-control.directive.ts","ng://@avl-controls/ng-binders/lib/services/upload.service.ts","ng://@avl-controls/ng-binders/lib/controls/avl-step-progress.directive.ts","ng://@avl-controls/ng-binders/lib/avl-ng-binders.module.ts","ng://@avl-controls/ng-binders/lib/services/ngx-translate-translation.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","push","__read","o","m","ar","error","__spread","concat","AvlBreadcrumbDirective","itemClicked","EventEmitter","itemClickedListener","emit","detail","item","Output","HostListener","CustomEvent","Directive","selector","addEventListenerForEmittingChangedEvents","elementRef","polymerEventName","angularEventEmmiter","nativeElement","addEventListener","AvlCheckboxDirective","indeterminateChange","ElementRef","AvlControlDirective","disabledChange","AvlInteractionControlDirective","_this","_super","focusedChange","AvlComboBoxDirective","renderer","invalidChange","valueChange","readonly","valueChanged","onChangeCallback","isAllowNewValues","selectedValueChanged","writeValue","property","setProperty","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","allowNewValues","validate","control","formControl","invalid","errorMessage","Renderer2","Input","AvlComboBoxDirective_1","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","AvlOverflowMenuDirective","AvlSearchBarDirective","queryChange","openChange","AvlTextareaDirective","AvlDateDirective","AvlSideSheetDirective","AvlTextfieldDirective","AvlTimespanDirective","UPLOAD_SERVICE","InjectionToken","AvlUploadDirective","element","uploadService","uploadComplete","uploadAbort","uploadFail","uploadStart","filesChanged","fileRejected","menuItemClicked","paramIndex","decorator","ngOnInit","uploadCompleteHandler","uploadCanceledHandler","uploadStartedHandler","uploadFailedHandler","filesChangedHandler","fileRejectedHandler","menuItemClickedHandler","Inject","args","AvlTabBarDirective","el","selectedIndexChange","selectedValueChange","tabBar","setEventListeners","event","setTab","index","tabs","prop","notifyPath","AvlDropdownDirective","openChanged","AvlTimeDirective","AvlListDirective","overflowMenuItemClicked","rightCheckboxChanged","activeRowChanged","rowReordered","isMulti","selectedValuesChanged","overflowMenuItemClickListener","rightCheckboxChangeListener","activatedRowChangeListener","rowReorderedListener","AvlListDirective_1","AvlContextMenuDirective","AvlNumberfieldDirective","AvlIconButtonDirective","badgeChange","badgeValueChange","AvlDatatableDirective","buttonClick","overflowMenuItemClick","linkClick","pageSizeChange","selectedPageChange","buttonClickListener","linkClickListener","AvlSnackbarDirective","buttonClicked","displayedChange","buttonClickedHandler","displayedChangeHandler","AvlCheckableControlDirective","checkedChange","AvlMultiSelectControlDirective","selectedIndexesChange","selectedValuesChange","AvlSingleSelectControlDirective","valuePropertyNameMap","avl-checkbox","avl-date","avl-dropdown","avl-time","avl-numberfield","avl-radio-group","avl-slider","avl-textarea","avl-textfield","avl-timespan","avl-chip-list","avl-chip-input","avl-upload","avl-search-bar","avl-icon-toggle","avl-switch","AvlFormControlDirective","writeValueAlreadyCalled","controlTag","tagName","toLowerCase","valuePropertyName","unlistenPropertyChangedEvent","listen","toKebabCase","ngOnDestroy","onTouchedCallback","onBlur","onFocusedChanged","focused","camelCaseString","replace","invalidChanged","AvlFormControlDirective_1","UploadService","httpClient","downloadFile","url","get","responseType","toPromise","uploadFile","file","progressCallback","completeCallback","failCallback","formData","FormData","append","subscription","post","reportProgress","observe","pipe","map","type","HttpEventType","UploadProgress","Response","downloadUrl","catchError","err","caught","response","Event","status","Observable","subscribe","unsubscribe","bind","HttpClient","Injectable","AvlStepProgressDirective","activeChange","binders","AvlNgBindersModule","NgModule","imports","CommonModule","FormsModule","declarations","exports","useClass","NgxTranslateTranslationService","translateService","currentLang","translate","interpolateParams","TranslateService"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'avl-breadcrumb'\r\n})\r\nexport class AvlBreadcrumbDirective {\r\n  @Output() itemClicked: EventEmitter<any> = new EventEmitter();\r\n\r\n  @HostListener('item-clicked', ['$event'])\r\n  itemClickedListener(e: CustomEvent) {\r\n    this.itemClicked.emit(e.detail.item);\r\n  }\r\n}\r\n  ","import { ElementRef, EventEmitter } from '@angular/core';\r\n\r\n/**\r\n * Maps Polymer 'changed' events to Angular 'change' events so it can be used in 2-way binding.\r\n * HostListener can't be used because when a polymer control has a default value polymer will emit a changed event\r\n * which will overwrite the value in the bound angular variable. So the event listener is added after the constructor\r\n * so the default value changed event will be skipped.\r\n * TODO: There is still a problem if the bound variable is not set. If the default changed event is skipped the variable\r\n * will not get the default value so the control and the variable will have missmatching values.\r\n */\r\nexport async function addEventListenerForEmittingChangedEvents<TEvent>(elementRef: ElementRef, polymerEventName: string,\r\n  angularEventEmmiter: EventEmitter<TEvent>) {\r\n  Promise.resolve().then(() =>{\r\n    const nativeElement = elementRef.nativeElement as HTMLElement;\r\n    return nativeElement.addEventListener(polymerEventName, (e: CustomEvent) => {\r\n      angularEventEmmiter.emit(e.detail.value);\r\n    });\r\n  })\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-checkbox'\r\n})\r\nexport class AvlCheckboxDirective {\r\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'indeterminate-changed', this.indeterminateChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n/** Directive for controls implementing [AvlControl]. */\r\n@Directive({\r\n  selector: 'avl-breadcrumb,avl-context-menu,avl-header-bar,avl-menu-button,avl-user-info'\r\n})\r\nexport class AvlControlDirective {\r\n  @Output() disabledChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'disabled-changed', this.disabledChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\nimport { AvlControlDirective } from './avl-control.directive';\r\n\r\n/** Directive for controls implementing [AvlInteractionControl]. */\r\n@Directive({\r\n  selector: 'avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar'\r\n})\r\nexport class AvlInteractionControlDirective extends AvlControlDirective {\r\n  @Output() focusedChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    super(elementRef);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'focused-changed', this.focusedChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Output, Renderer2, Input } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\r\nimport { AvlFormControl } from '@avl-controls/interfaces';\r\nimport { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n@Directive({\r\n  selector: 'avl-combo-box',\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlComboBoxDirective), multi: true },\r\n  { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlComboBoxDirective), multi: true }]\r\n})\r\nexport class AvlComboBoxDirective extends AvlInteractionControlDirective implements ControlValueAccessor, Validator {\r\n  @Output() invalidChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private onChangeCallback: (value: any) => void;\r\n\r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {\r\n    super(elementRef);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', this.focusedChange);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);\r\n  }\r\n\r\n  // Angular writes readonly attributes to a readOnly property,\r\n  // because that's how it's called on the native input element.\r\n  @Input()\r\n  public set readonly(value: boolean) {\r\n    this.elementRef.nativeElement.readonly = value;\r\n  }\r\n\r\n  @HostListener('value-changed', ['$event'])\r\n  valueChanged(e: CustomEvent) {\r\n    if (this.onChangeCallback && this.isAllowNewValues()) {\r\n      this.onChangeCallback(e.detail.value);\r\n    }\r\n  }\r\n\r\n  @HostListener('selected-value-changed', ['$event'])\r\n  selectedValueChanged(e: CustomEvent) {\r\n    if (this.onChangeCallback && !this.isAllowNewValues()) {\r\n      this.onChangeCallback(e.detail.value);\r\n    }\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    const property = this.isAllowNewValues() ? 'value' : 'selectedValue';\r\n    this.renderer.setProperty(this.elementRef.nativeElement, property, value);\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  // Since avl-combo-box doesn't have validate-on-leave, there's no touching\r\n  registerOnTouched(fn: any) { }\r\n\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n\r\n  private isAllowNewValues(): boolean {\r\n    return (this.elementRef.nativeElement && this.elementRef.nativeElement.allowNewValues === true);\r\n  }\r\n\r\n  //#region Validator\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    const formControl = this.elementRef.nativeElement as AvlFormControl;\r\n    if (formControl.invalid) {\r\n      return { invalid: formControl.errorMessage };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  //#endregion\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n@Directive({\r\n  selector: 'avl-overflow-menu'\r\n})\r\nexport class AvlOverflowMenuDirective {\r\n  @Output() itemClicked: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'item-clicked', this.itemClicked);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n@Directive({\r\n  selector: 'avl-search-bar'\r\n})\r\nexport class AvlSearchBarDirective {\r\n  @Output() queryChange: EventEmitter<string> = new EventEmitter();\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'query-changed', this.queryChange);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'open-changed', this.openChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-textarea'\r\n})\r\nexport class AvlTextareaDirective {\r\n  @Output() valueChange: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Output, ElementRef } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-date'\r\n})\r\nexport class AvlDateDirective {\r\n  @Output() valueChange: EventEmitter<Date | undefined> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-side-sheet'\r\n})\r\nexport class AvlSideSheetDirective {\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'open-changed', this.openChange);\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Output, ElementRef } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-textfield'\r\n})\r\nexport class AvlTextfieldDirective {\r\n  @Output() valueChange: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-timespan'\r\n})\r\nexport class AvlTimespanDirective {\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);\r\n  }\r\n}\r\n","import { AvlUploadService } from '@avl-controls/interfaces';\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport const UPLOAD_SERVICE = new InjectionToken<AvlUploadService>('UPLOAD_SERVICE');","import { Directive, ElementRef, OnInit, HostListener, Output, EventEmitter, Inject } from '@angular/core';\r\nimport { AvlFile, AvlUploadService } from '@avl-controls/interfaces';\r\nimport { UPLOAD_SERVICE } from '../services/variables';\r\n\r\n@Directive({\r\n  selector: 'avl-upload',\r\n})\r\nexport class AvlUploadDirective implements OnInit {\r\n  @Output() uploadComplete: EventEmitter<AvlFile> = new EventEmitter();\r\n  @Output() uploadAbort: EventEmitter<AvlFile> = new EventEmitter();\r\n  @Output() uploadFail: EventEmitter<any> = new EventEmitter();\r\n  @Output() uploadStart: EventEmitter<AvlFile> = new EventEmitter();\r\n  @Output() filesChanged: EventEmitter<AvlFile[]> = new EventEmitter();\r\n  @Output() fileRejected: EventEmitter<AvlFile> = new EventEmitter();\r\n  @Output() menuItemClicked: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(private element: ElementRef, @Inject(UPLOAD_SERVICE) private uploadService: AvlUploadService) {}\r\n\r\n  ngOnInit() {\r\n    const element = <any>this.element.nativeElement;\r\n    element.uploadService = this.uploadService;\r\n  }\r\n\r\n  @HostListener('upload-complete', ['$event'])\r\n  uploadCompleteHandler(e: CustomEvent) {\r\n    this.uploadComplete.emit(e.detail.value);\r\n  }\r\n\r\n  @HostListener('upload-abort', ['$event'])\r\n  uploadCanceledHandler(e: CustomEvent) {\r\n    this.uploadAbort.emit(e.detail.value);\r\n  }\r\n\r\n  @HostListener('upload-start', ['$event'])\r\n  uploadStartedHandler(e: CustomEvent) {\r\n    this.uploadStart.emit(e.detail.value);\r\n  }\r\n\r\n  @HostListener('upload-fail', ['$event'])\r\n  uploadFailedHandler(e: CustomEvent) {\r\n    this.uploadFail.emit(e.detail);\r\n  }\r\n\r\n  @HostListener('files-changed', ['$event'])\r\n  filesChangedHandler(e: CustomEvent) {\r\n    this.filesChanged.emit(e.detail.value);\r\n  }\r\n\r\n  @HostListener('file-rejected', ['$event'])\r\n  fileRejectedHandler(e: CustomEvent) {\r\n    this.fileRejected.emit(e.detail.value);\r\n  }\r\n\r\n  @HostListener('menu-item-clicked', ['$event'])\r\n  menuItemClickedHandler(e: CustomEvent) {\r\n    this.menuItemClicked.emit(e.detail);\r\n  }\r\n}\r\n","import { Directive, ElementRef, Output, EventEmitter } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'avl-tab-bar',\r\n})\r\nexport class AvlTabBarDirective {\r\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\r\n  @Output() selectedValueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private tabBar: any;\r\n\r\n  private async setEventListeners(el: any) {\r\n    el.addEventListener('selected-value-changed', (event) => {\r\n      Promise.resolve().then(() => {\r\n        this.selectedValueChange.emit(event.detail.value);\r\n      });\r\n    });\r\n    el.addEventListener('selected-index-changed', (event) => {\r\n      Promise.resolve().then(() => {\r\n        this.selectedIndexChange.emit(event.detail.value);\r\n      });\r\n    });\r\n  }\r\n\r\n  constructor(private el: ElementRef) {\r\n    this.tabBar = this.el.nativeElement;\r\n    Promise.resolve().then(() => {\r\n      this.setEventListeners(el.nativeElement);\r\n    });\r\n  }\r\n\r\n  setTab(index: number, value: { label: string, disabled?: boolean, [key: string]: any }) {\r\n    const tabs = this.tabBar.tabs;\r\n    for (const prop in value) {\r\n      if (value.hasOwnProperty(prop)) {\r\n        tabs[index][prop] = value[prop];\r\n        this.tabBar.notifyPath(`tabs.${index}.${prop}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n@Directive({\r\n  selector: 'avl-dropdown'\r\n})\r\nexport class AvlDropdownDirective {\r\n  @Output() openChanged: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'open-changed', this.openChanged);\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Output, ElementRef } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-time'\r\n})\r\nexport class AvlTimeDirective {\r\n  @Output() valueChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Output, Renderer2, Input } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\r\nimport { AvlFormControl } from '@avl-controls/interfaces';\r\nimport { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n@Directive({\r\n  selector: 'avl-list',\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlListDirective), multi: true },\r\n  { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlListDirective), multi: true }]\r\n})\r\nexport class AvlListDirective extends AvlInteractionControlDirective implements ControlValueAccessor, Validator {\r\n  @Output() invalidChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() overflowMenuItemClicked: EventEmitter<any> = new EventEmitter();\r\n  @Output() rightCheckboxChanged: EventEmitter<any> = new EventEmitter();\r\n  @Output() activeRowChanged: EventEmitter<any> = new EventEmitter();\r\n  @Output() rowReordered: EventEmitter<any> = new EventEmitter();\r\n\r\n  // Angular writes readonly attributes to a readOnly property,\r\n  // because that's how it's called on the native input element.\r\n  @Input()\r\n  public set readonly(value: boolean) {\r\n    this.elementRef.nativeElement.readonly = value;\r\n  }\r\n\r\n  private onChangeCallback: (value: any) => void;\r\n\r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {\r\n    super(elementRef);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', this.focusedChange);\r\n  }\r\n\r\n  @HostListener('selected-value-changed', ['$event'])\r\n  selectedValueChanged(e: CustomEvent) {\r\n    if (this.onChangeCallback && !this.isMulti()) {\r\n      this.onChangeCallback(e.detail.value);\r\n    }\r\n  }\r\n\r\n  @HostListener('selected-values-changed', ['$event'])\r\n  selectedValuesChanged(e: CustomEvent) {\r\n    if (this.onChangeCallback && this.isMulti()) {\r\n      this.onChangeCallback(e.detail.value);\r\n    }\r\n  }\r\n\r\n  @HostListener('overflow-menu-item-clicked', ['$event'])\r\n  overflowMenuItemClickListener(e: CustomEvent) {\r\n    this.overflowMenuItemClicked.emit(e.detail);\r\n  }\r\n\r\n  @HostListener('right-checkbox-changed', ['$event'])\r\n  rightCheckboxChangeListener(e: CustomEvent) {\r\n    this.rightCheckboxChanged.emit(e.detail);\r\n  }\r\n\r\n  @HostListener('active-row-changed', ['$event'])\r\n  activatedRowChangeListener(e: CustomEvent) {\r\n    this.activeRowChanged.emit(e.detail.value);\r\n  }\r\n\r\n  @HostListener('row-reordered', ['$event'])\r\n  rowReorderedListener(e: CustomEvent) {\r\n    this.rowReordered.emit(e.detail);\r\n  }\r\n\r\n\r\n  writeValue(value: any) {\r\n    const property = this.isMulti() ? 'selectedValues' : 'selectedValue';\r\n    this.renderer.setProperty(this.elementRef.nativeElement, property, value);\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  // Since avl-list doesn't have validate-on-leave, there's no touching\r\n  registerOnTouched(fn: any) { }\r\n\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n\r\n  private isMulti(): boolean {\r\n    return (this.elementRef.nativeElement && this.elementRef.nativeElement.multi === true);\r\n  }\r\n\r\n  //#region Validator\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    const formControl = this.elementRef.nativeElement as AvlFormControl;\r\n    if (formControl.invalid) {\r\n      return { invalid: formControl.errorMessage };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  //#endregion\r\n}\r\n","import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'avl-context-menu'\r\n})\r\nexport class AvlContextMenuDirective {\r\n  @Output() itemClicked: EventEmitter<any> = new EventEmitter();\r\n\r\n  @HostListener('item-clicked', ['$event'])\r\n  itemClickedListener(e: CustomEvent) {\r\n    this.itemClicked.emit(e.detail.value);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-numberfield'\r\n})\r\nexport class AvlNumberfieldDirective {\r\n  @Output() valueChange: EventEmitter<string[]> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-icon-button'\r\n})\r\nexport class AvlIconButtonDirective {\r\n  @Output() badgeChange: EventEmitter<boolean> = new EventEmitter();\r\n  @Output() badgeValueChange: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'badge-changed', this.badgeChange);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'badge-value-changed', this.badgeValueChange);\r\n  }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Output, ElementRef } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n@Directive({\r\n  selector: 'avl-datatable'\r\n})\r\nexport class AvlDatatableDirective {\r\n  @Output() buttonClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() overflowMenuItemClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() linkClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() pageSizeChange: EventEmitter<number> = new EventEmitter();\r\n  @Output() selectedPageChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'page-size-changed', this.pageSizeChange);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'selected-page-changed', this.selectedPageChange);\r\n  }\r\n\r\n  @HostListener('button-click', ['$event'])\r\n  buttonClickListener(e: CustomEvent) {\r\n    this.buttonClick.emit(e.detail);\r\n  }\r\n\r\n  @HostListener('overflow-menu-item-click', ['$event'])\r\n  overflowMenuItemClickListener(e: CustomEvent) {\r\n    this.overflowMenuItemClick.emit(e.detail);\r\n  }\r\n\r\n  @HostListener('link-click', ['$event'])\r\n  linkClickListener(e: CustomEvent) {\r\n    this.linkClick.emit(e.detail);\r\n  }\r\n}\r\n","import { Directive, EventEmitter, Output, HostListener } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n@Directive({\r\n  selector: 'avl-snackbar'\r\n})\r\nexport class AvlSnackbarDirective {\r\n  @Output() buttonClicked: EventEmitter<boolean> = new EventEmitter();\r\n  @Output() displayedChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  @HostListener('button-clicked', ['$event'])\r\n  buttonClickedHandler(e: CustomEvent) {\r\n    this.buttonClicked.emit(e.detail.value);\r\n  }\r\n\r\n  @HostListener('displayed-changed', ['$event'])\r\n  displayedChangeHandler(e: CustomEvent) {\r\n    this.displayedChange.emit(e.detail.value);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n/** Directive for controls implementing [AvlCheckableControl]. */\r\n@Directive({\r\n  selector: 'avl-checkbox,avl-radio-button, avl-icon-toggle, avl-switch'\r\n})\r\nexport class AvlCheckableControlDirective {\r\n  @Output() checkedChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'checked-changed', this.checkedChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n/** Directive for controls implementing [AvlMultiSelectControl]. */\r\n@Directive({\r\n  selector: 'avl-datatable,avl-list,avl-chip-list, avl-chip-input'\r\n})\r\nexport class AvlMultiSelectControlDirective {\r\n  @Output() selectedIndexesChange: EventEmitter<Array<number>> = new EventEmitter();\r\n  @Output() selectedValuesChange: EventEmitter<Array<any>> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'selected-indexes-changed', this.selectedIndexesChange);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'selected-values-changed', this.selectedValuesChange);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n/** Directive for controls implementing [AvlSingleSelectControl]. */\r\n@Directive({\r\n  selector: 'avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box'\r\n})\r\nexport class AvlSingleSelectControlDirective {\r\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\r\n  @Output() selectedValueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'selected-index-changed', this.selectedIndexChange);\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'selected-value-changed', this.selectedValueChange);\r\n  }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Output, OnInit, OnDestroy, ElementRef, Renderer2, forwardRef, Input } from '@angular/core';\r\nimport { AvlInteractionControlDirective } from './avl-interaction-control.directive';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\nimport { AvlFormControl } from '@avl-controls/interfaces';\r\n\r\n// Defines which property is used as the 'value' for the ControlValueAccessor\r\nconst valuePropertyNameMap = {\r\n  // TODO: is there a nameof function is typescript?\r\n  'avl-checkbox': 'checked',\r\n  'avl-date': 'value',\r\n  'avl-dropdown': 'selectedValue',\r\n  'avl-time': 'value',\r\n  'avl-numberfield': 'value',\r\n  'avl-radio-group': 'selectedValue',\r\n  'avl-slider': 'value',\r\n  'avl-textarea': 'value',\r\n  'avl-textfield': 'value',\r\n  'avl-timespan': 'value',\r\n  'avl-chip-list' : 'selectedValue',\r\n  'avl-chip-input': 'selectedValues',\r\n  'avl-upload': 'files',\r\n  'avl-search-bar': 'query',\r\n  'avl-icon-toggle': 'checked',\r\n  'avl-switch': 'checked'\r\n};\r\n\r\n/** Directive for controls implementing [AvlFormControl]. */\r\n@Directive({\r\n  selector: 'avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input',\r\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlFormControlDirective), multi: true },\r\n  { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlFormControlDirective), multi: true }]\r\n})\r\nexport class AvlFormControlDirective extends AvlInteractionControlDirective implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n  //#region ControlValueAccessor\r\n  private valuePropertyName;\r\n  private onTouchedCallback: () => {};\r\n  private onChangeCallback: (value: any) => void;\r\n\r\n  private unlistenPropertyChangedEvent: () => void;\r\n\r\n  private writeValueAlreadyCalled = false;\r\n\r\n  // Angular writes readonly attributes to a readOnly property,\r\n  // because that's how it's called on the native input element.\r\n  @Input()\r\n  public set readonly(value: any) {\r\n    if (typeof value === 'boolean') {\r\n      this.elementRef.nativeElement.readonly = value;\r\n    } else {\r\n      this.elementRef.nativeElement.readonly = value != null;\r\n    }\r\n  }\r\n\r\n  constructor(protected elementRef: ElementRef, private renderer: Renderer2) {\r\n    super(elementRef);\r\n    const controlTag = (this.elementRef.nativeElement as HTMLElement).tagName.toLowerCase();\r\n    this.valuePropertyName = valuePropertyNameMap[controlTag];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.unlistenPropertyChangedEvent =\r\n      this.renderer.listen(this.elementRef.nativeElement, `${this.toKebabCase(this.valuePropertyName)}-changed`, (e: CustomEvent) => {\r\n        if (this.onChangeCallback) {\r\n          this.onChangeCallback(e.detail.value);\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.unlistenPropertyChangedEvent) {\r\n      this.unlistenPropertyChangedEvent();\r\n    }\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    // Because of a bug in Angular writeValue sometimes gets called with a null before being called with the real value,\r\n    // so the null is discarded.\r\n    // TODO: remove when issue is fixed: https://github.com/angular/angular/issues/14988\r\n    if (!this.writeValueAlreadyCalled && value == null) {\r\n      this.writeValueAlreadyCalled = true;\r\n      return;\r\n    }\r\n    this.renderer.setProperty(this.elementRef.nativeElement, this.valuePropertyName, value);\r\n    this.writeValueAlreadyCalled = true;\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.onTouchedCallback) {\r\n      this.onTouchedCallback();\r\n    }\r\n  }\r\n\r\n  @HostListener('focused-changed', ['$event.detail.value'])\r\n  onFocusedChanged(focused) {\r\n    if (!focused && this.onTouchedCallback) {\r\n      this.onTouchedCallback();\r\n    }\r\n  }\r\n\r\n  private toKebabCase(camelCaseString: string): string {\r\n    return camelCaseString.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n  }\r\n  //#endregion\r\n\r\n  //#region AvlFormControl\r\n  // tslint:disable-next-line:member-ordering\r\n  @Output() invalidChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @HostListener('invalid-changed', ['$event'])\r\n  invalidChanged(e: CustomEvent) {\r\n    this.invalidChange.emit(e.detail.value);\r\n    // Trigger validation\r\n    if (this.onChangeCallback) {\r\n      this.onChangeCallback(this.elementRef.nativeElement[this.valuePropertyName]);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region Validator\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    const formControl = this.elementRef.nativeElement as AvlFormControl;\r\n    if (formControl.invalid) {\r\n      return { invalid: formControl.errorMessage };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  //#endregion\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';\r\nimport { AvlUploadService, AvlFile, AvlAbortUploadAction, AvlUploadProgressEvent, AvlHttpErrorResponse } from '@avl-controls/interfaces';\r\n\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class UploadService implements AvlUploadService {\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  downloadFile(url: string): Promise<Blob> {\r\n    return this.httpClient.get(url, { responseType: \"blob\" }).toPromise();\r\n  }\r\n\r\n  uploadFile(file: AvlFile, target: string, progressCallback?: (progress: AvlUploadProgressEvent) => void, completeCallback?: (downloadUrl?: string) => void, failCallback?: (errorResponse: AvlHttpErrorResponse) => void)\r\n  : AvlAbortUploadAction {\r\n    const formData = new FormData();\r\n    formData.append('file', file.file);\r\n    const uploadReq: Observable<any> = this.httpClient.post<{downloadUrl?: string}>(target, formData, { reportProgress: true, observe: 'events' } )\r\n      .pipe(map(event => {\r\n        if(event.type === HttpEventType.UploadProgress && progressCallback) {\r\n          progressCallback(event);\r\n        }\r\n        if(event.type === HttpEventType.Response) {\r\n          if(completeCallback && event.body != null && event.body.downloadUrl) {\r\n            completeCallback(event.body.downloadUrl);\r\n          }\r\n          else if(completeCallback) completeCallback();\r\n        }\r\n      }), catchError( (err: HttpErrorResponse, caught) => {\r\n        const response = err.error instanceof Event ? (<XMLHttpRequest>err.error.target).response : err.error;\r\n        if(failCallback) failCallback({\r\n          status: err.status,\r\n          response: response\r\n        });\r\n        return new Observable(null);\r\n      }));\r\n      const subscription = uploadReq.subscribe();\r\n      return subscription.unsubscribe.bind(subscription);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { addEventListenerForEmittingChangedEvents } from '../binding-utils';\r\n\r\n\r\n@Directive({\r\n  selector: 'avl-step-progress'\r\n})\r\nexport class AvlStepProgressDirective {\r\n  @Output() activeChange: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    addEventListenerForEmittingChangedEvents(elementRef, 'active-changed', this.activeChange);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AvlContextMenuDirective } from './controls/avl-context-menu.directive';\r\nimport { AvlDateDirective } from './controls/avl-date.directive';\r\nimport { AvlDropdownDirective } from './controls/avl-dropdown.directive';\r\nimport { AvlListDirective } from './controls/avl-list.directive';\r\nimport { AvlOverflowMenuDirective } from './controls/avl-overflow-menu.directive';\r\nimport { AvlSearchBarDirective } from './controls/avl-search-bar.directive';\r\nimport { AvlTextareaDirective } from './controls/avl-textarea.directive';\r\nimport { AvlSideSheetDirective} from './controls/avl-side-sheet.directive';\r\nimport { AvlTimeDirective} from './controls/avl-time.directive';\r\nimport { AvlTextfieldDirective } from './controls/avl-textfield.directive';\r\nimport { AvlTimespanDirective } from './controls/avl-timespan.directive';\r\nimport { AvlUploadDirective } from './controls/avl-upload.directive';\r\nimport { AvlCheckableControlDirective } from './interface/avl-checkable-control.directive';\r\nimport { AvlControlDirective } from './interface/avl-control.directive';\r\nimport { AvlFormControlDirective } from './interface/avl-form-control.directive';\r\nimport { AvlInteractionControlDirective } from './interface/avl-interaction-control.directive';\r\nimport { AvlMultiSelectControlDirective } from './interface/avl-multi-select-control.directive';\r\nimport { AvlSingleSelectControlDirective } from './interface/avl-single-select-control.directive';\r\nimport { AvlNumberfieldDirective } from './controls/avl-numberfield.directive';\r\nimport { AvlIconButtonDirective } from './controls/avl-icon-button.directive';\r\nimport { AvlCheckboxDirective } from './controls/avl-checkbox.directive';\r\nimport { AvlDatatableDirective } from './controls/avl-datatable.directive';\r\nimport { AvlComboBoxDirective } from './controls/avl-combo-box.directive';\r\nimport { AvlBreadcrumbDirective } from './controls/avl-breadcrumb.directive';\r\nimport { UPLOAD_SERVICE } from './services/variables';\r\nimport { UploadService } from './services/upload.service';\r\nimport { AvlTabBarDirective } from './controls/avl-tab-bar.directive';\r\nimport { AvlSnackbarDirective } from './controls/avl-snackbar.directive';\r\nimport { AvlStepProgressDirective } from './controls/avl-step-progress.directive';\r\n\r\nconst binders = [\r\n  AvlBreadcrumbDirective,\r\n  AvlOverflowMenuDirective,\r\n  AvlSearchBarDirective,\r\n  AvlTextareaDirective,\r\n  AvlDateDirective,\r\n  AvlSideSheetDirective,\r\n  AvlTextfieldDirective,\r\n  AvlTimespanDirective,\r\n  AvlCheckableControlDirective,\r\n  AvlControlDirective,\r\n  AvlFormControlDirective,\r\n  AvlInteractionControlDirective,\r\n  AvlMultiSelectControlDirective,\r\n  AvlSingleSelectControlDirective,\r\n  AvlDropdownDirective,\r\n  AvlTimeDirective,\r\n  AvlListDirective,\r\n  AvlUploadDirective,\r\n  AvlContextMenuDirective,\r\n  AvlNumberfieldDirective,\r\n  AvlCheckboxDirective,\r\n  AvlDatatableDirective,\r\n  AvlComboBoxDirective,\r\n  AvlTabBarDirective,\r\n  AvlSnackbarDirective,\r\n  AvlStepProgressDirective,\r\n  AvlIconButtonDirective,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    ...binders\r\n  ],\r\n  exports: [\r\n    ...binders\r\n  ],\r\n  providers: [\r\n    { provide: UPLOAD_SERVICE, useClass: UploadService }\r\n  ]\r\n})\r\nexport class AvlNgBindersModule { }\r\n","import { AvlTranslationService } from '@avl-controls/interfaces/src/avl-translation-service';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable()\r\nexport class NgxTranslateTranslationService implements AvlTranslationService {\r\n\r\n  public get language(): string {\r\n    return this.translateService.currentLang;\r\n  }\r\n\r\n  constructor(private translateService: TranslateService) { }\r\n\r\n  public translate(key: string, interpolateParams?: object): Promise<string> {\r\n    return this.translateService.get(key, interpolateParams).toPromise();\r\n  }\r\n}\r\n"]}