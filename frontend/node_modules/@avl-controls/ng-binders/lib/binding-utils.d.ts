import { ElementRef, EventEmitter } from '@angular/core';
/**
 * Maps Polymer 'changed' events to Angular 'change' events so it can be used in 2-way binding.
 * HostListener can't be used because when a polymer control has a default value polymer will emit a changed event
 * which will overwrite the value in the bound angular variable. So the event listener is added after the constructor
 * so the default value changed event will be skipped.
 * TODO: There is still a problem if the bound variable is not set. If the default changed event is skipped the variable
 * will not get the default value so the control and the variable will have missmatching values.
 */
export declare function addEventListenerForEmittingChangedEvents<TEvent>(elementRef: ElementRef, polymerEventName: string, angularEventEmmiter: EventEmitter<TEvent>): Promise<void>;
