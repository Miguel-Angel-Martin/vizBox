import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';
import * as ɵngcc0 from '@angular/core';
export declare class AvlComboBoxDirective extends AvlInteractionControlDirective implements ControlValueAccessor, Validator {
    private elementRef;
    private renderer;
    invalidChange: EventEmitter<any>;
    valueChange: EventEmitter<any>;
    private onChangeCallback;
    constructor(elementRef: ElementRef, renderer: Renderer2);
    set readonly(value: boolean);
    valueChanged(e: CustomEvent): void;
    selectedValueChanged(e: CustomEvent): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private isAllowNewValues;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlComboBoxDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AvlComboBoxDirective, "avl-combo-box", never, { "readonly": "readonly"; }, { "invalidChange": "invalidChange"; "valueChange": "valueChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWNvbWJvLWJveC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYXZsLWNvbWJvLWJveC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBBdmxJbnRlcmFjdGlvbkNvbnRyb2xEaXJlY3RpdmUgfSBmcm9tICcuLi9pbnRlcmZhY2UvYXZsLWludGVyYWN0aW9uLWNvbnRyb2wuZGlyZWN0aXZlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXZsQ29tYm9Cb3hEaXJlY3RpdmUgZXh0ZW5kcyBBdmxJbnRlcmFjdGlvbkNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI7XHJcbiAgICBpbnZhbGlkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjaztcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xyXG4gICAgc2V0IHJlYWRvbmx5KHZhbHVlOiBib29sZWFuKTtcclxuICAgIHZhbHVlQ2hhbmdlZChlOiBDdXN0b21FdmVudCk6IHZvaWQ7XHJcbiAgICBzZWxlY3RlZFZhbHVlQ2hhbmdlZChlOiBDdXN0b21FdmVudCk6IHZvaWQ7XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XHJcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBpc0FsbG93TmV3VmFsdWVzO1xyXG4gICAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGw7XHJcbn1cclxuIl19