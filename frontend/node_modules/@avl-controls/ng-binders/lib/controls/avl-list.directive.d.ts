import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';
import * as ɵngcc0 from '@angular/core';
export declare class AvlListDirective extends AvlInteractionControlDirective implements ControlValueAccessor, Validator {
    private elementRef;
    private renderer;
    invalidChange: EventEmitter<any>;
    overflowMenuItemClicked: EventEmitter<any>;
    rightCheckboxChanged: EventEmitter<any>;
    activeRowChanged: EventEmitter<any>;
    rowReordered: EventEmitter<any>;
    set readonly(value: boolean);
    private onChangeCallback;
    constructor(elementRef: ElementRef, renderer: Renderer2);
    selectedValueChanged(e: CustomEvent): void;
    selectedValuesChanged(e: CustomEvent): void;
    overflowMenuItemClickListener(e: CustomEvent): void;
    rightCheckboxChangeListener(e: CustomEvent): void;
    activatedRowChangeListener(e: CustomEvent): void;
    rowReorderedListener(e: CustomEvent): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private isMulti;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlListDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AvlListDirective, "avl-list", never, { "readonly": "readonly"; }, { "invalidChange": "invalidChange"; "overflowMenuItemClicked": "overflowMenuItemClicked"; "rightCheckboxChanged": "rightCheckboxChanged"; "activeRowChanged": "activeRowChanged"; "rowReordered": "rowReordered"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWxpc3QuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImF2bC1saXN0LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQXZsSW50ZXJhY3Rpb25Db250cm9sRGlyZWN0aXZlIH0gZnJvbSAnLi4vaW50ZXJmYWNlL2F2bC1pbnRlcmFjdGlvbi1jb250cm9sLmRpcmVjdGl2ZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2bExpc3REaXJlY3RpdmUgZXh0ZW5kcyBBdmxJbnRlcmFjdGlvbkNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI7XHJcbiAgICBpbnZhbGlkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIG92ZXJmbG93TWVudUl0ZW1DbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHJpZ2h0Q2hlY2tib3hDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGFjdGl2ZVJvd0NoYW5nZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgcm93UmVvcmRlcmVkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcclxuICAgIHNlbGVjdGVkVmFsdWVDaGFuZ2VkKGU6IEN1c3RvbUV2ZW50KTogdm9pZDtcclxuICAgIHNlbGVjdGVkVmFsdWVzQ2hhbmdlZChlOiBDdXN0b21FdmVudCk6IHZvaWQ7XHJcbiAgICBvdmVyZmxvd01lbnVJdGVtQ2xpY2tMaXN0ZW5lcihlOiBDdXN0b21FdmVudCk6IHZvaWQ7XHJcbiAgICByaWdodENoZWNrYm94Q2hhbmdlTGlzdGVuZXIoZTogQ3VzdG9tRXZlbnQpOiB2b2lkO1xyXG4gICAgYWN0aXZhdGVkUm93Q2hhbmdlTGlzdGVuZXIoZTogQ3VzdG9tRXZlbnQpOiB2b2lkO1xyXG4gICAgcm93UmVvcmRlcmVkTGlzdGVuZXIoZTogQ3VzdG9tRXZlbnQpOiB2b2lkO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcclxuICAgIHByaXZhdGUgaXNNdWx0aTtcclxuICAgIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsO1xyXG59XHJcbiJdfQ==