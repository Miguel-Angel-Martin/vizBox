import { EventEmitter, OnInit, OnDestroy, ElementRef, Renderer2 } from '@angular/core';
import { AvlInteractionControlDirective } from './avl-interaction-control.directive';
import { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';
/** Directive for controls implementing [AvlFormControl]. */
import * as ɵngcc0 from '@angular/core';
export declare class AvlFormControlDirective extends AvlInteractionControlDirective implements OnInit, OnDestroy, ControlValueAccessor, Validator {
    protected elementRef: ElementRef;
    private renderer;
    private valuePropertyName;
    private onTouchedCallback;
    private onChangeCallback;
    private unlistenPropertyChangedEvent;
    private writeValueAlreadyCalled;
    set readonly(value: any);
    constructor(elementRef: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    onBlur(): void;
    onFocusedChanged(focused: any): void;
    private toKebabCase;
    invalidChange: EventEmitter<any>;
    invalidChanged(e: CustomEvent): void;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvlFormControlDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AvlFormControlDirective, "avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input", never, { "readonly": "readonly"; }, { "invalidChange": "invalidChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWZvcm0tY29udHJvbC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYXZsLWZvcm0tY29udHJvbC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXZsSW50ZXJhY3Rpb25Db250cm9sRGlyZWN0aXZlIH0gZnJvbSAnLi9hdmwtaW50ZXJhY3Rpb24tY29udHJvbC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbi8qKiBEaXJlY3RpdmUgZm9yIGNvbnRyb2xzIGltcGxlbWVudGluZyBbQXZsRm9ybUNvbnRyb2xdLiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdmxGb3JtQ29udHJvbERpcmVjdGl2ZSBleHRlbmRzIEF2bEludGVyYWN0aW9uQ29udHJvbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcclxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcclxuICAgIHByaXZhdGUgdmFsdWVQcm9wZXJ0eU5hbWU7XHJcbiAgICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrO1xyXG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrO1xyXG4gICAgcHJpdmF0ZSB1bmxpc3RlblByb3BlcnR5Q2hhbmdlZEV2ZW50O1xyXG4gICAgcHJpdmF0ZSB3cml0ZVZhbHVlQWxyZWFkeUNhbGxlZDtcclxuICAgIHNldCByZWFkb25seSh2YWx1ZTogYW55KTtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XHJcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgb25CbHVyKCk6IHZvaWQ7XHJcbiAgICBvbkZvY3VzZWRDaGFuZ2VkKGZvY3VzZWQ6IGFueSk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHRvS2ViYWJDYXNlO1xyXG4gICAgaW52YWxpZENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBpbnZhbGlkQ2hhbmdlZChlOiBDdXN0b21FdmVudCk6IHZvaWQ7XHJcbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbDtcclxufVxyXG4iXX0=