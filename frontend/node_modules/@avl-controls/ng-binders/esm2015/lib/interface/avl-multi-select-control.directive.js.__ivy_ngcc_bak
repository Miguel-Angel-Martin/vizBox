import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlMultiSelectControl]. */
let AvlMultiSelectControlDirective = class AvlMultiSelectControlDirective {
    constructor(elementRef) {
        this.selectedIndexesChange = new EventEmitter();
        this.selectedValuesChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-indexes-changed', this.selectedIndexesChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-values-changed', this.selectedValuesChange);
    }
};
AvlMultiSelectControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlMultiSelectControlDirective.prototype, "selectedIndexesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlMultiSelectControlDirective.prototype, "selectedValuesChange", void 0);
AvlMultiSelectControlDirective = __decorate([
    Directive({
        selector: 'avl-datatable,avl-list,avl-chip-list, avl-chip-input'
    }),
    __metadata("design:paramtypes", [ElementRef])
], AvlMultiSelectControlDirective);
export { AvlMultiSelectControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW11bHRpLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtY29udHJvbHMvbmctYmluZGVycy8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmZhY2UvYXZsLW11bHRpLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU1RSxtRUFBbUU7QUFJbkUsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUFJekMsWUFBWSxVQUFzQjtRQUh4QiwwQkFBcUIsR0FBZ0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4RSx5QkFBb0IsR0FBNkIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUc1RSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDN0csd0NBQXdDLENBQUMsVUFBVSxFQUFFLHlCQUF5QixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzdHLENBQUM7Q0FDRixDQUFBOztZQUp5QixVQUFVOztBQUh4QjtJQUFULE1BQU0sRUFBRTs4QkFBd0IsWUFBWTs2RUFBcUM7QUFDeEU7SUFBVCxNQUFNLEVBQUU7OEJBQXVCLFlBQVk7NEVBQWtDO0FBRm5FLDhCQUE4QjtJQUgxQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsc0RBQXNEO0tBQ2pFLENBQUM7cUNBS3dCLFVBQVU7R0FKdkIsOEJBQThCLENBUTFDO1NBUlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcblxyXG4vKiogRGlyZWN0aXZlIGZvciBjb250cm9scyBpbXBsZW1lbnRpbmcgW0F2bE11bHRpU2VsZWN0Q29udHJvbF0uICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWRhdGF0YWJsZSxhdmwtbGlzdCxhdmwtY2hpcC1saXN0LCBhdmwtY2hpcC1pbnB1dCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bE11bHRpU2VsZWN0Q29udHJvbERpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkSW5kZXhlc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PG51bWJlcj4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZFZhbHVlc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PGFueT4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdzZWxlY3RlZC1pbmRleGVzLWNoYW5nZWQnLCB0aGlzLnNlbGVjdGVkSW5kZXhlc0NoYW5nZSk7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdzZWxlY3RlZC12YWx1ZXMtY2hhbmdlZCcsIHRoaXMuc2VsZWN0ZWRWYWx1ZXNDaGFuZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=