import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlControl]. */
import * as ɵngcc0 from '@angular/core';
let AvlControlDirective = class AvlControlDirective {
    constructor(elementRef) {
        this.disabledChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'disabled-changed', this.disabledChange);
    }
};
AvlControlDirective.ɵfac = function AvlControlDirective_Factory(t) { return new (t || AvlControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlControlDirective, selectors: [["avl-breadcrumb"], ["avl-context-menu"], ["avl-header-bar"], ["avl-menu-button"], ["avl-user-info"]], outputs: { disabledChange: "disabledChange" } });
AvlControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlControlDirective.prototype, "disabledChange", void 0);
AvlControlDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlControlDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-breadcrumb,avl-context-menu,avl-header-bar,avl-menu-button,avl-user-info'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { disabledChange: [{
            type: Output
        }] }); })();
export { AvlControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWNvbnRyb2wuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9pbnRlcmZhY2UvYXZsLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVFLHdEQUF3RDs7QUFJeEQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7QUFDaEMsSUFFRSxZQUFZLFVBQXNCO0FBQ3BDLFFBSFksbUJBQWMsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNuRSxRQUVJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbEcsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7cVBBQUE7QUFDRDtBQUE2QyxZQUpuQixVQUFVO0FBQUc7QUFGM0I7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBZSxZQUFZO0FBQUUsMkRBQXlCO0FBRHRELG1CQUFtQixvQkFIL0IsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFLG5DQUVSLGtDQUdzQixVQUFVO0FBQUcsR0FIMUIsbUJBQW1CLENBTS9CO3lDQVJ5RixNQUN6RixDQUFDOzs7Ozs7O29CQVFGOztBQWRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFIQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFNQSxBQU5BLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMgfSBmcm9tICcuLi9iaW5kaW5nLXV0aWxzJztcclxuXHJcbi8qKiBEaXJlY3RpdmUgZm9yIGNvbnRyb2xzIGltcGxlbWVudGluZyBbQXZsQ29udHJvbF0uICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWJyZWFkY3J1bWIsYXZsLWNvbnRleHQtbWVudSxhdmwtaGVhZGVyLWJhcixhdmwtbWVudS1idXR0b24sYXZsLXVzZXItaW5mbydcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bENvbnRyb2xEaXJlY3RpdmUge1xyXG4gIEBPdXRwdXQoKSBkaXNhYmxlZENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ2Rpc2FibGVkLWNoYW5nZWQnLCB0aGlzLmRpc2FibGVkQ2hhbmdlKTtcclxuICB9XHJcbn1cclxuIl19