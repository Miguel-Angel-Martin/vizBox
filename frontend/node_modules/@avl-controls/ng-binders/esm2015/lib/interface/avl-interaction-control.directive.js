import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import { AvlControlDirective } from './avl-control.directive';
/** Directive for controls implementing [AvlInteractionControl]. */
import * as ɵngcc0 from '@angular/core';
let AvlInteractionControlDirective = class AvlInteractionControlDirective extends AvlControlDirective {
    constructor(elementRef) {
        super(elementRef);
        this.focusedChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'focused-changed', this.focusedChange);
    }
};
AvlInteractionControlDirective.ɵfac = function AvlInteractionControlDirective_Factory(t) { return new (t || AvlInteractionControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlInteractionControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlInteractionControlDirective, selectors: [["avl-button"], ["avl-icon-button"], ["avl-item"], ["avl-search-bar"], ["avl-radio-button"], ["avl-upload"], ["avl-snackbar"]], outputs: { focusedChange: "focusedChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
AvlInteractionControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlInteractionControlDirective.prototype, "focusedChange", void 0);
AvlInteractionControlDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlInteractionControlDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlInteractionControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-button,avl-icon-button,avl-item,avl-search-bar,avl-radio-button,avl-upload,avl-snackbar'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { focusedChange: [{
            type: Output
        }] }); })();
export { AvlInteractionControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWludGVyYWN0aW9uLWNvbnRyb2wuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9pbnRlcmZhY2UvYXZsLWludGVyYWN0aW9uLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTlELG1FQUFtRTs7QUFJbkUsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBK0IsU0FBUSxtQkFBbUI7QUFDdkUsSUFFRSxZQUFZLFVBQXNCO0FBQ3BDLFFBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RCLFFBSlksa0JBQWEsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNsRSxRQUdJLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEcsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7aVZBQUE7QUFDRDtBQUF3RCxZQUw5QixVQUFVO0FBQUc7QUFGM0I7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBYyxZQUFZO0FBQUUscUVBQXlCO0FBRHJELDhCQUE4QixvQkFIMUMsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFLG5DQUVSLGtDQUdzQixVQUFVO0FBQUcsR0FIMUIsOEJBQThCLENBTzFDOzZDQVR3RyxNQUN4RyxDQUFDOzs7Ozs7O29CQVNGOztBQWhCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFKQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFPQSxBQVBBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMgfSBmcm9tICcuLi9iaW5kaW5nLXV0aWxzJztcclxuaW1wb3J0IHsgQXZsQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vYXZsLWNvbnRyb2wuZGlyZWN0aXZlJztcclxuXHJcbi8qKiBEaXJlY3RpdmUgZm9yIGNvbnRyb2xzIGltcGxlbWVudGluZyBbQXZsSW50ZXJhY3Rpb25Db250cm9sXS4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtYnV0dG9uLGF2bC1pY29uLWJ1dHRvbixhdmwtaXRlbSxhdmwtc2VhcmNoLWJhcixhdmwtcmFkaW8tYnV0dG9uLGF2bC11cGxvYWQsYXZsLXNuYWNrYmFyJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsSW50ZXJhY3Rpb25Db250cm9sRGlyZWN0aXZlIGV4dGVuZHMgQXZsQ29udHJvbERpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIGZvY3VzZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBzdXBlcihlbGVtZW50UmVmKTtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ2ZvY3VzZWQtY2hhbmdlZCcsIHRoaXMuZm9jdXNlZENoYW5nZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==