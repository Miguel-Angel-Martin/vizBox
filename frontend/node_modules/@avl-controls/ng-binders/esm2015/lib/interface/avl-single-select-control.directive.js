import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlSingleSelectControl]. */
import * as ɵngcc0 from '@angular/core';
let AvlSingleSelectControlDirective = class AvlSingleSelectControlDirective {
    constructor(elementRef) {
        this.selectedIndexChange = new EventEmitter();
        this.selectedValueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-index-changed', this.selectedIndexChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-value-changed', this.selectedValueChange);
    }
};
AvlSingleSelectControlDirective.ɵfac = function AvlSingleSelectControlDirective_Factory(t) { return new (t || AvlSingleSelectControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlSingleSelectControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlSingleSelectControlDirective, selectors: [["avl-datatable"], ["avl-dropdown"], ["avl-list"], ["avl-radio-group"], ["avl-app-switcher"], ["avl-chip-list"], ["avl-combo-box"]], outputs: { selectedIndexChange: "selectedIndexChange", selectedValueChange: "selectedValueChange" } });
AvlSingleSelectControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlSingleSelectControlDirective.prototype, "selectedIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlSingleSelectControlDirective.prototype, "selectedValueChange", void 0);
AvlSingleSelectControlDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlSingleSelectControlDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlSingleSelectControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { selectedIndexChange: [{
            type: Output
        }], selectedValueChange: [{
            type: Output
        }] }); })();
export { AvlSingleSelectControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNpbmdsZS1zZWxlY3QtY29udHJvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvbGliL2ludGVyZmFjZS9hdmwtc2luZ2xlLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU1RSxvRUFBb0U7O0FBSXBFLElBQWEsK0JBQStCLEdBQTVDLE1BQWEsK0JBQStCO0FBQzVDLElBR0UsWUFBWSxVQUFzQjtBQUNwQyxRQUpZLHdCQUFtQixHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzNFLFFBQVksd0JBQW1CLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDeEUsUUFFSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDN0csUUFBSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDN0csSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7aVdBQUE7QUFDRDtBQUF5RCxZQUwvQixVQUFVO0FBQUc7QUFIM0I7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBb0IsWUFBWTtBQUFFLDRFQUE0QjtBQUMvRDtBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFFLDhCQUFvQixZQUFZO0FBQUUsNEVBQXlCO0FBRjNELCtCQUErQixvQkFIM0MsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFLG5DQUVSLGtDQUlzQixVQUFVO0FBQUcsR0FKMUIsK0JBQStCLENBUTNDO2lEQVY2RyxNQUM3RyxDQUFDOzs7Ozs7Ozs7b0JBVUY7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUpBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUtBLEFBQUEsQUFKQSxBQUFBLEFBUUEsQUFSQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcblxyXG4vKiogRGlyZWN0aXZlIGZvciBjb250cm9scyBpbXBsZW1lbnRpbmcgW0F2bFNpbmdsZVNlbGVjdENvbnRyb2xdLiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2F2bC1kYXRhdGFibGUsYXZsLWRyb3Bkb3duLGF2bC1saXN0LGF2bC1yYWRpby1ncm91cCxhdmwtYXBwLXN3aXRjaGVyLGF2bC1jaGlwLWxpc3QsYXZsLWNvbWJvLWJveCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bFNpbmdsZVNlbGVjdENvbnRyb2xEaXJlY3RpdmUge1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZEluZGV4Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRWYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ3NlbGVjdGVkLWluZGV4LWNoYW5nZWQnLCB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2UpO1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyhlbGVtZW50UmVmLCAnc2VsZWN0ZWQtdmFsdWUtY2hhbmdlZCcsIHRoaXMuc2VsZWN0ZWRWYWx1ZUNoYW5nZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==