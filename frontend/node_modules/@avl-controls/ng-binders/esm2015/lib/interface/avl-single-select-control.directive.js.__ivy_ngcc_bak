import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlSingleSelectControl]. */
let AvlSingleSelectControlDirective = class AvlSingleSelectControlDirective {
    constructor(elementRef) {
        this.selectedIndexChange = new EventEmitter();
        this.selectedValueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-index-changed', this.selectedIndexChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-value-changed', this.selectedValueChange);
    }
};
AvlSingleSelectControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlSingleSelectControlDirective.prototype, "selectedIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlSingleSelectControlDirective.prototype, "selectedValueChange", void 0);
AvlSingleSelectControlDirective = __decorate([
    Directive({
        selector: 'avl-datatable,avl-dropdown,avl-list,avl-radio-group,avl-app-switcher,avl-chip-list,avl-combo-box'
    }),
    __metadata("design:paramtypes", [ElementRef])
], AvlSingleSelectControlDirective);
export { AvlSingleSelectControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNpbmdsZS1zZWxlY3QtY29udHJvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJmYWNlL2F2bC1zaW5nbGUtc2VsZWN0LWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVFLG9FQUFvRTtBQUlwRSxJQUFhLCtCQUErQixHQUE1QyxNQUFhLCtCQUErQjtJQUkxQyxZQUFZLFVBQXNCO1FBSHhCLHdCQUFtQixHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9ELHdCQUFtQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3BFLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6Ryx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDM0csQ0FBQztDQUNGLENBQUE7O1lBSnlCLFVBQVU7O0FBSHhCO0lBQVQsTUFBTSxFQUFFOzhCQUFzQixZQUFZOzRFQUE4QjtBQUMvRDtJQUFULE1BQU0sRUFBRTs4QkFBc0IsWUFBWTs0RUFBMkI7QUFGM0QsK0JBQStCO0lBSDNDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrR0FBa0c7S0FDN0csQ0FBQztxQ0FLd0IsVUFBVTtHQUp2QiwrQkFBK0IsQ0FRM0M7U0FSWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMgfSBmcm9tICcuLi9iaW5kaW5nLXV0aWxzJztcclxuXHJcbi8qKiBEaXJlY3RpdmUgZm9yIGNvbnRyb2xzIGltcGxlbWVudGluZyBbQXZsU2luZ2xlU2VsZWN0Q29udHJvbF0uICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWRhdGF0YWJsZSxhdmwtZHJvcGRvd24sYXZsLWxpc3QsYXZsLXJhZGlvLWdyb3VwLGF2bC1hcHAtc3dpdGNoZXIsYXZsLWNoaXAtbGlzdCxhdmwtY29tYm8tYm94J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsU2luZ2xlU2VsZWN0Q29udHJvbERpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZFZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyhlbGVtZW50UmVmLCAnc2VsZWN0ZWQtaW5kZXgtY2hhbmdlZCcsIHRoaXMuc2VsZWN0ZWRJbmRleENoYW5nZSk7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdzZWxlY3RlZC12YWx1ZS1jaGFuZ2VkJywgdGhpcy5zZWxlY3RlZFZhbHVlQ2hhbmdlKTtcclxuICB9XHJcbn1cclxuIl19