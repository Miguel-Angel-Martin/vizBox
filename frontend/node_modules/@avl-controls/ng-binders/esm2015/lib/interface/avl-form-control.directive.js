import * as ɵngcc0 from '@angular/core';
var AvlFormControlDirective_1;
import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, HostListener, Output, OnInit, OnDestroy, ElementRef, Renderer2, forwardRef, Input } from '@angular/core';
import { AvlInteractionControlDirective } from './avl-interaction-control.directive';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
// Defines which property is used as the 'value' for the ControlValueAccessor
const valuePropertyNameMap = {
    // TODO: is there a nameof function is typescript?
    'avl-checkbox': 'checked',
    'avl-date': 'value',
    'avl-dropdown': 'selectedValue',
    'avl-time': 'value',
    'avl-numberfield': 'value',
    'avl-radio-group': 'selectedValue',
    'avl-slider': 'value',
    'avl-textarea': 'value',
    'avl-textfield': 'value',
    'avl-timespan': 'value',
    'avl-chip-list': 'selectedValue',
    'avl-chip-input': 'selectedValues',
    'avl-upload': 'files',
    'avl-search-bar': 'query',
    'avl-icon-toggle': 'checked',
    'avl-switch': 'checked'
};
/** Directive for controls implementing [AvlFormControl]. */
let AvlFormControlDirective = AvlFormControlDirective_1 = class AvlFormControlDirective extends AvlInteractionControlDirective {
    constructor(elementRef, renderer) {
        super(elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.writeValueAlreadyCalled = false;
        //#endregion
        //#region AvlFormControl
        // tslint:disable-next-line:member-ordering
        this.invalidChange = new EventEmitter();
        const controlTag = this.elementRef.nativeElement.tagName.toLowerCase();
        this.valuePropertyName = valuePropertyNameMap[controlTag];
    }
    // Angular writes readonly attributes to a readOnly property,
    // because that's how it's called on the native input element.
    set readonly(value) {
        if (typeof value === 'boolean') {
            this.elementRef.nativeElement.readonly = value;
        }
        else {
            this.elementRef.nativeElement.readonly = value != null;
        }
    }
    ngOnInit() {
        this.unlistenPropertyChangedEvent =
            this.renderer.listen(this.elementRef.nativeElement, `${this.toKebabCase(this.valuePropertyName)}-changed`, (e) => {
                if (this.onChangeCallback) {
                    this.onChangeCallback(e.detail.value);
                }
            });
    }
    ngOnDestroy() {
        if (this.unlistenPropertyChangedEvent) {
            this.unlistenPropertyChangedEvent();
        }
    }
    writeValue(value) {
        // Because of a bug in Angular writeValue sometimes gets called with a null before being called with the real value,
        // so the null is discarded.
        // TODO: remove when issue is fixed: https://github.com/angular/angular/issues/14988
        if (!this.writeValueAlreadyCalled && value == null) {
            this.writeValueAlreadyCalled = true;
            return;
        }
        this.renderer.setProperty(this.elementRef.nativeElement, this.valuePropertyName, value);
        this.writeValueAlreadyCalled = true;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
    onBlur() {
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    onFocusedChanged(focused) {
        if (!focused && this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    toKebabCase(camelCaseString) {
        return camelCaseString.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    }
    invalidChanged(e) {
        this.invalidChange.emit(e.detail.value);
        // Trigger validation
        if (this.onChangeCallback) {
            this.onChangeCallback(this.elementRef.nativeElement[this.valuePropertyName]);
        }
    }
    //#endregion
    //#region Validator
    validate(control) {
        const formControl = this.elementRef.nativeElement;
        if (formControl.invalid) {
            return { invalid: formControl.errorMessage };
        }
        else {
            return null;
        }
    }
};
AvlFormControlDirective.ɵfac = function AvlFormControlDirective_Factory(t) { return new (t || AvlFormControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AvlFormControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlFormControlDirective, selectors: [["avl-date"], ["avl-dropdown"], ["avl-time"], ["avl-icon-toggle"], ["avl-numberfield"], ["avl-radio-group"], ["avl-slider"], ["avl-textarea"], ["avl-textfield"], ["avl-timespan"], ["avl-checkbox"], ["avl-switch"], ["avl-chip-list"], ["avl-upload"], ["avl-search-bar"], ["avl-chip-input"]], hostBindings: function AvlFormControlDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("blur", function AvlFormControlDirective_blur_HostBindingHandler() { return ctx.onBlur(); })("focused-changed", function AvlFormControlDirective_focused_changed_HostBindingHandler($event) { return ctx.onFocusedChanged($event.detail.value); })("invalid-changed", function AvlFormControlDirective_invalid_changed_HostBindingHandler($event) { return ctx.invalidChanged($event); });
    } }, inputs: { readonly: "readonly" }, outputs: { invalidChange: "invalidChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlFormControlDirective_1), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlFormControlDirective_1), multi: true }]), ɵngcc0.ɵɵInheritDefinitionFeature] });
AvlFormControlDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], AvlFormControlDirective.prototype, "readonly", null);
__decorate([
    HostListener('blur'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AvlFormControlDirective.prototype, "onBlur", null);
__decorate([
    HostListener('focused-changed', ['$event.detail.value']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AvlFormControlDirective.prototype, "onFocusedChanged", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlFormControlDirective.prototype, "invalidChange", void 0);
__decorate([
    HostListener('invalid-changed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlFormControlDirective.prototype, "invalidChanged", null);
AvlFormControlDirective = AvlFormControlDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
], AvlFormControlDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlFormControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input',
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlFormControlDirective_1), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlFormControlDirective_1), multi: true }]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { invalidChange: [{
            type: Output
        }], readonly: [{
            type: Input
        }], onBlur: [{
            type: HostListener,
            args: ['blur']
        }], onFocusedChanged: [{
            type: HostListener,
            args: ['focused-changed', ['$event.detail.value']]
        }], invalidChanged: [{
            type: HostListener,
            args: ['invalid-changed', ['$event']]
        }] }); })();
export { AvlFormControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,