import { Directive, EventEmitter, HostListener, Output, forwardRef, Input } from '@angular/core';
import { AvlInteractionControlDirective } from './avl-interaction-control.directive';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import * as i0 from "@angular/core";
// Defines which property is used as the 'value' for the ControlValueAccessor
const valuePropertyNameMap = {
    // TODO: is there a nameof function is typescript?
    'avl-checkbox': 'checked',
    'avl-date': 'value',
    'avl-dropdown': 'selectedValue',
    'avl-time': 'value',
    'avl-numberfield': 'value',
    'avl-radio-group': 'selectedValue',
    'avl-slider': 'value',
    'avl-textarea': 'value',
    'avl-textfield': 'value',
    'avl-timespan': 'value',
    'avl-chip-list': 'selectedValue',
    'avl-chip-input': 'selectedValues',
    'avl-upload': 'files',
    'avl-search-bar': 'query',
    'avl-icon-toggle': 'checked',
    'avl-switch': 'checked'
};
/** Directive for controls implementing [AvlFormControl]. */
export class AvlFormControlDirective extends AvlInteractionControlDirective {
    constructor(elementRef, renderer) {
        super(elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.writeValueAlreadyCalled = false;
        //#endregion
        //#region AvlFormControl
        // tslint:disable-next-line:member-ordering
        this.invalidChange = new EventEmitter();
        const controlTag = this.elementRef.nativeElement.tagName.toLowerCase();
        this.valuePropertyName = valuePropertyNameMap[controlTag];
    }
    // Angular writes readonly attributes to a readOnly property,
    // because that's how it's called on the native input element.
    set readonly(value) {
        if (typeof value === 'boolean') {
            this.elementRef.nativeElement.readonly = value;
        }
        else {
            this.elementRef.nativeElement.readonly = value != null;
        }
    }
    ngOnInit() {
        this.unlistenPropertyChangedEvent =
            this.renderer.listen(this.elementRef.nativeElement, `${this.toKebabCase(this.valuePropertyName)}-changed`, (e) => {
                if (this.onChangeCallback) {
                    this.onChangeCallback(e.detail.value);
                }
            });
    }
    ngOnDestroy() {
        if (this.unlistenPropertyChangedEvent) {
            this.unlistenPropertyChangedEvent();
        }
    }
    writeValue(value) {
        // Because of a bug in Angular writeValue sometimes gets called with a null before being called with the real value,
        // so the null is discarded.
        // TODO: remove when issue is fixed: https://github.com/angular/angular/issues/14988
        if (!this.writeValueAlreadyCalled && value == null) {
            this.writeValueAlreadyCalled = true;
            return;
        }
        this.renderer.setProperty(this.elementRef.nativeElement, this.valuePropertyName, value);
        this.writeValueAlreadyCalled = true;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
    onBlur() {
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    onFocusedChanged(focused) {
        if (!focused && this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    toKebabCase(camelCaseString) {
        return camelCaseString.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    }
    invalidChanged(e) {
        this.invalidChange.emit(e.detail.value);
        // Trigger validation
        if (this.onChangeCallback) {
            this.onChangeCallback(this.elementRef.nativeElement[this.valuePropertyName]);
        }
    }
    //#endregion
    //#region Validator
    validate(control) {
        const formControl = this.elementRef.nativeElement;
        if (formControl.invalid) {
            return { invalid: formControl.errorMessage };
        }
        else {
            return null;
        }
    }
}
AvlFormControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlFormControlDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
AvlFormControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.4", type: AvlFormControlDirective, selector: "avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input", inputs: { readonly: "readonly" }, outputs: { invalidChange: "invalidChange" }, host: { listeners: { "blur": "onBlur()", "focused-changed": "onFocusedChanged($event.detail.value)", "invalid-changed": "invalidChanged($event)" } }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlFormControlDirective), multi: true },
        { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlFormControlDirective), multi: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlFormControlDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'avl-date,avl-dropdown,avl-time,avl-icon-toggle,avl-numberfield,avl-radio-group,avl-slider,avl-textarea,avl-textfield,avl-timespan,avl-checkbox,avl-switch,avl-chip-list,avl-upload,avl-search-bar,avl-chip-input',
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlFormControlDirective), multi: true },
                        { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlFormControlDirective), multi: true }]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { readonly: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], onFocusedChanged: [{
                type: HostListener,
                args: ['focused-changed', ['$event.detail.value']]
            }], invalidChange: [{
                type: Output
            }], invalidChanged: [{
                type: HostListener,
                args: ['invalid-changed', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,