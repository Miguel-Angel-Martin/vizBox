import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
/** Directive for controls implementing [AvlMultiSelectControl]. */
import * as ɵngcc0 from '@angular/core';
let AvlMultiSelectControlDirective = class AvlMultiSelectControlDirective {
    constructor(elementRef) {
        this.selectedIndexesChange = new EventEmitter();
        this.selectedValuesChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-indexes-changed', this.selectedIndexesChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-values-changed', this.selectedValuesChange);
    }
};
AvlMultiSelectControlDirective.ɵfac = function AvlMultiSelectControlDirective_Factory(t) { return new (t || AvlMultiSelectControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlMultiSelectControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlMultiSelectControlDirective, selectors: [["avl-datatable"], ["avl-list"], ["avl-chip-list"], ["avl-chip-input"]], outputs: { selectedIndexesChange: "selectedIndexesChange", selectedValuesChange: "selectedValuesChange" } });
AvlMultiSelectControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlMultiSelectControlDirective.prototype, "selectedIndexesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlMultiSelectControlDirective.prototype, "selectedValuesChange", void 0);
AvlMultiSelectControlDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlMultiSelectControlDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlMultiSelectControlDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-datatable,avl-list,avl-chip-list, avl-chip-input'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { selectedIndexesChange: [{
            type: Output
        }], selectedValuesChange: [{
            type: Output
        }] }); })();
export { AvlMultiSelectControlDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW11bHRpLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvaW50ZXJmYWNlL2F2bC1tdWx0aS1zZWxlY3QtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFNUUsbUVBQW1FOztBQUluRSxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtBQUMzQyxJQUdFLFlBQVksVUFBc0I7QUFDcEMsUUFKWSwwQkFBcUIsR0FBZ0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNwRixRQUFZLHlCQUFvQixHQUE2QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2hGLFFBRUksd0NBQXdDLENBQUMsVUFBVSxFQUFFLDBCQUEwQixFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ2pILFFBQUksd0NBQXdDLENBQUMsVUFBVSxFQUFFLHlCQUF5QixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQy9HLElBQUUsQ0FBQztBQUNILENBQUM7O3lTQUFBO0FBQ0Q7QUFBd0QsWUFMOUIsVUFBVTtBQUFHO0FBSDNCO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUUsOEJBQXNCLFlBQVk7QUFBRSw2RUFBbUM7QUFDeEU7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBcUIsWUFBWTtBQUFFLDRFQUFnQztBQUZuRSw4QkFBOEIsb0JBSDFDLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRSxuQ0FFUixrQ0FJc0IsVUFBVTtBQUFHLEdBSjFCLDhCQUE4QixDQVExQztNQVZpRSxNQUNqRSxDQUFDOzs7Ozs7Ozs7b0JBVUY7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUpBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUtBLEFBQUEsQUFKQSxBQUFBLEFBUUEsQUFSQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcblxyXG4vKiogRGlyZWN0aXZlIGZvciBjb250cm9scyBpbXBsZW1lbnRpbmcgW0F2bE11bHRpU2VsZWN0Q29udHJvbF0uICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWRhdGF0YWJsZSxhdmwtbGlzdCxhdmwtY2hpcC1saXN0LCBhdmwtY2hpcC1pbnB1dCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bE11bHRpU2VsZWN0Q29udHJvbERpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkSW5kZXhlc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PG51bWJlcj4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZFZhbHVlc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PGFueT4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdzZWxlY3RlZC1pbmRleGVzLWNoYW5nZWQnLCB0aGlzLnNlbGVjdGVkSW5kZXhlc0NoYW5nZSk7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdzZWxlY3RlZC12YWx1ZXMtY2hhbmdlZCcsIHRoaXMuc2VsZWN0ZWRWYWx1ZXNDaGFuZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=