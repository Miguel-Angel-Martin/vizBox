import { Directive, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as i0 from "@angular/core";
/** Directive for controls implementing [AvlMultiSelectControl]. */
export class AvlMultiSelectControlDirective {
    constructor(elementRef) {
        this.selectedIndexesChange = new EventEmitter();
        this.selectedValuesChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-indexes-changed', this.selectedIndexesChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-values-changed', this.selectedValuesChange);
    }
}
AvlMultiSelectControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlMultiSelectControlDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
AvlMultiSelectControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.4", type: AvlMultiSelectControlDirective, selector: "avl-datatable,avl-list,avl-chip-list, avl-chip-input", outputs: { selectedIndexesChange: "selectedIndexesChange", selectedValuesChange: "selectedValuesChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlMultiSelectControlDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'avl-datatable,avl-list,avl-chip-list, avl-chip-input'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { selectedIndexesChange: [{
                type: Output
            }], selectedValuesChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW11bHRpLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWJpbmRlcnMvc3JjL2xpYi9pbnRlcmZhY2UvYXZsLW11bHRpLXNlbGVjdC1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRTVFLG1FQUFtRTtBQUluRSxNQUFNLE9BQU8sOEJBQThCO0lBSXpDLFlBQVksVUFBc0I7UUFIeEIsMEJBQXFCLEdBQWdDLElBQUksWUFBWSxFQUFFLENBQUM7UUFDeEUseUJBQW9CLEdBQTZCLElBQUksWUFBWSxFQUFFLENBQUM7UUFHNUUsd0NBQXdDLENBQUMsVUFBVSxFQUFFLDBCQUEwQixFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzdHLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSx5QkFBeUIsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUM3RyxDQUFDOzsySEFQVSw4QkFBOEI7K0dBQTlCLDhCQUE4QjsyRkFBOUIsOEJBQThCO2tCQUgxQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxzREFBc0Q7aUJBQ2pFO2lHQUVXLHFCQUFxQjtzQkFBOUIsTUFBTTtnQkFDRyxvQkFBb0I7c0JBQTdCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMgfSBmcm9tICcuLi9iaW5kaW5nLXV0aWxzJztcclxuXHJcbi8qKiBEaXJlY3RpdmUgZm9yIGNvbnRyb2xzIGltcGxlbWVudGluZyBbQXZsTXVsdGlTZWxlY3RDb250cm9sXS4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtZGF0YXRhYmxlLGF2bC1saXN0LGF2bC1jaGlwLWxpc3QsIGF2bC1jaGlwLWlucHV0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsTXVsdGlTZWxlY3RDb250cm9sRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRJbmRleGVzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8QXJyYXk8bnVtYmVyPj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkVmFsdWVzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8QXJyYXk8YW55Pj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ3NlbGVjdGVkLWluZGV4ZXMtY2hhbmdlZCcsIHRoaXMuc2VsZWN0ZWRJbmRleGVzQ2hhbmdlKTtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ3NlbGVjdGVkLXZhbHVlcy1jaGFuZ2VkJywgdGhpcy5zZWxlY3RlZFZhbHVlc0NoYW5nZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==