import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AvlContextMenuDirective } from './controls/avl-context-menu.directive';
import { AvlDateDirective } from './controls/avl-date.directive';
import { AvlDropdownDirective } from './controls/avl-dropdown.directive';
import { AvlListDirective } from './controls/avl-list.directive';
import { AvlOverflowMenuDirective } from './controls/avl-overflow-menu.directive';
import { AvlSearchBarDirective } from './controls/avl-search-bar.directive';
import { AvlTextareaDirective } from './controls/avl-textarea.directive';
import { AvlSideSheetDirective } from './controls/avl-side-sheet.directive';
import { AvlTimeDirective } from './controls/avl-time.directive';
import { AvlTextfieldDirective } from './controls/avl-textfield.directive';
import { AvlTimespanDirective } from './controls/avl-timespan.directive';
import { AvlUploadDirective } from './controls/avl-upload.directive';
import { AvlCheckableControlDirective } from './interface/avl-checkable-control.directive';
import { AvlControlDirective } from './interface/avl-control.directive';
import { AvlFormControlDirective } from './interface/avl-form-control.directive';
import { AvlInteractionControlDirective } from './interface/avl-interaction-control.directive';
import { AvlMultiSelectControlDirective } from './interface/avl-multi-select-control.directive';
import { AvlSingleSelectControlDirective } from './interface/avl-single-select-control.directive';
import { AvlNumberfieldDirective } from './controls/avl-numberfield.directive';
import { AvlIconButtonDirective } from './controls/avl-icon-button.directive';
import { AvlCheckboxDirective } from './controls/avl-checkbox.directive';
import { AvlDatatableDirective } from './controls/avl-datatable.directive';
import { AvlComboBoxDirective } from './controls/avl-combo-box.directive';
import { AvlBreadcrumbDirective } from './controls/avl-breadcrumb.directive';
import { UPLOAD_SERVICE } from './services/variables';
import { UploadService } from './services/upload.service';
import { AvlTabBarDirective } from './controls/avl-tab-bar.directive';
import { AvlSnackbarDirective } from './controls/avl-snackbar.directive';
import { AvlStepProgressDirective } from './controls/avl-step-progress.directive';
const binders = [
    AvlBreadcrumbDirective,
    AvlOverflowMenuDirective,
    AvlSearchBarDirective,
    AvlTextareaDirective,
    AvlDateDirective,
    AvlSideSheetDirective,
    AvlTextfieldDirective,
    AvlTimespanDirective,
    AvlCheckableControlDirective,
    AvlControlDirective,
    AvlFormControlDirective,
    AvlInteractionControlDirective,
    AvlMultiSelectControlDirective,
    AvlSingleSelectControlDirective,
    AvlDropdownDirective,
    AvlTimeDirective,
    AvlListDirective,
    AvlUploadDirective,
    AvlContextMenuDirective,
    AvlNumberfieldDirective,
    AvlCheckboxDirective,
    AvlDatatableDirective,
    AvlComboBoxDirective,
    AvlTabBarDirective,
    AvlSnackbarDirective,
    AvlStepProgressDirective,
    AvlIconButtonDirective,
];
let AvlNgBindersModule = class AvlNgBindersModule {
};
AvlNgBindersModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule
        ],
        declarations: [
            ...binders
        ],
        exports: [
            ...binders
        ],
        providers: [
            { provide: UPLOAD_SERVICE, useClass: UploadService }
        ]
    })
], AvlNgBindersModule);
export { AvlNgBindersModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLW5nLWJpbmRlcnMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF2bC1jb250cm9scy9uZy1iaW5kZXJzLyIsInNvdXJjZXMiOlsibGliL2F2bC1uZy1iaW5kZXJzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQy9GLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ2hHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ2xHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDekUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFbEYsTUFBTSxPQUFPLEdBQUc7SUFDZCxzQkFBc0I7SUFDdEIsd0JBQXdCO0lBQ3hCLHFCQUFxQjtJQUNyQixvQkFBb0I7SUFDcEIsZ0JBQWdCO0lBQ2hCLHFCQUFxQjtJQUNyQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLDRCQUE0QjtJQUM1QixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLDhCQUE4QjtJQUM5Qiw4QkFBOEI7SUFDOUIsK0JBQStCO0lBQy9CLG9CQUFvQjtJQUNwQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQix1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLG9CQUFvQjtJQUNwQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIsd0JBQXdCO0lBQ3hCLHNCQUFzQjtDQUN2QixDQUFDO0FBaUJGLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0NBQUksQ0FBQTtBQUF0QixrQkFBa0I7SUFmOUIsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFO1lBQ1AsWUFBWTtZQUNaLFdBQVc7U0FDWjtRQUNELFlBQVksRUFBRTtZQUNaLEdBQUcsT0FBTztTQUNYO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsR0FBRyxPQUFPO1NBQ1g7UUFDRCxTQUFTLEVBQUU7WUFDVCxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTtTQUNyRDtLQUNGLENBQUM7R0FDVyxrQkFBa0IsQ0FBSTtTQUF0QixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQXZsQ29udGV4dE1lbnVEaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC1jb250ZXh0LW1lbnUuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsRGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbHMvYXZsLWRhdGUuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsRHJvcGRvd25EaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC1kcm9wZG93bi5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxMaXN0RGlyZWN0aXZlIH0gZnJvbSAnLi9jb250cm9scy9hdmwtbGlzdC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxPdmVyZmxvd01lbnVEaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC1vdmVyZmxvdy1tZW51LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEF2bFNlYXJjaEJhckRpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbHMvYXZsLXNlYXJjaC1iYXIuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsVGV4dGFyZWFEaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC10ZXh0YXJlYS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxTaWRlU2hlZXREaXJlY3RpdmV9IGZyb20gJy4vY29udHJvbHMvYXZsLXNpZGUtc2hlZXQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsVGltZURpcmVjdGl2ZX0gZnJvbSAnLi9jb250cm9scy9hdmwtdGltZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxUZXh0ZmllbGREaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC10ZXh0ZmllbGQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsVGltZXNwYW5EaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC10aW1lc3Bhbi5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxVcGxvYWREaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC11cGxvYWQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsQ2hlY2thYmxlQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vaW50ZXJmYWNlL2F2bC1jaGVja2FibGUtY29udHJvbC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxDb250cm9sRGlyZWN0aXZlIH0gZnJvbSAnLi9pbnRlcmZhY2UvYXZsLWNvbnRyb2wuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsRm9ybUNvbnRyb2xEaXJlY3RpdmUgfSBmcm9tICcuL2ludGVyZmFjZS9hdmwtZm9ybS1jb250cm9sLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEF2bEludGVyYWN0aW9uQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vaW50ZXJmYWNlL2F2bC1pbnRlcmFjdGlvbi1jb250cm9sLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEF2bE11bHRpU2VsZWN0Q29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vaW50ZXJmYWNlL2F2bC1tdWx0aS1zZWxlY3QtY29udHJvbC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxTaW5nbGVTZWxlY3RDb250cm9sRGlyZWN0aXZlIH0gZnJvbSAnLi9pbnRlcmZhY2UvYXZsLXNpbmdsZS1zZWxlY3QtY29udHJvbC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxOdW1iZXJmaWVsZERpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbHMvYXZsLW51bWJlcmZpZWxkLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEF2bEljb25CdXR0b25EaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC1pY29uLWJ1dHRvbi5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxDaGVja2JveERpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbHMvYXZsLWNoZWNrYm94LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEF2bERhdGF0YWJsZURpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbHMvYXZsLWRhdGF0YWJsZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxDb21ib0JveERpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbHMvYXZsLWNvbWJvLWJveC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBBdmxCcmVhZGNydW1iRGlyZWN0aXZlIH0gZnJvbSAnLi9jb250cm9scy9hdmwtYnJlYWRjcnVtYi5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBVUExPQURfU0VSVklDRSB9IGZyb20gJy4vc2VydmljZXMvdmFyaWFibGVzJztcclxuaW1wb3J0IHsgVXBsb2FkU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvdXBsb2FkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBdmxUYWJCYXJEaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2xzL2F2bC10YWItYmFyLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEF2bFNuYWNrYmFyRGlyZWN0aXZlIH0gZnJvbSAnLi9jb250cm9scy9hdmwtc25hY2tiYXIuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQXZsU3RlcFByb2dyZXNzRGlyZWN0aXZlIH0gZnJvbSAnLi9jb250cm9scy9hdmwtc3RlcC1wcm9ncmVzcy5kaXJlY3RpdmUnO1xyXG5cclxuY29uc3QgYmluZGVycyA9IFtcclxuICBBdmxCcmVhZGNydW1iRGlyZWN0aXZlLFxyXG4gIEF2bE92ZXJmbG93TWVudURpcmVjdGl2ZSxcclxuICBBdmxTZWFyY2hCYXJEaXJlY3RpdmUsXHJcbiAgQXZsVGV4dGFyZWFEaXJlY3RpdmUsXHJcbiAgQXZsRGF0ZURpcmVjdGl2ZSxcclxuICBBdmxTaWRlU2hlZXREaXJlY3RpdmUsXHJcbiAgQXZsVGV4dGZpZWxkRGlyZWN0aXZlLFxyXG4gIEF2bFRpbWVzcGFuRGlyZWN0aXZlLFxyXG4gIEF2bENoZWNrYWJsZUNvbnRyb2xEaXJlY3RpdmUsXHJcbiAgQXZsQ29udHJvbERpcmVjdGl2ZSxcclxuICBBdmxGb3JtQ29udHJvbERpcmVjdGl2ZSxcclxuICBBdmxJbnRlcmFjdGlvbkNvbnRyb2xEaXJlY3RpdmUsXHJcbiAgQXZsTXVsdGlTZWxlY3RDb250cm9sRGlyZWN0aXZlLFxyXG4gIEF2bFNpbmdsZVNlbGVjdENvbnRyb2xEaXJlY3RpdmUsXHJcbiAgQXZsRHJvcGRvd25EaXJlY3RpdmUsXHJcbiAgQXZsVGltZURpcmVjdGl2ZSxcclxuICBBdmxMaXN0RGlyZWN0aXZlLFxyXG4gIEF2bFVwbG9hZERpcmVjdGl2ZSxcclxuICBBdmxDb250ZXh0TWVudURpcmVjdGl2ZSxcclxuICBBdmxOdW1iZXJmaWVsZERpcmVjdGl2ZSxcclxuICBBdmxDaGVja2JveERpcmVjdGl2ZSxcclxuICBBdmxEYXRhdGFibGVEaXJlY3RpdmUsXHJcbiAgQXZsQ29tYm9Cb3hEaXJlY3RpdmUsXHJcbiAgQXZsVGFiQmFyRGlyZWN0aXZlLFxyXG4gIEF2bFNuYWNrYmFyRGlyZWN0aXZlLFxyXG4gIEF2bFN0ZXBQcm9ncmVzc0RpcmVjdGl2ZSxcclxuICBBdmxJY29uQnV0dG9uRGlyZWN0aXZlLFxyXG5dO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZVxyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAuLi5iaW5kZXJzXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICAuLi5iaW5kZXJzXHJcbiAgXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHsgcHJvdmlkZTogVVBMT0FEX1NFUlZJQ0UsIHVzZUNsYXNzOiBVcGxvYWRTZXJ2aWNlIH1cclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxOZ0JpbmRlcnNNb2R1bGUgeyB9XHJcbiJdfQ==