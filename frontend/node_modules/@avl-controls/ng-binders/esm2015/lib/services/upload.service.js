import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
let UploadService = class UploadService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    downloadFile(url) {
        return this.httpClient.get(url, { responseType: "blob" }).toPromise();
    }
    uploadFile(file, target, progressCallback, completeCallback, failCallback) {
        const formData = new FormData();
        formData.append('file', file.file);
        const uploadReq = this.httpClient.post(target, formData, { reportProgress: true, observe: 'events' })
            .pipe(map(event => {
            if (event.type === HttpEventType.UploadProgress && progressCallback) {
                progressCallback(event);
            }
            if (event.type === HttpEventType.Response) {
                if (completeCallback && event.body != null && event.body.downloadUrl) {
                    completeCallback(event.body.downloadUrl);
                }
                else if (completeCallback)
                    completeCallback();
            }
        }), catchError((err, caught) => {
            const response = err.error instanceof Event ? err.error.target.response : err.error;
            if (failCallback)
                failCallback({
                    status: err.status,
                    response: response
                });
            return new Observable(null);
        }));
        const subscription = uploadReq.subscribe();
        return subscription.unsubscribe.bind(subscription);
    }
};
UploadService.ɵfac = function UploadService_Factory(t) { return new (t || UploadService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
UploadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UploadService, factory: UploadService.ɵfac });
UploadService.ctorParameters = () => [
    { type: HttpClient }
];
UploadService = __decorate([ __metadata("design:paramtypes", [HttpClient])
], UploadService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
export { UploadService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvbGliL3NlcnZpY2VzL3VwbG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHcEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFHbEMsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtBQUFHLElBQzNCLFlBQW9CLFVBQXNCO0FBQUksUUFBMUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLElBQUcsQ0FBQztBQUNqRCxJQUNFLFlBQVksQ0FBQyxHQUFXO0FBQUksUUFDMUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxRSxJQUFFLENBQUM7QUFDSCxJQUNFLFVBQVUsQ0FBQyxJQUFhLEVBQUUsTUFBYyxFQUFFLGdCQUE2RCxFQUFFLGdCQUFpRCxFQUFFLFlBQTREO0FBQ3hOLFFBQ0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUNwQyxRQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxRQUFJLE1BQU0sU0FBUyxHQUFvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBeUIsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFFO0FB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LEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWhDQSxBQUFBLEFBREEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFEQSxBQUFBLEFBaUNBLEFBakNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBFdmVudFR5cGUsIEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBBdmxVcGxvYWRTZXJ2aWNlLCBBdmxGaWxlLCBBdmxBYm9ydFVwbG9hZEFjdGlvbiwgQXZsVXBsb2FkUHJvZ3Jlc3NFdmVudCwgQXZsSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYXZsLWNvbnRyb2xzL2ludGVyZmFjZXMnO1xyXG5cclxuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBVcGxvYWRTZXJ2aWNlIGltcGxlbWVudHMgQXZsVXBsb2FkU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgZG93bmxvYWRGaWxlKHVybDogc3RyaW5nKTogUHJvbWlzZTxCbG9iPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCh1cmwsIHsgcmVzcG9uc2VUeXBlOiBcImJsb2JcIiB9KS50b1Byb21pc2UoKTtcclxuICB9XHJcblxyXG4gIHVwbG9hZEZpbGUoZmlsZTogQXZsRmlsZSwgdGFyZ2V0OiBzdHJpbmcsIHByb2dyZXNzQ2FsbGJhY2s/OiAocHJvZ3Jlc3M6IEF2bFVwbG9hZFByb2dyZXNzRXZlbnQpID0+IHZvaWQsIGNvbXBsZXRlQ2FsbGJhY2s/OiAoZG93bmxvYWRVcmw/OiBzdHJpbmcpID0+IHZvaWQsIGZhaWxDYWxsYmFjaz86IChlcnJvclJlc3BvbnNlOiBBdmxIdHRwRXJyb3JSZXNwb25zZSkgPT4gdm9pZClcclxuICA6IEF2bEFib3J0VXBsb2FkQWN0aW9uIHtcclxuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLmZpbGUpO1xyXG4gICAgY29uc3QgdXBsb2FkUmVxOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLmh0dHBDbGllbnQucG9zdDx7ZG93bmxvYWRVcmw/OiBzdHJpbmd9Pih0YXJnZXQsIGZvcm1EYXRhLCB7IHJlcG9ydFByb2dyZXNzOiB0cnVlLCBvYnNlcnZlOiAnZXZlbnRzJyB9IClcclxuICAgICAgLnBpcGUobWFwKGV2ZW50ID0+IHtcclxuICAgICAgICBpZihldmVudC50eXBlID09PSBIdHRwRXZlbnRUeXBlLlVwbG9hZFByb2dyZXNzICYmIHByb2dyZXNzQ2FsbGJhY2spIHtcclxuICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2soZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihldmVudC50eXBlID09PSBIdHRwRXZlbnRUeXBlLlJlc3BvbnNlKSB7XHJcbiAgICAgICAgICBpZihjb21wbGV0ZUNhbGxiYWNrICYmIGV2ZW50LmJvZHkgIT0gbnVsbCAmJiBldmVudC5ib2R5LmRvd25sb2FkVXJsKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlQ2FsbGJhY2soZXZlbnQuYm9keS5kb3dubG9hZFVybCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGNvbXBsZXRlQ2FsbGJhY2spIGNvbXBsZXRlQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLCBjYXRjaEVycm9yKCAoZXJyOiBIdHRwRXJyb3JSZXNwb25zZSwgY2F1Z2h0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBlcnIuZXJyb3IgaW5zdGFuY2VvZiBFdmVudCA/ICg8WE1MSHR0cFJlcXVlc3Q+ZXJyLmVycm9yLnRhcmdldCkucmVzcG9uc2UgOiBlcnIuZXJyb3I7XHJcbiAgICAgICAgaWYoZmFpbENhbGxiYWNrKSBmYWlsQ2FsbGJhY2soe1xyXG4gICAgICAgICAgc3RhdHVzOiBlcnIuc3RhdHVzLFxyXG4gICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG51bGwpO1xyXG4gICAgICB9KSk7XHJcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHVwbG9hZFJlcS5zdWJzY3JpYmUoKTtcclxuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZS5iaW5kKHN1YnNjcmlwdGlvbik7XHJcbiAgfVxyXG59XHJcbiJdfQ==