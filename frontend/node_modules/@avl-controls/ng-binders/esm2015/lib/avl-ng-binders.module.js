import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AvlContextMenuDirective } from './controls/avl-context-menu.directive';
import { AvlDateDirective } from './controls/avl-date.directive';
import { AvlDropdownDirective } from './controls/avl-dropdown.directive';
import { AvlListDirective } from './controls/avl-list.directive';
import { AvlOverflowMenuDirective } from './controls/avl-overflow-menu.directive';
import { AvlSearchBarDirective } from './controls/avl-search-bar.directive';
import { AvlTextareaDirective } from './controls/avl-textarea.directive';
import { AvlSideSheetDirective } from './controls/avl-side-sheet.directive';
import { AvlTimeDirective } from './controls/avl-time.directive';
import { AvlTextfieldDirective } from './controls/avl-textfield.directive';
import { AvlTimespanDirective } from './controls/avl-timespan.directive';
import { AvlUploadDirective } from './controls/avl-upload.directive';
import { AvlCheckableControlDirective } from './interface/avl-checkable-control.directive';
import { AvlControlDirective } from './interface/avl-control.directive';
import { AvlFormControlDirective } from './interface/avl-form-control.directive';
import { AvlInteractionControlDirective } from './interface/avl-interaction-control.directive';
import { AvlMultiSelectControlDirective } from './interface/avl-multi-select-control.directive';
import { AvlSingleSelectControlDirective } from './interface/avl-single-select-control.directive';
import { AvlNumberfieldDirective } from './controls/avl-numberfield.directive';
import { AvlIconButtonDirective } from './controls/avl-icon-button.directive';
import { AvlCheckboxDirective } from './controls/avl-checkbox.directive';
import { AvlDatatableDirective } from './controls/avl-datatable.directive';
import { AvlComboBoxDirective } from './controls/avl-combo-box.directive';
import { AvlBreadcrumbDirective } from './controls/avl-breadcrumb.directive';
import { AvlTabBarDirective } from './controls/avl-tab-bar.directive';
import { AvlSnackbarDirective } from './controls/avl-snackbar.directive';
import { AvlStepProgressDirective } from './controls/avl-step-progress.directive';
import * as i0 from "@angular/core";
const binders = [
    AvlBreadcrumbDirective,
    AvlOverflowMenuDirective,
    AvlSearchBarDirective,
    AvlTextareaDirective,
    AvlDateDirective,
    AvlSideSheetDirective,
    AvlTextfieldDirective,
    AvlTimespanDirective,
    AvlCheckableControlDirective,
    AvlControlDirective,
    AvlFormControlDirective,
    AvlInteractionControlDirective,
    AvlMultiSelectControlDirective,
    AvlSingleSelectControlDirective,
    AvlDropdownDirective,
    AvlTimeDirective,
    AvlListDirective,
    AvlUploadDirective,
    AvlContextMenuDirective,
    AvlNumberfieldDirective,
    AvlCheckboxDirective,
    AvlDatatableDirective,
    AvlComboBoxDirective,
    AvlTabBarDirective,
    AvlSnackbarDirective,
    AvlStepProgressDirective,
    AvlIconButtonDirective,
];
export class AvlNgBindersModule {
}
AvlNgBindersModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlNgBindersModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AvlNgBindersModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlNgBindersModule, declarations: [AvlBreadcrumbDirective,
        AvlOverflowMenuDirective,
        AvlSearchBarDirective,
        AvlTextareaDirective,
        AvlDateDirective,
        AvlSideSheetDirective,
        AvlTextfieldDirective,
        AvlTimespanDirective,
        AvlCheckableControlDirective,
        AvlControlDirective,
        AvlFormControlDirective,
        AvlInteractionControlDirective,
        AvlMultiSelectControlDirective,
        AvlSingleSelectControlDirective,
        AvlDropdownDirective,
        AvlTimeDirective,
        AvlListDirective,
        AvlUploadDirective,
        AvlContextMenuDirective,
        AvlNumberfieldDirective,
        AvlCheckboxDirective,
        AvlDatatableDirective,
        AvlComboBoxDirective,
        AvlTabBarDirective,
        AvlSnackbarDirective,
        AvlStepProgressDirective,
        AvlIconButtonDirective], imports: [CommonModule,
        FormsModule], exports: [AvlBreadcrumbDirective,
        AvlOverflowMenuDirective,
        AvlSearchBarDirective,
        AvlTextareaDirective,
        AvlDateDirective,
        AvlSideSheetDirective,
        AvlTextfieldDirective,
        AvlTimespanDirective,
        AvlCheckableControlDirective,
        AvlControlDirective,
        AvlFormControlDirective,
        AvlInteractionControlDirective,
        AvlMultiSelectControlDirective,
        AvlSingleSelectControlDirective,
        AvlDropdownDirective,
        AvlTimeDirective,
        AvlListDirective,
        AvlUploadDirective,
        AvlContextMenuDirective,
        AvlNumberfieldDirective,
        AvlCheckboxDirective,
        AvlDatatableDirective,
        AvlComboBoxDirective,
        AvlTabBarDirective,
        AvlSnackbarDirective,
        AvlStepProgressDirective,
        AvlIconButtonDirective] });
AvlNgBindersModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlNgBindersModule, imports: [[
            CommonModule,
            FormsModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlNgBindersModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    declarations: [
                        ...binders
                    ],
                    exports: [
                        ...binders
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,