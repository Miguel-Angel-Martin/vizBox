import { __awaiter } from "tslib";
/**
 * Maps Polymer 'changed' events to Angular 'change' events so it can be used in 2-way binding.
 * HostListener can't be used because when a polymer control has a default value polymer will emit a changed event
 * which will overwrite the value in the bound angular variable. So the event listener is added after the constructor
 * so the default value changed event will be skipped.
 * TODO: There is still a problem if the bound variable is not set. If the default changed event is skipped the variable
 * will not get the default value so the control and the variable will have missmatching values.
 */
export function addEventListenerForEmittingChangedEvents(elementRef, polymerEventName, angularEventEmmiter) {
    return __awaiter(this, void 0, void 0, function* () {
        Promise.resolve().then(() => {
            const nativeElement = elementRef.nativeElement;
            return nativeElement.addEventListener(polymerEventName, (e) => {
                angularEventEmmiter.emit(e.detail.value);
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhdmwtY29udHJvbHMvbmctYmluZGVycy8iLCJzb3VyY2VzIjpbImxpYi9iaW5kaW5nLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFnQix3Q0FBd0MsQ0FBUyxVQUFzQixFQUFFLGdCQUF3QixFQUNySCxtQkFBeUM7O1FBQ3pDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzFCLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxhQUE0QixDQUFDO1lBQzlELE9BQU8sYUFBYSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBYyxFQUFFLEVBQUU7Z0JBQ3pFLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBNYXBzIFBvbHltZXIgJ2NoYW5nZWQnIGV2ZW50cyB0byBBbmd1bGFyICdjaGFuZ2UnIGV2ZW50cyBzbyBpdCBjYW4gYmUgdXNlZCBpbiAyLXdheSBiaW5kaW5nLlxyXG4gKiBIb3N0TGlzdGVuZXIgY2FuJ3QgYmUgdXNlZCBiZWNhdXNlIHdoZW4gYSBwb2x5bWVyIGNvbnRyb2wgaGFzIGEgZGVmYXVsdCB2YWx1ZSBwb2x5bWVyIHdpbGwgZW1pdCBhIGNoYW5nZWQgZXZlbnRcclxuICogd2hpY2ggd2lsbCBvdmVyd3JpdGUgdGhlIHZhbHVlIGluIHRoZSBib3VuZCBhbmd1bGFyIHZhcmlhYmxlLiBTbyB0aGUgZXZlbnQgbGlzdGVuZXIgaXMgYWRkZWQgYWZ0ZXIgdGhlIGNvbnN0cnVjdG9yXHJcbiAqIHNvIHRoZSBkZWZhdWx0IHZhbHVlIGNoYW5nZWQgZXZlbnQgd2lsbCBiZSBza2lwcGVkLlxyXG4gKiBUT0RPOiBUaGVyZSBpcyBzdGlsbCBhIHByb2JsZW0gaWYgdGhlIGJvdW5kIHZhcmlhYmxlIGlzIG5vdCBzZXQuIElmIHRoZSBkZWZhdWx0IGNoYW5nZWQgZXZlbnQgaXMgc2tpcHBlZCB0aGUgdmFyaWFibGVcclxuICogd2lsbCBub3QgZ2V0IHRoZSBkZWZhdWx0IHZhbHVlIHNvIHRoZSBjb250cm9sIGFuZCB0aGUgdmFyaWFibGUgd2lsbCBoYXZlIG1pc3NtYXRjaGluZyB2YWx1ZXMuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50czxURXZlbnQ+KGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHBvbHltZXJFdmVudE5hbWU6IHN0cmluZyxcclxuICBhbmd1bGFyRXZlbnRFbW1pdGVyOiBFdmVudEVtaXR0ZXI8VEV2ZW50Pikge1xyXG4gIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT57XHJcbiAgICBjb25zdCBuYXRpdmVFbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgcmV0dXJuIG5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihwb2x5bWVyRXZlbnROYW1lLCAoZTogQ3VzdG9tRXZlbnQpID0+IHtcclxuICAgICAgYW5ndWxhckV2ZW50RW1taXRlci5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH0pXHJcbn1cclxuIl19