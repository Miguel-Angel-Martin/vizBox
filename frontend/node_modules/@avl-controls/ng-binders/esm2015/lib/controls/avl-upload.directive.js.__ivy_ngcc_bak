import { __decorate, __metadata, __param } from "tslib";
import { Directive, ElementRef, OnInit, HostListener, Output, EventEmitter, Inject } from '@angular/core';
import { UPLOAD_SERVICE } from '../services/variables';
let AvlUploadDirective = class AvlUploadDirective {
    constructor(element, uploadService) {
        this.element = element;
        this.uploadService = uploadService;
        this.uploadComplete = new EventEmitter();
        this.uploadAbort = new EventEmitter();
        this.uploadFail = new EventEmitter();
        this.uploadStart = new EventEmitter();
        this.filesChanged = new EventEmitter();
        this.fileRejected = new EventEmitter();
        this.menuItemClicked = new EventEmitter();
    }
    ngOnInit() {
        const element = this.element.nativeElement;
        element.uploadService = this.uploadService;
    }
    uploadCompleteHandler(e) {
        this.uploadComplete.emit(e.detail.value);
    }
    uploadCanceledHandler(e) {
        this.uploadAbort.emit(e.detail.value);
    }
    uploadStartedHandler(e) {
        this.uploadStart.emit(e.detail.value);
    }
    uploadFailedHandler(e) {
        this.uploadFail.emit(e.detail);
    }
    filesChangedHandler(e) {
        this.filesChanged.emit(e.detail.value);
    }
    fileRejectedHandler(e) {
        this.fileRejected.emit(e.detail.value);
    }
    menuItemClickedHandler(e) {
        this.menuItemClicked.emit(e.detail);
    }
};
AvlUploadDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [UPLOAD_SERVICE,] }] }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadComplete", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadAbort", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadFail", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "filesChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "fileRejected", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "menuItemClicked", void 0);
__decorate([
    HostListener('upload-complete', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadCompleteHandler", null);
__decorate([
    HostListener('upload-abort', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadCanceledHandler", null);
__decorate([
    HostListener('upload-start', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadStartedHandler", null);
__decorate([
    HostListener('upload-fail', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadFailedHandler", null);
__decorate([
    HostListener('files-changed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "filesChangedHandler", null);
__decorate([
    HostListener('file-rejected', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "fileRejectedHandler", null);
__decorate([
    HostListener('menu-item-clicked', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "menuItemClickedHandler", null);
AvlUploadDirective = __decorate([
    Directive({
        selector: 'avl-upload',
    }),
    __param(1, Inject(UPLOAD_SERVICE)),
    __metadata("design:paramtypes", [ElementRef, Object])
], AvlUploadDirective);
export { AvlUploadDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXVwbG9hZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvIiwic291cmNlcyI6WyJsaWIvY29udHJvbHMvYXZsLXVwbG9hZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBS3ZELElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBUzdCLFlBQW9CLE9BQW1CLEVBQWtDLGFBQStCO1FBQXBGLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBa0Msa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBUjlGLG1CQUFjLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0QsZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4RCxlQUFVLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbkQsZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4RCxpQkFBWSxHQUE0QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNELGlCQUFZLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDekQsb0JBQWUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUV5QyxDQUFDO0lBRTVHLFFBQVE7UUFDTixNQUFNLE9BQU8sR0FBUSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNoRCxPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQUdELHFCQUFxQixDQUFDLENBQWM7UUFDbEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBR0QscUJBQXFCLENBQUMsQ0FBYztRQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFHRCxvQkFBb0IsQ0FBQyxDQUFjO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUdELG1CQUFtQixDQUFDLENBQWM7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFHRCxtQkFBbUIsQ0FBQyxDQUFjO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUdELG1CQUFtQixDQUFDLENBQWM7UUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBR0Qsc0JBQXNCLENBQUMsQ0FBYztRQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGLENBQUE7O1lBekM4QixVQUFVOzRDQUFHLE1BQU0sU0FBQyxjQUFjOztBQVJyRDtJQUFULE1BQU0sRUFBRTs4QkFBaUIsWUFBWTswREFBK0I7QUFDM0Q7SUFBVCxNQUFNLEVBQUU7OEJBQWMsWUFBWTt1REFBK0I7QUFDeEQ7SUFBVCxNQUFNLEVBQUU7OEJBQWEsWUFBWTtzREFBMkI7QUFDbkQ7SUFBVCxNQUFNLEVBQUU7OEJBQWMsWUFBWTt1REFBK0I7QUFDeEQ7SUFBVCxNQUFNLEVBQUU7OEJBQWUsWUFBWTt3REFBaUM7QUFDM0Q7SUFBVCxNQUFNLEVBQUU7OEJBQWUsWUFBWTt3REFBK0I7QUFDekQ7SUFBVCxNQUFNLEVBQUU7OEJBQWtCLFlBQVk7MkRBQTJCO0FBVWxFO0lBREMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3FDQUNuQixXQUFXOzsrREFFbkM7QUFHRDtJQURDLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7cUNBQ2hCLFdBQVc7OytEQUVuQztBQUdEO0lBREMsWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztxQ0FDakIsV0FBVzs7OERBRWxDO0FBR0Q7SUFEQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3FDQUNqQixXQUFXOzs2REFFakM7QUFHRDtJQURDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7cUNBQ25CLFdBQVc7OzZEQUVqQztBQUdEO0lBREMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztxQ0FDbkIsV0FBVzs7NkRBRWpDO0FBR0Q7SUFEQyxZQUFZLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7cUNBQ3BCLFdBQVc7O2dFQUVwQztBQWpEVSxrQkFBa0I7SUFIOUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFlBQVk7S0FDdkIsQ0FBQztJQVUwQyxXQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtxQ0FBbkMsVUFBVTtHQVQ1QixrQkFBa0IsQ0FrRDlCO1NBbERZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBIb3N0TGlzdGVuZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXZsRmlsZSwgQXZsVXBsb2FkU2VydmljZSB9IGZyb20gJ0BhdmwtY29udHJvbHMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFVQTE9BRF9TRVJWSUNFIH0gZnJvbSAnLi4vc2VydmljZXMvdmFyaWFibGVzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLXVwbG9hZCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxVcGxvYWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRDb21wbGV0ZTogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRBYm9ydDogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRGYWlsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdXBsb2FkU3RhcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZVtdPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZVJlamVjdGVkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG1lbnVJdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgQEluamVjdChVUExPQURfU0VSVklDRSkgcHJpdmF0ZSB1cGxvYWRTZXJ2aWNlOiBBdmxVcGxvYWRTZXJ2aWNlKSB7fVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSA8YW55PnRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xyXG4gICAgZWxlbWVudC51cGxvYWRTZXJ2aWNlID0gdGhpcy51cGxvYWRTZXJ2aWNlO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndXBsb2FkLWNvbXBsZXRlJywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRDb21wbGV0ZUhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMudXBsb2FkQ29tcGxldGUuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCd1cGxvYWQtYWJvcnQnLCBbJyRldmVudCddKVxyXG4gIHVwbG9hZENhbmNlbGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRBYm9ydC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1zdGFydCcsIFsnJGV2ZW50J10pXHJcbiAgdXBsb2FkU3RhcnRlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMudXBsb2FkU3RhcnQuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCd1cGxvYWQtZmFpbCcsIFsnJGV2ZW50J10pXHJcbiAgdXBsb2FkRmFpbGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRGYWlsLmVtaXQoZS5kZXRhaWwpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZmlsZXMtY2hhbmdlZCcsIFsnJGV2ZW50J10pXHJcbiAgZmlsZXNDaGFuZ2VkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5maWxlc0NoYW5nZWQuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdmaWxlLXJlamVjdGVkJywgWyckZXZlbnQnXSlcclxuICBmaWxlUmVqZWN0ZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmZpbGVSZWplY3RlZC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ21lbnUtaXRlbS1jbGlja2VkJywgWyckZXZlbnQnXSlcclxuICBtZW51SXRlbUNsaWNrZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLm1lbnVJdGVtQ2xpY2tlZC5lbWl0KGUuZGV0YWlsKTtcclxuICB9XHJcbn1cclxuIl19