import { Directive, EventEmitter, Output, HostListener } from '@angular/core';
import * as i0 from "@angular/core";
export class AvlSnackbarDirective {
    constructor() {
        this.buttonClicked = new EventEmitter();
        this.displayedChange = new EventEmitter();
    }
    buttonClickedHandler(e) {
        this.buttonClicked.emit(e.detail.value);
    }
    displayedChangeHandler(e) {
        this.displayedChange.emit(e.detail.value);
    }
}
AvlSnackbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlSnackbarDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AvlSnackbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.4", type: AvlSnackbarDirective, selector: "avl-snackbar", outputs: { buttonClicked: "buttonClicked", displayedChange: "displayedChange" }, host: { listeners: { "button-clicked": "buttonClickedHandler($event)", "displayed-changed": "displayedChangeHandler($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlSnackbarDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'avl-snackbar'
                }]
        }], propDecorators: { buttonClicked: [{
                type: Output
            }], displayedChange: [{
                type: Output
            }], buttonClickedHandler: [{
                type: HostListener,
                args: ['button-clicked', ['$event']]
            }], displayedChangeHandler: [{
                type: HostListener,
                args: ['displayed-changed', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNuYWNrYmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWJpbmRlcnMvc3JjL2xpYi9jb250cm9scy9hdmwtc25hY2tiYXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlFLE1BQU0sT0FBTyxvQkFBb0I7SUFIakM7UUFJWSxrQkFBYSxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzFELG9CQUFlLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7S0FXdkU7SUFSQyxvQkFBb0IsQ0FBQyxDQUFjO1FBQ2pDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUdELHNCQUFzQixDQUFDLENBQWM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QyxDQUFDOztpSEFaVSxvQkFBb0I7cUdBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQUhoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO2lCQUN6Qjs4QkFFVyxhQUFhO3NCQUF0QixNQUFNO2dCQUNHLGVBQWU7c0JBQXhCLE1BQU07Z0JBR1Asb0JBQW9CO3NCQURuQixZQUFZO3VCQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDO2dCQU0xQyxzQkFBc0I7c0JBRHJCLFlBQVk7dUJBQUMsbUJBQW1CLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2F2bC1zbmFja2JhcidcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bFNuYWNrYmFyRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgYnV0dG9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBkaXNwbGF5ZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignYnV0dG9uLWNsaWNrZWQnLCBbJyRldmVudCddKVxyXG4gIGJ1dHRvbkNsaWNrZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmJ1dHRvbkNsaWNrZWQuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdkaXNwbGF5ZWQtY2hhbmdlZCcsIFsnJGV2ZW50J10pXHJcbiAgZGlzcGxheWVkQ2hhbmdlSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5kaXNwbGF5ZWRDaGFuZ2UuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==