import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, Output, HostListener } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let AvlSnackbarDirective = class AvlSnackbarDirective {
    constructor() {
        this.buttonClicked = new EventEmitter();
        this.displayedChange = new EventEmitter();
    }
    buttonClickedHandler(e) {
        this.buttonClicked.emit(e.detail.value);
    }
    displayedChangeHandler(e) {
        this.displayedChange.emit(e.detail.value);
    }
};
AvlSnackbarDirective.ɵfac = function AvlSnackbarDirective_Factory(t) { return new (t || AvlSnackbarDirective)(); };
AvlSnackbarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlSnackbarDirective, selectors: [["avl-snackbar"]], hostBindings: function AvlSnackbarDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("button-clicked", function AvlSnackbarDirective_button_clicked_HostBindingHandler($event) { return ctx.buttonClickedHandler($event); })("displayed-changed", function AvlSnackbarDirective_displayed_changed_HostBindingHandler($event) { return ctx.displayedChangeHandler($event); });
    } }, outputs: { buttonClicked: "buttonClicked", displayedChange: "displayedChange" } });
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlSnackbarDirective.prototype, "buttonClicked", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlSnackbarDirective.prototype, "displayedChange", void 0);
__decorate([
    HostListener('button-clicked', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlSnackbarDirective.prototype, "buttonClickedHandler", null);
__decorate([
    HostListener('displayed-changed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlSnackbarDirective.prototype, "displayedChangeHandler", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlSnackbarDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-snackbar'
            }]
    }], function () { return []; }, { buttonClicked: [{
            type: Output
        }], displayedChange: [{
            type: Output
        }], buttonClickedHandler: [{
            type: HostListener,
            args: ['button-clicked', ['$event']]
        }], displayedChangeHandler: [{
            type: HostListener,
            args: ['displayed-changed', ['$event']]
        }] }); })();
export { AvlSnackbarDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXNuYWNrYmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvY29udHJvbHMvYXZsLXNuYWNrYmFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLOUUsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7QUFDakMsSUFEQTtBQUFnQixRQUNKLGtCQUFhLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDdEUsUUFBWSxvQkFBZSxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3hFLElBVUEsQ0FBQztBQUNELElBVEUsb0JBQW9CLENBQUMsQ0FBYztBQUNyQyxRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUMsSUFBRSxDQUFDO0FBQ0gsSUFFRSxzQkFBc0IsQ0FBQyxDQUFjO0FBQ3ZDLFFBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QyxJQUFFLENBQUM7QUFDSCxDQUFDOzs7OzRGQUFBO0FBWlc7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBYyxZQUFZO0FBQUUsMkRBQTZCO0FBQzFEO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUUsOEJBQWdCLFlBQVk7QUFBRSw2REFBNkI7QUFHdEU7QUFBYSxJQURaLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVDO0FBQ0EscUNBRHlCLFdBQVc7QUFDckM7QUFBNEMsZ0VBQ3pDO0FBR0Q7QUFBYSxJQURaLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9DO0FBQXlDLHFDQUFkLFdBQVc7QUFDdkM7QUFBNEMsa0VBQ3pDO0FBWlUsb0JBQW9CLG9CQUhoQyxTQUFTLENBQUMsVUFDVCxRQUFRLEVBQUU7S0FBYyxNQUN6QixDQUFDLElBQ1c7V0FBb0IsQ0FhaEM7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7O0FBbkJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFXQSxBQUFBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFaQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWFBLEFBYkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzIH0gZnJvbSAnLi4vYmluZGluZy11dGlscyc7XHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLXNuYWNrYmFyJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsU25hY2tiYXJEaXJlY3RpdmUge1xyXG4gIEBPdXRwdXQoKSBidXR0b25DbGlja2VkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRpc3BsYXllZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBASG9zdExpc3RlbmVyKCdidXR0b24tY2xpY2tlZCcsIFsnJGV2ZW50J10pXHJcbiAgYnV0dG9uQ2xpY2tlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuYnV0dG9uQ2xpY2tlZC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2Rpc3BsYXllZC1jaGFuZ2VkJywgWyckZXZlbnQnXSlcclxuICBkaXNwbGF5ZWRDaGFuZ2VIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmRpc3BsYXllZENoYW5nZS5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcbn1cclxuIl19