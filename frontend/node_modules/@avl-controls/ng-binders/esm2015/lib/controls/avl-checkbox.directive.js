import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
let AvlCheckboxDirective = class AvlCheckboxDirective {
    constructor(elementRef) {
        this.indeterminateChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'indeterminate-changed', this.indeterminateChange);
    }
};
AvlCheckboxDirective.ɵfac = function AvlCheckboxDirective_Factory(t) { return new (t || AvlCheckboxDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlCheckboxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlCheckboxDirective, selectors: [["avl-checkbox"]], outputs: { indeterminateChange: "indeterminateChange" } });
AvlCheckboxDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlCheckboxDirective.prototype, "indeterminateChange", void 0);
AvlCheckboxDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlCheckboxDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlCheckboxDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-checkbox'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { indeterminateChange: [{
            type: Output
        }] }); })();
export { AvlCheckboxDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWNoZWNrYm94LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvY29udHJvbHMvYXZsLWNoZWNrYm94LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFNNUUsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7QUFDakMsSUFFRSxZQUFZLFVBQXNCO0FBQ3BDLFFBSFksd0JBQW1CLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDNUUsUUFFSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDNUcsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7NktBQUE7QUFDRDtBQUE4QyxZQUpwQixVQUFVO0FBQUc7QUFGM0I7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBb0IsWUFBWTtBQUFFLGlFQUE2QjtBQUQvRCxvQkFBb0Isb0JBSGhDLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRSxuQ0FFUixrQ0FHc0IsVUFBVTtFQUxWLE1BQ3pCLENBQUMsVEFJcUMsR0FIMUIsb0JBQW9CLENBTWhDOzs7Ozs7OztvQkFDRDs7QUFkQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFIQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSUEsQUFBQSxBQUhBLEFBQUEsQUFNQSxBQU5BLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMgfSBmcm9tICcuLi9iaW5kaW5nLXV0aWxzJztcclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2F2bC1jaGVja2JveCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF2bENoZWNrYm94RGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgaW5kZXRlcm1pbmF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdpbmRldGVybWluYXRlLWNoYW5nZWQnLCB0aGlzLmluZGV0ZXJtaW5hdGVDaGFuZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=