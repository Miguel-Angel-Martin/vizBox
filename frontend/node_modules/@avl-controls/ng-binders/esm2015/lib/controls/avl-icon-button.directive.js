import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
let AvlIconButtonDirective = class AvlIconButtonDirective {
    constructor(elementRef) {
        this.badgeChange = new EventEmitter();
        this.badgeValueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'badge-changed', this.badgeChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'badge-value-changed', this.badgeValueChange);
    }
};
AvlIconButtonDirective.ɵfac = function AvlIconButtonDirective_Factory(t) { return new (t || AvlIconButtonDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlIconButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlIconButtonDirective, selectors: [["avl-icon-button"]], outputs: { badgeChange: "badgeChange", badgeValueChange: "badgeValueChange" } });
AvlIconButtonDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlIconButtonDirective.prototype, "badgeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlIconButtonDirective.prototype, "badgeValueChange", void 0);
AvlIconButtonDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlIconButtonDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlIconButtonDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-icon-button'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { badgeChange: [{
            type: Output
        }], badgeValueChange: [{
            type: Output
        }] }); })();
export { AvlIconButtonDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWljb24tYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhdmwtY29udHJvbHMvbmctYmluZGVycy9saWIvY29udHJvbHMvYXZsLWljb24tYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFNNUUsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7QUFDbkMsSUFHRSxZQUFZLFVBQXNCO0FBQ3BDLFFBSlksZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNwRSxRQUFZLHFCQUFnQixHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3hFLFFBRUksd0NBQXdDLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDNUYsUUFBSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdkcsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7ME1BQUE7QUFDRDtBQUFnRCxZQUx0QixVQUFVO0FBQUc7QUFIM0I7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBWSxZQUFZO0FBQUUsMkRBQTZCO0FBQ3hEO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUUsOEJBQWlCLFlBQVk7QUFBRSxnRUFBNEI7QUFGM0Qsc0JBQXNCLG9CQUhsQyxTQUFTLENBQUMsVUFDVCxRQUFRLEVBQUUsbkNBRVIsa0NBSXNCLFVBQVU7S0FOUCxNQUM1QixDQUFDLFpBS3FDLEdBSjFCLHNCQUFzQixDQVFsQzs7Ozs7Ozs7OztvQkFDRDs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFKQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFLQSxBQUFBLEFBSkEsQUFBQSxBQVFBLEFBUkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWljb24tYnV0dG9uJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsSWNvbkJ1dHRvbkRpcmVjdGl2ZSB7XHJcbiAgQE91dHB1dCgpIGJhZGdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGJhZGdlVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdiYWRnZS1jaGFuZ2VkJywgdGhpcy5iYWRnZUNoYW5nZSk7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdiYWRnZS12YWx1ZS1jaGFuZ2VkJywgdGhpcy5iYWRnZVZhbHVlQ2hhbmdlKTtcclxuICB9XHJcbn1cclxuIl19