import { __awaiter, __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Output, EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let AvlTabBarDirective = class AvlTabBarDirective {
    constructor(el) {
        this.el = el;
        this.selectedIndexChange = new EventEmitter();
        this.selectedValueChange = new EventEmitter();
        this.tabBar = this.el.nativeElement;
        Promise.resolve().then(() => {
            this.setEventListeners(el.nativeElement);
        });
    }
    setEventListeners(el) {
        return __awaiter(this, void 0, void 0, function* () {
            el.addEventListener('selected-value-changed', (event) => {
                Promise.resolve().then(() => {
                    this.selectedValueChange.emit(event.detail.value);
                });
            });
            el.addEventListener('selected-index-changed', (event) => {
                Promise.resolve().then(() => {
                    this.selectedIndexChange.emit(event.detail.value);
                });
            });
        });
    }
    setTab(index, value) {
        const tabs = this.tabBar.tabs;
        for (const prop in value) {
            if (value.hasOwnProperty(prop)) {
                tabs[index][prop] = value[prop];
                this.tabBar.notifyPath(`tabs.${index}.${prop}`);
            }
        }
    }
};
AvlTabBarDirective.ɵfac = function AvlTabBarDirective_Factory(t) { return new (t || AvlTabBarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlTabBarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlTabBarDirective, selectors: [["avl-tab-bar"]], outputs: { selectedIndexChange: "selectedIndexChange", selectedValueChange: "selectedValueChange" } });
AvlTabBarDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlTabBarDirective.prototype, "selectedIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlTabBarDirective.prototype, "selectedValueChange", void 0);
AvlTabBarDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlTabBarDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlTabBarDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-tab-bar'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { selectedIndexChange: [{
            type: Output
        }], selectedValueChange: [{
            type: Output
        }] }); })();
export { AvlTabBarDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXRhYi1iYXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtdGFiLWJhci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzVFLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0FBQy9CLElBa0JFLFlBQW9CLEVBQWM7QUFDcEMsUUFEc0IsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBbEJ6Qix3QkFBbUIsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUMzRSxRQUFZLHdCQUFtQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3hFLFFBaUJJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDeEMsUUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNoQyxZQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDL0MsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBbkJnQixpQkFBaUIsQ0FBQyxFQUFPO0FBQ3pDO0FBQThELFlBQTFELEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0FBQzVELGdCQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ2xDLG9CQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxRCxnQkFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFlBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxZQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0FBQzVELGdCQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ2xDLG9CQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxRCxnQkFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFlBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFRRSxNQUFNLENBQUMsS0FBYSxFQUFFLEtBQWdFO0FBQ3hGLFFBQUksTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDbEMsUUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtBQUM5QixZQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN0QyxnQkFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hDLGdCQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsS0FBSyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7QUFDeEQsYUFBTztBQUNQLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxDQUFDOztvTkFBQTtBQUNEO0FBQTRDLFlBakJsQixVQUFVO0FBQUc7QUFsQjNCO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUUsOEJBQW9CLFlBQVk7QUFBRSwrREFBNEI7QUFDL0Q7QUFBYSxJQUF0QixNQUFNLEVBQUU7QUFBRSw4QkFBb0IsWUFBWTtBQUFFLCtEQUF5QjtBQUYzRCxrQkFBa0Isb0JBSDlCLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRSxuQ0FFUixrQ0FtQnNCLFVBQVU7Q0FyQlgsT0FDeEIsQ0FBQyxUQW9CcUMsR0FuQjFCLGtCQUFrQixDQW1DOUI7Ozs7Ozs7Ozs7b0JBQ0Q7O0FBekNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFtQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWxCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBa0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBbEJBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWhCQSxBQUFBLEFBbEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBb0JBLEFBQUEsQUFuQkEsQUFBQSxBQW1DQSxBQW5DQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtdGFiLWJhcicsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxUYWJCYXJEaXJlY3RpdmUge1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RlZEluZGV4Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRWYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIHByaXZhdGUgdGFiQmFyOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgc2V0RXZlbnRMaXN0ZW5lcnMoZWw6IGFueSkge1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWQtdmFsdWUtY2hhbmdlZCcsIChldmVudCkgPT4ge1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVDaGFuZ2UuZW1pdChldmVudC5kZXRhaWwudmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0ZWQtaW5kZXgtY2hhbmdlZCcsIChldmVudCkgPT4ge1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2UuZW1pdChldmVudC5kZXRhaWwudmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy50YWJCYXIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcclxuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVycyhlbC5uYXRpdmVFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0VGFiKGluZGV4OiBudW1iZXIsIHZhbHVlOiB7IGxhYmVsOiBzdHJpbmcsIGRpc2FibGVkPzogYm9vbGVhbiwgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYkJhci50YWJzO1xyXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHZhbHVlKSB7XHJcbiAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgIHRhYnNbaW5kZXhdW3Byb3BdID0gdmFsdWVbcHJvcF07XHJcbiAgICAgICAgdGhpcy50YWJCYXIubm90aWZ5UGF0aChgdGFicy4ke2luZGV4fS4ke3Byb3B9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19