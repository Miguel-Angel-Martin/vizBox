import * as ɵngcc0 from '@angular/core';
var AvlComboBoxDirective_1;
import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, EventEmitter, forwardRef, HostListener, Output, Renderer2, Input } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
let AvlComboBoxDirective = AvlComboBoxDirective_1 = class AvlComboBoxDirective extends AvlInteractionControlDirective {
    constructor(elementRef, renderer) {
        super(elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.invalidChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', this.focusedChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
    }
    // Angular writes readonly attributes to a readOnly property,
    // because that's how it's called on the native input element.
    set readonly(value) {
        this.elementRef.nativeElement.readonly = value;
    }
    valueChanged(e) {
        if (this.onChangeCallback && this.isAllowNewValues()) {
            this.onChangeCallback(e.detail.value);
        }
    }
    selectedValueChanged(e) {
        if (this.onChangeCallback && !this.isAllowNewValues()) {
            this.onChangeCallback(e.detail.value);
        }
    }
    writeValue(value) {
        const property = this.isAllowNewValues() ? 'value' : 'selectedValue';
        this.renderer.setProperty(this.elementRef.nativeElement, property, value);
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    // Since avl-combo-box doesn't have validate-on-leave, there's no touching
    registerOnTouched(fn) { }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
    isAllowNewValues() {
        return (this.elementRef.nativeElement && this.elementRef.nativeElement.allowNewValues === true);
    }
    //#region Validator
    validate(control) {
        const formControl = this.elementRef.nativeElement;
        if (formControl.invalid) {
            return { invalid: formControl.errorMessage };
        }
        else {
            return null;
        }
    }
};
AvlComboBoxDirective.ɵfac = function AvlComboBoxDirective_Factory(t) { return new (t || AvlComboBoxDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AvlComboBoxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlComboBoxDirective, selectors: [["avl-combo-box"]], hostBindings: function AvlComboBoxDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("value-changed", function AvlComboBoxDirective_value_changed_HostBindingHandler($event) { return ctx.valueChanged($event); })("selected-value-changed", function AvlComboBoxDirective_selected_value_changed_HostBindingHandler($event) { return ctx.selectedValueChanged($event); });
    } }, inputs: { readonly: "readonly" }, outputs: { invalidChange: "invalidChange", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlComboBoxDirective_1), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlComboBoxDirective_1), multi: true }]), ɵngcc0.ɵɵInheritDefinitionFeature] });
AvlComboBoxDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlComboBoxDirective.prototype, "invalidChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlComboBoxDirective.prototype, "valueChange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AvlComboBoxDirective.prototype, "readonly", null);
__decorate([
    HostListener('value-changed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlComboBoxDirective.prototype, "valueChanged", null);
__decorate([
    HostListener('selected-value-changed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlComboBoxDirective.prototype, "selectedValueChanged", null);
AvlComboBoxDirective = AvlComboBoxDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
], AvlComboBoxDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlComboBoxDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-combo-box',
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlComboBoxDirective_1), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlComboBoxDirective_1), multi: true }]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { invalidChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], readonly: [{
            type: Input
        }], valueChanged: [{
            type: HostListener,
            args: ['value-changed', ['$event']]
        }], selectedValueChanged: [{
            type: HostListener,
            args: ['selected-value-changed', ['$event']]
        }] }); })();
export { AvlComboBoxDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,