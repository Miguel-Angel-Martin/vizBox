import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, HostListener, Output, ElementRef } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
let AvlDatatableDirective = class AvlDatatableDirective {
    constructor(elementRef) {
        this.buttonClick = new EventEmitter();
        this.overflowMenuItemClick = new EventEmitter();
        this.linkClick = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.selectedPageChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'page-size-changed', this.pageSizeChange);
        addEventListenerForEmittingChangedEvents(elementRef, 'selected-page-changed', this.selectedPageChange);
    }
    buttonClickListener(e) {
        this.buttonClick.emit(e.detail);
    }
    overflowMenuItemClickListener(e) {
        this.overflowMenuItemClick.emit(e.detail);
    }
    linkClickListener(e) {
        this.linkClick.emit(e.detail);
    }
};
AvlDatatableDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlDatatableDirective.prototype, "buttonClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlDatatableDirective.prototype, "overflowMenuItemClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlDatatableDirective.prototype, "linkClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlDatatableDirective.prototype, "pageSizeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlDatatableDirective.prototype, "selectedPageChange", void 0);
__decorate([
    HostListener('button-click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlDatatableDirective.prototype, "buttonClickListener", null);
__decorate([
    HostListener('overflow-menu-item-click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlDatatableDirective.prototype, "overflowMenuItemClickListener", null);
__decorate([
    HostListener('link-click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlDatatableDirective.prototype, "linkClickListener", null);
AvlDatatableDirective = __decorate([
    Directive({
        selector: 'avl-datatable'
    }),
    __metadata("design:paramtypes", [ElementRef])
], AvlDatatableDirective);
export { AvlDatatableDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWRhdGF0YWJsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvIiwic291cmNlcyI6WyJsaWIvY29udHJvbHMvYXZsLWRhdGF0YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSzVFLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBT2hDLFlBQVksVUFBc0I7UUFOeEIsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNwRCwwQkFBcUIsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM5RCxjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEQsbUJBQWMsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMxRCx1QkFBa0IsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUd0RSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9GLHdDQUF3QyxDQUFDLFVBQVUsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBR0QsbUJBQW1CLENBQUMsQ0FBYztRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUdELDZCQUE2QixDQUFDLENBQWM7UUFDMUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUdELGlCQUFpQixDQUFDLENBQWM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDRixDQUFBOztZQW5CeUIsVUFBVTs7QUFOeEI7SUFBVCxNQUFNLEVBQUU7OEJBQWMsWUFBWTswREFBMkI7QUFDcEQ7SUFBVCxNQUFNLEVBQUU7OEJBQXdCLFlBQVk7b0VBQTJCO0FBQzlEO0lBQVQsTUFBTSxFQUFFOzhCQUFZLFlBQVk7d0RBQTJCO0FBQ2xEO0lBQVQsTUFBTSxFQUFFOzhCQUFpQixZQUFZOzZEQUE4QjtBQUMxRDtJQUFULE1BQU0sRUFBRTs4QkFBcUIsWUFBWTtpRUFBOEI7QUFReEU7SUFEQyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3FDQUNsQixXQUFXOztnRUFFakM7QUFHRDtJQURDLFlBQVksQ0FBQywwQkFBMEIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztxQ0FDcEIsV0FBVzs7MEVBRTNDO0FBR0Q7SUFEQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3FDQUNsQixXQUFXOzs4REFFL0I7QUF6QlUscUJBQXFCO0lBSGpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxlQUFlO0tBQzFCLENBQUM7cUNBUXdCLFVBQVU7R0FQdkIscUJBQXFCLENBMEJqQztTQTFCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBPdXRwdXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtZGF0YXRhYmxlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsRGF0YXRhYmxlRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgYnV0dG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvdmVyZmxvd01lbnVJdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBsaW5rQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBwYWdlU2l6ZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkUGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXJGb3JFbWl0dGluZ0NoYW5nZWRFdmVudHMoZWxlbWVudFJlZiwgJ3BhZ2Utc2l6ZS1jaGFuZ2VkJywgdGhpcy5wYWdlU2l6ZUNoYW5nZSk7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICdzZWxlY3RlZC1wYWdlLWNoYW5nZWQnLCB0aGlzLnNlbGVjdGVkUGFnZUNoYW5nZSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdidXR0b24tY2xpY2snLCBbJyRldmVudCddKVxyXG4gIGJ1dHRvbkNsaWNrTGlzdGVuZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuYnV0dG9uQ2xpY2suZW1pdChlLmRldGFpbCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdvdmVyZmxvdy1tZW51LWl0ZW0tY2xpY2snLCBbJyRldmVudCddKVxyXG4gIG92ZXJmbG93TWVudUl0ZW1DbGlja0xpc3RlbmVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLm92ZXJmbG93TWVudUl0ZW1DbGljay5lbWl0KGUuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2xpbmstY2xpY2snLCBbJyRldmVudCddKVxyXG4gIGxpbmtDbGlja0xpc3RlbmVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmxpbmtDbGljay5lbWl0KGUuZGV0YWlsKTtcclxuICB9XHJcbn1cclxuIl19