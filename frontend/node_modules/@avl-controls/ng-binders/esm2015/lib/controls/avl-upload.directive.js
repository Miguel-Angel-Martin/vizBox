import { Directive, HostListener, Output, EventEmitter, Inject } from '@angular/core';
import { UploadService, UPLOAD_SERVICE } from '@avl-services/ng-services';
import * as i0 from "@angular/core";
export class AvlUploadDirective {
    constructor(element, uploadService) {
        this.element = element;
        this.uploadService = uploadService;
        this.uploadComplete = new EventEmitter();
        this.uploadAbort = new EventEmitter();
        this.uploadFail = new EventEmitter();
        this.uploadStart = new EventEmitter();
        this.filesChanged = new EventEmitter();
        this.fileRejected = new EventEmitter();
        this.menuItemClicked = new EventEmitter();
        this.downloadFail = new EventEmitter();
        this.downloadAbort = new EventEmitter();
    }
    ngOnInit() {
        const element = this.element.nativeElement;
        element.uploadService = this.uploadService;
    }
    uploadCompleteHandler(e) {
        this.uploadComplete.emit(e.detail.value);
    }
    uploadCanceledHandler(e) {
        this.uploadAbort.emit(e.detail.value);
    }
    uploadStartedHandler(e) {
        this.uploadStart.emit(e.detail.value);
    }
    uploadFailedHandler(e) {
        this.uploadFail.emit(e.detail);
    }
    filesChangedHandler(e) {
        this.filesChanged.emit(e.detail.value);
    }
    fileRejectedHandler(e) {
        this.fileRejected.emit(e.detail.value);
    }
    menuItemClickedHandler(e) {
        this.menuItemClicked.emit(e.detail);
    }
    downloadFailedHandler(e) {
        this.downloadFail.emit(e.detail);
    }
    downloadCanceledHandler(e) {
        this.downloadAbort.emit(e.detail.value);
    }
}
AvlUploadDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlUploadDirective, deps: [{ token: i0.ElementRef }, { token: UPLOAD_SERVICE }], target: i0.ɵɵFactoryTarget.Directive });
AvlUploadDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.4", type: AvlUploadDirective, selector: "avl-upload", outputs: { uploadComplete: "uploadComplete", uploadAbort: "uploadAbort", uploadFail: "uploadFail", uploadStart: "uploadStart", filesChanged: "filesChanged", fileRejected: "fileRejected", menuItemClicked: "menuItemClicked", downloadFail: "downloadFail", downloadAbort: "downloadAbort" }, host: { listeners: { "upload-complete": "uploadCompleteHandler($event)", "upload-abort": "uploadCanceledHandler($event)", "upload-start": "uploadStartedHandler($event)", "upload-fail": "uploadFailedHandler($event)", "files-changed": "filesChangedHandler($event)", "file-rejected": "fileRejectedHandler($event)", "menu-item-clicked": "menuItemClickedHandler($event)", "download-fail": "downloadFailedHandler($event)", "download-abort": "downloadCanceledHandler($event)" } }, providers: [{ provide: UPLOAD_SERVICE, useClass: UploadService }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlUploadDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'avl-upload',
                    providers: [{ provide: UPLOAD_SERVICE, useClass: UploadService }]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [UPLOAD_SERVICE]
                }] }]; }, propDecorators: { uploadComplete: [{
                type: Output
            }], uploadAbort: [{
                type: Output
            }], uploadFail: [{
                type: Output
            }], uploadStart: [{
                type: Output
            }], filesChanged: [{
                type: Output
            }], fileRejected: [{
                type: Output
            }], menuItemClicked: [{
                type: Output
            }], downloadFail: [{
                type: Output
            }], downloadAbort: [{
                type: Output
            }], uploadCompleteHandler: [{
                type: HostListener,
                args: ['upload-complete', ['$event']]
            }], uploadCanceledHandler: [{
                type: HostListener,
                args: ['upload-abort', ['$event']]
            }], uploadStartedHandler: [{
                type: HostListener,
                args: ['upload-start', ['$event']]
            }], uploadFailedHandler: [{
                type: HostListener,
                args: ['upload-fail', ['$event']]
            }], filesChangedHandler: [{
                type: HostListener,
                args: ['files-changed', ['$event']]
            }], fileRejectedHandler: [{
                type: HostListener,
                args: ['file-rejected', ['$event']]
            }], menuItemClickedHandler: [{
                type: HostListener,
                args: ['menu-item-clicked', ['$event']]
            }], downloadFailedHandler: [{
                type: HostListener,
                args: ['download-fail', ['$event']]
            }], downloadCanceledHandler: [{
                type: HostListener,
                args: ['download-abort', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXVwbG9hZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1iaW5kZXJzL3NyYy9saWIvY29udHJvbHMvYXZsLXVwbG9hZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBc0IsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFHLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBTTFFLE1BQU0sT0FBTyxrQkFBa0I7SUFXN0IsWUFBb0IsT0FBbUIsRUFBa0MsYUFBK0I7UUFBcEYsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFrQyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFWOUYsbUJBQWMsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMzRCxnQkFBVyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hELGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNuRCxnQkFBVyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hELGlCQUFZLEdBQTRCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0QsaUJBQVksR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN6RCxvQkFBZSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hELGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDckQsa0JBQWEsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUV1QyxDQUFDO0lBRTVHLFFBQVE7UUFDTixNQUFNLE9BQU8sR0FBUSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNoRCxPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDN0MsQ0FBQztJQUdELHFCQUFxQixD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RUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFNekMsdUJBQXVCO3NCQUR0QixZQUFZO3VCQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPbkluaXQsIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBdmxGaWxlLCBBdmxVcGxvYWRTZXJ2aWNlIH0gZnJvbSAnQGF2bC1pbnRlcmZhY2VzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBVcGxvYWRTZXJ2aWNlLCBVUExPQURfU0VSVklDRSB9IGZyb20gJ0Bhdmwtc2VydmljZXMvbmctc2VydmljZXMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdhdmwtdXBsb2FkJyxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVVBMT0FEX1NFUlZJQ0UsIHVzZUNsYXNzOiBVcGxvYWRTZXJ2aWNlIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxVcGxvYWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRDb21wbGV0ZTogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRBYm9ydDogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRGYWlsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdXBsb2FkU3RhcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZVtdPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZVJlamVjdGVkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG1lbnVJdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkRmFpbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkQWJvcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KFVQTE9BRF9TRVJWSUNFKSBwcml2YXRlIHVwbG9hZFNlcnZpY2U6IEF2bFVwbG9hZFNlcnZpY2UpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IDxhbnk+dGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICBlbGVtZW50LnVwbG9hZFNlcnZpY2UgPSB0aGlzLnVwbG9hZFNlcnZpY2U7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCd1cGxvYWQtY29tcGxldGUnLCBbJyRldmVudCddKVxyXG4gIHVwbG9hZENvbXBsZXRlSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRDb21wbGV0ZS5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1hYm9ydCcsIFsnJGV2ZW50J10pXHJcbiAgdXBsb2FkQ2FuY2VsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZEFib3J0LmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndXBsb2FkLXN0YXJ0JywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRTdGFydGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRTdGFydC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1mYWlsJywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRGYWlsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZEZhaWwuZW1pdChlLmRldGFpbCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdmaWxlcy1jaGFuZ2VkJywgWyckZXZlbnQnXSlcclxuICBmaWxlc0NoYW5nZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmZpbGVzQ2hhbmdlZC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2ZpbGUtcmVqZWN0ZWQnLCBbJyRldmVudCddKVxyXG4gIGZpbGVSZWplY3RlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuZmlsZVJlamVjdGVkLmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbWVudS1pdGVtLWNsaWNrZWQnLCBbJyRldmVudCddKVxyXG4gIG1lbnVJdGVtQ2xpY2tlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMubWVudUl0ZW1DbGlja2VkLmVtaXQoZS5kZXRhaWwpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZG93bmxvYWQtZmFpbCcsIFsnJGV2ZW50J10pXHJcbiAgZG93bmxvYWRGYWlsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmRvd25sb2FkRmFpbC5lbWl0KGUuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2Rvd25sb2FkLWFib3J0JywgWyckZXZlbnQnXSlcclxuICBkb3dubG9hZENhbmNlbGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5kb3dubG9hZEFib3J0LmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxufVxyXG4iXX0=