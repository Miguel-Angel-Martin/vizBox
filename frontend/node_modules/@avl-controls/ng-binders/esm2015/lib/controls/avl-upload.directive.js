import { __decorate, __metadata, __param } from "tslib";
import { Directive, ElementRef, OnInit, HostListener, Output, EventEmitter, Inject } from '@angular/core';
import { UPLOAD_SERVICE } from '../services/variables';
import * as ɵngcc0 from '@angular/core';
let AvlUploadDirective = class AvlUploadDirective {
    constructor(element, uploadService) {
        this.element = element;
        this.uploadService = uploadService;
        this.uploadComplete = new EventEmitter();
        this.uploadAbort = new EventEmitter();
        this.uploadFail = new EventEmitter();
        this.uploadStart = new EventEmitter();
        this.filesChanged = new EventEmitter();
        this.fileRejected = new EventEmitter();
        this.menuItemClicked = new EventEmitter();
    }
    ngOnInit() {
        const element = this.element.nativeElement;
        element.uploadService = this.uploadService;
    }
    uploadCompleteHandler(e) {
        this.uploadComplete.emit(e.detail.value);
    }
    uploadCanceledHandler(e) {
        this.uploadAbort.emit(e.detail.value);
    }
    uploadStartedHandler(e) {
        this.uploadStart.emit(e.detail.value);
    }
    uploadFailedHandler(e) {
        this.uploadFail.emit(e.detail);
    }
    filesChangedHandler(e) {
        this.filesChanged.emit(e.detail.value);
    }
    fileRejectedHandler(e) {
        this.fileRejected.emit(e.detail.value);
    }
    menuItemClickedHandler(e) {
        this.menuItemClicked.emit(e.detail);
    }
};
AvlUploadDirective.ɵfac = function AvlUploadDirective_Factory(t) { return new (t || AvlUploadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(UPLOAD_SERVICE)); };
AvlUploadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlUploadDirective, selectors: [["avl-upload"]], hostBindings: function AvlUploadDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("upload-complete", function AvlUploadDirective_upload_complete_HostBindingHandler($event) { return ctx.uploadCompleteHandler($event); })("upload-abort", function AvlUploadDirective_upload_abort_HostBindingHandler($event) { return ctx.uploadCanceledHandler($event); })("upload-start", function AvlUploadDirective_upload_start_HostBindingHandler($event) { return ctx.uploadStartedHandler($event); })("upload-fail", function AvlUploadDirective_upload_fail_HostBindingHandler($event) { return ctx.uploadFailedHandler($event); })("files-changed", function AvlUploadDirective_files_changed_HostBindingHandler($event) { return ctx.filesChangedHandler($event); })("file-rejected", function AvlUploadDirective_file_rejected_HostBindingHandler($event) { return ctx.fileRejectedHandler($event); })("menu-item-clicked", function AvlUploadDirective_menu_item_clicked_HostBindingHandler($event) { return ctx.menuItemClickedHandler($event); });
    } }, outputs: { uploadComplete: "uploadComplete", uploadAbort: "uploadAbort", uploadFail: "uploadFail", uploadStart: "uploadStart", filesChanged: "filesChanged", fileRejected: "fileRejected", menuItemClicked: "menuItemClicked" } });
AvlUploadDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [UPLOAD_SERVICE,] }] }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadComplete", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadAbort", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadFail", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "filesChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "fileRejected", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "menuItemClicked", void 0);
__decorate([
    HostListener('upload-complete', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadCompleteHandler", null);
__decorate([
    HostListener('upload-abort', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadCanceledHandler", null);
__decorate([
    HostListener('upload-start', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadStartedHandler", null);
__decorate([
    HostListener('upload-fail', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadFailedHandler", null);
__decorate([
    HostListener('files-changed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "filesChangedHandler", null);
__decorate([
    HostListener('file-rejected', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "fileRejectedHandler", null);
__decorate([
    HostListener('menu-item-clicked', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "menuItemClickedHandler", null);
AvlUploadDirective = __decorate([ __param(1, Inject(UPLOAD_SERVICE)),
    __metadata("design:paramtypes", [ElementRef, Object])
], AvlUploadDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlUploadDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-upload'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [UPLOAD_SERVICE]
            }] }]; }, { uploadComplete: [{
            type: Output
        }], uploadAbort: [{
            type: Output
        }], uploadFail: [{
            type: Output
        }], uploadStart: [{
            type: Output
        }], filesChanged: [{
            type: Output
        }], fileRejected: [{
            type: Output
        }], menuItemClicked: [{
            type: Output
        }], uploadCompleteHandler: [{
            type: HostListener,
            args: ['upload-complete', ['$event']]
        }], uploadCanceledHandler: [{
            type: HostListener,
            args: ['upload-abort', ['$event']]
        }], uploadStartedHandler: [{
            type: HostListener,
            args: ['upload-start', ['$event']]
        }], uploadFailedHandler: [{
            type: HostListener,
            args: ['upload-fail', ['$event']]
        }], filesChangedHandler: [{
            type: HostListener,
            args: ['files-changed', ['$event']]
        }], fileRejectedHandler: [{
            type: HostListener,
            args: ['file-rejected', ['$event']]
        }], menuItemClickedHandler: [{
            type: HostListener,
            args: ['menu-item-clicked', ['$event']]
        }] }); })();
export { AvlUploadDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXVwbG9hZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvbGliL2NvbnRyb2xzL2F2bC11cGxvYWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFLdkQsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7QUFBRyxJQVNoQyxZQUFvQixPQUFtQixFQUFrQyxhQUErQjtBQUFJLFFBQXhGLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBQyxRQUFpQyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7QUFBQyxRQVIvRixtQkFBYyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3ZFLFFBQVksZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNwRSxRQUFZLGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUMvRCxRQUFZLGdCQUFXLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDcEUsUUFBWSxpQkFBWSxHQUE0QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3ZFLFFBQVksaUJBQVksR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNyRSxRQUFZLG9CQUFlLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDcEUsSUFDNkcsQ0FBQztBQUM5RyxJQUNFLFFBQVE7QUFDVixRQUFJLE1BQU0sT0FBTyxHQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3BELFFBQUksT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQy9DLElBQUUsQ0FBQztBQUNILElBRUUscUJBQXFC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LEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXpDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFSQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBakRBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFUQSxBQUFBLEFBa0RBLEFBbERBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE9uSW5pdCwgSG9zdExpc3RlbmVyLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEF2bEZpbGUsIEF2bFVwbG9hZFNlcnZpY2UgfSBmcm9tICdAYXZsLWNvbnRyb2xzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBVUExPQURfU0VSVklDRSB9IGZyb20gJy4uL3NlcnZpY2VzL3ZhcmlhYmxlcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2F2bC11cGxvYWQnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXZsVXBsb2FkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICBAT3V0cHV0KCkgdXBsb2FkQ29tcGxldGU6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdXBsb2FkQWJvcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdXBsb2FkRmFpbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIHVwbG9hZFN0YXJ0OiBFdmVudEVtaXR0ZXI8QXZsRmlsZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGZpbGVzQ2hhbmdlZDogRXZlbnRFbWl0dGVyPEF2bEZpbGVbXT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGZpbGVSZWplY3RlZDogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBtZW51SXRlbUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIEBJbmplY3QoVVBMT0FEX1NFUlZJQ0UpIHByaXZhdGUgdXBsb2FkU2VydmljZTogQXZsVXBsb2FkU2VydmljZSkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gPGFueT50aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcclxuICAgIGVsZW1lbnQudXBsb2FkU2VydmljZSA9IHRoaXMudXBsb2FkU2VydmljZTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1jb21wbGV0ZScsIFsnJGV2ZW50J10pXHJcbiAgdXBsb2FkQ29tcGxldGVIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZENvbXBsZXRlLmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndXBsb2FkLWFib3J0JywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRDYW5jZWxlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMudXBsb2FkQWJvcnQuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCd1cGxvYWQtc3RhcnQnLCBbJyRldmVudCddKVxyXG4gIHVwbG9hZFN0YXJ0ZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZFN0YXJ0LmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndXBsb2FkLWZhaWwnLCBbJyRldmVudCddKVxyXG4gIHVwbG9hZEZhaWxlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMudXBsb2FkRmFpbC5lbWl0KGUuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2ZpbGVzLWNoYW5nZWQnLCBbJyRldmVudCddKVxyXG4gIGZpbGVzQ2hhbmdlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuZmlsZXNDaGFuZ2VkLmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZmlsZS1yZWplY3RlZCcsIFsnJGV2ZW50J10pXHJcbiAgZmlsZVJlamVjdGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5maWxlUmVqZWN0ZWQuZW1pdChlLmRldGFpbC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdtZW51LWl0ZW0tY2xpY2tlZCcsIFsnJGV2ZW50J10pXHJcbiAgbWVudUl0ZW1DbGlja2VkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5tZW51SXRlbUNsaWNrZWQuZW1pdChlLmRldGFpbCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==