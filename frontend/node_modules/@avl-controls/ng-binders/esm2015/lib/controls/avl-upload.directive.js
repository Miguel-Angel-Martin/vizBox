import { __decorate, __metadata, __param } from "tslib";
import { Directive, ElementRef, OnInit, HostListener, Output, EventEmitter, Inject } from '@angular/core';
import { UPLOAD_SERVICE } from '../services/variables';
import * as ɵngcc0 from '@angular/core';
let AvlUploadDirective = class AvlUploadDirective {
    constructor(element, uploadService) {
        this.element = element;
        this.uploadService = uploadService;
        this.uploadComplete = new EventEmitter();
        this.uploadAbort = new EventEmitter();
        this.uploadFail = new EventEmitter();
        this.uploadStart = new EventEmitter();
        this.filesChanged = new EventEmitter();
        this.fileRejected = new EventEmitter();
        this.menuItemClicked = new EventEmitter();
        this.downloadFail = new EventEmitter();
        this.downloadAbort = new EventEmitter();
    }
    ngOnInit() {
        const element = this.element.nativeElement;
        element.uploadService = this.uploadService;
    }
    uploadCompleteHandler(e) {
        this.uploadComplete.emit(e.detail.value);
    }
    uploadCanceledHandler(e) {
        this.uploadAbort.emit(e.detail.value);
    }
    uploadStartedHandler(e) {
        this.uploadStart.emit(e.detail.value);
    }
    uploadFailedHandler(e) {
        this.uploadFail.emit(e.detail);
    }
    filesChangedHandler(e) {
        this.filesChanged.emit(e.detail.value);
    }
    fileRejectedHandler(e) {
        this.fileRejected.emit(e.detail.value);
    }
    menuItemClickedHandler(e) {
        this.menuItemClicked.emit(e.detail);
    }
    downloadFailedHandler(e) {
        this.downloadFail.emit(e.detail);
    }
    downloadCanceledHandler(e) {
        this.downloadAbort.emit(e.detail.value);
    }
};
AvlUploadDirective.ɵfac = function AvlUploadDirective_Factory(t) { return new (t || AvlUploadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(UPLOAD_SERVICE)); };
AvlUploadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlUploadDirective, selectors: [["avl-upload"]], hostBindings: function AvlUploadDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("upload-complete", function AvlUploadDirective_upload_complete_HostBindingHandler($event) { return ctx.uploadCompleteHandler($event); })("upload-abort", function AvlUploadDirective_upload_abort_HostBindingHandler($event) { return ctx.uploadCanceledHandler($event); })("upload-start", function AvlUploadDirective_upload_start_HostBindingHandler($event) { return ctx.uploadStartedHandler($event); })("upload-fail", function AvlUploadDirective_upload_fail_HostBindingHandler($event) { return ctx.uploadFailedHandler($event); })("files-changed", function AvlUploadDirective_files_changed_HostBindingHandler($event) { return ctx.filesChangedHandler($event); })("file-rejected", function AvlUploadDirective_file_rejected_HostBindingHandler($event) { return ctx.fileRejectedHandler($event); })("menu-item-clicked", function AvlUploadDirective_menu_item_clicked_HostBindingHandler($event) { return ctx.menuItemClickedHandler($event); })("download-fail", function AvlUploadDirective_download_fail_HostBindingHandler($event) { return ctx.downloadFailedHandler($event); })("download-abort", function AvlUploadDirective_download_abort_HostBindingHandler($event) { return ctx.downloadCanceledHandler($event); });
    } }, outputs: { uploadComplete: "uploadComplete", uploadAbort: "uploadAbort", uploadFail: "uploadFail", uploadStart: "uploadStart", filesChanged: "filesChanged", fileRejected: "fileRejected", menuItemClicked: "menuItemClicked", downloadFail: "downloadFail", downloadAbort: "downloadAbort" } });
AvlUploadDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [UPLOAD_SERVICE,] }] }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadComplete", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadAbort", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadFail", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "uploadStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "filesChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "fileRejected", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "menuItemClicked", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "downloadFail", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlUploadDirective.prototype, "downloadAbort", void 0);
__decorate([
    HostListener('upload-complete', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadCompleteHandler", null);
__decorate([
    HostListener('upload-abort', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadCanceledHandler", null);
__decorate([
    HostListener('upload-start', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadStartedHandler", null);
__decorate([
    HostListener('upload-fail', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "uploadFailedHandler", null);
__decorate([
    HostListener('files-changed', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "filesChangedHandler", null);
__decorate([
    HostListener('file-rejected', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "fileRejectedHandler", null);
__decorate([
    HostListener('menu-item-clicked', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "menuItemClickedHandler", null);
__decorate([
    HostListener('download-fail', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "downloadFailedHandler", null);
__decorate([
    HostListener('download-abort', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlUploadDirective.prototype, "downloadCanceledHandler", null);
AvlUploadDirective = __decorate([ __param(1, Inject(UPLOAD_SERVICE)),
    __metadata("design:paramtypes", [ElementRef, Object])
], AvlUploadDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlUploadDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-upload'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [UPLOAD_SERVICE]
            }] }]; }, { uploadComplete: [{
            type: Output
        }], uploadAbort: [{
            type: Output
        }], uploadFail: [{
            type: Output
        }], uploadStart: [{
            type: Output
        }], filesChanged: [{
            type: Output
        }], fileRejected: [{
            type: Output
        }], menuItemClicked: [{
            type: Output
        }], downloadFail: [{
            type: Output
        }], downloadAbort: [{
            type: Output
        }], uploadCompleteHandler: [{
            type: HostListener,
            args: ['upload-complete', ['$event']]
        }], uploadCanceledHandler: [{
            type: HostListener,
            args: ['upload-abort', ['$event']]
        }], uploadStartedHandler: [{
            type: HostListener,
            args: ['upload-start', ['$event']]
        }], uploadFailedHandler: [{
            type: HostListener,
            args: ['upload-fail', ['$event']]
        }], filesChangedHandler: [{
            type: HostListener,
            args: ['files-changed', ['$event']]
        }], fileRejectedHandler: [{
            type: HostListener,
            args: ['file-rejected', ['$event']]
        }], menuItemClickedHandler: [{
            type: HostListener,
            args: ['menu-item-clicked', ['$event']]
        }], downloadFailedHandler: [{
            type: HostListener,
            args: ['download-fail', ['$event']]
        }], downloadCanceledHandler: [{
            type: HostListener,
            args: ['download-abort', ['$event']]
        }] }); })();
export { AvlUploadDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXVwbG9hZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9AYXZsLWNvbnRyb2xzL25nLWJpbmRlcnMvbGliL2NvbnRyb2xzL2F2bC11cGxvYWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFLdkQsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7QUFBRyxJQVdoQyxZQUFvQixPQUFtQixFQUFrQyxhQUErQjtBQUFJLFFBQXhGLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBQyxRQUFpQyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7QUFBQyxRQVYvRixtQkFBYyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3ZFLFFBQVksZ0JBQVcsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNwRSxRQUFZLGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUMvRCxRQUFZLGdCQUFXLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDcEUsUUFBWSxpQkFBWSxHQUE0QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3ZFLFFBQVksaUJBQVksR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNyRSxRQUFZLG9CQUFlLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDcEUsUUFBWSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2pFLFFBQVksa0JBQWEsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUN0RSxJQUM2RyxDQUFDO0FBQzlHLElBQ0UsUUFBUTtBQUNWLFFBQUksTUFBTSxPQUFPLEdBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENB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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEOztBQXRFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQW5EQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFVQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUE3REEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVhBLEFBQUEsQUE4REEsQUE5REEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBIb3N0TGlzdGVuZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXZsRmlsZSwgQXZsVXBsb2FkU2VydmljZSB9IGZyb20gJ0BhdmwtY29udHJvbHMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFVQTE9BRF9TRVJWSUNFIH0gZnJvbSAnLi4vc2VydmljZXMvdmFyaWFibGVzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLXVwbG9hZCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxVcGxvYWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRDb21wbGV0ZTogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRBYm9ydDogRXZlbnRFbWl0dGVyPEF2bEZpbGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSB1cGxvYWRGYWlsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgdXBsb2FkU3RhcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZXNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZVtdPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZmlsZVJlamVjdGVkOiBFdmVudEVtaXR0ZXI8QXZsRmlsZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIG1lbnVJdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkRmFpbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRvd25sb2FkQWJvcnQ6IEV2ZW50RW1pdHRlcjxBdmxGaWxlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KFVQTE9BRF9TRVJWSUNFKSBwcml2YXRlIHVwbG9hZFNlcnZpY2U6IEF2bFVwbG9hZFNlcnZpY2UpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IDxhbnk+dGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICBlbGVtZW50LnVwbG9hZFNlcnZpY2UgPSB0aGlzLnVwbG9hZFNlcnZpY2U7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCd1cGxvYWQtY29tcGxldGUnLCBbJyRldmVudCddKVxyXG4gIHVwbG9hZENvbXBsZXRlSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRDb21wbGV0ZS5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1hYm9ydCcsIFsnJGV2ZW50J10pXHJcbiAgdXBsb2FkQ2FuY2VsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZEFib3J0LmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigndXBsb2FkLXN0YXJ0JywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRTdGFydGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy51cGxvYWRTdGFydC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3VwbG9hZC1mYWlsJywgWyckZXZlbnQnXSlcclxuICB1cGxvYWRGYWlsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLnVwbG9hZEZhaWwuZW1pdChlLmRldGFpbCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdmaWxlcy1jaGFuZ2VkJywgWyckZXZlbnQnXSlcclxuICBmaWxlc0NoYW5nZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmZpbGVzQ2hhbmdlZC5lbWl0KGUuZGV0YWlsLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2ZpbGUtcmVqZWN0ZWQnLCBbJyRldmVudCddKVxyXG4gIGZpbGVSZWplY3RlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuZmlsZVJlamVjdGVkLmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbWVudS1pdGVtLWNsaWNrZWQnLCBbJyRldmVudCddKVxyXG4gIG1lbnVJdGVtQ2xpY2tlZEhhbmRsZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMubWVudUl0ZW1DbGlja2VkLmVtaXQoZS5kZXRhaWwpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZG93bmxvYWQtZmFpbCcsIFsnJGV2ZW50J10pXHJcbiAgZG93bmxvYWRGYWlsZWRIYW5kbGVyKGU6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLmRvd25sb2FkRmFpbC5lbWl0KGUuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2Rvd25sb2FkLWFib3J0JywgWyckZXZlbnQnXSlcclxuICBkb3dubG9hZENhbmNlbGVkSGFuZGxlcihlOiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5kb3dubG9hZEFib3J0LmVtaXQoZS5kZXRhaWwudmFsdWUpO1xyXG4gIH1cclxufVxyXG4iXX0=