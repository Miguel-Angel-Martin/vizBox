import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let AvlBreadcrumbDirective = class AvlBreadcrumbDirective {
    constructor() {
        this.itemClicked = new EventEmitter();
    }
    itemClickedListener(e) {
        this.itemClicked.emit(e.detail.item);
    }
};
AvlBreadcrumbDirective.ɵfac = function AvlBreadcrumbDirective_Factory(t) { return new (t || AvlBreadcrumbDirective)(); };
AvlBreadcrumbDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlBreadcrumbDirective, selectors: [["avl-breadcrumb"]], hostBindings: function AvlBreadcrumbDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("item-clicked", function AvlBreadcrumbDirective_item_clicked_HostBindingHandler($event) { return ctx.itemClickedListener($event); });
    } }, outputs: { itemClicked: "itemClicked" } });
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlBreadcrumbDirective.prototype, "itemClicked", void 0);
__decorate([
    HostListener('item-clicked', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CustomEvent]),
    __metadata("design:returntype", void 0)
], AvlBreadcrumbDirective.prototype, "itemClickedListener", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlBreadcrumbDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-breadcrumb'
            }]
    }], function () { return []; }, { itemClicked: [{
            type: Output
        }], itemClickedListener: [{
            type: HostListener,
            args: ['item-clicked', ['$event']]
        }] }); })();
export { AvlBreadcrumbDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLWJyZWFkY3J1bWIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtYnJlYWRjcnVtYi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlFLElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0FBQ25DLElBREE7QUFBZ0IsUUFDSixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2hFLElBS0EsQ0FBQztBQUNELElBSkUsbUJBQW1CLENBQUMsQ0FBYztBQUNwQyxRQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7OztvREFBQTtBQU5XO0FBQWEsSUFBdEIsTUFBTSxFQUFFO0FBQUUsOEJBQVksWUFBWTtBQUFFLDJEQUF5QjtBQUc5RDtBQUFhLElBRFosWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFDO0FBQ0MscUNBRHVCLFdBQVc7QUFDcEM7QUFDRSxpRUFBQztBQU5VLHNCQUFzQixvQkFIbEMsU0FBUyxDQUFDLFVBQ1QsUUFBUSxFQUFFO09BQWdCLE1BQzNCLENBQUMsSUFDVztlQUFzQixDQU9sQzs7Ozs7Ozs7b0JBQ0Q7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFOQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBTkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFPQSxBQVBBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLWJyZWFkY3J1bWInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxCcmVhZGNydW1iRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgaXRlbUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBASG9zdExpc3RlbmVyKCdpdGVtLWNsaWNrZWQnLCBbJyRldmVudCddKVxyXG4gIGl0ZW1DbGlja2VkTGlzdGVuZXIoZTogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuaXRlbUNsaWNrZWQuZW1pdChlLmRldGFpbC5pdGVtKTtcclxuICB9XHJcbn1cclxuICAiXX0=