import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, Output, ElementRef } from '@angular/core';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as ɵngcc0 from '@angular/core';
let AvlTimeDirective = class AvlTimeDirective {
    constructor(elementRef) {
        this.valueChange = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'value-changed', this.valueChange);
    }
};
AvlTimeDirective.ɵfac = function AvlTimeDirective_Factory(t) { return new (t || AvlTimeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AvlTimeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AvlTimeDirective, selectors: [["avl-time"]], outputs: { valueChange: "valueChange" } });
AvlTimeDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AvlTimeDirective.prototype, "valueChange", void 0);
AvlTimeDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], AvlTimeDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AvlTimeDirective, [{
        type: Directive,
        args: [{
                selector: 'avl-time'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { valueChange: [{
            type: Output
        }] }); })();
export { AvlTimeDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZsLXRpbWUuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQGF2bC1jb250cm9scy9uZy1iaW5kZXJzL2xpYi9jb250cm9scy9hdmwtdGltZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBTTVFLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0FBQzdCLElBRUUsWUFBWSxVQUFzQjtBQUNwQyxRQUhZLGdCQUFXLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7QUFDbkUsUUFFSSx3Q0FBd0MsQ0FBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUM1RixJQUFFLENBQUM7QUFDSCxDQUFDOztpSkFBQTtBQUNEO0FBQTBDLFlBSmhCLFVBQVU7QUFBRztBQUYzQjtBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFFLDhCQUFZLFlBQVk7QUFBRSxxREFBNEI7QUFEdEQsZ0JBQWdCLG9CQUg1QixTQUFTLENBQUMsVUFDVCxRQUFRLEVBQUUsVUFBVSw3Q0FFbEIsa0NBR3NCLFVBQVU7SUFKbkMsQ0FBQyxMQUlxQyxHQUgxQixnQkFBZ0IsQ0FNNUI7Ozs7Ozs7O29CQUNEOztBQWRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQURBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBSEEsQUFBQSxBQU1BLEFBTkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lckZvckVtaXR0aW5nQ2hhbmdlZEV2ZW50cyB9IGZyb20gJy4uL2JpbmRpbmctdXRpbHMnO1xyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnYXZsLXRpbWUnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBdmxUaW1lRGlyZWN0aXZlIHtcclxuICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBhZGRFdmVudExpc3RlbmVyRm9yRW1pdHRpbmdDaGFuZ2VkRXZlbnRzKGVsZW1lbnRSZWYsICd2YWx1ZS1jaGFuZ2VkJywgdGhpcy52YWx1ZUNoYW5nZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==