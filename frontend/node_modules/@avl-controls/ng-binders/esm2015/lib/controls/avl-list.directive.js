import { Directive, EventEmitter, forwardRef, HostListener, Output, Input } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { AvlInteractionControlDirective } from '../interface/avl-interaction-control.directive';
import { addEventListenerForEmittingChangedEvents } from '../binding-utils';
import * as i0 from "@angular/core";
export class AvlListDirective extends AvlInteractionControlDirective {
    constructor(elementRef, renderer) {
        super(elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.invalidChange = new EventEmitter();
        this.overflowMenuItemClicked = new EventEmitter();
        this.rightCheckboxChanged = new EventEmitter();
        this.activeRowChanged = new EventEmitter();
        this.rowReordered = new EventEmitter();
        addEventListenerForEmittingChangedEvents(elementRef, 'invalid-changed', this.focusedChange);
    }
    // Angular writes readonly attributes to a readOnly property,
    // because that's how it's called on the native input element.
    set readonly(value) {
        this.elementRef.nativeElement.readonly = value;
    }
    selectedValueChanged(e) {
        if (this.onChangeCallback && !this.isMulti()) {
            this.onChangeCallback(e.detail.value);
        }
    }
    selectedValuesChanged(e) {
        if (this.onChangeCallback && this.isMulti()) {
            this.onChangeCallback(e.detail.value);
        }
    }
    overflowMenuItemClickListener(e) {
        this.overflowMenuItemClicked.emit(e.detail);
    }
    rightCheckboxChangeListener(e) {
        this.rightCheckboxChanged.emit(e.detail);
    }
    activatedRowChangeListener(e) {
        this.activeRowChanged.emit(e.detail.value);
    }
    rowReorderedListener(e) {
        this.rowReordered.emit(e.detail);
    }
    writeValue(value) {
        const property = this.isMulti() ? 'selectedValues' : 'selectedValue';
        this.renderer.setProperty(this.elementRef.nativeElement, property, value);
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    // Since avl-list doesn't have validate-on-leave, there's no touching
    registerOnTouched(fn) { }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
    isMulti() {
        return (this.elementRef.nativeElement && this.elementRef.nativeElement.multi === true);
    }
    //#region Validator
    validate(control) {
        const formControl = this.elementRef.nativeElement;
        if (formControl.invalid) {
            return { invalid: formControl.errorMessage };
        }
        else {
            return null;
        }
    }
}
AvlListDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlListDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
AvlListDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.4", type: AvlListDirective, selector: "avl-list", inputs: { readonly: "readonly" }, outputs: { invalidChange: "invalidChange", overflowMenuItemClicked: "overflowMenuItemClicked", rightCheckboxChanged: "rightCheckboxChanged", activeRowChanged: "activeRowChanged", rowReordered: "rowReordered" }, host: { listeners: { "selected-value-changed": "selectedValueChanged($event)", "selected-values-changed": "selectedValuesChanged($event)", "overflow-menu-item-clicked": "overflowMenuItemClickListener($event)", "right-checkbox-changed": "rightCheckboxChangeListener($event)", "active-row-changed": "activatedRowChangeListener($event)", "row-reordered": "rowReorderedListener($event)" } }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlListDirective), multi: true },
        { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlListDirective), multi: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: AvlListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'avl-list',
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AvlListDirective), multi: true },
                        { provide: NG_VALIDATORS, useExisting: forwardRef(() => AvlListDirective), multi: true }]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { invalidChange: [{
                type: Output
            }], overflowMenuItemClicked: [{
                type: Output
            }], rightCheckboxChanged: [{
                type: Output
            }], activeRowChanged: [{
                type: Output
            }], rowReordered: [{
                type: Output
            }], readonly: [{
                type: Input
            }], selectedValueChanged: [{
                type: HostListener,
                args: ['selected-value-changed', ['$event']]
            }], selectedValuesChanged: [{
                type: HostListener,
                args: ['selected-values-changed', ['$event']]
            }], overflowMenuItemClickListener: [{
                type: HostListener,
                args: ['overflow-menu-item-clicked', ['$event']]
            }], rightCheckboxChangeListener: [{
                type: HostListener,
                args: ['right-checkbox-changed', ['$event']]
            }], activatedRowChangeListener: [{
                type: HostListener,
                args: ['active-row-changed', ['$event']]
            }], rowReorderedListener: [{
                type: HostListener,
                args: ['row-reordered', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,