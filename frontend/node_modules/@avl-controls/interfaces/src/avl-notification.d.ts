export declare const enum AvlNotificationType {
    Error = 0,
    Warning = 1,
    Info = 2,
    OK = 3
}
/** General Avl Notification interface */
export interface AvlNotification {
    /**
     * Notification identifier
     */
    readonly id: number;
    /**
     * Application module from which the notification is sent.
     * In case of the composite application this is the application name.
     */
    readonly module: string;
    /**
     * Marks the date and time of when the notification is created
     */
    readonly timestamp: Date;
    /**
     * Type of the notification (e.g. error or warning)
     */
    readonly type: AvlNotificationType;
    /**
     * Link associated to the notification
     */
    readonly link: string;
    /**
     * Main message of the notification
     */
    readonly messageText: string;
    /**
     * State of the notification (read or unread)
     */
    read: boolean;
}
/**
 * Metadata about notification which is initially sent to the server when connection is established.
 */
export interface AvlNotificationMetadata {
    /**
     * Name of the client/application/module that establishes connection to the server
     */
    clientName?: string;
    /**
     * Initial language of the notifications
     */
    language?: string;
}
export interface AvlNotificationConnectionOptions {
    /** Connection identificator */
    readonly connectionID: string;
    /**
     * Metadata about notifications sent to the server when starting connection
     */
    readonly metadata?: AvlNotificationMetadata;
}
/**
 * This class is the extension of SignalR's Hub class that should be used in the backend.
 *
 * Methods implemented here will be invoked from connected clients (RPC - Remote procedure call)
 *
 * This methods are required by frontend Notification service.
 */
export declare abstract class AvlNotificationHub {
    /**
     * Client calls this method when it is ready to receive notifications
     * @param metadata Metadata about notifications (e.g. language)
     */
    abstract startNotifications(metadata: AvlNotificationMetadata): void;
}
/**
 * List of events in the form of interface required by the AVL notification service.
 * These events must be used in signalR backend.
 *
 * Field names are event names that the frontend service listens to.
 *
 * Types are form of a payload that should be send with specific event
 * (e.g. transferNotification sends one AvlNotification object)
 */
export interface AvlNotificationServiceRequiredEvents {
    /** Send this event when you want to transfer notification, pass in the notification object as a payload */
    transferNotification: (notification: AvlNotification) => {};
}
