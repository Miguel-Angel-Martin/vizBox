export type AvlAbortUploadAction = () => any;

export type AvlUploadStatus = 'fail' | 'abort' | 'complete' | 'uploading' | 'notStarted';

export interface AvlHttpErrorResponse {
  /**
   * Status code
   */
  status: number;

  /**
   * response
   */
  response: any
}

export interface AvlFile {
  /**
   * File name
   */
  name: string;

  /**
   * File media type
   */
  type?: string;

  /**
   * File size in bytes
   */
  size?: number;

  /**
   * Amount of bytes uploaded
   */
  loaded?: number;

  /**
   * Upload status
   */
  status: AvlUploadStatus;

  /**
   * Native file object
   */
  file?: File;

  /**
   * URL on which file can be downloaded
   */
  downloadUrl?: string;

  /**
   * Additional custom properies
   */
  [key: string]: any;
}

export interface AvlUploadProgressEvent {
  /**
   * Indicating if the upload process can be tracked
   */
  lengthComputable?: boolean;

  /**
   * Number of bytes uploaded so far
   */
  loaded?: number;
}

export interface AvlUploadService {
  /**
   * Handle uploading file to target
   * 
   * @param file AvlFile object to upload to server
   * @param target Endpoint url to send a file to
   * @param progressCallback Callback function to call on each upload progress event
   * @param completeCallback Callback function to call on successful upload
   * @param failCallback Callback function to call on upload fail
   * @returns Function that will abort upload process
   */
  uploadFile(file: AvlFile, target: string,
    progressCallback?: (progress: AvlUploadProgressEvent) => void,
    completeCallback?: (downloadUrl?: string) => void,
    failCallback?: (errorResponse: AvlHttpErrorResponse) => void): AvlAbortUploadAction;
  
  /**
   * Open file from url
   * 
   * @param url Url on which file can be downloaded
   */
  downloadFile(url: string): Promise<Blob>;
}