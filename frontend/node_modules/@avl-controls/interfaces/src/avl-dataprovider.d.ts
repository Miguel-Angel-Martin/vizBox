export interface Order {
    /**
     * JS Path of the property in the item used for sorting the data.
     */
    path: string;
    /**
     * How to sort the data.
     */
    ascending: boolean;
}
/**
 * Name of the key used to set global filter value in filters map.
 */
export declare const globalFilterKey = "globalFilter";
export interface DataRequestParamsBase {
    /**
     * Requested page index.
     */
    page: number;
    /**
     * Size of the page.
     */
    pageSize: number;
}
export interface ListDataRequestParams extends DataRequestParamsBase {
}
export interface ComboBoxDataRequestParams extends DataRequestParamsBase {
    filter: string;
}
export interface ChipInputDataRequestParams extends DataRequestParamsBase {
    filter: string;
}
export interface TableDataRequestParams extends DataRequestParamsBase {
    /**
     * Currently applied filters: key value pairs (path -> value).
     * When global filter is used, map contains [[globalFilterKey]] key which contains the current value of the filter.
     */
    filters: Map<string, string>;
    /**
     * Fields which are used in global filtering
     */
    globalFilterFields: string[];
    /**
     * Currently applied sorting orders.
     */
    sortOrders: Order[];
    /**
     * When requesting children of an item this contains the parent item.
     */
    parentItem?: Row;
}
export interface RowBase {
    [key: string]: any;
}
export interface Row extends RowBase {
    /**
     * Does the item have children.
     */
    hasChildren?: boolean;
    /**
     * Do descedents of the item match the filter.
     */
    descendantsMatchFilter?: boolean;
}
export interface ListRow extends RowBase {
    label: string;
    sublabel?: string;
    icon?: string;
    badgeValue?: string;
    disabled?: boolean;
}
export interface ComboBoxRow extends RowBase {
    label: string;
    icon?: string;
    disabled?: boolean;
}
export interface ChipInputRow extends RowBase {
    label: string;
    thumbnailIcon?: string;
    thumbnailImage?: string;
    removeIcon?: boolean;
}
export interface DataProviderResponseBase {
    /**
     * Rows from the requested page.
     */
    rows: RowBase[];
    /**
     * Total number of rows.
     */
    totalRows: number;
}
export interface DataProviderResponse extends DataProviderResponseBase {
    /**
     * Rows from the requested page.
     */
    rows: Row[];
}
export interface ListDataProviderResponse extends DataProviderResponseBase {
    /**
     * Rows from the requested page.
     */
    rows: ListRow[];
}
export interface ComboBoxDataProviderResponse extends DataProviderResponseBase {
    rows: ComboBoxRow[];
}
export interface ChipInputDataProviderResponse extends DataProviderResponseBase {
    rows: ChipInputRow[];
}
export declare type DataProvider = (params: TableDataRequestParams) => Promise<DataProviderResponse>;
export declare type ListDataProvider = (params: ListDataRequestParams) => Promise<ListDataProviderResponse>;
export declare type ComboBoxDataProvider = (params: ComboBoxDataRequestParams) => Promise<ComboBoxDataProviderResponse>;
export declare type ChipInputDataProvider = (params: ChipInputDataRequestParams) => Promise<ChipInputDataProviderResponse>;
