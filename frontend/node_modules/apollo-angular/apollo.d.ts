import { NgZone } from '@angular/core';
import { ApolloClient, QueryOptions, MutationOptions, ApolloQueryResult, SubscriptionOptions, ApolloClientOptions, FetchResult } from '@apollo/client/core';
import { Observable } from 'rxjs';
import { QueryRef } from './query-ref';
import { WatchQueryOptions, ExtraSubscriptionOptions, EmptyObject, NamedOptions, Flags } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class ApolloBase<TCacheShape = any> {
    protected ngZone: NgZone;
    protected flags?: Flags;
    protected _client?: ApolloClient<TCacheShape>;
    private useInitialLoading;
    constructor(ngZone: NgZone, flags?: Flags, _client?: ApolloClient<TCacheShape>);
    watchQuery<TData, TVariables = EmptyObject>(options: WatchQueryOptions<TVariables>): QueryRef<TData, TVariables>;
    query<T, V = EmptyObject>(options: QueryOptions<V>): Observable<ApolloQueryResult<T>>;
    mutate<T, V = EmptyObject>(options: MutationOptions<T, V>): Observable<FetchResult<T>>;
    subscribe<T, V = EmptyObject>(options: SubscriptionOptions<V>, extra?: ExtraSubscriptionOptions): Observable<FetchResult<T>>;
    /**
     * Get an access to an instance of ApolloClient
     * @deprecated use `apollo.client` instead
     */
    getClient(): ApolloClient<TCacheShape>;
    /**
     * Set a new instance of ApolloClient
     * Remember to clean up the store before setting a new client.
     * @deprecated use `apollo.client = client` instead
     *
     * @param client ApolloClient instance
     */
    setClient(client: ApolloClient<TCacheShape>): void;
    /**
     * Get an access to an instance of ApolloClient
     */
    get client(): ApolloClient<TCacheShape>;
    /**
     * Set a new instance of ApolloClient
     * Remember to clean up the store before setting a new client.
     *
     * @param client ApolloClient instance
     */
    set client(client: ApolloClient<TCacheShape>);
    private ensureClient;
    private checkInstance;
}
export declare class Apollo extends ApolloBase<any> {
    private _ngZone;
    private map;
    constructor(_ngZone: NgZone, apolloOptions?: ApolloClientOptions<any>, apolloNamedOptions?: NamedOptions, flags?: Flags);
    /**
     * Create an instance of ApolloClient
     * @param options Options required to create ApolloClient
     * @param name client's name
     */
    create<TCacheShape>(options: ApolloClientOptions<TCacheShape>, name?: string): void;
    /**
     * Use a default ApolloClient
     */
    default(): ApolloBase<any>;
    /**
     * Use a named ApolloClient
     * @param name client's name
     */
    use(name: string): ApolloBase<any>;
    /**
     * Create a default ApolloClient, same as `apollo.create(options)`
     * @param options ApolloClient's options
     */
    createDefault<TCacheShape>(options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Create a named ApolloClient, same as `apollo.create(options, name)`
     * @param name client's name
     * @param options ApolloClient's options
     */
    createNamed<TCacheShape>(name: string, options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Remember to clean up the store before removing a client
     * @param name client's name
     */
    removeClient(name?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Apollo, [null, { optional: true; }, { optional: true; }, { optional: true; }]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBvbGxvLmQudHMiLCJzb3VyY2VzIjpbImFwb2xsby5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcG9sbG9DbGllbnQsIFF1ZXJ5T3B0aW9ucywgTXV0YXRpb25PcHRpb25zLCBBcG9sbG9RdWVyeVJlc3VsdCwgU3Vic2NyaXB0aW9uT3B0aW9ucywgQXBvbGxvQ2xpZW50T3B0aW9ucywgRmV0Y2hSZXN1bHQgfSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFF1ZXJ5UmVmIH0gZnJvbSAnLi9xdWVyeS1yZWYnO1xuaW1wb3J0IHsgV2F0Y2hRdWVyeU9wdGlvbnMsIEV4dHJhU3Vic2NyaXB0aW9uT3B0aW9ucywgRW1wdHlPYmplY3QsIE5hbWVkT3B0aW9ucywgRmxhZ3MgfSBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFwb2xsb0Jhc2U8VENhY2hlU2hhcGUgPSBhbnk+IHtcbiAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIGZsYWdzPzogRmxhZ3M7XG4gICAgcHJvdGVjdGVkIF9jbGllbnQ/OiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+O1xuICAgIHByaXZhdGUgdXNlSW5pdGlhbExvYWRpbmc7XG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUsIGZsYWdzPzogRmxhZ3MsIF9jbGllbnQ/OiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+KTtcbiAgICB3YXRjaFF1ZXJ5PFREYXRhLCBUVmFyaWFibGVzID0gRW1wdHlPYmplY3Q+KG9wdGlvbnM6IFdhdGNoUXVlcnlPcHRpb25zPFRWYXJpYWJsZXM+KTogUXVlcnlSZWY8VERhdGEsIFRWYXJpYWJsZXM+O1xuICAgIHF1ZXJ5PFQsIFYgPSBFbXB0eU9iamVjdD4ob3B0aW9uczogUXVlcnlPcHRpb25zPFY+KTogT2JzZXJ2YWJsZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj47XG4gICAgbXV0YXRlPFQsIFYgPSBFbXB0eU9iamVjdD4ob3B0aW9uczogTXV0YXRpb25PcHRpb25zPFQsIFY+KTogT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdDxUPj47XG4gICAgc3Vic2NyaWJlPFQsIFYgPSBFbXB0eU9iamVjdD4ob3B0aW9uczogU3Vic2NyaXB0aW9uT3B0aW9uczxWPiwgZXh0cmE/OiBFeHRyYVN1YnNjcmlwdGlvbk9wdGlvbnMpOiBPYnNlcnZhYmxlPEZldGNoUmVzdWx0PFQ+PjtcbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYWNjZXNzIHRvIGFuIGluc3RhbmNlIG9mIEFwb2xsb0NsaWVudFxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgYXBvbGxvLmNsaWVudGAgaW5zdGVhZFxuICAgICAqL1xuICAgIGdldENsaWVudCgpOiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+O1xuICAgIC8qKlxuICAgICAqIFNldCBhIG5ldyBpbnN0YW5jZSBvZiBBcG9sbG9DbGllbnRcbiAgICAgKiBSZW1lbWJlciB0byBjbGVhbiB1cCB0aGUgc3RvcmUgYmVmb3JlIHNldHRpbmcgYSBuZXcgY2xpZW50LlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgYXBvbGxvLmNsaWVudCA9IGNsaWVudGAgaW5zdGVhZFxuICAgICAqXG4gICAgICogQHBhcmFtIGNsaWVudCBBcG9sbG9DbGllbnQgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBzZXRDbGllbnQoY2xpZW50OiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYWNjZXNzIHRvIGFuIGluc3RhbmNlIG9mIEFwb2xsb0NsaWVudFxuICAgICAqL1xuICAgIGdldCBjbGllbnQoKTogQXBvbGxvQ2xpZW50PFRDYWNoZVNoYXBlPjtcbiAgICAvKipcbiAgICAgKiBTZXQgYSBuZXcgaW5zdGFuY2Ugb2YgQXBvbGxvQ2xpZW50XG4gICAgICogUmVtZW1iZXIgdG8gY2xlYW4gdXAgdGhlIHN0b3JlIGJlZm9yZSBzZXR0aW5nIGEgbmV3IGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbGllbnQgQXBvbGxvQ2xpZW50IGluc3RhbmNlXG4gICAgICovXG4gICAgc2V0IGNsaWVudChjbGllbnQ6IEFwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT4pO1xuICAgIHByaXZhdGUgZW5zdXJlQ2xpZW50O1xuICAgIHByaXZhdGUgY2hlY2tJbnN0YW5jZTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFwb2xsbyBleHRlbmRzIEFwb2xsb0Jhc2U8YW55PiB7XG4gICAgcHJpdmF0ZSBfbmdab25lO1xuICAgIHByaXZhdGUgbWFwO1xuICAgIGNvbnN0cnVjdG9yKF9uZ1pvbmU6IE5nWm9uZSwgYXBvbGxvT3B0aW9ucz86IEFwb2xsb0NsaWVudE9wdGlvbnM8YW55PiwgYXBvbGxvTmFtZWRPcHRpb25zPzogTmFtZWRPcHRpb25zLCBmbGFncz86IEZsYWdzKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXBvbGxvQ2xpZW50XG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyByZXF1aXJlZCB0byBjcmVhdGUgQXBvbGxvQ2xpZW50XG4gICAgICogQHBhcmFtIG5hbWUgY2xpZW50J3MgbmFtZVxuICAgICAqL1xuICAgIGNyZWF0ZTxUQ2FjaGVTaGFwZT4ob3B0aW9uczogQXBvbGxvQ2xpZW50T3B0aW9uczxUQ2FjaGVTaGFwZT4sIG5hbWU/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVzZSBhIGRlZmF1bHQgQXBvbGxvQ2xpZW50XG4gICAgICovXG4gICAgZGVmYXVsdCgpOiBBcG9sbG9CYXNlPGFueT47XG4gICAgLyoqXG4gICAgICogVXNlIGEgbmFtZWQgQXBvbGxvQ2xpZW50XG4gICAgICogQHBhcmFtIG5hbWUgY2xpZW50J3MgbmFtZVxuICAgICAqL1xuICAgIHVzZShuYW1lOiBzdHJpbmcpOiBBcG9sbG9CYXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGVmYXVsdCBBcG9sbG9DbGllbnQsIHNhbWUgYXMgYGFwb2xsby5jcmVhdGUob3B0aW9ucylgXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQXBvbGxvQ2xpZW50J3Mgb3B0aW9uc1xuICAgICAqL1xuICAgIGNyZWF0ZURlZmF1bHQ8VENhY2hlU2hhcGU+KG9wdGlvbnM6IEFwb2xsb0NsaWVudE9wdGlvbnM8VENhY2hlU2hhcGU+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuYW1lZCBBcG9sbG9DbGllbnQsIHNhbWUgYXMgYGFwb2xsby5jcmVhdGUob3B0aW9ucywgbmFtZSlgXG4gICAgICogQHBhcmFtIG5hbWUgY2xpZW50J3MgbmFtZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFwb2xsb0NsaWVudCdzIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjcmVhdGVOYW1lZDxUQ2FjaGVTaGFwZT4obmFtZTogc3RyaW5nLCBvcHRpb25zOiBBcG9sbG9DbGllbnRPcHRpb25zPFRDYWNoZVNoYXBlPik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtZW1iZXIgdG8gY2xlYW4gdXAgdGhlIHN0b3JlIGJlZm9yZSByZW1vdmluZyBhIGNsaWVudFxuICAgICAqIEBwYXJhbSBuYW1lIGNsaWVudCdzIG5hbWVcbiAgICAgKi9cbiAgICByZW1vdmVDbGllbnQobmFtZT86IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=