import { FetchResult, Observable as LinkObservable } from '@apollo/client/core';
import { ApolloTestingController, MatchOperation } from './controller';
import { TestOperation, Operation } from './operation';
/**
 * A testing backend for `Apollo`.
 *
 * `ApolloTestingBackend` works by keeping a list of all open operations.
 * As operations come in, they're added to the list. Users can assert that specific
 * operations were made and then flush them. In the end, a verify() method asserts
 * that no unexpected operations were made.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ApolloTestingBackend implements ApolloTestingController {
    /**
     * List of pending operations which have not yet been expected.
     */
    private open;
    /**
     * Handle an incoming operation by queueing it in the list of open operations.
     */
    handle(op: Operation): LinkObservable<FetchResult>;
    /**
     * Helper function to search for operations in the list of open operations.
     */
    private _match;
    private matchOp;
    private compare;
    /**
     * Search for operations in the list of open operations, and return all that match
     * without asserting anything about the number of matches.
     */
    match(match: MatchOperation): TestOperation[];
    /**
     * Expect that a single outstanding request matches the given matcher, and return
     * it.
     *
     * operations returned through this API will no longer be in the list of open operations,
     * and thus will not match twice.
     */
    expectOne(match: MatchOperation, description?: string): TestOperation;
    /**
     * Expect that no outstanding operations match the given matcher, and throw an error
     * if any do.
     */
    expectNone(match: MatchOperation, description?: string): void;
    /**
     * Validate that there are no outstanding operations.
     */
    verify(): void;
    private isDocumentNode;
    private descriptionFromMatcher;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ApolloTestingBackend, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ApolloTestingBackend>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC5kLnRzIiwic291cmNlcyI6WyJiYWNrZW5kLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmV0Y2hSZXN1bHQsIE9ic2VydmFibGUgYXMgTGlua09ic2VydmFibGUgfSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcbmltcG9ydCB7IEFwb2xsb1Rlc3RpbmdDb250cm9sbGVyLCBNYXRjaE9wZXJhdGlvbiB9IGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgeyBUZXN0T3BlcmF0aW9uLCBPcGVyYXRpb24gfSBmcm9tICcuL29wZXJhdGlvbic7XG4vKipcbiAqIEEgdGVzdGluZyBiYWNrZW5kIGZvciBgQXBvbGxvYC5cbiAqXG4gKiBgQXBvbGxvVGVzdGluZ0JhY2tlbmRgIHdvcmtzIGJ5IGtlZXBpbmcgYSBsaXN0IG9mIGFsbCBvcGVuIG9wZXJhdGlvbnMuXG4gKiBBcyBvcGVyYXRpb25zIGNvbWUgaW4sIHRoZXkncmUgYWRkZWQgdG8gdGhlIGxpc3QuIFVzZXJzIGNhbiBhc3NlcnQgdGhhdCBzcGVjaWZpY1xuICogb3BlcmF0aW9ucyB3ZXJlIG1hZGUgYW5kIHRoZW4gZmx1c2ggdGhlbS4gSW4gdGhlIGVuZCwgYSB2ZXJpZnkoKSBtZXRob2QgYXNzZXJ0c1xuICogdGhhdCBubyB1bmV4cGVjdGVkIG9wZXJhdGlvbnMgd2VyZSBtYWRlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBcG9sbG9UZXN0aW5nQmFja2VuZCBpbXBsZW1lbnRzIEFwb2xsb1Rlc3RpbmdDb250cm9sbGVyIHtcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHBlbmRpbmcgb3BlcmF0aW9ucyB3aGljaCBoYXZlIG5vdCB5ZXQgYmVlbiBleHBlY3RlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIG9wZW47XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGFuIGluY29taW5nIG9wZXJhdGlvbiBieSBxdWV1ZWluZyBpdCBpbiB0aGUgbGlzdCBvZiBvcGVuIG9wZXJhdGlvbnMuXG4gICAgICovXG4gICAgaGFuZGxlKG9wOiBPcGVyYXRpb24pOiBMaW5rT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdD47XG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHNlYXJjaCBmb3Igb3BlcmF0aW9ucyBpbiB0aGUgbGlzdCBvZiBvcGVuIG9wZXJhdGlvbnMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfbWF0Y2g7XG4gICAgcHJpdmF0ZSBtYXRjaE9wO1xuICAgIHByaXZhdGUgY29tcGFyZTtcbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIG9wZXJhdGlvbnMgaW4gdGhlIGxpc3Qgb2Ygb3BlbiBvcGVyYXRpb25zLCBhbmQgcmV0dXJuIGFsbCB0aGF0IG1hdGNoXG4gICAgICogd2l0aG91dCBhc3NlcnRpbmcgYW55dGhpbmcgYWJvdXQgdGhlIG51bWJlciBvZiBtYXRjaGVzLlxuICAgICAqL1xuICAgIG1hdGNoKG1hdGNoOiBNYXRjaE9wZXJhdGlvbik6IFRlc3RPcGVyYXRpb25bXTtcbiAgICAvKipcbiAgICAgKiBFeHBlY3QgdGhhdCBhIHNpbmdsZSBvdXRzdGFuZGluZyByZXF1ZXN0IG1hdGNoZXMgdGhlIGdpdmVuIG1hdGNoZXIsIGFuZCByZXR1cm5cbiAgICAgKiBpdC5cbiAgICAgKlxuICAgICAqIG9wZXJhdGlvbnMgcmV0dXJuZWQgdGhyb3VnaCB0aGlzIEFQSSB3aWxsIG5vIGxvbmdlciBiZSBpbiB0aGUgbGlzdCBvZiBvcGVuIG9wZXJhdGlvbnMsXG4gICAgICogYW5kIHRodXMgd2lsbCBub3QgbWF0Y2ggdHdpY2UuXG4gICAgICovXG4gICAgZXhwZWN0T25lKG1hdGNoOiBNYXRjaE9wZXJhdGlvbiwgZGVzY3JpcHRpb24/OiBzdHJpbmcpOiBUZXN0T3BlcmF0aW9uO1xuICAgIC8qKlxuICAgICAqIEV4cGVjdCB0aGF0IG5vIG91dHN0YW5kaW5nIG9wZXJhdGlvbnMgbWF0Y2ggdGhlIGdpdmVuIG1hdGNoZXIsIGFuZCB0aHJvdyBhbiBlcnJvclxuICAgICAqIGlmIGFueSBkby5cbiAgICAgKi9cbiAgICBleHBlY3ROb25lKG1hdGNoOiBNYXRjaE9wZXJhdGlvbiwgZGVzY3JpcHRpb24/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIHRoYXQgdGhlcmUgYXJlIG5vIG91dHN0YW5kaW5nIG9wZXJhdGlvbnMuXG4gICAgICovXG4gICAgdmVyaWZ5KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpc0RvY3VtZW50Tm9kZTtcbiAgICBwcml2YXRlIGRlc2NyaXB0aW9uRnJvbU1hdGNoZXI7XG59XG4iXX0=