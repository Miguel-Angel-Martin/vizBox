{"version":3,"sources":["webpack:///src/app/app.component.html","webpack:///src/app/components/error-page/error-page.component.html","webpack:///src/app/components/page-not-found/page-not-found.component.html","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.css","webpack:///src/app/app.component.ts","webpack:///src/app/app.consts.ts","webpack:///src/app/app.module.ts","webpack:///src/app/components/error-page/error-page.component.css","webpack:///src/app/components/error-page/error-page.component.ts","webpack:///src/app/components/page-not-found/page-not-found.component.css","webpack:///src/app/components/page-not-found/page-not-found.component.ts","webpack:///src/app/core/core.module.ts","webpack:///src/app/core/guards/auth.guard.ts","webpack:///src/app/core/guards/module-import-guard.ts","webpack:///src/app/core/services/app.service.ts","webpack:///src/app/core/services/overflow-menu.service.ts","webpack:///src/app/core/services/settings.service.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/endpoint.config.ts","webpack:///src/environments/environment.ts","webpack:///src/logging.config.ts","webpack:///src/main.ts","webpack:///src/pet-store/api.module.ts","webpack:///src/pet-store/api/petApi.service.ts","webpack:///src/pet-store/configuration.ts","webpack:///src/pet-store/encoder.ts","webpack:///src/pet-store/variables.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","appRoutes","path","loadChildren","m","HomeModule","IntroModule","AboutModule","LoggingDemoModule","component","AppRoutingModule","imports","forRoot","AppComponent","authService","translateService","themeService","shellCommunicationService","settingsService","overflowMenuService","appService","icon","homePageUrl","currentApp","name","instant","url","image","isSettingsDialogOpen","languages","initLanguages","countries","logLevelOptions","initLogLevelOptions","settings","getSettings","overflowMenuHandlers","login","logout","about","isAboutDialogOpen","undefined","isChild","showLoader","sideNavItems","destroyed$","AVLDialogInfo","ifChildSubscribeToShell","menuItems","translateMenu","user$","pipe","subscribe","user","translateDependingOnUser","next","complete","item","action","operation","onDialogClosed","isDarkTheme","theme","selector","template","USER_MENU_ITEM","label","sublabel","UNKNOWN_USER_MENU_ITEM","LOGIN_MENU_ITEM","LOGOUT_MENU_ITEM","CONSTANT_MENU_ITEMS","badgeValue","MENU","items","COUNTRIES","value","AVL_DIALOG_INFO","logoSrc","productName","brandPromise","versionInfo","legalText","additionalInfoLabel","additionalInfoUrl","copyright","THEMES","HOME_PAGE_URL","ICON","HttpLoaderFactory","http","prefix","suffix","AppModule","declarations","loader","provide","useFactory","deps","providers","useValue","useClass","multi","translationManagementService","initializeTranslations","bootstrap","schemas","ErrorPageComponent","router","errorMessage","getErrorMessage","state","getCurrentNavigation","extras","PageNotFoundComponent","CoreModule","parentModule","AuthGuard","location","handleRedirectedFromLogin","isRedirected","redirectUrl","notifyShellAboutLogin","_","checkLogin","route","canActivate","origin","prepareExternalUrl","childAppLogin$","standaloneAppLogin$","isLoggedIn$","isLoggedIn","checkErrorMessage","redirectToErrorPage","routerState","navigateByUrl","clearErrorMessage","redirectedFromLogIn","Boolean","userExists","throwIfAlreadyLoaded","moduleName","ChildApp","AppService","registerToShell","subscribeToRouterEvents","subscribeToLanguageChanges","subscribeToColorSchemeChanges","subscribeToThemeChanges","subscribeToLocaleChanges","events","event","notifyShellAboutNavigation","href","language$","language","updateLanguage","colorScheme$","colorScheme","setColorSchemeProperty","property","hasOwnProperty","document","body","style","setProperty","theme$","updateTheme","locale$","country","updateCountry","providedIn","OverflowMenuService","menu","map","group","translateMenuGroup","translateMenuItem","userMenuItem","username","authMenuItem","SettingsService","loggingService","Object","filter","key","isNaN","changeLanguage","getCountry","localStorage","getItem","find","setItem","localStorageCountry","updateSettings","restoreSettings","updateLogLevel","globalLogLevel","setGlobalLogLevel","updateDebounceTime","debounceTime","setLoggingDebounceTime","updateCapacity","capacity","setLogCapacity","getCurrentTheme","String","Number","SharedModule","basePath","apiUrl","authConfig","tokenUrl","loginUrl","refreshUrl","loginUrlParamRedirect","loginUrlParamChallenge","loginUrlParamNonce","logoutUrl","logoutUrlParamIdToken","logoutUrlParamRedirect","environment","production","window","LoggingConfig","Warning","addEventListener","bootstrapModule","isOutdatedBrowser","showDialog","ApiModule","configurationFactory","ngModule","PetApiService","httpClient","configuration","defaultHeaders","consumes","form","consume","observe","reportProgress","headers","httpHeaderAccepts","httpHeaderAcceptSelected","selectHeaderAccept","set","httpContentTypeSelected","selectHeaderContentType","post","withCredentials","petId","encodeURIComponent","get","status","tags","offset","limit","sortBy","sortOrder","queryParameters","encoder","forEach","element","append","params","put","canConsumeForm","formParams","useForm","convertFormParamsToString","toString","Configuration","configurationParameters","apiKeys","password","accessToken","contentTypes","length","type","x","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","CustomHttpUrlEncodingCodec","k","replace","v","BASE_PATH","COLLECTION_FORMATS","csv","tsv","ssv","pipes"],"mappings":"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","file":"main-es5.js","sourcesContent":["export default \"<avl-app-layout>\\r\\n  <avl-app-bar *ngIf=\\\"!isChild\\\" [homePageUrl]=\\\"homePageUrl\\\" slot=\\\"toolbar\\\" [fixed]=\\\"true\\\"\\r\\n    [(currentApplication)]=\\\"currentApp\\\">\\r\\n\\r\\n    <avl-overflow-menu slot=\\\"menu\\\" [items]=\\\"menuItems\\\" (itemClicked)=\\\"overflowMenuClicked($event)\\\">\\r\\n      <avl-icon-button icon=\\\"more-vert\\\" slot=\\\"trigger\\\"></avl-icon-button>\\r\\n    </avl-overflow-menu>\\r\\n  </avl-app-bar>\\r\\n\\r\\n  <avl-side-nav slot=\\\"left-side\\\" [menuItems]=\\\"sideNavItems\\\"></avl-side-nav>\\r\\n  <div *ngIf=\\\"showLoader\\\" class=\\\"loadingProgressContainer\\\">\\r\\n    <div class=\\\"loader\\\"></div>\\r\\n    <div>Loading, please wait...</div>\\r\\n  </div>\\r\\n  <router-outlet (activate)=\\\"onActivate()\\\"></router-outlet>\\r\\n</avl-app-layout>\\r\\n\\r\\n<avl-dialog *ngIf=\\\"!isChild\\\" id=\\\"settingsDialog\\\" [(open)]=\\\"isSettingsDialogOpen\\\" [closeOnScrimClick]=\\\"false\\\">\\r\\n\\r\\n  <ng-template #content>\\r\\n    <avl-dialog-header>Settings</avl-dialog-header>\\r\\n    <avl-dialog-content>\\r\\n      <p>Theme</p>\\r\\n      <avl-radio-group id=\\\"theme\\\" [(selectedValue)]=\\\"settings.theme\\\">\\r\\n        <avl-radio-button name=\\\"light\\\">Light</avl-radio-button>\\r\\n        <avl-radio-button name=\\\"dark\\\">Dark</avl-radio-button>\\r\\n      </avl-radio-group> <br />\\r\\n\\r\\n      <avl-dropdown id=\\\"countryDropdown\\\" label=\\\"Country\\\" [items]=\\\"countries\\\" [(selectedValue)]=\\\"settings.country\\\"\\r\\n        compact-mode></avl-dropdown><br />\\r\\n      <avl-dropdown id=\\\"languageDropdown\\\" label=\\\"Language\\\" [items]=\\\"languages\\\" [(selectedValue)]=\\\"settings.language\\\">\\r\\n      </avl-dropdown><br />\\r\\n      \\r\\n      <avl-list-expander [narrow]=\\\"true\\\">\\r\\n        <div role=\\\"header\\\">\\r\\n            <label>Logging</label>\\r\\n        </div>\\r\\n        <div role=\\\"content\\\">\\r\\n          <avl-dropdown id=\\\"logLevelDropdown\\\" [items]=\\\"logLevelOptions\\\" label=\\\"Log Level\\\" [(selectedIndex)]=\\\"settings.globalLogLevel\\\" compact-mode></avl-dropdown> <br />\\r\\n          <avl-textfield label=\\\"Log debounce time (s)\\\" [(value)]=\\\"settings.debounceTime\\\" compact-mode></avl-textfield>\\r\\n          <avl-textfield label=\\\"Log capacity\\\" [(value)]=\\\"settings.capacity\\\" compact-mode></avl-textfield>\\r\\n        </div>\\r\\n    </avl-list-expander>\\r\\n    </avl-dialog-content>\\r\\n\\r\\n    <avl-dialog-footer>\\r\\n      <avl-button (click)=\\\"closeDialog('Save')\\\">Save</avl-button>\\r\\n      <avl-button (click)=\\\"closeDialog('Cancel')\\\">Cancel</avl-button>\\r\\n    </avl-dialog-footer>\\r\\n  </ng-template>\\r\\n</avl-dialog>\\r\\n\\r\\n<avl-about-dialog\\r\\n  [(open)]=\\\"isAboutDialogOpen\\\"\\r\\n  [productLogo]=\\\"AVLDialogInfo.logoSrc\\\"\\r\\n  [productName]=\\\"AVLDialogInfo.productName\\\"\\r\\n  [brandPromise]=\\\"AVLDialogInfo.brandPromise\\\"\\r\\n  [versionInfo]=\\\"AVLDialogInfo.versionInfo\\\"\\r\\n  [legalText]=\\\"AVLDialogInfo.legalText\\\"\\r\\n  [additionalInfoLabel]=\\\"AVLDialogInfo.additionalInfoLabel\\\"\\r\\n  [additionalInfoUrl]=\\\"AVLDialogInfo.additionalInfoUrl\\\"\\r\\n  [copyright]=\\\"AVLDialogInfo.copyright\\\"\\r\\n>\\r\\n</avl-about-dialog>\";","export default \"<p>{{ errorMessage }}</p>\";","export default \"<h2>\\r\\n  Page Not Found\\r\\n</h2>\\r\\n<p>The page you were looking for doesn't exist.</p>\\r\\n  \";","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\nimport { ErrorPageComponent } from './components/error-page/error-page.component';\r\n\r\n\r\nconst appRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('app/components/home/home.module').then(m => m.HomeModule)\r\n  },\r\n  {\r\n    path: 'intro',\r\n    loadChildren: () => import('app/components/intro/intro.module').then(m => m.IntroModule),\r\n  },\r\n  {\r\n    path: 'about',\r\n    loadChildren: () => import('app/components/about/about.module').then(m => m.AboutModule)\r\n  },\r\n  {\r\n    path: 'logging-demo',\r\n    loadChildren: () => import('app/components/logging-demo/logging-demo.module').then(m => m.LoggingDemoModule)\r\n  },\r\n  { path: 'error-page', component: ErrorPageComponent },\r\n  { path: '**', component: PageNotFoundComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(appRoutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n","export default \"avl-app-layout {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  right: 0;\\r\\n  display: block;\\r\\n}\\r\\n\\r\\n.no-bullet {\\r\\n  list-style: none;\\r\\n}\\r\\n\\r\\n.toolbarThemeIcon{\\r\\n  --avl-icon-button-color: var(--avl-app-bar-item-color, #fff);\\r\\n}\\r\\n\\r\\navl-overflow-menu avl-icon-button {\\r\\n  --avl-icon-button-color: var(--avl-on-primary-color);\\r\\n}\\r\\n\\r\\navl-dropdown{\\r\\n  width: 100%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFlO0VBQ2YsTUFBTTtFQUNOLFNBQVM7RUFDVCxPQUFPO0VBQ1AsUUFBUTtFQUNSLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBQ0E7RUFDRSw0REFBNEQ7QUFDOUQ7O0FBRUE7RUFDRSxvREFBb0Q7QUFDdEQ7O0FBRUE7RUFDRSxXQUFXO0FBQ2IiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImF2bC1hcHAtbGF5b3V0IHtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIGJvdHRvbTogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4ubm8tYnVsbGV0IHtcclxuICBsaXN0LXN0eWxlOiBub25lO1xyXG59XHJcbi50b29sYmFyVGhlbWVJY29ue1xyXG4gIC0tYXZsLWljb24tYnV0dG9uLWNvbG9yOiB2YXIoLS1hdmwtYXBwLWJhci1pdGVtLWNvbG9yLCAjZmZmKTtcclxufVxyXG5cclxuYXZsLW92ZXJmbG93LW1lbnUgYXZsLWljb24tYnV0dG9uIHtcclxuICAtLWF2bC1pY29uLWJ1dHRvbi1jb2xvcjogdmFyKC0tYXZsLW9uLXByaW1hcnktY29sb3IpO1xyXG59XHJcblxyXG5hdmwtZHJvcGRvd257XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn0iXX0= */\";","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { ApplicationReference, TopLevelPage } from '@avl-ng-controls/navigation';\r\nimport { AvlAuthService } from '@avl-ng-controls/auth';\r\nimport {\r\n  AvlOverflowMenuItem,\r\n  AvlOverflowMenuGroup,\r\n} from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu.api';\r\nimport { ThemeService, ShellCommunicationService } from '@avl-services/ng-services';\r\n\r\nimport '@avl-controls/core/dist/avl-icon/avl-icon';\r\nimport '@avl-controls/core/dist/avl-icon-button/avl-icon-button';\r\nimport '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu';\r\nimport '@avl-controls/core/dist/avl-radio-group/avl-radio-group';\r\nimport '@avl-controls/core/dist/avl-radio-button/avl-radio-button';\r\nimport '@avl-controls/core/dist/avl-dropdown/avl-dropdown';\r\n\r\nimport { AVL_DIALOG_INFO, COUNTRIES, HOME_PAGE_URL, ICON, MENU, THEMES } from './app.consts';\r\n\r\nimport { SettingsService, SolutionSettings } from './core/services/settings.service';\r\nimport { OverflowMenuService } from './core/services/overflow-menu.service';\r\nimport { AppService } from './core/services/app.service';\r\n\r\n@Component({\r\n  selector: 'viz-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent implements OnDestroy, OnInit {\r\n  icon = ICON;\r\n\r\n  // App-bar\r\n  public homePageUrl = HOME_PAGE_URL;\r\n  public currentApp: ApplicationReference = {\r\n    name: this.translateService.instant('VizBoxStarterKit.Introduction'),\r\n    url: '/home',\r\n    image: 'assets/images/vizbox-logo.svg',\r\n  };\r\n\r\n  // Settings Dialog Info\r\n  public isSettingsDialogOpen = false;\r\n  public languages: Array<{ label: string; value: string }> = this.settingsService.initLanguages();\r\n  public countries: Array<{ label: string; value: string }> = COUNTRIES;\r\n  public logLevelOptions: Array<{\r\n    label: string;\r\n    value: string;\r\n  }> = this.settingsService.initLogLevelOptions();\r\n\r\n  public settings: SolutionSettings = this.settingsService.getSettings();\r\n\r\n  // Overflow Menu\r\n  public menuItems: (AvlOverflowMenuItem | AvlOverflowMenuGroup)[];\r\n\r\n  private overflowMenuHandlers: { [key: string]: () => void } = {\r\n    login: () => this.authService.login(),\r\n    logout: () => this.authService.logout(),\r\n    settings: () => (this.isSettingsDialogOpen = true),\r\n    about: () => (this.isAboutDialogOpen = true),\r\n    undefined: () => {},\r\n  };\r\n\r\n  public isChild: boolean = this.shellCommunicationService.isChild;\r\n  public showLoader = true;\r\n\r\n  // Side Navigation\r\n  public sideNavItems = [\r\n    new TopLevelPage(\r\n      this.translateService.instant('VizBoxStarterKit.AvlWebStarterKit'),\r\n      '/intro',\r\n      'home'\r\n    ),\r\n    new TopLevelPage(this.translateService.instant('VizBoxStarterKit.About'), '/about', 'info'),\r\n    new TopLevelPage(\r\n      this.translateService.instant('VizBoxStarterKit.LoggingDemo'),\r\n      '/logging-demo',\r\n      'icons:list'\r\n    ),\r\n  ];\r\n\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  // About Dialog Info\r\n  public isAboutDialogOpen = false;\r\n  public AVLDialogInfo = AVL_DIALOG_INFO;\r\n\r\n  constructor(\r\n    private authService: AvlAuthService,\r\n    private translateService: TranslateService,\r\n    readonly themeService: ThemeService,\r\n    readonly shellCommunicationService: ShellCommunicationService,\r\n    readonly settingsService: SettingsService,\r\n    readonly overflowMenuService: OverflowMenuService,\r\n    readonly appService: AppService\r\n  ) {\r\n    // Subscription to Shell\r\n    this.appService.ifChildSubscribeToShell();\r\n  }\r\n  public ngOnInit(): void {\r\n    this.menuItems = this.overflowMenuService.translateMenu(MENU);\r\n\r\n    this.authService.user$\r\n      .pipe(takeUntil(this.destroyed$))\r\n      .subscribe(\r\n        (user) => (this.menuItems = this.overflowMenuService.translateDependingOnUser(user))\r\n      );\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public overflowMenuClicked(item: AvlOverflowMenuItem): void {\r\n    this.overflowMenuHandlers[item.action]();\r\n  }\r\n\r\n  public onActivate(): void {\r\n    this.showLoader = false;\r\n  }\r\n\r\n  public closeDialog(operation: 'Cancel' | 'Save'): void {\r\n    this.settings = this.settingsService.onDialogClosed(operation, this.settings);\r\n    this.themeService.isDarkTheme = this.settings.theme === THEMES[0];\r\n    this.isSettingsDialogOpen = false;\r\n  }\r\n}\r\n","import {\r\n  AvlOverflowMenuGroup,\r\n  AvlOverflowMenuItem,\r\n} from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu.api';\r\n\r\nexport const USER_MENU_ITEM: AvlOverflowMenuItem = {\r\n  label: '',\r\n  icon: 'account-box',\r\n  sublabel: 'VizBoxStarterKit.Monitor',\r\n};\r\n\r\nexport const UNKNOWN_USER_MENU_ITEM: AvlOverflowMenuItem = {\r\n  label: 'VizBoxStarterKit.Unknown',\r\n  icon: 'account-box',\r\n  sublabel: 'VizBoxStarterKit.Unknown',\r\n};\r\n\r\nexport const LOGIN_MENU_ITEM: AvlOverflowMenuItem = {\r\n  label: 'VizBoxStarterKit.Login',\r\n  action: 'login',\r\n  icon: 'social:person',\r\n};\r\n\r\nexport const LOGOUT_MENU_ITEM: AvlOverflowMenuItem = {\r\n  label: 'VizBoxStarterKit.Logout',\r\n  action: 'logout',\r\n  icon: 'exit-to-app',\r\n};\r\n\r\nexport const CONSTANT_MENU_ITEMS: AvlOverflowMenuItem[] = [\r\n  {\r\n    label: 'VizBoxStarterKit.Messages',\r\n    icon: 'communication:message',\r\n    badgeValue: '4',\r\n  },\r\n  {\r\n    label: 'VizBoxStarterKit.Settings',\r\n    icon: 'settings',\r\n    action: 'settings',\r\n  },\r\n  {\r\n    label: 'VizBoxStarterKit.Help',\r\n    icon: 'help',\r\n  },\r\n  {\r\n    label: 'VizBoxStarterKit.About',\r\n    icon: 'info',\r\n    action: 'about',\r\n  },\r\n];\r\n\r\nexport const MENU: AvlOverflowMenuGroup[] = [\r\n  {\r\n    items: [UNKNOWN_USER_MENU_ITEM],\r\n  },\r\n  {\r\n    items: CONSTANT_MENU_ITEMS,\r\n  },\r\n  {\r\n    items: [LOGIN_MENU_ITEM]\r\n  }\r\n];\r\n\r\nexport const COUNTRIES = [\r\n  {\r\n    label: 'Croatia',\r\n    value: 'hr',\r\n  },\r\n  {\r\n    label: 'United Kingdom',\r\n    value: 'uk',\r\n  },\r\n  {\r\n    label: 'United States',\r\n    value: 'us',\r\n  },\r\n];\r\n\r\nexport const AVL_DIALOG_INFO = {\r\n  logoSrc: 'assets/images/vizbox-logo.svg',\r\n  productName: 'Starter kit vizbox application™',\r\n  brandPromise: 'Make vizbox great again',\r\n  versionInfo: [\r\n    { label: 'Version number', value: '1.0.0' },\r\n    { label: 'Build number', value: '1345' },\r\n    { label: 'Build date', value: '2021-01-11' },\r\n  ],\r\n  legalText:\r\n    'This program incorporates parts from other organizations which are distributed under software licences of their choosing.',\r\n  additionalInfoLabel: 'Additional version and copyright information.',\r\n  additionalInfoUrl: 'assets/licenses/licenses-summary.txt',\r\n  copyright: '© AVL List GmbH 2021. All rights reserved.',\r\n};\r\n\r\nexport const THEMES = ['dark', 'light'];\r\n\r\nexport const HOME_PAGE_URL = '/';\r\nexport const ICON = 'device:brightness-high';\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, APP_INITIALIZER } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { INTERCEPTOR_BASE_PATHS, AvlTokenInterceptor } from '@avl-ng-controls/auth';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { MultiTranslateHttpLoader } from 'ngx-translate-multi-http-loader';\r\nimport { NgxTranslateTranslationService } from '@avl-controls/ng-binders';\r\nimport { LoggingModule, ThemeService, TranslationManagementService } from '@avl-services/ng-services';\r\n\r\nimport { basePath } from 'endpoint.config';\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { CoreModule } from './core/core.module';\r\n\r\nimport { ApiModule } from '../pet-store/api.module';\r\nimport { BASE_PATH } from '../pet-store/variables';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\nimport { ErrorPageComponent } from './components/error-page/error-page.component';\r\nimport { LoggingConfig } from 'logging.config';\r\n\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n    return new MultiTranslateHttpLoader(http, [\r\n      {prefix: 'assets/i18n/avl-controls-core.', suffix: '.json'},\r\n      {prefix: 'assets/i18n/avl-controls-datatable.', suffix: '.json'},\r\n      {prefix: 'assets/i18n/vizbox-starter-kit.', suffix: '.json'},\r\n      // latest file translations with same keys will overwrite same translations in files defined before it\r\n    ]);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PageNotFoundComponent,\r\n    ErrorPageComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    LoggingModule.forRoot(LoggingConfig),\r\n\r\n    ApiModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    SharedModule,\r\n    CoreModule,\r\n    AppRoutingModule,\r\n  ],\r\n  providers: [\r\n    ThemeService,\r\n    { provide: BASE_PATH, useValue: basePath },\r\n    { provide: INTERCEPTOR_BASE_PATHS, useValue: [basePath] },\r\n    { provide: HTTP_INTERCEPTORS, useClass: AvlTokenInterceptor, multi: true },\r\n    NgxTranslateTranslationService,\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: (translationManagementService: TranslationManagementService) => translationManagementService.initializeTranslations(),\r\n      multi: true,\r\n      deps: [TranslationManagementService]\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class AppModule {\r\n  constructor() {}\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZXJyb3ItcGFnZS9lcnJvci1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'viz-error-page',\r\n  templateUrl: './error-page.component.html',\r\n  styleUrls: ['./error-page.component.css']\r\n})\r\nexport class ErrorPageComponent implements OnInit {\r\n\r\n  errorMessage = 'Something went wrong. Please check your route.';\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.errorMessage = this.getErrorMessage();\r\n  }\r\n  private getErrorMessage = (): string => {\r\n    const state = this.router.getCurrentNavigation().extras.state;\r\n    return state?.errorMessage || this.errorMessage;\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGFnZS1ub3QtZm91bmQvcGFnZS1ub3QtZm91bmQuY29tcG9uZW50LmNzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'viz-page-not-found',\r\n  templateUrl: './page-not-found.component.html',\r\n  styleUrls: ['./page-not-found.component.css']\r\n})\r\nexport class PageNotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}","import { NgModule, Optional, SkipSelf, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { AuthGuard } from './guards/auth.guard';\r\nimport { throwIfAlreadyLoaded } from './guards/module-import-guard';\r\nimport { AvlAuthService, AvlOidcCodeAuthService, AUTH_CONFIG } from '@avl-ng-controls/auth';\r\nimport { authConfig } from '../../endpoint.config';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, RouterModule],\r\n  providers: [\r\n    AuthGuard,\r\n    { provide: AvlAuthService, useClass: AvlOidcCodeAuthService }, // needs AVL MVC Server Side\r\n    { provide: AUTH_CONFIG, useValue: authConfig }\r\n  ],\r\n  declarations: [],\r\n  exports: [],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class CoreModule {\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    parentModule: CoreModule\r\n  ) {\r\n    throwIfAlreadyLoaded(parentModule, 'CoreModule');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  CanActivate,\r\n  CanActivateChild,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  CanLoad,\r\n  Route,\r\n  Router,\r\n} from '@angular/router';\r\nimport { Observable, zip } from 'rxjs';\r\nimport { map, skipWhile, tap } from 'rxjs/operators';\r\n\r\nimport { AvlAuthService } from '@avl-ng-controls/auth';\r\nimport { ShellCommunicationService } from '@avl-services/ng-services';\r\n\r\n/**\r\n * Guard for the routes on which you have to be logged in to view.\r\n */\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\r\n  public isAuthenticated$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private authService: AvlAuthService,\r\n    private location: Location,\r\n    private router: Router,\r\n    private shellCommunicationService: ShellCommunicationService\r\n  ) {}\r\n\r\n  public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    return this.checkLogin(state.url);\r\n  }\r\n\r\n  public canActivateChild(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    return this.canActivate(route, state);\r\n  }\r\n\r\n  public canLoad(route: Route): Observable<boolean> {\r\n    return this.checkLogin(route.path);\r\n  }\r\n\r\n  private checkLogin(path: string): Observable<boolean> {\r\n    const redirectUrl = location.origin + this.location.prepareExternalUrl(path);\r\n    if (this.shellCommunicationService.isChild) {\r\n      return this.childAppLogin$(redirectUrl);\r\n    }\r\n\r\n    return this.standaloneAppLogin$(redirectUrl);\r\n  }\r\n\r\n  private standaloneAppLogin$(redirectUrl: string): Observable<boolean> {\r\n    return this.authService.isLoggedIn$.pipe(\r\n      tap((isLoggedIn) => isLoggedIn || this.checkErrorMessage(redirectUrl))\r\n    );\r\n  }\r\n\r\n  private checkErrorMessage(redirectUrl: string): void {\r\n    if (this.authService.errorMessage) {\r\n      this.redirectToErrorPage();\r\n    } else {\r\n      this.authService.login(redirectUrl);\r\n    }\r\n  }\r\n\r\n  private redirectToErrorPage(): void {\r\n    const routerState = { errorMessage: this.authService.errorMessage };\r\n    this.router.navigateByUrl('/error-page', { state: routerState }).then((_) => {\r\n      this.authService.clearErrorMessage();\r\n    });\r\n  }\r\n\r\n  // Subscription on redirectedFromLogin, if it wasn't redirected, notifies shell about login.\r\n  // If it was redirected waits for the user object. Resolves to true if both subscriptions resolves to true.\r\n  private childAppLogin$(redirectUrl: string): Observable<boolean> {\r\n    return zip(\r\n      this.shellCommunicationService.redirectedFromLogIn.pipe(\r\n        map((redirectedFromLogIn) => this.handleRedirectedFromLogin(redirectedFromLogIn, redirectUrl))\r\n      ),\r\n      this.authService.user$.pipe(\r\n        skipWhile((user) => user === undefined),\r\n        map((user) => Boolean(user))\r\n      )\r\n    ).pipe(\r\n      map(([_, userExists]) => userExists)\r\n    );\r\n  }\r\n\r\n  private handleRedirectedFromLogin = (isRedirected: boolean, redirectUrl: string): boolean => {\r\n    if (isRedirected === false) {\r\n      this.shellCommunicationService.notifyShellAboutLogin(redirectUrl);\r\n    }\r\n    return isRedirected;\r\n  }\r\n}\r\n","export function throwIfAlreadyLoaded(parentModule: any, moduleName: string) {\r\n  if (parentModule) {\r\n    throw new Error(\r\n      `${moduleName} has already been loaded. Import Core modules in the AppModule only.`\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { ShellCommunicationService } from '@avl-services/ng-services';\r\nimport { SettingsService } from './settings.service';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\n\r\nexport class ChildApp {\r\n  childUrl: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AppService implements OnDestroy {\r\n  private destroyed$: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    readonly shellCommunicationService: ShellCommunicationService,\r\n    readonly settingsService: SettingsService,\r\n    readonly router: Router\r\n  ) {}\r\n\r\n  public ngOnDestroy(): void {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public ifChildSubscribeToShell(): void {\r\n    if (this.shellCommunicationService.isChild) {\r\n      this.shellCommunicationService.registerToShell();\r\n      this.subscribeToRouterEvents();\r\n      this.subscribeToLanguageChanges();\r\n      this.subscribeToColorSchemeChanges();\r\n      this.subscribeToThemeChanges();\r\n      this.subscribeToLocaleChanges();\r\n    }\r\n  }\r\n\r\n  private subscribeToRouterEvents(): void {\r\n    this.router.events.pipe(takeUntil(this.destroyed$)).subscribe((event) => {\r\n      if (event instanceof NavigationEnd) {\r\n        this.shellCommunicationService.notifyShellAboutNavigation(location.href);\r\n      }\r\n    });\r\n  }\r\n\r\n  private subscribeToLanguageChanges(): void {\r\n    this.shellCommunicationService.language$\r\n      .pipe(takeUntil(this.destroyed$))\r\n      .subscribe((language) => {\r\n        this.settingsService.updateLanguage(language);\r\n      });\r\n  }\r\n\r\n  private subscribeToColorSchemeChanges(): void {\r\n    this.shellCommunicationService.colorScheme$\r\n      .pipe(takeUntil(this.destroyed$))\r\n      .subscribe((colorScheme) => {\r\n        this.setColorSchemeProperty(colorScheme);\r\n      });\r\n  }\r\n\r\n  private setColorSchemeProperty(colorScheme): void {\r\n    for (const property in colorScheme) {\r\n      if (colorScheme.hasOwnProperty(property)) {\r\n        document.body.style.setProperty(property, colorScheme[property]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private subscribeToThemeChanges(): void {\r\n    this.shellCommunicationService.theme$.pipe(takeUntil(this.destroyed$)).subscribe((theme) => {\r\n      this.settingsService.updateTheme(theme);\r\n    });\r\n  }\r\n\r\n  private subscribeToLocaleChanges(): void {\r\n    this.shellCommunicationService.locale$.pipe(takeUntil(this.destroyed$)).subscribe((country) => {\r\n      this.settingsService.updateCountry(country);\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { AvlOverflowMenuGroup, AvlOverflowMenuItem } from '@avl-controls/core/dist/avl-overflow-menu/avl-overflow-menu.api';\r\nimport { User } from '@avl-ng-controls/auth';\r\n\r\nimport { CONSTANT_MENU_ITEMS, LOGIN_MENU_ITEM, LOGOUT_MENU_ITEM, UNKNOWN_USER_MENU_ITEM } from '../../app.consts';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OverflowMenuService {\r\n\r\n    constructor(private translateService: TranslateService) {}\r\n\r\n    // TRANSLATIONS\r\n    public translateMenu(menu: AvlOverflowMenuGroup[]): AvlOverflowMenuGroup[] {\r\n        return menu.map((group) => this.translateMenuGroup(group));\r\n    }\r\n\r\n    public translateMenuGroup(group: AvlOverflowMenuGroup): AvlOverflowMenuGroup {\r\n        return { items: group.items.map((item) => this.translateMenuItem(item)) };\r\n    }\r\n\r\n    public translateMenuItem(item: AvlOverflowMenuItem): AvlOverflowMenuItem {\r\n        return {\r\n            ...item,\r\n            label: this.translateService.instant(item.label),\r\n            sublabel: item.sublabel ? this.translateService.instant(item.sublabel) : null,\r\n        };\r\n    }\r\n\r\n    public translateDependingOnUser(user: User): (AvlOverflowMenuItem | AvlOverflowMenuGroup)[] {\r\n        let userMenuItem = UNKNOWN_USER_MENU_ITEM;\r\n        if (user) {\r\n            userMenuItem = { ...userMenuItem, label: user.name || user.username };\r\n        }\r\n\r\n        const authMenuItem: AvlOverflowMenuItem = user ? LOGOUT_MENU_ITEM : LOGIN_MENU_ITEM;\r\n\r\n        return [\r\n            { items: [this.translateMenuItem(userMenuItem)] },\r\n            { items: CONSTANT_MENU_ITEMS.map((item) => this.translateMenuItem(item)) },\r\n            { items: [this.translateMenuItem(authMenuItem)] },\r\n        ];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  LoggingService,\r\n  LogSeverity,\r\n  ThemeService,\r\n  TranslationManagementService,\r\n} from '@avl-services/ng-services';\r\nimport { LoggingConfig } from 'logging.config';\r\n\r\nimport { COUNTRIES, THEMES } from '../../app.consts';\r\n\r\nexport interface SolutionSettings {\r\n  language: string;\r\n  theme: string;\r\n  country: string;\r\n  globalLogLevel: LogSeverity;\r\n  debounceTime: string;\r\n  capacity: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SettingsService {\r\n  constructor(\r\n    private translationManagementService: TranslationManagementService,\r\n    private themeService: ThemeService,\r\n    private loggingService: LoggingService\r\n  ) {}\r\n\r\n  public getSettings(): SolutionSettings {\r\n    return {\r\n      language: this.translationManagementService.language,\r\n      country: this.getCountry(),\r\n      theme: this.themeService.getCurrentTheme(),\r\n      globalLogLevel: LoggingConfig.globalLogLevel,\r\n      debounceTime: String(LoggingConfig.debounceTime / 1000),\r\n      capacity: String(LoggingConfig.capacity),\r\n    };\r\n  }\r\n  public initLanguages = (): Array<{ label: string; value: string }> => {\r\n    return this.translationManagementService.languages.map((item) => {\r\n      return { label: item.label, value: item.code };\r\n    });\r\n  };\r\n\r\n  public initLogLevelOptions = (): Array<{ label: string; value: string }> => {\r\n    return Object.keys(LogSeverity)\r\n      .filter((key) => isNaN(+key))\r\n      .map((key) => ({ label: key, value: LogSeverity[key] }));\r\n  };\r\n\r\n  public updateLanguage = (language: string): string => {\r\n    if (language !== this.translationManagementService.language) {\r\n      this.translationManagementService.changeLanguage(language); // service also sets localStorage for lang\r\n    }\r\n    return language;\r\n  };\r\n\r\n  public getCountry = (): string => {\r\n    let country = localStorage.getItem('country');\r\n\r\n    if (!country || !COUNTRIES.find((item) => item.value === country)) {\r\n      country = COUNTRIES[0].value;\r\n      localStorage.setItem('country', country);\r\n    }\r\n    return country;\r\n  };\r\n\r\n  public updateCountry = (country: string): string => {\r\n    const localStorageCountry = localStorage.getItem('country');\r\n    if (country !== localStorageCountry) {\r\n      localStorage.setItem('country', country);\r\n    }\r\n    return country;\r\n  };\r\n\r\n  public updateTheme = (theme: string): boolean => {\r\n    return (this.themeService.isDarkTheme = theme === THEMES[0]);\r\n  };\r\n\r\n  public onDialogClosed = (\r\n    operation: 'Cancel' | 'Save',\r\n    settings: SolutionSettings\r\n  ): SolutionSettings => {\r\n    return operation === 'Save' ? this.updateSettings(settings) : this.restoreSettings();\r\n  };\r\n\r\n  public updateLogLevel = (globalLogLevel: LogSeverity): LogSeverity => {\r\n    if (globalLogLevel !== LoggingConfig.globalLogLevel) {\r\n      this.loggingService.setGlobalLogLevel(globalLogLevel);\r\n      return globalLogLevel;\r\n    }\r\n    return LoggingConfig.globalLogLevel;\r\n  };\r\n\r\n  public updateDebounceTime = (debounceTime: number): number => {\r\n    if (debounceTime * 1000 !== LoggingConfig.debounceTime) {\r\n      this.loggingService.setLoggingDebounceTime(debounceTime * 1000);\r\n      return debounceTime;\r\n    }\r\n    return LoggingConfig.debounceTime / 1000;\r\n  };\r\n\r\n  public updateCapacity = (capacity: number): number => {\r\n    if (capacity !== LoggingConfig.capacity) {\r\n      this.loggingService.setLogCapacity(capacity);\r\n      return capacity;\r\n\r\n    }\r\n    return LoggingConfig.capacity;\r\n  };\r\n\r\n  private updateSettings(settings: SolutionSettings): SolutionSettings {\r\n    return {\r\n      country: this.updateCountry(settings.country),\r\n      theme: this.updateTheme(settings.theme) ? THEMES[0] : THEMES[1],\r\n      language: this.updateLanguage(settings.language),\r\n      globalLogLevel: this.updateLogLevel(settings.globalLogLevel),\r\n      debounceTime: String(this.updateDebounceTime(Number(settings.debounceTime))),\r\n      capacity: String(this.updateCapacity(Number(settings.capacity))),\r\n    };\r\n  }\r\n\r\n  private restoreSettings(): SolutionSettings {\r\n    return {\r\n      country: localStorage.getItem('country'),\r\n      theme: this.themeService.isDarkTheme ? THEMES[0] : THEMES[1],\r\n      language: this.translationManagementService.language,\r\n      globalLogLevel: LoggingConfig.globalLogLevel,\r\n      debounceTime: String(LoggingConfig.debounceTime / 1000),\r\n      capacity: String(LoggingConfig.capacity),\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { AvlNgBindersModule } from '@avl-controls/ng-binders';\r\nimport { AvlDialogModule } from '@avl-ng-controls/dialog';\r\nimport { AvlNavigationModule } from '@avl-ng-controls/navigation';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AvlTokenInterceptor } from '@avl-ng-controls/auth';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n\r\n    AvlDialogModule,\r\n    AvlNavigationModule,\r\n    AvlNgBindersModule,\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n\r\n    AvlDialogModule,\r\n    AvlNavigationModule,\r\n    AvlNgBindersModule,\r\n    TranslateModule,\r\n  ]\r\n})\r\nexport class SharedModule {}\r\n","import { AuthConfig } from '@avl-ng-controls/auth';\r\nimport { environment } from './environments/environment';\r\n\r\n// if you want to use local petstore-server use http://localhost:65435\r\nexport const basePath = environment.apiUrl; // 'https://vizbox.avl.com/api';\r\n// export const basePath = 'http://localhost:65435';\r\n\r\nexport const authConfig: AuthConfig = {\r\n  tokenUrl: basePath + '/identitybroker-tokens',\r\n  loginUrl: basePath + '/identitybroker-login',\r\n  refreshUrl: basePath + '/identitybroker-tokens/refresh',\r\n  loginUrlParamRedirect: 'redirectUrl',\r\n  loginUrlParamChallenge: 'pkceChallenge',\r\n  loginUrlParamNonce: 'nonce',\r\n  logoutUrl: basePath + '/identitybroker-logout',\r\n  logoutUrlParamIdToken: 'idToken',\r\n  logoutUrlParamRedirect: 'redirectToUrl',\r\n};\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: window[\"env\"][\"apiUrl\"] || \"default\"\r\n};\r\n","import { LogConfig, LogSeverity } from '@avl-services/ng-services';\r\n\r\nexport const LoggingConfig = new LogConfig(\r\n  'https://vizbox.avl.com/api/theia/logs', // endpoint for logging (mandatory)\r\n  'StarterKitWebApp',                  // database name for logs (mandatory)\r\n  'StarterKit',                        // application name (mandatory)\r\n  '1.0.0',                             // application version (mandatory)\r\n  true,                                // autologging, logs automatically when user is logged in (optional)\r\n                                       // default: false (if true requires AvlAuthService in providers)\r\n  LogSeverity.Warning,                 // minimum message level to log (optional), default value: LogType.Info\r\n  10_000,                              // log debounce time in milliseconds (optional), default: 30 000 ms\r\n  5                                    // log capacity (optional), default: 10\r\n);","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { BrowserDetection, OutdatedBrowserWarning } from '@avl-vizbox-develop/browser-support';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nwindow.addEventListener('load',\r\n  () => platformBrowserDynamic().bootstrapModule(AppModule));\r\n\r\nif (BrowserDetection.isOutdatedBrowser()) {\r\n  OutdatedBrowserWarning.showDialog();\r\n}\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Configuration } from './configuration';\r\n\r\nimport { PetApiService } from './api/petApi.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  declarations: [],\r\n  exports: [],\r\n  providers: [PetApiService]\r\n})\r\nexport class ApiModule {\r\n  public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\r\n    return {\r\n      ngModule: ApiModule,\r\n      providers: [{ provide: Configuration, useFactory: configurationFactory }]\r\n    };\r\n  }\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    parentModule: ApiModule\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('ApiModule is already loaded. Import your base AppModule only.');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Swagger Petstore\r\n * Swagger Petstore (ASP.NET Core 2.0)\r\n *\r\n * OpenAPI spec version: 1.0.0\r\n * Contact: apiteam@swagger.io\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec } from '../encoder';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { InlineResponse200 } from '../model/inlineResponse200';\r\nimport { Pet } from '../model/pet';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\r\nimport { Configuration } from '../configuration';\r\n\r\n@Injectable()\r\nexport class PetApiService {\r\n  protected basePath = 'https://localhost/v2';\r\n  public defaultHeaders = new HttpHeaders();\r\n  public configuration = new Configuration();\r\n\r\n  constructor(\r\n    protected httpClient: HttpClient,\r\n    @Optional()\r\n    @Inject(BASE_PATH)\r\n    basePath: string,\r\n    @Optional() configuration: Configuration\r\n  ) {\r\n    if (basePath) {\r\n      this.basePath = basePath + '/v2';;\r\n    }\r\n    if (configuration) {\r\n      this.configuration = configuration;\r\n      this.basePath = basePath || configuration.basePath || this.basePath;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param consumes string[] mime-types\r\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n   */\r\n  private canConsumeForm(consumes: string[]): boolean {\r\n    const form = 'multipart/form-data';\r\n    for (const consume of consumes) {\r\n      if (form === consume) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Add a new pet to the store\r\n   *\r\n   * @param body Pet object that needs to be added to the store\r\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n   * @param reportProgress flag to report request and response progress.\r\n   */\r\n  public addPet(body?: Pet, observe?: 'body', reportProgress?: boolean): Observable<Pet>;\r\n  public addPet(\r\n    body?: Pet,\r\n    observe?: 'response',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpResponse<Pet>>;\r\n  public addPet(\r\n    body?: Pet,\r\n    observe?: 'events',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpEvent<Pet>>;\r\n  public addPet(\r\n    body?: Pet,\r\n    observe: any = 'body',\r\n    reportProgress: boolean = false\r\n  ): Observable<any> {\r\n    let headers = this.defaultHeaders;\r\n\r\n    // to determine the Accept header\r\n    const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\r\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(\r\n      httpHeaderAccepts\r\n    );\r\n    if (httpHeaderAcceptSelected !== undefined) {\r\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n    }\r\n\r\n    // to determine the Content-Type header\r\n    const consumes: string[] = [\r\n      'application/json-patch+json',\r\n      'application/json',\r\n      'text/json',\r\n      'application/_*+json'\r\n    ];\r\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(\r\n      consumes\r\n    );\r\n    if (httpContentTypeSelected !== undefined) {\r\n      headers = headers.set('Content-Type', httpContentTypeSelected);\r\n    }\r\n\r\n    return this.httpClient.post<Pet>(`${this.basePath}/pets`, body, {\r\n      withCredentials: this.configuration.withCredentials,\r\n      headers: headers,\r\n      observe: observe,\r\n      reportProgress: reportProgress\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes a pet\r\n   *\r\n   * @param petId Pet id to delete\r\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n   * @param reportProgress flag to report request and response progress.\r\n   */\r\n  public deletePet(petId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n  public deletePet(\r\n    petId: number,\r\n    observe?: 'response',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpResponse<any>>;\r\n  public deletePet(\r\n    petId: number,\r\n    observe?: 'events',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpEvent<any>>;\r\n  public deletePet(\r\n    petId: number,\r\n    observe: any = 'body',\r\n    reportProgress: boolean = false\r\n  ): Observable<any> {\r\n    if (petId === null || petId === undefined) {\r\n      throw new Error('Required parameter petId was null or undefined when calling deletePet.');\r\n    }\r\n\r\n    let headers = this.defaultHeaders;\r\n\r\n    // to determine the Accept header\r\n    const httpHeaderAccepts: string[] = [];\r\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(\r\n      httpHeaderAccepts\r\n    );\r\n    if (httpHeaderAcceptSelected !== undefined) {\r\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n    }\r\n\r\n    // to determine the Content-Type header\r\n    const consumes: string[] = [];\r\n\r\n    return this.httpClient.delete<any>(\r\n      `${this.basePath}/pets/${encodeURIComponent(String(petId))}`,\r\n      {\r\n        withCredentials: this.configuration.withCredentials,\r\n        headers: headers,\r\n        observe: observe,\r\n        reportProgress: reportProgress\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find pet by ID\r\n   * Returns a pet when ID &amp;lt; 100.  ID &amp;gt; 100 or nonintegers will simulate API error conditions\r\n   * @param petId ID of pet that needs to be fetched\r\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n   * @param reportProgress flag to report request and response progress.\r\n   */\r\n  public getPetById(petId: number, observe?: 'body', reportProgress?: boolean): Observable<Pet>;\r\n  public getPetById(\r\n    petId: number,\r\n    observe?: 'response',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpResponse<Pet>>;\r\n  public getPetById(\r\n    petId: number,\r\n    observe?: 'events',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpEvent<Pet>>;\r\n  public getPetById(\r\n    petId: number,\r\n    observe: any = 'body',\r\n    reportProgress: boolean = false\r\n  ): Observable<any> {\r\n    if (petId === null || petId === undefined) {\r\n      throw new Error('Required parameter petId was null or undefined when calling getPetById.');\r\n    }\r\n\r\n    let headers = this.defaultHeaders;\r\n\r\n    // to determine the Accept header\r\n    const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\r\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(\r\n      httpHeaderAccepts\r\n    );\r\n    if (httpHeaderAcceptSelected !== undefined) {\r\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n    }\r\n\r\n    // to determine the Content-Type header\r\n    const consumes: string[] = [];\r\n\r\n    return this.httpClient.get<Pet>(`${this.basePath}/pets/${encodeURIComponent(String(petId))}`, {\r\n      withCredentials: this.configuration.withCredentials,\r\n      headers: headers,\r\n      observe: observe,\r\n      reportProgress: reportProgress\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all pets of the store\r\n   *\r\n   * @param name Query all pets by name\r\n   * @param status Query all pets by status\r\n   * @param tags Query all pets by tag\r\n   * @param offset offset for pagination\r\n   * @param limit max number of records\r\n   * @param sortBy name of the property to sort by\r\n   * @param sortOrder sort order - asc or desc\r\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n   * @param reportProgress flag to report request and response progress.\r\n   */\r\n  public getPets(\r\n    name?: string,\r\n    status?: Array<string>,\r\n    tags?: Array<string>,\r\n    offset?: number,\r\n    limit?: number,\r\n    sortBy?: string,\r\n    sortOrder?: string,\r\n    observe?: 'body',\r\n    reportProgress?: boolean\r\n  ): Observable<InlineResponse200>;\r\n  public getPets(\r\n    name?: string,\r\n    status?: Array<string>,\r\n    tags?: Array<string>,\r\n    offset?: number,\r\n    limit?: number,\r\n    sortBy?: string,\r\n    sortOrder?: string,\r\n    observe?: 'response',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpResponse<InlineResponse200>>;\r\n  public getPets(\r\n    name?: string,\r\n    status?: Array<string>,\r\n    tags?: Array<string>,\r\n    offset?: number,\r\n    limit?: number,\r\n    sortBy?: string,\r\n    sortOrder?: string,\r\n    observe?: 'events',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpEvent<InlineResponse200>>;\r\n  public getPets(\r\n    name?: string,\r\n    status?: Array<string>,\r\n    tags?: Array<string>,\r\n    offset?: number,\r\n    limit?: number,\r\n    sortBy?: string,\r\n    sortOrder?: string,\r\n    observe: any = 'body',\r\n    reportProgress: boolean = false\r\n  ): Observable<any> {\r\n    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\r\n    if (name !== undefined) {\r\n      queryParameters = queryParameters.set('name', <any>name);\r\n    }\r\n    if (status) {\r\n      status.forEach(element => {\r\n        queryParameters = queryParameters.append('status', <any>element);\r\n      });\r\n    }\r\n    if (tags) {\r\n      tags.forEach(element => {\r\n        queryParameters = queryParameters.append('tags', <any>element);\r\n      });\r\n    }\r\n    if (offset !== undefined) {\r\n      queryParameters = queryParameters.set('offset', <any>offset);\r\n    }\r\n    if (limit !== undefined) {\r\n      queryParameters = queryParameters.set('limit', <any>limit);\r\n    }\r\n    if (sortBy !== undefined) {\r\n      queryParameters = queryParameters.set('sortBy', <any>sortBy);\r\n    }\r\n    if (sortOrder !== undefined) {\r\n      queryParameters = queryParameters.set('sortOrder', <any>sortOrder);\r\n    }\r\n\r\n    let headers = this.defaultHeaders;\r\n\r\n    // to determine the Accept header\r\n    const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\r\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(\r\n      httpHeaderAccepts\r\n    );\r\n    if (httpHeaderAcceptSelected !== undefined) {\r\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n    }\r\n\r\n    // to determine the Content-Type header\r\n    const consumes: string[] = [];\r\n\r\n    return this.httpClient.get<InlineResponse200>(`${this.basePath}/pets`, {\r\n      params: queryParameters,\r\n      withCredentials: this.configuration.withCredentials,\r\n      headers: headers,\r\n      observe: observe,\r\n      reportProgress: reportProgress\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an existing pet\r\n   *\r\n   * @param body Pet object that needs to be added to the store\r\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n   * @param reportProgress flag to report request and response progress.\r\n   */\r\n  public updatePet(body?: Pet, observe?: 'body', reportProgress?: boolean): Observable<Pet>;\r\n  public updatePet(\r\n    body?: Pet,\r\n    observe?: 'response',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpResponse<Pet>>;\r\n  public updatePet(\r\n    body?: Pet,\r\n    observe?: 'events',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpEvent<Pet>>;\r\n  public updatePet(\r\n    body?: Pet,\r\n    observe: any = 'body',\r\n    reportProgress: boolean = false\r\n  ): Observable<any> {\r\n    let headers = this.defaultHeaders;\r\n\r\n    // to determine the Accept header\r\n    const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\r\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(\r\n      httpHeaderAccepts\r\n    );\r\n    if (httpHeaderAcceptSelected !== undefined) {\r\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n    }\r\n\r\n    // to determine the Content-Type header\r\n    const consumes: string[] = [\r\n      'application/json-patch+json',\r\n      'application/json',\r\n      'text/json',\r\n      'application/_*+json'\r\n    ];\r\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(\r\n      consumes\r\n    );\r\n    if (httpContentTypeSelected !== undefined) {\r\n      headers = headers.set('Content-Type', httpContentTypeSelected);\r\n    }\r\n\r\n    return this.httpClient.put<Pet>(`${this.basePath}/pets`, body, {\r\n      withCredentials: this.configuration.withCredentials,\r\n      headers: headers,\r\n      observe: observe,\r\n      reportProgress: reportProgress\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates a pet in the store with form data\r\n   *\r\n   * @param petId ID of pet that needs to be updated\r\n   * @param name Updated name of the pet\r\n   * @param status Updated status of the pet\r\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n   * @param reportProgress flag to report request and response progress.\r\n   */\r\n  public updatePetWithForm(\r\n    petId: number,\r\n    name: string,\r\n    status: string,\r\n    observe?: 'body',\r\n    reportProgress?: boolean\r\n  ): Observable<any>;\r\n  public updatePetWithForm(\r\n    petId: number,\r\n    name: string,\r\n    status: string,\r\n    observe?: 'response',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpResponse<any>>;\r\n  public updatePetWithForm(\r\n    petId: number,\r\n    name: string,\r\n    status: string,\r\n    observe?: 'events',\r\n    reportProgress?: boolean\r\n  ): Observable<HttpEvent<any>>;\r\n  public updatePetWithForm(\r\n    petId: number,\r\n    name: string,\r\n    status: string,\r\n    observe: any = 'body',\r\n    reportProgress: boolean = false\r\n  ): Observable<any> {\r\n    if (petId === null || petId === undefined) {\r\n      throw new Error(\r\n        'Required parameter petId was null or undefined when calling updatePetWithForm.'\r\n      );\r\n    }\r\n    if (name === null || name === undefined) {\r\n      throw new Error(\r\n        'Required parameter name was null or undefined when calling updatePetWithForm.'\r\n      );\r\n    }\r\n    if (status === null || status === undefined) {\r\n      throw new Error(\r\n        'Required parameter status was null or undefined when calling updatePetWithForm.'\r\n      );\r\n    }\r\n\r\n    let headers = this.defaultHeaders;\r\n\r\n    // to determine the Accept header\r\n    const httpHeaderAccepts: string[] = [];\r\n    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(\r\n      httpHeaderAccepts\r\n    );\r\n    if (httpHeaderAcceptSelected !== undefined) {\r\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n    }\r\n\r\n    // to determine the Content-Type header\r\n    const consumes: string[] = ['application/x-www-form-urlencoded'];\r\n\r\n    const canConsumeForm = this.canConsumeForm(consumes);\r\n\r\n    let formParams: { append(param: string, value: any): HttpParams };\r\n    const useForm = false;\r\n    const convertFormParamsToString = false;\r\n    if (useForm) {\r\n      //formParams = new FormData();\r\n    } else {\r\n      formParams = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\r\n    }\r\n\r\n    if (name !== undefined) {\r\n      formParams = formParams.append('name', <any>name) || formParams;\r\n    }\r\n    if (status !== undefined) {\r\n      formParams = formParams.append('status', <any>status) || formParams;\r\n    }\r\n\r\n    return this.httpClient.post<any>(\r\n      `${this.basePath}/pets/${encodeURIComponent(String(petId))}`,\r\n      convertFormParamsToString ? formParams.toString() : formParams,\r\n      {\r\n        withCredentials: this.configuration.withCredentials,\r\n        headers: headers,\r\n        observe: observe,\r\n        reportProgress: reportProgress\r\n      }\r\n    );\r\n  }\r\n}\r\n","export interface ConfigurationParameters {\r\n  apiKeys?: { [key: string]: string };\r\n  username?: string;\r\n  password?: string;\r\n  accessToken?: string | (() => string);\r\n  basePath?: string;\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport class Configuration {\r\n  apiKeys?: { [key: string]: string };\r\n  username?: string;\r\n  password?: string;\r\n  accessToken?: string | (() => string);\r\n  basePath?: string;\r\n  withCredentials?: boolean;\r\n\r\n  constructor(configurationParameters: ConfigurationParameters = {}) {\r\n    this.apiKeys = configurationParameters.apiKeys;\r\n    this.username = configurationParameters.username;\r\n    this.password = configurationParameters.password;\r\n    this.accessToken = configurationParameters.accessToken;\r\n    this.basePath = configurationParameters.basePath;\r\n    this.withCredentials = configurationParameters.withCredentials;\r\n  }\r\n\r\n  /**\r\n   * Select the correct content-type to use for a request.\r\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n   * If no content type is found return the first found type if the contentTypes is not empty\r\n   * @param {string[]} contentTypes - the array of content types that are available for selection\r\n   * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\r\n   */\r\n  public selectHeaderContentType(contentTypes: string[]): string | undefined {\r\n    if (contentTypes.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const type = contentTypes.find(x => this.isJsonMime(x));\r\n    if (type === undefined) {\r\n      return contentTypes[0];\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /**\r\n   * Select the correct accept content-type to use for a request.\r\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n   * If no content type is found return the first found type if the contentTypes is not empty\r\n   * @param {string[]} accepts - the array of content types that are available for selection.\r\n   * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\r\n   */\r\n  public selectHeaderAccept(accepts: string[]): string | undefined {\r\n    if (accepts.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const type = accepts.find(x => this.isJsonMime(x));\r\n    if (type === undefined) {\r\n      return accepts[0];\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /**\r\n   * Check if the given MIME is a JSON MIME.\r\n   * JSON MIME examples:\r\n   *   application/json\r\n   *   application/json; charset=UTF8\r\n   *   APPLICATION/JSON\r\n   *   application/vnd.company+json\r\n   * @param {string} mime - MIME (Multipurpose Internet Mail Extensions)\r\n   * @return {boolean} True if the given MIME is JSON, false otherwise.\r\n   */\r\n  public isJsonMime(mime: string): boolean {\r\n    const jsonMime: RegExp = new RegExp(\r\n      '^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$',\r\n      'i'\r\n    );\r\n    return (\r\n      mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json')\r\n    );\r\n  }\r\n}\r\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\r\n\r\n/**\r\n * CustomHttpUrlEncodingCodec\r\n * Fix plus sign (+) not encoding, so sent as blank space\r\n * See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\r\n */\r\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\r\n  encodeKey(k: string): string {\r\n    k = super.encodeKey(k);\r\n    return k.replace(/\\+/gi, '%2B');\r\n  }\r\n  encodeValue(v: string): string {\r\n    v = super.encodeValue(v);\r\n    return v.replace(/\\+/gi, '%2B');\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken<string>('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n  csv: ',',\r\n  tsv: '   ',\r\n  ssv: ' ',\r\n  pipes: '|'\r\n};\r\n"]}